angular.module('ParcelUI', ['ui.router.state', 'ui.bootstrap', 'ProjectCreation',
    'PortfolioCreation', 'ui.bootstrap.datetimepicker', 'OrderPlacedOnEDR', 'ProjectDashboard',
    'LenderProjectCreation', 'LenderPortfolioCreation', 'ReportTemplates', 'ReportSetup', 'DefaultLanguageLibrary', 'TransmittalLetterSetup', 'TOCSetup', 'ReportAuthoring', 'Support', 'ngSanitize', 'cgBusy', 'ReportOutput', 'FilingCabinet', 'angularUtils.directives.dirPagination', 'ngResource', 'ngCookies', 'focus-if', 'ngStorage'
]);

angular.module('ParcelUI').value("globalValues", {

    pageRefreshed: false,
    isAuthenticated: false,
    isAuthorized: false,
    isLogout: false

});

angular.module('ParcelUI').config([
    '$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {

        $urlRouterProvider.otherwise('/');
        $stateProvider.state('Authenticate', {

            'url': '/',
            'controller': function () {

            },
            'resolve': {
                getAuthToken: ["AuthFactory", "$cookieStore", "BASEURL", function (AuthFactory, $cookieStore, BASEURL) {
                    if (BASEURL.IS_OTHERENV === 1) {
                        return AuthFactory.getAuthToken().then(function (respToken) {
                            if (respToken && respToken.authId) {

                                return respToken;
                            }
                        }, function (error) {
                            //redirect to login page and log error.
                        });
                    } else {
                        return {};
                    }
                }],
                authorize: ["getAuthToken", "AuthFactory", "BASEURL", "$state", function (getAuthToken, AuthFactory, BASEURL, $state) {
                    if (BASEURL.IS_OTHERENV === 1) AuthFactory.authorize();
                    else $state.go('LandingPage');
                }]

            }
        });

        $stateProvider.state('LandingPage', {
            'url': '/LandingPage',
            'templateUrl': 'app/modules/LandingPage/views/CreateProjectMenu.html',
            'controller': 'DashBoardCtrl as dashboard',
            'resolve': {

                getUserDetails: ["AuthFactory", "$cookieStore", "BASEURL", "globalValues", function (AuthFactory, $cookieStore, BASEURL, globalValues) {

                    if (localStorage.getItem("currentSectionId")) {
                        localStorage.removeItem("currentSectionId");
                    }

                    if (localStorage.getItem("toccurrentSectionId")) {
                        localStorage.removeItem("toccurrentSectionId");
                    }

                    if (BASEURL.IS_OTHERENV === 1 && !globalValues.isLogout) {
                        return AuthFactory.getUserDetails().then(function (resp) {
                            return resp;
                        }, function (error) {
                            //redirect to login page, and log error
                        })
                    } else return {};
                }],
                sessionToken: ["getUserDetails", "AuthFactory", "$cookieStore", "globalValues", function (getUserDetails, AuthFactory, $cookieStore, globalValues) {

                    if (getUserDetails && getUserDetails.users && JSON.stringify(getUserDetails) != "{}" && !globalValues.isLogout) {
                        return AuthFactory.createSession().then(function (sessionToken) {
                            //$cookieStore.put("sessionToken", sessionToken);
                            document.cookie = "sessionToken=" + sessionToken;
                        });
                    } else return {};
                }],

                viewedRecentReports: ["sessionToken", "DashboardAPI", "$cookieStore", "globalValues", function (sessionToken, DashboardAPI, $cookieStore, globalValues) {
                    if (sessionToken && !globalValues.isLogout) {
                        return DashboardAPI.recentViewedReports().then(function (activityData) {
                            //filter activityitems not null
                            var filteredActivityData = activityData.activities.filter(function (item) {
                                return item.activityItems.length
                            })
                            if (filteredActivityData.length)
                                activityData['activities'] = filteredActivityData;
                            return activityData;
                        }, function (error) {
                            //returning an object so that page doesnot break;
                            return {
                                isError: true,
                                error: error
                            }
                        });
                    } else {
                        return {};
                    }
                }]
            }
        });
    }
]);




angular.module('ParcelUI').provider('logEnhancer', function (Urls, BASEURL) {

    var staticPath = BASEURL.loggerUrl + Urls.postLogJSON;

    var log = log4javascript.getLogger();
    var consoleAppender = new log4javascript.BrowserConsoleAppender();
    log.addAppender(consoleAppender);



    this.$get = function ($http, $location) {

        var loggingPattern = this.loggingPattern;
        return {
            enhanceAngularLog: function ($log) {
                $log.enabledContexts = [];

                $log.getInstance = function (context) {
                    return {
                        log: enhanceLogging($log.log, context, loggingPattern, "log"),
                        info: enhanceLogging($log.info, context, loggingPattern, "info"),
                        warn: enhanceLogging($log.warn, context, loggingPattern, "warn"),
                        debug: enhanceLogging($log.debug, context, loggingPattern, "debug"),
                        error: enhanceLogging($log.error, context, loggingPattern, "error"),

                        enableLogging: function (enable) {
                            $log.enabledContexts[context] = enable;
                        }
                    };
                };

                function enhanceLogging(loggingFunc, context, loggingPattern, type) {
                    return function () {

                        var contextEnabled = $log.enabledContexts[context];

                        if (contextEnabled === undefined || contextEnabled) {
                            var modifiedArguments = [].slice.call(arguments);

                            var errorObj = {
                                "stack": type == "error" || type == "warn" ? modifiedArguments[0].stack : "",
                                "message": type == "error" || type == "warn" ? modifiedArguments[0].message : modifiedArguments[0]

                            }
                            modifiedArguments[0] = [sprintf(loggingPattern, moment().format("dddd h:mm:ss a"), context)] + modifiedArguments[0];


                            var timestamp = sprintf(loggingPattern, moment().format("dddd h:mm:ss a"));



                            loginServer(timestamp.split('::[')[0], type, context, errorObj, "", "");

                            //loggingFunc.apply(null, modifiedArguments);
                        }
                    };
                }

                function loginServer(timestamp, level, controller, modifiedArguments, uriparams, requestid) {

                    var obj = new Object();
                    obj.timestamp = timestamp;
                    obj.level = level;
                    obj.controller = controller;
                    obj.stacktrace = modifiedArguments.stack;
                    obj.message = modifiedArguments.message;
                    obj.uriparams = $location.path();
                    obj.requestid = '';

                    if (level == "error") {

                        log.info(JSON.stringify(obj));
                    } else if (level == "info") {


                        log.info(JSON.stringify(obj));
                    } else if (level == "warn") {

                        log.info(JSON.stringify(obj));
                    } else if (level == "log") {

                        log.info(JSON.stringify(obj));
                    } else if (level == "debug") {

                        log.info(JSON.stringify(obj));
                    }

                    if (level != "debug") {
                        $http.post(staticPath, obj).then(function (response) {

                            //console.log("logging service response " + response);

                        }, function (error) {

                            //console.log("logging service threw an error; " + error);
                        });
                    }


                }
            }
        };
    };
});


angular.module('ParcelUI').config(['$httpProvider', function ($httpProvider) {

    $httpProvider.defaults.withCredentials = true;
    $httpProvider.interceptors.push('timestampMarker');
    $httpProvider.interceptors.push('ajaxRequestInterceptor');


    //code to fix IE issue starts
    //initialize get if not there
    if (!$httpProvider.defaults.headers.get) {
        $httpProvider.defaults.headers.get = {};
    }

    // Answer edited to include suggestions from comments
    // because previous version of code introduced browser-related errors

    //disable IE ajax request caching
    $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Fri, 01 Apr 2016';
    // extra
    $httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';
    $httpProvider.defaults.headers.get['Pragma'] = 'no-cache';
    //code to fix IE issue ends

}]);

angular.module('ParcelUI').config(['logEnhancerProvider', function (logEnhancerProvider) {
    logEnhancerProvider.loggingPattern = '%s::[%s]> ';
}]);

angular.module('ParcelUI').run(['$log', 'logEnhancer', function ($log, logEnhancer) {

    logEnhancer.enhanceAngularLog($log);
}]);







angular.module('ParcelUI').run(['$rootScope', '$location', 'globalValues', '$localStorage', '$timeout', function ($rootScope, $location, globalValues, $localStorage, $timeout) {

    //var history = [];

    // this logic assumes '#' in angular app url

    $rootScope.baseUrl = extractBaseUrl();

    $rootScope.previousNav = {
        initUrl: extractBaseUrl(),
        state: "",
        url: "",
        lastChanger: true
    };
    $rootScope.history = [];
    $rootScope.getHistoryLastIndex = function () {
        return $rootScope.history.length ? $rootScope.history.length - 1 : 0;
    }

    function extractBaseUrl() {
        var initPath = $location.$$absUrl;
        var base = initPath.substr(0, initPath.indexOf('#'));
        var initUrl = base ? base + "#" : "";
        return initUrl;
    }

    function logtestmsg(msg) {

    }


    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

        if (fromState.abstract)
            $localStorage.$reset();

        if (fromParams.reportGuid) localStorage.setItem('reportGuid', fromParams.reportGuid);
        if (fromParams.projectGuid) localStorage.setItem('projectGuid', fromParams.projectGuid);

        if (toState.name.indexOf('ReportAuthoring') === -1)
            $('#siteId').val("");

        var current = fromState.url;
        var nextUrl = toState.url;

        var index = $rootScope.getHistoryLastIndex();
        var last = $rootScope.history[index];


        var sectionGUID = localStorage.getItem('sign_sectionGUID');
        if (current.toLowerCase() != "/sign") {
            if (sectionGUID) {
                localStorage.removeItem('sign_sectionGUID');
            }
        }

        if (last && nextUrl == last.url && last.changer == "location") {
            $rootScope.history.splice(index, 1);
            $rootScope.history[index - 1].changer = "state";
        } else {
            appendNav(current, "state");
            //$rootScope.splicedSuccessor = false;
        }

        $timeout(function () {
            $rootScope.title = (toState.data && toState.data.pageTitle) ? toState.data.pageTitle : 'PARCEL';
        });
    });

    var appendNav = function (current, changer) {
        var last = {
            url: current,
            changer: changer,
            home: changer == "location"
        };
        $rootScope.history.push(last);
    };


}]);

var menuText = '';;
$(document).ready(function () {

    $("#navbarCollapse .dropdown-menu a").click(function () {
        if (menuText != this.text) {
            $(this).closest(".dropdown-menu").prev().dropdown("toggle");
        } else {
            $('#navbarCollapse,.in,.open').removeClass('in open');
        }
        menuText = this.text;
    });

});;
angular.module('ParcelUI').constant('ParcelUI.Resources', {
    validationExpression: {
        email: /^[\W]*([\w+\-.%]+@[\w\-.]+\.[A-Za-z]{2,4}[\W]*,{1}[\W]*)*([\w+\-.%]+@[\w\-.]+\.[A-Za-z]{2,4})[\W]*$/
    },
    messagesResources: {       
        saved_Success: "Record has been saved successfully.",
               deleted_Success: "Record has been deleted successfully.",
               updated_Success: "Record has been updated successfully."   
    },
    waitingProcessResources: {
        promise: null,
        templateUrl: '',
        message: 'Please Wait...',
        backdrop: true,
        delay: 0,
        minDuration: 0,
        wrapperClass: 'loadercenter'
    },
    waitingHistoryResources: {
        promise: null,
        templateUrl: '',
        message: 'Please Wait While History Is Loading...',
        backdrop: true,
        delay: 0,
        minDuration: 0
    },
    waitingLibraryResources: {
        promise: null,
        templateUrl: '',
        message: 'Please Wait While Languages are Loading...',
        backdrop: true,
        delay: 0,
        minDuration: 0
    },
    waitingCommentsResources: {
        promise: null,
        templateUrl: '',
        message: 'Please Wait While Comments are Loading...',
        backdrop: true,
        delay: 0,
        minDuration: 0
    },
    reportPhasesResources: [{
        key: 'WO',
        value: 'The work order has been created.'
    }, {
        key: 'DE',
        value: 'The report is currently undergoing data entry.'
    }, {
        key: 'SR',
        value: 'The report is currently in senior review.'
    }, {
        key: 'DR',
        value: 'The report is draft.'
    }, {
        key: 'EAI',
        value: 'The environmental analysis is incomplete.'
    }, {
        key: 'FIN',
        value: 'This report is final.'
    }]


});;
angular.module('ParcelUI').constant('BASEURL', {

    //Bidding Module
    BIDDING: '//private-bba0f-edrsharedbiddingapi.apiary-mock.com/',

    //Default Language Library Module
    DLLLIB: '//wwwdev.parcelplatform.com/reportwritingadminservice/libraries/',
    DLLCOMPLIB: '//wwwdev.parcelplatform.com/reportwritingadminservice/companylibraries/',
    DLLLIB_REF: '//wwwdev.parcelplatform.com/librariesservice/',
    DLL_SHARED: '//wwwdev.parcelplatform.com/accountmanagementservice/shared/accountmanagement/',

    //Landing Page Module//using both mock and real
    LANDINGPAGE_REAL: '//wwwdev.parcelplatform.com/parcelservice/dashboard/reports/',
    LANDINGPAGE_MOCK: '//private-d08ae-parceldashboardapi.apiary-mock.com/dashboard/reports/',
    LANDINGPAGE_Activity: '//wwwdev.parcelplatform.com/activityservice/',

    //Lender Project Creation
    LENDERPROJECTCREATION_CONTACTS: '//private-0e50c-parcelcontactapi.apiary-mock.com/contacts/',
    LENDERPROJECTCREATION: '//wwwdev.parcelplatform.com/parcel/rest/',
    LENDERPROJECTCREATION_PROJECTSTARTUP: '//private-d1a21-parcelprojectstartup.apiary-mock.com/projectstartup/',
    LENDERPROJECTCREATION_POSTSINGLESITEPROJECT: '//private-e494f-parcelprojectstartup.apiary-mock.com/projectstartup/',

    //project creation
    PROJECTCREATION_PROJECTSTARTUP: "//wwwdev.parcelplatform.com/parcelservice/projectstartup/",
    PROJECTCREATION_CONTACTS: "//wwwdev.parcelplatform.com/parcelservice/contacts/",
    PROJECTCREATION_PROJECTDOCUMENTS: "//wwwdev.parcelplatform.com:8080/parcelservice/",
    PROJECTCREATION_PROJECTDOCUMENTS_MOCK: "//private-ff4cf-parcelprojectapi.apiary-mock.com/projects/projectGuid/documents",
    PROJECTCREATION_PROJECTDOCUMENTS_UPLOAD: "//wwwdev.parcelplatform.com/corefilemanagementservice/files",
    PROJECTCREATION_PROJECTDOCUMENTS_DELETE: "//wwwdev.parcelplatform.com/corefilemanagementservice/files/",

    //DashBoard
    parcelPOC: '//wwwdev.parcelplatform.com/parcelservice/',
    appendicesPOC: '//wwwdev.parcelplatform.com/appendicesservice/',
    APPENDICES_EDRDRAWINGTOOL: '//wwwdev.parcelplatform.com/edrorderingservice/edrorders/',
    reportWritingPOC: '//wwwdev.parcelplatform.com/reportwritingservice/',
    messagingServicePOC: '//wwwdev.parcelplatform.com/messageservice/',
    parcelPlatform: '//wwwdev.parcelplatform.com/messageservice/',
    reportWritingAPI: '//wwwdev.parcelplatform.com/reportwritingservice/',

    //Report Authoring
    REPORTAUTHORING_APPENDICES: '//private-33015-parcelappendixapi.apiary-mock.com/appendices/',
    REPORTAUTHORING_PHOTOS_MOCK: '//private-33015-parcelappendixapi.apiary-mock.com/photos/',
    REPORTS: '//wwwdev.parcelplatform.com/parcelservice/reports/',
    REPORTAUTHORING: '//wwwdev.parcelplatform.com/reportwritingservice/',
    EDR_ORDER: '//wwwdev.parcelplatform.com/edrorderingservice/edrorders/',
    REPORTAUTHORING_HISTORY: '//wwwdev.parcelplatform.com/reportwritingservice/',
    ACCOUNT_MGMT_API: '//wwwdev.parcelplatform.com/accountmanagementservice/shared/accountmanagement/',
    REPORTAUTHORING_GEODEV: '//wwwdev.parcelplatform.com/geocodeservice/geocode/',
    GET_EDRSTATUSPAGE: '//private-a65d5-sharededrorderapi.apiary-mock.com/',
    GET_COMMENTS: '//wwwdev.parcelplatform.com/reportwritingservice/comments',
    PUT_COMMENTS: '//wwwdev.parcelplatform.com/reportwritingservice/comments',
    GET_COMMENT_TYPES: "//private-89049-parcelreportwritingapijsonversion.apiary-mock.com/commenttypes",
    DELETE_COMMENTS: "//wwwdev.parcelplatform.com/reportwritingservice/deletecomments/",
    REPORTAUTHORING_SEARCHBYSITEID: '//wwwdev.parcelplatform.com/parcelservice/reports/',

    //Report Setup
    REPORTOUTPUT: '//private-8af9d-parcelreportoutputsetupservice.apiary-mock.com/reportoutputsetup/',
    SETUP_DEFAULTS: '//wwwdev.parcelplatform.com/reportwritingservice/reportsetup',
    COVERPAGES_LIST: '//wwwdev.parcelplatform.com/reportwritingservice/deliverable/covers',
    UPDATE_PREPOPULATED: '//wwwdev.parcelplatform.com/reportwritingservice/updatePrepopulatedData',
    REPORTOUTPUTLIST: '//wwwdev.parcelplatform.com/parcelservice/reportOutputSetup',
    //Report Setup ends

    REPORTAUTHORING_APPENDICES_COREFILES: '//wwwdev.parcelplatform.com/corefilemanagementservice',

    //Report Templates 
    REPORTTEMPLATES_COMPTEMPLATES: '//wwwdev.parcelplatform.com/parcelservice/companytemplates/',
    REPORTTEMPLATES_TEMPLATES: '//wwwdev.parcelplatform.com/parcelservice/templates/',
    REPORTTEMPLATES_PARCELSERVICE: '//wwwdev.parcelplatform.com/parcelservice/',

    //Shared Modules
    SHARED_LOGGING: '//wwwdev.parcelplatform.com/loggingservice/',
    SHARED_GEOCODE: "//wwwdev.parcelplatform.com/geocodeservice/geocode/",

    // Core File Management
    GET_FOLDERS: "//wwwdev.parcelplatform.com/parcelservice/projects/",
    GET_FOLDER_FILES: "//wwwdev.parcelplatform.com/corefilemanagementservice/files/",
    PARCEL_API: '//wwwdev.parcelplatform.com/',
    GET_COREFILE: '//wwwdev.parcelplatform.com/corefilemanagementservice/',
    // Core File Management Ends

    FILLINGCABINET_POC: '//wwwdev.parcelplatform.com/corefilemanagementservice/files/',

    //Auth Urls
    POSTAPI_GETAUTHTOKEN: '//identitydev.edrcore.com/openam/json/authenticate',
    POSTAPI_GETAUTHCODE: '//identitydev.edrcore.com/openam/oauth2/authorize',
    GET_SESSIONTOKEN: '//wwwdev.parcelplatform.com/coreaccessmgmtservice/sessiontokens',
    REDIRECT_OAUTHPAGE: '//wwwdev.parcelplatform.com/Oauth.html',
    REDIRECT_LOGOUT: '//identitydev.edrcore.com/openam/UI/Logout',
    ACCOUNT_MGMT: '//wwwdev.edrcore.com/accountmgmt/#/',
    ACCESS_MGMT: '//wwwdev.parcelplatform.com/sharedaccessmgmtservice/',

    // temporary flags to disable OATH
    IS_LOCAL: 1,
    IS_OTHERENV: 0,

    // PHP bridge
    APP_BRIDGE: "//wwwdev.parcelplatform.com",

    //constants
    userGUID: '44cb1235-d7db-4d78-8207-f83d354da8b8',
    reportGUID: '5C60F800-B607-11E5-B950-0E29ED3D2A45',
    accountGUID: '548D3327-1034-4882-0A07-F037ECC19AD9',
    officeGUID: '5d96e57b-5571-4914-88b3-ce07d0c592bf',
    companyGUID: 'cd024ac2-f962-472f-acf1-1dc4238c321e',
    companyGUID_ReportOutputSetupList: 'cd024ac2-f962-472f-acf1-1dc4238c321e',
    companyGUID_GI: 'A18E8C86-7FCD-482C-B4A7-61F825DE0D82',
    companyGUID_BIDDING: 'A0F5E294-B497-4C16-8FA4-526C9413530F',
    companyGUID_ACC_MGMT: '9a200069-d1ab-472d-93ec-f83bbf03952a',
    companyGUID_REPORTCOVER: '602AE305-1B48-49B2-BC86-ABB0FA530C03',
    companyGUID_DLL_TEMPLATELIST: 'A744B47F-529A-40FF-B6C1-33C504A1AAAE',
    companyGUID_reportTemplate: 'A744B47F-529A-40FF-B6C1-33C504A1AAAE',
    reportGUID_Comments: '5C60F800-B607-11E5-B950-0E29ED3D2A45',
    reportGUID_Signatures: 'a560b5d0-8cef-11e5-8226-0e29ed3d2a45',
    default_LibraryGUID: 'e38dc074-832c-11e5-8226-0e29ed3d2a45',
    maxNumberOfFile: 20,
    maxSizeOfFile: 10485760,
    APPENDIX_FILE_UPLOAD_SIZE_LIMIT: '26214400',

    loggerUrl: '//wwwdev.parcelplatform.com/loggingservice/',

    //company list for dll
    companies: [{
        companyGUID: "d7c051ed-fa1c-48d6-8d71-f3947d768e3d",
        companyID: "602",
        name: "172d Airlift Wing MS ANG"
  }, {
        companyGUID: "cd024ac2-f962-472f-acf1-1dc4238c321e", //A744B47F-529A-40FF-B6C1-33C504A1AAAE",
        companyID: "1218",
        name: "Lauenstein & Associates"
  }, {
        companyGUID: "1086ef14-8c71-437f-a6f6-95457a41c225", //cd024ac2-f962-472f-acf1-1dc4238c321e
        companyID: "5030",
        name: "Land Environmental Group"
  }]
});;
angular.module('templates-dist', ['../app/modules/DefaultLanguageLibrary/views/DefaultLanguage.html', '../app/modules/DefaultLanguageLibrary/views/GlobalPageSettings.html', '../app/modules/DefaultLanguageLibrary/views/PCASpecificSettings.html', '../app/modules/LandingPage/views/CreateProjectMenu.html', '../app/modules/LandingPage/views/Dashboard.html', '../app/modules/LandingPage/views/footer.html', '../app/modules/LandingPage/appBridge/dashboard.html', '../app/modules/LenderPortfolioCreation/views/LenderPortfolioCreation.html', '../app/modules/LenderPortfolioCreation/views/lenderportfolio.AddLocation.html', '../app/modules/LenderPortfolioCreation/views/lenderportfolio.Attachments.html', '../app/modules/LenderPortfolioCreation/views/lenderportfolio.ConfirmProjectInfo.html', '../app/modules/LenderPortfolioCreation/views/lenderportfolio.GrantAccess.html', '../app/modules/LenderPortfolioCreation/views/lenderportfolio.ProjectInformation.html', '../app/modules/LenderPortfolioCreation/views/lenderportfolio.ReportInformation.html', '../app/modules/LenderPortfolioCreation/views/lenderportfolio.SelectConsultantWithFee.html', '../app/modules/LenderPortfolioCreation/views/lenderportfolio.SelectEnvConsultant.html', '../app/modules/LenderPortfolioCreation/views/lenderportfolio.UploadSites.html', '../app/modules/LenderPortfolioCreation/views/lenderportfolio.UploadedSiteDetails.html', '../app/modules/LenderPortfolioCreation/views/lenderportfolio.UploadedSitesReportSelection.html', '../app/modules/LenderPortfolioCreation/views/lenderportfolio.successmessage.html', '../app/modules/LenderProjectCreation/views/lender_additionalPropertyInfo.html', '../app/modules/LenderProjectCreation/views/lender_attachments.html', '../app/modules/LenderProjectCreation/views/lender_emailContacts.html', '../app/modules/LenderProjectCreation/views/lender_emailNotification.html', '../app/modules/LenderProjectCreation/views/lender_findContact.html', '../app/modules/LenderProjectCreation/views/lender_form.html', '../app/modules/LenderProjectCreation/views/lender_grantAccessToUsers.html', '../app/modules/LenderProjectCreation/views/lender_helpAccess.html', '../app/modules/LenderProjectCreation/views/lender_helpEmailConsultant.html', '../app/modules/LenderProjectCreation/views/lender_helpFee.html', '../app/modules/LenderProjectCreation/views/lender_helpLatLon.html', '../app/modules/LenderProjectCreation/views/lender_mortgageBanker.html', '../app/modules/LenderProjectCreation/views/lender_projectInfo.html', '../app/modules/LenderProjectCreation/views/lender_projectStartMenu.html', '../app/modules/LenderProjectCreation/views/lender_propertyInfo.html', '../app/modules/LenderProjectCreation/views/lender_reportSelection.html', '../app/modules/LenderProjectCreation/views/lender_siteContactInfo.html', '../app/modules/OrderPlacedOnEDR/views/Order-placed.html', '../app/modules/PortfolioCreation/views/PortfolioCreation.html', '../app/modules/PortfolioCreation/views/portfolio.AddLocation.html', '../app/modules/PortfolioCreation/views/portfolio.Attachments.html', '../app/modules/PortfolioCreation/views/portfolio.ConfirmProjectInfo.html', '../app/modules/PortfolioCreation/views/portfolio.Email.html', '../app/modules/PortfolioCreation/views/portfolio.FeeInformation.html', '../app/modules/PortfolioCreation/views/portfolio.GrantAccess.html', '../app/modules/PortfolioCreation/views/portfolio.ProjectInformation.html', '../app/modules/PortfolioCreation/views/portfolio.PropertyUpload.html', '../app/modules/PortfolioCreation/views/portfolio.ReportInformation.html', '../app/modules/PortfolioCreation/views/portfolio.UploadedSiteDetails.html', '../app/modules/PortfolioCreation/views/portfolio.UploadedSitesReportSelection.html', '../app/modules/PortfolioCreation/views/portfolio.successmessage.html', '../app/modules/ProjectCreation/views/ProjectSearch.html', '../app/modules/ProjectCreation/views/additionalPropertyInfo.html', '../app/modules/ProjectCreation/views/attachments.html', '../app/modules/ProjectCreation/views/clientInfo.html', '../app/modules/ProjectCreation/views/emailContacts.html', '../app/modules/ProjectCreation/views/emailNotification.html', '../app/modules/ProjectCreation/views/findContact.html', '../app/modules/ProjectCreation/views/form.html', '../app/modules/ProjectCreation/views/grantAccessToUsers.html', '../app/modules/ProjectCreation/views/helpAccess.html', '../app/modules/ProjectCreation/views/helpEmailConsultant.html', '../app/modules/ProjectCreation/views/helpFee.html', '../app/modules/ProjectCreation/views/helpLatLon.html', '../app/modules/ProjectCreation/views/projectDocuments.html', '../app/modules/ProjectCreation/views/projectInfo.html', '../app/modules/ProjectCreation/views/propertyInfo.html', '../app/modules/ProjectCreation/views/reportSelection.html', '../app/modules/ProjectCreation/views/siteContactInfo.html', '../app/modules/ProjectDashboard/views/addPropertyReport.html', '../app/modules/ProjectDashboard/views/alert.html', '../app/modules/ProjectDashboard/views/appendixFileList.html', '../app/modules/ProjectDashboard/views/createTeam.html', '../app/modules/ProjectDashboard/views/dashboardTOC.html', '../app/modules/ProjectDashboard/views/deleteReport.html', '../app/modules/ProjectDashboard/views/findContact.html', '../app/modules/ProjectDashboard/views/grantAccess.html', '../app/modules/ProjectDashboard/views/orderStatus.html', '../app/modules/ProjectDashboard/views/portfolio.navigation.html', '../app/modules/ProjectDashboard/views/portfolio.steps.html', '../app/modules/ProjectDashboard/views/portfolioSignatureTool.html', '../app/modules/ProjectDashboard/views/projectDashboard.html', '../app/modules/ProjectDashboard/views/projectMap.html', '../app/modules/ProjectDashboard/views/reportSignOff.html', '../app/modules/ProjectDashboard/views/reportStatus.html', '../app/modules/ProjectDashboard/views/sendEmail.html', '../app/modules/ProjectDashboard/views/siteDetails.html', '../app/modules/ReportAuthoring/views/AddADAChecklist.html', '../app/modules/ReportAuthoring/views/AddCommunicationRecord.html', '../app/modules/ReportAuthoring/views/CKEditor.html', '../app/modules/ReportAuthoring/views/FindReplace.html', '../app/modules/ReportAuthoring/views/TINYEditor.html', '../app/modules/ReportAuthoring/views/VariableReplacer.html', '../app/modules/ReportAuthoring/views/appendices.html', '../app/modules/ReportAuthoring/views/assemble.html', '../app/modules/ReportAuthoring/views/edrPortfolioOrder.html', '../app/modules/ReportAuthoring/views/generalInformationForTOC.html', '../app/modules/ReportAuthoring/views/generalInformationForm.html', '../app/modules/ReportAuthoring/views/history.html', '../app/modules/ReportAuthoring/views/includeExclude.html', '../app/modules/ReportAuthoring/views/llpQuestionnaire.html', '../app/modules/ReportAuthoring/views/manageCoverContacts.html', '../app/modules/ReportAuthoring/views/orderDBReport.html', '../app/modules/ReportAuthoring/views/reportWrite.html', '../app/modules/ReportAuthoring/views/setup.html', '../app/modules/ReportAuthoring/views/sign.html', '../app/modules/ReportAuthoring/views/simplifiedReport.html', '../app/modules/ReportAuthoring/views/tagWithDashes.html', '../app/modules/ReportAuthoring/views/tinyMCE.html', '../app/modules/ReportAuthoring/views/viewMap.html', '../app/modules/ReportOutput/views/reportOutput.html', '../app/modules/ReportOutput/views/reportOutputSetup.html', '../app/modules/ReportSetup/views/GlobalPageSettings.html', '../app/modules/ReportSetup/views/PCASpecificSettings.html', '../app/modules/ReportSetup/views/PageFooterSettings.html', '../app/modules/ReportSetup/views/PageHeaderSettings.html', '../app/modules/ReportSetup/views/ReportSectionSettings.html', '../app/modules/ReportSetup/views/ReportSetup.html', '../app/modules/ReportSetup/views/ReportTableSettings.html', '../app/modules/ReportTemplates/views/defaultTemplateSettings.html', '../app/modules/ReportTemplates/views/editTemplate.html', '../app/modules/ReportTemplates/views/report-output-setup.html', '../app/modules/SharedModules/countriesState.html', '../app/modules/SharedModules/multiselect.html', '../app/modules/SharedModules/resolveErrorHandler.html', '../app/modules/TableOfContentsSetup/views/GlobalPageSettings.html', '../app/modules/TableOfContentsSetup/views/PageFooterSettings.html', '../app/modules/TableOfContentsSetup/views/PageHeaderSettings.html', '../app/modules/TableOfContentsSetup/views/ReportAppendixSettings.html', '../app/modules/TableOfContentsSetup/views/ReportSectionSettings.html', '../app/modules/TableOfContentsSetup/views/TOCSetupForm.html', '../app/modules/TransmittalLetterSetup/views/Closing.html', '../app/modules/TransmittalLetterSetup/views/Footer.html', '../app/modules/TransmittalLetterSetup/views/GlobalPageSettings.html', '../app/modules/TransmittalLetterSetup/views/LetterBody.html', '../app/modules/TransmittalLetterSetup/views/LetterDate.html', '../app/modules/TransmittalLetterSetup/views/PageHeaderSettings.html', '../app/modules/TransmittalLetterSetup/views/Salutation.html', '../app/modules/TransmittalLetterSetup/views/Signature.html', '../app/modules/TransmittalLetterSetup/views/To.html', '../app/modules/TransmittalLetterSetup/views/TransmittalLetterSetup.html']);

angular.module("../app/modules/DefaultLanguageLibrary/views/DefaultLanguage.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/DefaultLanguageLibrary/views/DefaultLanguage.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "    <!-- Browser Metrics Tracking Script -->\n" +
        "    <!--  <script type=\"text/javascript\" src=\"scripts/newrelic.min.js\"></script>  \n" +
        "	Browser Metrics Tracking Script end -->\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <script id=\"dllDeleteAll.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Delete All Default language from every section </h4>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate1\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "\n" +
        "                <strong>You are about to delete all Default Language options from this library. This cannot be undone. Do you want to continue?</strong>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDelete()\">No</a>\n" +
        "                <a class=\"btn btn-danger\" role=\"button\" ng-click=\"removeAllDefaultLanguage()\">Yes</a>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "    <script id=\"dllRename.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Rename this Default Language Library </h4>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate3\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "\n" +
        "                <div class=\"row required\" show-errors>\n" +
        "                    <label for=\"newLibName\" class=\"control-label col-xs-12\">Enter a new name for this language library:</label>\n" +
        "                    <div class=\"form-group col-md-6 col-lg-6 col-xs-12\" show-errors>\n" +
        "                        <input class=\"form-control\" name=\"newLibName\" id=\"newLibName\" type=\"text\" placeholder=\"Enter new library name\" ng-model=\"newNameDll\" required>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <button type=\"reset\" class=\"btn btn-md btn-default\" ng-click=\"CancelDelete()\">Cancel</button>\n" +
        "                <button type=\"submit\" class=\"btn btn-md btn-primary\" ng-click=\"renameDll(myFormAddTemplate3)\">Rename</button>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "\n" +
        "    <script id=\"dllDuplicate.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Duplicate Language Library </h4>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate4\">\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "\n" +
        "                <div class=\"row required\">\n" +
        "                    <label for=\"setupCopyFrom\" class=\"control-label col-xs-12\"> Copy From:</label>\n" +
        "                    <div class=\"form-group col-md-5 col-lg-5 col-xs-12\" show-errors>\n" +
        "                        <select name=\"setupCopyFrom\" id=\"setupCopyFrom\" class=\"form-control\" ng-model=\"langLibrarySelectedFrom\" ng-options=\"dll as dll.name for dll in dll.dllList\" required ng-change=\"duplicateError = ''\">\n" +
        "                            <option value=\"\">Select Language Library</option>\n" +
        "                        </select>\n" +
        "\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"row\">\n" +
        "                    <label for=\"copyTo\" class=\"control-label col-xs-12\"> Copy To:</label>\n" +
        "                    <div class=\"form-group col-md-5 col-lg-5 col-xs-12\">\n" +
        "                        <select name=\"copyTo\" id=\"copyTo\" class=\"form-control\" ng-init=\"copyToAction='Existing'\" ng-model=\"copyToAction\" ng-change=\"duplicateError = ''\">\n" +
        "                            <option value=\"Existing\">Existing</option>\n" +
        "                            <option value=\"New\">New</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"row required\">\n" +
        "                    <label for=\"newName\" class=\"control-label col-xs-12\"> {{copyToAction}}</label>\n" +
        "                    <div class=\"form-group col-md-5 col-lg-5 col-xs-12\" form-input-validation=\"(myFormAddTemplate4.newName && myFormAddTemplate4.newName.$invalid) || (myFormAddTemplate4.setupCopyTo && myFormAddTemplate4.setupCopyTo.$invalid)\">\n" +
        "                        <input class=\"form-control\" type=\"text\" placeholder=\"Enter a name\" ng-show=\"copyToAction == 'New'\" ng-model=\"toCreateReport\" id=\"newName\" name=\"newName\" ng-required=\"copyToAction == 'New'\">\n" +
        "\n" +
        "                        <select name=\"setupCopyTo\" class=\"form-control\" ng-init=\"langLibrarySelectedTo='';\" ng-model=\"langLibrarySelectedTo\" ng-options=\"dll as dll.name for dll in dll.dllList\" ng-required=\"copyToAction == 'Existing'\" ng-change=\"duplicateError = ''\" ng-show=\"copyToAction == 'Existing'\">\n" +
        "                            <option value=\"\">Select Language Library</option>\n" +
        "                        </select>\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "            <div ng-show=\"duplicateError != '' && duplicateError != null && duplicateError != undefined\" class=\"alert alert-danger\" role=\"alert\" ng-class=\"danger\">\n" +
        "                {{duplicateError}}\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer \">\n" +
        "                <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\">Cancel</button>\n" +
        "                <button ng-show=\"copyToAction == 'New'\" type=\"button\" class=\"btn btn-primary\" ng-click=\"duplicate(myFormAddTemplate4)\">Duplicate</button>\n" +
        "                <button ng-show=\"copyToAction == 'Existing'\" type=\"button\" class=\"btn btn-primary\" ng-click=\"duplicate(myFormAddTemplate4)\">Copy</button>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "    <script id=\"dllLink.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Link this default language library to another</h4>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "        <form name=\"linkLibraryForm\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "\n" +
        "                <div class=\"row required\" show-errors>\n" +
        "                    <label for=\"newLibName\" class=\"control-label col-xs-12\"> Linked Library Name:</label>\n" +
        "                    <div class=\"form-group col-md-6 col-lg-6 col-xs-12\" show-errors>\n" +
        "                        <input class=\"form-control\" name=\"newLibName\" id=\"newLibName\" type=\"text\" placeholder=\"Enter new name\" ng-model=\"linkLibraryName\" required>\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <button type=\"reset \" class=\"btn btn-md btn-default \" ng-click=\"CancelDelete()\">Cancel</button>\n" +
        "                <button type=\"submit \" class=\"btn btn-md btn-primary \" ng-click=\"linkLibrary(linkLibraryForm)\">Link Library</button>\n" +
        "\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "\n" +
        "    <script id=\"dllDelete.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Delete Default language </h4>\n" +
        "        </div>\n" +
        "        <form name=\"myFormAddTemplate5\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "                <strong>This will delete the complete Default Language Library. Are you sure you want to continue?</strong>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDelete()\">No</a>\n" +
        "                <a class=\"btn btn-danger\" role=\"button\" ng-click=\"deleteDll()\">Yes</a>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "    <script id=\"dllMove.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Move default language library to different company </h4>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate6\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "                <div class=\"row required\" show-errors>\n" +
        "                    <label for=\"moveCompany\" class=\"control-label col-xs-12\">Select the company name you want to move this Default Language Library to:</label>\n" +
        "                    <div class=\"form-group col-md-6 col-lg-6 col-xs-12\" show-errors>\n" +
        "                        <select name=\"moveCompany\" id=\"moveCompany\" class=\"form-control\"  ng-model=\"moveToCompany\" ng-options=\"company as company.name for company in companies track by company.companyGUID|filter:removeCurrentCompany\" required>\n" +
        "                           <!-- <option value=\"0\" ng-if=\"!moveToCompany\">Select Company</option> ng-init=\"moveToCompany = 0;\"-->\n" +
        "                             <option value=\"\">Select Company</option>\n" +
        "                        </select>\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDelete()\">Cancel</a>\n" +
        "                <a class=\"btn btn-primary\" role=\"button\" ng-click=\"moveToDifferentCompany(myFormAddTemplate6)\">Continue</a>\n" +
        "\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "    <script id=\"dllSetDefaultStructure.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Success Message </h4>\n" +
        "        </div>\n" +
        "        <form name=\"myFormAddTemplate7\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "                <strong>This will set the selected Template as default structure for this Default Language Library. Are you sure you want to continue?</strong>\n" +
        "\n" +
        "                <div ng-show=\"setTemplateComplete\">\n" +
        "                    <p><strong><i class=\"fa fa-exclamation-circle\"></i> Template was set as default structure successfully.</strong></p>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "            <div class=\"modal-footer\" ng-show=\"!setTemplateComplete\">\n" +
        "                <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDelete()\">Cancel</a>\n" +
        "                <a class=\"btn btn-primary\" role=\"button\" ng-click=\"setTemplateAsDefault()\">Continue</a>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "\n" +
        "    <script id=\"dllPDFGeneration.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header \">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Set Default Template</h4>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate7\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "\n" +
        "                <iframe src=\"http://www.pdf995.com/samples/pdf.pdf\" class=\"dllPDFGenerationIframe\"> </iframe>\n" +
        "                <p><strong>{{library}}</strong></p>\n" +
        "                <p><strong>{{pdfURL}}</strong></p>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDelete()\">Close</a>\n" +
        "\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "    <div class=\"container-fluid \" ng-controller=\"DefaultLangLibCtrl as dll\" cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "		<div class=\"panel-body\">	\n" +
        "        <h2 class=\"page-header\">Default Language</h2>\n" +
        "        <form class=\"form-horizontal\">\n" +
        "\n" +
        "            <!-- company selection -->\n" +
        "            <div class=\"form-group \">\n" +
        "                <label for=\"companyID\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                    Company:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                    <select name=\"companyID\" readonly id=\"companyID\" class=\"form-control\" ng-model=\"dll.selectedCompanyId\" ng-options=\"dll as dll.name for dll in dll.dllCompanyList  track by dll.companyGUID\" ng-change=\"dll.companySelectionChanged()\" focus-if>\n" +
        "                       <!-- ng-init=\"dll.companySelectionChanged();\" <option value=\"\" ng-if=\"!dll.selectedCompanyId\">Select Company</option>-->\n" +
        "                       <!-- ng-options=\"dll as dll.name for dll in companies track by dll.companyGUID\"-->\n" +
        "                        <!-- ng-options=\"dll as dll.name for dll in dll.dllCompanyList  track by dll.companyGUID\"-->\n" +
        "                        <!-- <option value=\"602AE305-1B48-49B2-BC86-ABB0FA530C03\"> Land Environmental Group</option>\n" +
        "                        <option value=\"A744B47F-529A-40FF-B6C1-33C504A1AAAE\"> Lauenstein &amp; Associates</option>-->\n" +
        "                        <!--<option value=\"3099\">123 ENG Test</option>\n" +
        "                        <option value=\"7590\">14555 Blanco Road</option>-->\n" +
        "                        <!-- <option value=\"12180000-0000-0000-0000-000000000000\">172d Airlift Wing MS ANG</option>-->\n" +
        "                        <!--<option value=\"5666\">1st Bank Yuma</option>\n" +
        "                        <option value=\"5315\">1st Colonial Community Bank</option>\n" +
        "                        <option value=\"5857\">1st Constitution Bank</option>\n" +
        "                        <option value=\"4991\">1st National Bank of Demo</option>\n" +
        "                        <option value=\"8014\">1st National Bank of South Florida</option>\n" +
        "                        <option value=\"5829\">1st National Community Bank</option>\n" +
        "                        <option value=\"9599\">1st Security Bank of Washington</option>\n" +
        "                        <option value=\"5926\">1st Source Bank</option>\n" +
        "                        <option value=\"7917\">21 Environmental</option>\n" +
        "                        <option value=\"4734\">2G Environmental, LLC</option>\n" +
        "                        <option value=\"6477\">3 Kings Environmental</option>\n" +
        "                        <option value=\"4735\">3 Kings Environmental, Inc.</option>\n" +
        "                        <option value=\"3098\">3065866: Vince Grandinetti</option>\n" +
        "                        <option value=\"3206\">3126775: Monty Bruner</option>\n" +
        "                        <option value=\"4367\">3266541: Benjamin Ford</option>\n" +
        "                        <option value=\"5048\">3434731: Paul Gebhard</option>-->\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <!-- company selection ends -->\n" +
        "\n" +
        "            <!-- dll selection -->\n" +
        "            <div class=\"form-group\" ng-show=\"dll.dllList && dll.dllList.length\">\n" +
        "                <label for=\"setupID\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                    Language Library:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                    <select name=\"setupID\" id=\"setupID\" class=\"form-control\" ng-model=\"dll.languageLibrarySelected\" ng-options=\"dll as dll.name for dll in dll.dllList\" ng-change=\"dll.dllSelectionChanged()\">\n" +
        "                        <option value=\"\" ng-if=\"!dll.languageLibrarySelected\">Select Language Library</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <!-- dll selection ends -->\n" +
        "\n" +
        "            <div ng-show=\"dll.languageLibrarySelected\">\n" +
        "                <!-- template selection -->\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"templateStructure\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                        Template Structure:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                        <select id=\"templateStructure\" class=\"form-control\" ng-model=\"dll.templateSelectedId\" ng-options=\"template.name for template in dll.templateList track by template.templateID\" ng-change=\"dll.templateSelectionChanged()\">\n" +
        "                            <option value=\"\" ng-if=\"!dll.templateSelectedId\">Select a template...</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <!-- template selection ends -->\n" +
        "\n" +
        "                <!-- template section selection -->\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"allSections\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                        Sections:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                        <select id=\"allSections\" class=\"form-control\" ng-model=\"dll.sectionSelected\" ng-options=\"section as (section.sectionNumber + ' ' + section.sectionName) for section in dll.templateSectionList\" ng-change=\"dll.sectionSelectionChanged()\">\n" +
        "                            <option value=\"\">All Sections</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <!-- template section selection ends -->\n" +
        "\n" +
        "                <!-- library tools -->\n" +
        "                <div class=\"form-group \">\n" +
        "                    <label for=\"libraryTools\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                        Library Tools:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                        <!--<a id=\"getPDF\" user-action=\"get DLL pdf\" ng-click=\"dll.openPopup('pdf')\" tooltip=\"Generate a PDF file containing all default language for every section of this library.\" class=\"btn btn-md btn-default\"><i class=\"fa fa-file-pdf-o text-danger fa-lg\"></i></a>-->\n" +
        "                        <a id=\"getPDF\" target=\"_blank\" href=\"{{dll.pdfURL}}\" tooltip=\"Generate a PDF file containing all default language for every section of this library.\" class=\"btn btn-md btn-default\"><i class=\"fa fa-file-pdf-o text-danger fa-lg\"></i></a>\n" +
        "                        <a ng-click=\"dll.openPopup('deleteAll')\" tooltip=\"Delete all default language from every section of this library.\" class=\"btn btn-md btn-default\"><i class=\"fa fa-trash-o text-danger fa-lg\"></i></a>\n" +
        "  \n" +
        "                        <a ng-click=\"dll.openPopup('duplicate')\" tooltip=\"Copy Language into this library from another library\" class=\"btn btn-md btn-default\"><i class=\"fa fa-file text-success fa-lg\"></i></a>\n" +
        "                        <a ng-click=\"dll.openPopup('rename')\" tooltip=\" Rename this Default Language Library\" class=\"btn btn-md btn-default\"><i class=\"fa fa-terminal text-info fa-lg\"></i></a>\n" +
        "\n" +
        "                      \n" +
        "                        <a ng-show=\"!dll.languageLibrarySelected.linkedLibraryID\" ng-click=\"dll.openPopup('link')\" tooltip=\"create a new library that is linked to this library\" class=\"btn btn-md btn-default\"><i class=\"fa fa-link\"></i></a>\n" +
        "                        <a ng-click=\"dll.openPopup('delete')\" tooltip=\"Delete default language library\" class=\"btn btn-md btn-default\"><i class=\"fa fa-times text-danger fa-lg\"></i></a>\n" +
        "                        <a ng-click=\"dll.openPopup('move')\" disabled={{dll.disableFlag}} tooltip={{dll.moveText}} class=\"btn btn-md btn-default\"><i class=\"fa fa-arrows text-info fa-lg\"></i></a>\n" +
        "                        <a ng-click=\"dll.openPopup('setDefaultStructure')\" tooltip=\"Set selected template as default structure for selected library.\" class=\"btn btn-md btn-default\"><i class=\"fa fa-check text-success fa-lg\"></i></a>\n" +
        "                        <a ng-show=\"dll.isLibraryLinked\" ng-click=\"dll.unlinkCompleteLibrary(dll.languageLibrarySelected.libraryGUID,dll.languageLibrarySelected.name)\" tooltip=\"Unlink Library\" class=\"btn btn-md btn-default\"><i class=\"fa fa-unlink text-success fa-lg\"></i></a>\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <!-- library tools ends -->\n" +
        "\n" +
        "                <!-- color legend -->\n" +
        "                <div class=\"form-group \">\n" +
        "                    <label for=\"colorLegend\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                        Color Legend:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-10 col-md-10 color-legend\">\n" +
        "                        <span><i class=\"fa fa-stop pink-box\"></i> &nbsp; Hardcoded Language </span> <span>&nbsp;|&nbsp;</span>\n" +
        "                        <span><i class=\"fa fa-stop light-Pink-box\"></i> &nbsp;Included in Project Setup </span><span>&nbsp;|&nbsp;</span>\n" +
        "                        <span><i class=\"fa fa-stop light-Yellow-box\"></i>&nbsp; Instructions </span><span>&nbsp;|&nbsp;</span>\n" +
        "                        <span><i class=\"fa fa-stop light-Blue-box\"></i>&nbsp;Sample Language </span><span>&nbsp;|&nbsp;</span>\n" +
        "                        <span><i class=\"fa fa-stop Option-white-box\"></i>&nbsp; Option to Insert </span>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <!-- color legend ends -->\n" +
        "            </div>\n" +
        "            <div class=\"alert\" ng-class=\"dll.msgType\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"dll.serviceResponseAlert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"dll.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                    <span aria-hidden=\"true\">&times;</span>\n" +
        "                </button>\n" +
        "                {{dll.serviceResponseText}}\n" +
        "            </div>\n" +
        "        </form>\n" +
        "        <hr/>\n" +
        "\n" +
        "        <div ng-repeat=\"sectionLanguage in dll.languageBySectionList\" ng-show=\" dll.languageLibrarySelected && (!dll.sectionSelected || dll.sectionSelected.sectionID == sectionLanguage.sectionID || dll.sectionSelected.sectionID == sectionLanguage.rootSectionID)\">\n" +
        "            <!--<div ng-init=\"dll.currentSectionFlag = sectionLanguage.hasNarrative;shouldShow();\" class=\"well\">-->\n" +
        "            <div ng-init=\"shouldShow(sectionLanguage.hasNarrative,sectionLanguage.sectionID);\" class=\"well\">\n" +
        "                <h4>{{sectionLanguage.number}} {{sectionLanguage.name}}</h4>\n" +
        "                <div class=\"container-fluid\">\n" +
        "                    <div class=\"row\">\n" +
        "                        <form class=\"form-inline\">\n" +
        "                            <a ng-click=\"dll.addOptionsToSection(sectionLanguage.addOptions, sectionLanguage,sectionLanguage.hasNarrative,sectionLanguage.sectionID)\" class=\"btn btn-default\" role=\"button\">Add</a>\n" +
        "                            <div class=\"input-group col-md-1 col-lg-1 col-xs-12\">\n" +
        "                                <!--  <input class=\"form-control\" type=\"text\" ng-init=\"sectionLanguage.addOptions = 1;\" ng-model=\"sectionLanguage.addOptions\">-->\n" +
        "                                <select class=\"form-control\" ng-init=\"sectionLanguage.addOptions = 1;\" ng-model=\"sectionLanguage.addOptions\">\n" +
        "                                    <option value=\"1\">1</option>\n" +
        "                                    <option value=\"2\">2</option>\n" +
        "                                    <option value=\"3\">3</option>\n" +
        "                                    <option value=\"4\">4</option>\n" +
        "                                    <option value=\"5\">5</option>\n" +
        "                                    <option value=\"6\">6</option>\n" +
        "                                    <option value=\"7\">7</option>\n" +
        "                                    <option value=\"8\">8</option>\n" +
        "                                    <option value=\"9\">9</option>\n" +
        "                                    <option value=\"10\">10</option>\n" +
        "                                </select>\n" +
        "                            </div>\n" +
        "                            <span> options to this section</span>\n" +
        "                            <span ng-if=\"sectionLanguage.languageList && sectionLanguage.languageList.length\"> | \n" +
        "                            <a class=\"btn btn-default\" tooltip=\"Delete All Language in Section\" ng-click=\"dll.deleteOption($index, dll.languageLibrarySelected.libraryGUID,sectionLanguage.sectionGUID,sectionLanguage.languageList, true)\"><span class=\"glyphicon glyphicon-remove-circle\"> </span></a>\n" +
        "                            </span>\n" +
        "                            \n" +
        "                             <span ng-if=\"sectionLanguage.languageList && sectionLanguage.languageList.length && !sectionLanguage.languageList[0].isLinked\">\n" +
        "                            <a class=\"btn btn-default\" tooltip=\"Edit Section\" ng-click=\"dll.editOption($index, dll.languageLibrarySelected.libraryGUID,sectionLanguage.sectionGUID,sectionLanguage.languageList, true)\"><span class=\"glyphicon glyphicon-pencil\"> </span></a>\n" +
        "                            </span>\n" +
        "                        </form>\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div>\n" +
        "                <!-- ui-sortable ng-model=\"sectionLanguage.languageList\">-->\n" +
        "\n" +
        "                <div ng-repeat=\"language in sectionLanguage.languageList | orderBy: 'orderIndex'\" ng-class=\"{'instructions-language': language.category == 'Instructions', 'sample-language': language.category == 'Sample'&& !language.isAddedOnProjectStartup, 'language-included-in-project-setup': (language.category == 'Options' || language.category == 'Sample') && language.isAddedOnProjectStartup, 'language-option-to-insert': language.category == 'Options' && !language.isAddedOnProjectStartup}\" class=\"panel panel-default\">\n" +
        "                    <div class=\"panel-body\">\n" +
        " \n" +
        "                        <form name=\"editLanguageForm\" class=\"form-horizontal\">\n" +
        "                            <div class=\"container-fluid\">\n" +
        "                                <div class=\"form-group\">\n" +
        "                                    <!--!dll.isLibraryLinked for no linked lib in ng-show-->\n" +
        "                                    <div class=\"col-sm-offset-2 col-sm-10\" ng-hide=\"language.isLinked\">\n" +
        "                                        <a class=\"btn btn-default\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Delete Option\" ng-click=\"dll.deleteOption($index, dll.languageLibrarySelected.libraryGUID,language.languageGUID,sectionLanguage.languageList)\"><span class=\"glyphicon glyphicon-remove-circle\"> </span></a>\n" +
        "                                       <span ng-if=\"sectionLanguage.languageList.length > 1\"> <a class=\"btn btn-default\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Move to Top\" ng-click=\"dll.moveTopOption($index, sectionLanguage.languageList,sectionLanguage.sectionGUID)\"><span class=\"glyphicon glyphicon-step-backward fa-rotate-90\"></span></a>\n" +
        "                                        <a class=\"btn btn-default\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Move Up\" ng-click=\"dll.moveUpOption($index, sectionLanguage.languageList,sectionLanguage.sectionGUID)\"><span class=\"glyphicon glyphicon-chevron-up\"> </span></a>\n" +
        "                                        <a class=\"btn btn-default\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Move Down\" ng-click=\"dll.moveDownOption($index, sectionLanguage.languageList,sectionLanguage.sectionGUID)\"><span class=\"glyphicon glyphicon-chevron-down\"> </span></a>\n" +
        "                                        <a class=\"btn btn-default\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Move to Bottom\" ng-click=\"dll.moveEndOption($index, sectionLanguage.languageList,sectionLanguage.sectionGUID)\"><span class=\"glyphicon glyphicon-step-backward fa-rotate-270\"></span></a></span>\n" +
        "                                        <a class=\"btn btn-default\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Edit\" ng-click=\"dll.editLanguage(language)\" ng-show=\"!language.editmode\"><span class=\"glyphicon glyphicon-pencil\"> </span></a>\n" +
        "                                    </div>\n" +
        "                                    <div class=\"col-sm-offset-2 col-sm-10\" ng-show=\"language.isLinked\">\n" +
        "                                        <a class=\"btn btn-default\" ng-click=\"dll.unlinkLibrary(dll.languageLibrarySelected.libraryGUID,sectionLanguage.sectionGUID,language.languageGUID,dll.languageLibrarySelected.name)\" data-html=\"true\" data-toggle=\"tooltip\" data-placment=\"top\" title=\"This language is linked <br> Click to Unlink Library\"><span class=\"fa fa-link\"> </span></a>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "\n" +
        "                                <div class=\"form-group required\">\n" +
        "                                    <label class=\"control-label col-lg-2 col-md-2 col-sm-2 col-xs-12\">Category:</label>\n" +
        "                                    <div class=\"col-md-4 col-sm-4 col-xs-12\" show-errors>\n" +
        "                                        <p class=\"form-control-static\" ng-show=\"!language.editmode\">\n" +
        "                                            {{language.category}}\n" +
        "                                            <span ng-show=\"language.category == 'Instructions' && language.showInPage\">(These instructions are shown under the section name within the web page)</span>\n" +
        "                                        </p>\n" +
        "                                        <select name=\"category\" required ng-show=\"language.editmode\" class=\"form-control\" ng-options=\"categoryOp.value as categoryOp.text for categoryOp in shouldShow(sectionLanguage.hasNarrative,sectionLanguage.sectionID)\" ng-model=\"language.category\">\n" +
        "\n" +
        "                                        </select>\n" +
        "\n" +
        "                                    </div>\n" +
        "\n" +
        "\n" +
        "                                </div>\n" +
        "                                <div class=\"form-group required\">\n" +
        "                                    <label class=\"control-label col-lg-2 col-md-2 col-sm-2 col-xs-12\">Title/Keyword:</label>\n" +
        "                                    <div class=\"col-md-4 col-sm-4 col-xs-12\" field-validation=\"Title/Keyword\">\n" +
        "                                        <p class=\"form-control-static\" ng-show=\"!language.editmode\">{{language.keyword}}</p>\n" +
        "\n" +
        "                                        <input name=\"keyword\" id=\"keyword\" required ng-show=\"language.editmode\" class=\"form-control\" type=\"text\" ng-model=\"language.keyword\">\n" +
        "                                    </div>\n" +
        "\n" +
        "                                </div>\n" +
        "                                <div ng-show=\"language.editmode\" class=\"form-group \">\n" +
        "                                    <label class=\"control-label col-lg-2 col-md-2 col-sm-2 col-xs-12\" ng-show=\"language.editmode\">\n" +
        "                                        Included:\n" +
        "                                    </label>\n" +
        "                                    <div class=\"col-lg-10 col-md-10 col-sm-10 col-xs-12\">\n" +
        "                                        <div ng-show=\"language.editmode && language.category != 'Instructions'\" class=\"checkbox\">\n" +
        "                                            <label>\n" +
        "                                                <input type=\"checkbox\" ng-if=\"language.category != 'Instructions'\" ng-model=\"language.isAddedOnProjectStartup\" ng-show=\"language.editmode\">\n" +
        "                                                <span ng-show=\"language.editmode && language.category != 'Instructions'\">Include automatically when report is created.</span></label>\n" +
        "                                        </div>\n" +
        "                                        <div ng-show=\"language.editmode && language.category == 'Instructions'\" class=\"checkbox\">\n" +
        "                                            <label>\n" +
        "                                                <input type=\"checkbox\" ng-if=\"language.category == 'Instructions'\" ng-model=\"language.showInPage\" ng-show=\"language.editmode\">\n" +
        "                                                <span ng-show=\"language.editmode && language.category == 'Instructions'\">Show instructions under the section name within the web page.</span></label>\n" +
        "                                        </div>\n" +
        "\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                                <div class=\"form-group required\">\n" +
        "                                    <label class=\"control-label col-lg-2 col-md-2 col-sm-2 col-xs-12\">Language:</label>\n" +
        "                                    <div class=\"col-lg-8 col-md-7 col-xs-12\" show-errors>\n" +
        "                                        <p class=\"form-control-static\" ng-show=\"!language.editmode\" ng-bind-html=\"dll.renderHtml(language.text)\"></p>\n" +
        "                                        <div class='boxCK' ng-show=\"language.editmode\">\n" +
        "                                            <span class='editCK'>edit</span>\n" +
        "                                            <div name=\"language\" required class=\"textCK form-control\" type=\"text\" ng-model=\"language.text\" data-ck-editor remove-ck-plugin=\"saveReportWritingCkData\">\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "\n" +
        "                                </div>\n" +
        "                                <div class=\"row\">\n" +
        "                                    <div class=\"col-sm-offset-2 col-sm-10\">\n" +
        "                                        <button ng-show=\"language.editmode\" type=\"reset \" class=\"btn btn-md btn-default \" ng-click=\"dll.cancelEditLanguage(language)\"> Cancel</button>\n" +
        "                                        <button ng-show=\"language.editmode && dll.editAllMode\" type=\"submit \" class=\"btn btn-md btn-success \" ng-click=\"dll.saveLanguage($index,dll.languageLibrarySelected.libraryGUID,language,editLanguageForm)\"> Save</button>\n" +
        "\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                                \n" +
        "                                 <div ng-if = \"($index+1) == sectionLanguage.languageList.length && !dll.editAllMode\" class=\"row\">\n" +
        "                                    <div class=\"text-center col-sm-12\">\n" +
        "                                        <button ng-show=\"language.editmode\" type=\"reset \" class=\"btn btn-md btn-default \" ng-click=\"dll.cancelAllEditLanguage(sectionLanguage.languageList)\"> Cancel All</button>\n" +
        "                                        <button ng-show=\"language.editmode\" type=\"submit \" class=\"btn btn-md btn-success \" ng-click=\"dll.saveAllLanguage($index,dll.languageLibrarySelected.libraryGUID,sectionLanguage.languageList,editLanguageForm)\"> Save All</button>\n" +
        "\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                               \n" +
        "                            </div>\n" +
        "                        </form>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "<!-- <div ng-show=\"dll.editAllMode\" class=\"row\">\n" +
        "                                    <div class=\"text-center col-sm-12\">\n" +
        "                                        <button type=\"reset \" class=\"btn btn-md btn-default \" ng-click=\"dll.cancelAllEditLanguage(sectionLanguage.languageList)\"> Cancel All</button>\n" +
        "                                        <button type=\"submit \" class=\"btn btn-md btn-success \" ng-click=\"dll.saveAllLanguage($index,dll.languageLibrarySelected.libraryGUID,sectionLanguage.languageList)\"> Save All</button>\n" +
        "\n" +
        "                                    </div>\n" +
        "                                </div>-->\n" +
        "            </div>\n" +
        "<hr/>\n" +
        "        </div>\n" +
        "            \n" +
        "        <div ng-hide=\"!dll.languageLibrarySelected || (dll.languageList && dll.languageList.length)\" class=\"alert alert-danger\" role=\"alert\" ng-class=\"danger\">\n" +
        "            No default language has been added to this Library.\n" +
        "        </div>\n" +
        "        <div class=\"alert alert-danger\" role=\"alert\" ng-class=\"danger\" ng-show=\"dll.addLangLibError\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"dll.addLangLibError = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{dll.languageError}}\n" +
        "        </div>\n" +
        "		</div>	\n" +
        "		</div>\n" +
        "    </div>\n" +
        "\n" +
        "    <script id=\"addOptionsToSection.html\" type=\"text/ng-template\">\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"cancelAddOptionToSection()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Add Options to Section: {{selectedSection_addOptions.name}} </h4>\n" +
        "        </div>\n" +
        "        <form name=\"addSectionForm\" class=\"form-horizontal \">\n" +
        "            <div class=\"modal-body \">\n" +
        "                <div class=\"panel panel-default\" ng-repeat=\"optionNo in getNumber(noOfOptions) track by $index\">\n" +
        "                    <div class=\"panel-body\">\n" +
        "                        <ng-form name=\"urlForm\">\n" +
        "                            <div class=\"form-group required\">\n" +
        "                                <label for=\"dllCategory\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                                    Category:\n" +
        "                                </label>\n" +
        "                                <div class=\"col-xs-12 col-sm-6 col-md-6\" show-errors>\n" +
        "                                    <select id=\"dllCategory\" name=\"category\" class=\"form-control\" ng-init=\"(toAddOptions[$index]= toAddOptions[$index] || {}).category = categoryOptions[0].value;\" ng-options=\"categoryOp.value as categoryOp.text for categoryOp in shouldShow(narative,number)\" ng-model=\"toAddOptions[$index].category\" required>\n" +
        "                                        <options value=\"instructions\">Instructions</options>\n" +
        "                                    </select>\n" +
        "                                </div>\n" +
        "\n" +
        "                            </div>\n" +
        "                        </ng-form>\n" +
        "                        <ng-form name=\"urlForm\">\n" +
        "                            <div class=\"form-group required \">\n" +
        "                                <label for=\"titleKeyword\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                                    Title/Keyword:\n" +
        "                                </label>\n" +
        "                                <div class=\"col-xs-12 col-sm-6 col-md-6\" field-validation=\"Title/Keyword\">\n" +
        "                                    <input id=\"titleKeyword\" type=\"text\" name=\"title\" required class=\"form-control\" ng-model=\"toAddOptions[$index].keyword\">\n" +
        "                                </div>\n" +
        "\n" +
        "                                <span>(Comma Delimited)</span>\n" +
        "\n" +
        "                            </div>\n" +
        "                        </ng-form>\n" +
        "                        <div class=\"form-group \">\n" +
        "                            <label for=\"Included\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                                Included:\n" +
        "                            </label>\n" +
        "                            <div class=\"col-xs-12 col-sm-10 col-md-10\">\n" +
        "                                <div class=\"checkbox\">\n" +
        "                                    <label>\n" +
        "                                        <input id=\"Included\" type=\"checkbox\" ng-model=\"toAddOptions[$index].included\">\n" +
        "                                        <span ng-show=\"toAddOptions[$index].category == 'Instructions'\">Show instructions under the section name within the web page.</span>\n" +
        "                                        <span ng-show=\"toAddOptions[$index].category != 'Instructions'\">Include automatically when report is created.</span></label>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                        <ng-form name=\"urlForm\">\n" +
        "                            <div class=\"form-group required \">\n" +
        "                                <label for=\"Language\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                                    Language:\n" +
        "                                </label>\n" +
        "\n" +
        "                                <div class=\"col-lg-8 col-md-7 col-xs-12\" show-errors>\n" +
        "\n" +
        "                                    <span class='editCK'>edit</span>\n" +
        "                                    <div name=\"language\" required class=\"textCK form-control\" type=\"text\" ng-model=\"toAddOptions[$index].text\" data-ck-editor remove-ck-plugin=\"saveReportWritingCkData\">\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "\n" +
        "                            </div>\n" +
        "                        </ng-form>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"alert alert-danger\" role=\"alert\" ng-class=\"danger\" ng-show=\"addLangLibError == true\">\n" +
        "                    {{languageError}}\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <button type=\"reset \" class=\"btn btn-md btn-default \" ng-click=\"cancelAddOptionToSection()\"> Cancel</button>\n" +
        "                <button type=\"submit \" class=\"btn btn-md btn-primary \" ng-click=\"addNewOptionsToSection(addSectionForm)\"> Save</button>\n" +
        "\n" +
        "            </div>\n" +
        "        </form>\n" +
        "    </script>\n" +
        "    <script id=\"dllLanguage.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 ng-if=\"!isDeleteBySection\" class=\"modal-title\">Delete language </h4>\n" +
        "            <h4 ng-if=\"isDeleteBySection\" class=\"modal-title\">Delete Section languages </h4>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "\n" +
        "                <strong ng-if=\"!isDeleteBySection\">This will delete the Language. Are you sure you want to continue?</strong>\n" +
        "                <strong ng-if=\"isDeleteBySection\">This will delete all the Languages in the section. Are you sure you want to continue?</strong>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDeleteLanguage()\">Cancel</a>\n" +
        "                <a class=\"btn btn-primary\" role=\"button\" ng-click=\"deleteLanguage()\">Continue</a>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "    </script>\n" +
        "    <script id=\"dllLibraryUnlinkSection.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Unlink Library Section</h4>\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "\n" +
        "                <strong>This will unlink current section. Are you sure you want to continue?</strong>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDelete()\">Cancel</a>\n" +
        "                <a class=\"btn btn-primary\" role=\"button\" ng-click=\"unlinkLibrary()\">Unlink section</a>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "    </script>\n" +
        "\n" +
        "    <script id=\"dllLibraryUnlink.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Unlink Complete Library</h4>\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "\n" +
        "                <strong>This will unlink library completely. Are you sure you want to continue?</strong>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDelete()\">Cancel</a>\n" +
        "                <a class=\"btn btn-primary\" role=\"button\" ng-click=\"unlinkLibrary()\">Unlink library</a>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "    </script>\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/DefaultLanguageLibrary/views/GlobalPageSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/DefaultLanguageLibrary/views/GlobalPageSettings.html",
        "<div class=\"col-md-12 col-sm-12 col-xs-12 \" >\n" +
        "    <h4  >\n" +
        "                            Global Page Settings\n" +
        "              \n" +
        "                    </h4>\n" +
        " \n" +
        "    \n" +
        "\n" +
        "        <div class=\"form-group col-md-3 col-lg-3 col-sm-3 \">\n" +
        "            <label for=\"exampleInputEmail1\">Left Margin (in inches):</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option>0.5\"</option>\n" +
        "                <option>0.75\"</option>\n" +
        "                <option>1\"</option>\n" +
        "                <option>1.25\"</option>\n" +
        "                <option>0.5\"</option>\n" +
        "                <option>1.75\"</option>\n" +
        "                <option>2\"</option>\n" +
        "\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-3 col-lg-3 col-sm-3\">\n" +
        "            <label for=\"exampleInputPassword1\">Right Margin (in inches):</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option>0.5\"</option>\n" +
        "                <option>0.75\"</option>\n" +
        "                <option>1\"</option>\n" +
        "                <option>1.25\"</option>\n" +
        "                <option>0.5\"</option>\n" +
        "                <option>1.75\"</option>\n" +
        "                <option>2\"</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-3 col-lg-3 col-sm-3\">\n" +
        "            <label for=\"exampleInputPassword1\">Page Break b/w sections:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option>Yes</option>\n" +
        "                <option>No</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-3 col-lg-3 col-sm-3\">\n" +
        "            <label for=\"exampleInputPassword1\">Draft Location:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option value=\"NONE\">None</option>\n" +
        "                <option value=\"TOPLEFT\">Top Left</option>\n" +
        "                <option value=\"TOPCENTER\">Top Center</option>\n" +
        "                <option value=\"TOPRIGHT\" selected=\"\">Top Right</option>\n" +
        "                <option value=\"BOTTOMLEFT\">Bottom Left</option>\n" +
        "                <option value=\"BOTTOMCENTER\">Bottom Center</option>\n" +
        "                <option value=\"BOTTOMRIGHT\">Bottom Right</option>\n" +
        "                <option value=\"MIDDLEOFPAGE\">Middle of Page</option>\n" +
        "                <option value=\"CUSTOM\">Custom-Defined</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-3 col-lg-3 col-sm-3\">\n" +
        "            <label for=\"exampleInputPassword1\">Draft Type:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option value=\"1\">Grey Block</option>\n" +
        "                <option value=\"2\" selected=\"\">Red Text</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-3 col-lg-3 col-sm-3\">\n" +
        "            <label for=\"exampleInputPassword1\"> Repeat Parent Headers:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option>Yes</option>\n" +
        "                <option>No</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-3 col-lg-3 col-sm-3\">\n" +
        "            <label for=\"exampleInputPassword1\"> Repeat Headers:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option>Yes</option>\n" +
        "                <option>No</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-3 col-lg-3 col-sm-3\">\n" +
        "            <label for=\"exampleInputPassword1\"> Section Number Tab Space:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option>Yes</option>\n" +
        "                <option>No</option>\n" +
        "\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-3 col-lg-3 col-sm-3\">\n" +
        "            <label for=\"exampleInputPassword1\">Section Number Tab Space Distance:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option>Default</option>\n" +
        "                <option>2</option>\n" +
        "                <option>3</option>\n" +
        "                <option>4</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-3 col-lg-3 col-sm-3\">\n" +
        "            <label for=\"exampleInputPassword1\"> Indent Section Header:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option>Yes</option>\n" +
        "                <option>No</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-3 col-lg-3 col-sm-3\">\n" +
        "            <label for=\"exampleInputPassword1\"> Photos Per Page:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option>2</option>\n" +
        "                <option>4</option>\n" +
        "                <option>6</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-3 col-lg-3 col-sm-3\">\n" +
        "            <label for=\"exampleInputPassword1\"> Photo Caption Align:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option value=\"L\">Left</option>\n" +
        "                <option value=\"C\" selected=\"\">Center</option>\n" +
        "                <option value=\"R\">Right</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-3 col-lg-3 col-sm-3\">\n" +
        "            <label for=\"exampleInputPassword1\"> Autonumber Captions:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option>Yes</option>\n" +
        "                <option>No</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        " \n" +
        "</div>");
}]);

angular.module("../app/modules/DefaultLanguageLibrary/views/PCASpecificSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/DefaultLanguageLibrary/views/PCASpecificSettings.html",
        "<div class=\"col-md-12 col-sm-12 col-xs-12 \">\n" +
        "    <h4>\n" +
        "        PCA Specific Settings\n" +
        "    </h4> \n" +
        " \n" +
        "        <div class=\"form-group col-md-4 col-lg-4 col-sm-4 \" title=\"Include the recommendations in the printed PDF report\">\n" +
        "            <label for=\"exampleInputEmail1\">Print PCA Recommendations:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option value=\"0\">No</option>\n" +
        "                <option value=\"1\">Yes</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-4 col-lg-4 col-sm-4\" title=\"Print the Description, Assessment & Recommendation below the header, rather than to the right of it\">\n" +
        "            <label for=\"exampleInputPassword1\">D/A/R Below Heading:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option value=\"0\">No</option>\n" +
        "                <option value=\"1\">Yes</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-4 col-lg-4 col-sm-4\" title=\"Print a horizontal line after system description sections\">\n" +
        "            <label for=\"exampleInputPassword1\">Print Separator Line:</label>\n" +
        "            <select class=\"form-control\">\n" +
        "                <option>Yes</option>\n" +
        "                <option>No</option>\n" +
        "\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-4 col-lg-4 col-sm-4\" title=\"The color of the cost table header\">\n" +
        "            <label for=\"exampleInputPassword1\">Cost Table Header Color:</label>\n" +
        "            <input colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"your_model\">\n" +
        "        </div>\n" +
        "        <div class=\"form-group col-md-4 col-lg-4 col-sm-4\" title=\"The color of the cost table header Text\">\n" +
        "            <label for=\"exampleInputPassword1\">Cost Table Header Text Color:</label>\n" +
        "            <input colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"your_model2\">\n" +
        "        </div>\n" +
        "    </div>\n" +
        " \n" +
        "\n" +
        " ");
}]);

angular.module("../app/modules/LandingPage/views/CreateProjectMenu.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LandingPage/views/CreateProjectMenu.html",
        "<div  class=\"container-fluid\">\n" +
        "<div class=\"row\">\n" +
        "   \n" +
        "    	 <div id=\"wraper\">\n" +
        "        	<div class=\"top-margin report-contain col-md-9\">\n" +
        "				 <span id=\"menu-toggle\" menu-toggle class=\"hidden-sm hidden-xs  fa fa-step-forward btn btn-md btn-primary fa-lg\"></span>\n" +
        "                    <div class=\"panel panel-default\"> \n" +
        "                    	<div class=\"report-panel\" ng-class=\"dashboard.getClass('panel')\" data-intro=\"<h4 class='text-white'>RECENTLY VIEWED REPORTS</h4> Any reports you view on PARCEL will be listed here for quick access\" data-position=\"top recentview-tolltip\">  \n" +
        "                        	<div class=\"container-fluid\"> \n" +
        "                            <!--<div class=\"row\">-->\n" +
        "                                <div ng-repeat=\"info in dashboard.recentViewReports.activities\" ng-if=\"$index % 3 == 0\" class=\"row\">\n" +
        "                              \n" +
        "                            <!--first-->        \n" +
        "                            <div class=\"col-md-4 col-sm-4\" ng-repeat=\"item in dashboard.recentViewReports.activities[$index].activityItems\" ng-init=\"dashboard.length=dashboard.recentViewReports.activities[$index].activityItems.length\" >\n" +
        "                            <div class=\"report-panel-head top-margin-sm pointer\">\n" +
        "\n" +
        "\n" +
        " \n" +
        "                                <a class=\"decoration-n\" target=\"_self\" title=\"View the Project Dashboard for {{item.activityInfo.projectName}}\" href=\"index.html#/projectDashboard?projectGuid={{item.activityInfo.projectGuid}}&accountGuid={{dashboard.accountGuid}}&companyGuid={{dashboard.companyGuid}}\">\n" +
        "									<kbd class=\"pull-right\">{{item.activityInfo.reportType | uppercase}}</kbd>\n" +
        "                               <div class=\"text-uppercase site-name\"> {{item.activityInfo.projectName}} </div>\n" +
        " \n" +
        "\n" +
        "\n" +
        "                               </a>\n" +
        "                                <a class=\"text-black decoration-n\"  title=\"Go to report ID {{item.activityInfo.reportGUID}} for {{item.activityInfo.address}}\" target=\"_self\" href=\"#/ReportAuthoring/Write?projectGuid={{item.activityInfo.projectGuid}}&reportGuid={{item.activityInfo.reportGuid}}\">\n" +
        "								<div>{{item.activityInfo.address}},{{item.activityInfo.city}},{{item.activityInfo.state}}</div>\n" +
        "                                </a>\n" +
        "                            </div>\n" +
        "                            </div>\n" +
        "                            <!--first end-->\n" +
        "                            <!--repeated second and third sections in order to display 3 columns in a row -->        \n" +
        "                            <!--second-->\n" +
        "                                    <div class=\"col-md-4 col-sm-4\" if=\"dashboard.recentViewReports.activities.length > ($index + 1)\" ng-repeat=\"item in dashboard.recentViewReports.activities[$index+1].activityItems\" ng-init=\"dashboard.length=dashboard.recentViewReports.activities[$index+1].activityItems.length\">\n" +
        "                            <div class=\"report-panel-head top-margin-sm pointer\">\n" +
        "\n" +
        "\n" +
        " \n" +
        "                                <a class=\"decoration-n\" target=\"_self\" title=\"View the Project Dashboard for {{item.activityInfo.projectName}}\" href=\"index.html#/projectDashboard?projectGuid={{item.activityInfo.projectGuid}}&accountGuid={{dashboard.accountGuid}}&companyGuid={{dashboard.companyGuid}}\">\n" +
        "									<kbd class=\"pull-right\">{{item.activityInfo.reportType | uppercase}}</kbd>\n" +
        "                               <div class=\"text-uppercase site-name\"> {{item.activityInfo.projectName}} </div>\n" +
        " \n" +
        "\n" +
        "\n" +
        "                               </a>\n" +
        "                                <a class=\"text-black decoration-n\"  title=\"Go to report ID {{item.activityInfo.reportGUID}} for {{item.activityInfo.address}}\" target=\"_self\" href=\"#/ReportAuthoring/Write?projectGuid={{item.activityInfo.projectGuid}}&reportGuid={{item.activityInfo.reportGuid}}\">\n" +
        "								<div>{{item.activityInfo.address}},{{item.activityInfo.city}},{{item.activityInfo.state}}</div>\n" +
        "                                </a>\n" +
        "                            </div>\n" +
        "                            </div>\n" +
        "                            <!--second end-->\n" +
        "                            <!--third-->\n" +
        "                                   <div ng-if=\"dashboard.recentViewReports.activities.length > ($index + 2)\" class=\"col-md-4 col-sm-4\" ng-repeat=\"item in dashboard.recentViewReports.activities[$index+2].activityItems\" ng-init=\"dashboard.length=dashboard.recentViewReports.activities[$index+2].activityItems.length\">\n" +
        "                            <div class=\"report-panel-head top-margin-sm pointer\">\n" +
        "\n" +
        "\n" +
        " \n" +
        "                                <a class=\"decoration-n\" target=\"_self\" title=\"View the Project Dashboard for {{item.activityInfo.projectName}}\" href=\"index.html#/projectDashboard?projectGuid={{item.activityInfo.projectGuid}}&accountGuid={{dashboard.accountGuid}}&companyGuid={{dashboard.companyGuid}}\">\n" +
        "									<kbd class=\"pull-right\">{{item.activityInfo.reportType | uppercase}}</kbd>\n" +
        "                               <div class=\"text-uppercase site-name\"> {{item.activityInfo.projectName}} </div>\n" +
        " \n" +
        "\n" +
        "\n" +
        "                               </a>\n" +
        "                                <a class=\"text-black decoration-n\"  title=\"Go to report ID {{item.activityInfo.reportGUID}} for {{item.activityInfo.address}}\" target=\"_self\" href=\"#/ReportAuthoring/Write?projectGuid={{item.activityInfo.projectGuid}}&reportGuid={{item.activityInfo.reportGuid}}\">\n" +
        "								<div>{{item.activityInfo.address}},{{item.activityInfo.city}},{{item.activityInfo.state}}</div>\n" +
        "                                </a>\n" +
        "                            </div>\n" +
        "                            </div> \n" +
        "                            <!--third end-->\n" +
        "                             </div>\n" +
        "                            <!--</div>-->\n" +
        "                            </div>\n" +
        "                         </div>   \n" +
        "                            	<p class=\"text-center report-head-border\" >\n" +
        "                                <span id=\"recent-report\">\n" +
        "\n" +
        "                            	<i class=\"fa fa-chevron-up up-arrow pointer\" activity-updisplay></i><span class=\"recent-report\">RECENTLY VIEWED REPORTS</span><i class=\"fa fa-chevron-down down-arrow\" ng-class=\"dashboard.getClass('arrow')\"  activity-downdisplay length=\"dashboard.getTotal()\"></i>\n" +
        "\n" +
        "                                </span>\n" +
        "                                </p>\n" +
        "                             <div ng-if=\"!dashboard.isRefactorBridgeLinked\" ng-include src=\"'app/modules/LandingPage/views/Dashboard.html'\"></div>\n" +
        "                            <div ng-if=\"dashboard.isRefactorBridgeLinked\" ng-include src=\"'app/modules/LandingPage/appBridge/dashboard.html'\"></div>\n" +
        "                    </div> \n" +
        "				\n" +
        "            </div>\n" +
        "            \n" +
        "            <div class=\"report-menu top-margin col-md-3\">\n" +
        "             \n" +
        "            	<div class=\"panel panel-default\">\n" +
        "                \n" +
        "					<div class=\"panel-body\" data-intro=\"<h4 class='text-white'>NEED TO START A PROJECT?</h4>Click one of these links to do so!\" data-position=\"bottom\">\n" +
        "                    <h3 class=\"top-margin-xs text-capitalize\">Start</h3>\n" +
        "                     \n" +
        "                        <ul class=\"nav nav-pills nav-stacked nav-pills-sm\">\n" +
        "							<li>\n" +
        "							  <a ui-sref=\"quickCreateProj\" href=\"#/QuickProjectSetup\">\n" +
        "								<span class=\"fa-stack fa-lg pull-left\">\n" +
        "								  <i class=\"fa fa-square fa-stack-2x text-warning\"></i>\n" +
        "								  <i class=\"fa fa-book fa-stack-1x fa-inverse\"></i>\n" +
        "								</span>\n" +
        "                                  <div class=\"nav-list-text\">New Single Site Project</div>\n" +
        "                                  <span class=\"clearfix\"></span>\n" +
        "							  </a>\n" +
        "							</li>\n" +
        "                         \n" +
        "							<li>\n" +
        "							  <a ui-sref=\"PortfolioCreation.ProjectInformation\" href=\"#/PortfolioCreation/ProjectInformation\">\n" +
        "								<span class=\"fa-stack fa-lg pull-left\">\n" +
        "								  <i class=\"fa fa-square fa-stack-2x text-warning\"></i>\n" +
        "								  <i class=\"fa fa-folder-open-o fa-stack-1x fa-inverse\"></i>\n" +
        "								</span>\n" +
        "                                  <div class=\"nav-list-text\">New portfolio</div>\n" +
        "                                  <span class=\"clearfix\"></span>\n" +
        "							  </a>\n" +
        "							</li>\n" +
        "                         \n" +
        "							<li>\n" +
        "							  <a ui-sref=\"orderPlacedOnEDR\" href=\"#/OrderPlacedOnEDR\">\n" +
        "								<span class=\"fa-stack fa-lg pull-left\">\n" +
        "								  <i class=\"fa fa-square fa-stack-2x text-warning\"></i>\n" +
        "								  <i class=\"fa fa-fw fa-link fa-stack-1x fa-inverse\"></i>\n" +
        "								</span>\n" +
        "                                  <div class=\"nav-list-text\">Order placed on the EDR website?</div>\n" +
        "                                  <span class=\"clearfix\"></span>\n" +
        "							  </a>\n" +
        "							</li>\n" +
        "                          \n" +
        "                        </ul>\n" +
        "                    </div>\n" +
        "                    </div>\n" +
        "                    \n" +
        "                    <div class=\"panel panel-default\">\n" +
        "                	<div class=\"panel-body\">\n" +
        "                    <h3 class=\"top-margin-xs  text-capitalize\">Other</h3>\n" +
        "                     \n" +
        "                        <ul class=\"nav nav-pills nav-stacked nav-pills-sm\">\n" +
        "							<li>\n" +
        "							  <a  href=\"#\">\n" +
        "								<span class=\"fa-stack fa-lg pull-left\">\n" +
        "								  <i class=\"fa fa-square fa-stack-2x text-warning\"></i>\n" +
        "								  <i class=\"fa fa-lightbulb-o fa-stack-1x fa-inverse\"></i>\n" +
        "								</span>\n" +
        "                                  <div class=\"nav-list-text\">Help and eLearning</div>\n" +
        "                                  <span class=\"clearfix\"></span>\n" +
        "							  </a>\n" +
        "							</li>\n" +
        "\n" +
        "							<li>\n" +
        "							  <a  href=\"#\">\n" +
        "								<span class=\"fa-stack fa-lg pull-left\">\n" +
        "								  <i class=\"fa fa-square fa-stack-2x text-warning\"></i>\n" +
        "								  <i class=\"fa fa-fw fa-indent fa-stack-1x fa-inverse\"></i>\n" +
        "								</span>\n" +
        "                                  <div class=\"nav-list-text\">Update my Personal Info</div>\n" +
        "                                  <span class=\"clearfix\"></span>\n" +
        "							  </a>\n" +
        "							</li>\n" +
        "\n" +
        "							<li>\n" +
        "							  <a  href=\"#\">\n" +
        "								<span class=\"fa-stack fa-lg pull-left\">\n" +
        "								  <i class=\"fa fa-square fa-stack-2x text-warning\"></i>\n" +
        "								  <i class=\"fa fa-fw fa-user-plus fa-stack-1x fa-inverse\"></i>\n" +
        "								</span>\n" +
        "                                  <div class=\"nav-list-text\">Add A New User</div>\n" +
        "                                  <span class=\"clearfix\"></span>\n" +
        "							  </a>\n" +
        "							</li>\n" +
        "\n" +
        "							<li>\n" +
        "							  <a  href=\"#\">\n" +
        "								<span class=\"fa-stack fa-lg pull-left\">\n" +
        "								  <i class=\"fa fa-square fa-stack-2x text-warning\"></i>\n" +
        "								  <i class=\"fa fa-fw fa-users fa-stack-1x fa-inverse\"></i>\n" +
        "								</span>\n" +
        "                                  <div class=\"nav-list-text\">Grant Access to a Report</div>\n" +
        "                                  <span class=\"clearfix\"></span>\n" +
        "							  </a>\n" +
        "							</li>\n" +
        "\n" +
        "							<li>\n" +
        "							  <a  href=\"index.html#/DefaultLanguage\">\n" +
        "								<span class=\"fa-stack fa-lg pull-left\">\n" +
        "								  <i class=\"fa fa-square fa-stack-2x text-warning\"></i>\n" +
        "								  <i class=\"fa fa-fw fa-server fa-stack-1x fa-inverse\"></i>\n" +
        "								</span>\n" +
        "                                  <div class=\"nav-list-text\">Update Default Language</div>\n" +
        "                                  <span class=\"clearfix\"></span>\n" +
        "							  </a>\n" +
        "							</li>\n" +
        "\n" +
        "							<li>\n" +
        "							  <a  href=\"\">\n" +
        "								<span class=\"fa-stack fa-lg pull-left\">\n" +
        "								  <i class=\"fa fa-square fa-stack-2x text-warning\"></i>\n" +
        "								  <i class=\"fa fa-signal fa-stack-1x fa-inverse\"></i>\n" +
        "								</span>\n" +
        "                                  <div class=\"nav-list-text\">View My Company's Statistics</div>\n" +
        "                                  <span class=\"clearfix\"></span>\n" +
        "							  </a>\n" +
        "							</li>\n" +
        "\n" +
        "							<li>\n" +
        "							  <a  href=\"\">\n" +
        "								<span class=\"fa-stack fa-lg pull-left\">\n" +
        "								  <i class=\"fa fa-square fa-stack-2x text-warning\"></i>\n" +
        "								  <i class=\"fa fa-globe fa-stack-1x fa-inverse\"></i>\n" +
        "								</span>\n" +
        "                                  <div class=\"nav-list-text\">Parcel Intel</div>\n" +
        "                                  <span class=\"clearfix\"></span>\n" +
        "							  </a>\n" +
        "							</li>\n" +
        "\n" +
        "							<li>\n" +
        "							  <a  href=\"\">\n" +
        "								<span class=\"fa-stack fa-lg pull-left\">\n" +
        "								  <i class=\"fa fa-square fa-stack-2x text-warning\"></i>\n" +
        "								  <i class=\"fa fa-exchange fa-stack-1x fa-inverse\"></i>\n" +
        "								</span>\n" +
        "                                  <div class=\"nav-list-text\">EDR Advisory Partner Portal</div>\n" +
        "                                  <span class=\"clearfix\"></span>\n" +
        "							  </a>\n" +
        "							</li>\n" +
        "\n" +
        "							<li>\n" +
        "							  <a  ui-sref=\"Support\" href=\"#/Support\">\n" +
        "								<span class=\"fa-stack fa-lg pull-left\">\n" +
        "								  <i class=\"fa fa-square fa-stack-2x text-warning\"></i>\n" +
        "								  <i class=\"fa fa-comments fa-stack-1x fa-inverse\"></i>\n" +
        "								</span>\n" +
        "                                  <div class=\"nav-list-text\">Feedback or Support</div>\n" +
        "                                  <span class=\"clearfix\"></span>\n" +
        "							  </a>\n" +
        "							</li>\n" +
        "    \n" +
        "							<li>\n" +
        "							  <a  href=\"\">\n" +
        "								<span class=\"fa-stack fa-lg pull-left\">\n" +
        "								  <i class=\"fa fa-square fa-stack-2x text-warning\"></i>\n" +
        "								  <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n" +
        "								</span>\n" +
        "                                  <div class=\"nav-list-text\">Administrative Tools</div>\n" +
        "                                  <span class=\"clearfix\"></span>\n" +
        "							  </a>\n" +
        "							</li>\n" +
        "                        </ul>\n" +
        "                    </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "			 </div>\n" +
        "           \n" +
        "            </div>\n" +
        "        </div>\n" +
        "    \n" +
        " ");
}]);

angular.module("../app/modules/LandingPage/views/Dashboard.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LandingPage/views/Dashboard.html",
        "<div class=\"container-fluid\" cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        " \n" +
        "    <div class=\"row\" >\n" +
        " \n" +
        "        <div class=\"col-md-3\">\n" +
        "            <div class=\"form-group \">\n" +
        "                <label>Date Range</label>\n" +
        "                <div class=\"input-group full-width\">\n" +
        "                    <div id=\"reportrange\" class=\"pull-right form-control input-sm pointer\">\n" +
        "                        <i class=\"fa fa-calendar\"></i>\n" +
        "                        <span></span> <strong class=\"caret\"></strong>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        " \n" +
        "		<div class=\"col-md-2\" data-intro=\"<h4 class='text-white'>REPORT SEARCH & FILTERING</h4>Use these filters to search for reports\n" +
        "by date, status or project name.\" data-position=\"right\">\n" +
        "			<div class=\"form-group \">\n" +
        "            <label for=\"projStatus\">Status</label>\n" +
        "            <select id=\"projStatus\" class=\"form-control input-sm\" ng-model=\"dashboard.statusFilter\" ng-change=\"dashboard.filterByStatus();\">\n" +
        "                <option value=\"0\">Non-Final</option>\n" +
        "                <option value=\"1\">Final</option>\n" +
        "                <option value=\"\">All</option>\n" +
        "            </select>\n" +
        " \n" +
        "        </div>\n" +
        "	</div>\n" +
        "        <div ng-show=\"dashboard.showFilter\" class=\"col-md-7\" id=\"filter_global\">\n" +
        "            <div class=\"form-inline\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"global_filter\">Project:</label>\n" +
        "                    <div id=\"refactorSelect2\" class=\"custom-select2\" rt-select2=\"select2Options\" provider=\"projectListProvider\" template=\"projectSearchGenerateMarkup\" afterevent=\"displayProject\" minimuminput=3></div>\n" +
        "                    \n" +
        "                </div>\n" +
        "                <button class=\"btn btn-primary goto-project\" ng-click=\"dashboard.goToProject()\">Go to project</button>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "	\n" +
        "\n" +
        " \n" +
        "    <div class=\"row\" data-intro=\"Reports that meet your critera will be listed in the table below. You can further search, sort and filter the results to find just what you are looking for.\" data-position=\"top table-tooltip\" >\n" +
        "\n" +
        "    <div>\n" +
        " \n" +
        "        <hr class=\"margin-bottom\">\n" +
        "\n" +
        "        <table id=\"landingpageTable\" class=\"table table-bordered table-condensend table-hover table-header-shaded small dt-responsive\" load-data-table>\n" +
        "            <thead>\n" +
        "                <tr class=\"dataTableRow\">\n" +
        "                    <th class=\"pointer thHeader1\">R</th>\n" +
        "                    <th class=\"pointer thHeader2\">P</th>\n" +
        " \n" +
        "                    <th class=\"thHeader3\">projectName</th>\n" +
        "					 <th class=\"thHeader4\">clientProp</th>\n" +
        "                    <th class=\"thHeader5\">siteName</th> \n" +
        " \n" +
        "                    <th class=\"thHeader6\">address </th>\n" +
        "                    <th class=\"thHeader7\">city </th>\n" +
        "                    <th class=\"thHeader8\">state</th>\n" +
        "                    <th class=\"thHeader9\">reportType </th>\n" +
        "                    <th class=\"thHeader10\">creationDate</th>\n" +
        "                    <th class=\"thHeader11\">siteID </th>\n" +
        "                    <th class=\"thHeader12\">siteXXX </th>\n" +
        "                </tr>\n" +
        "\n" +
        "                <tr id=\"filterrow\" class=\"th-bg-white\">\n" +
        "                    <th class=\"headerFilter1\"></th>\n" +
        "                    <th class=\"headerFilter2\"></th>\n" +
        "                    <th class=\"headerFilter3\"></th>\n" +
        "					<th class=\"headerFilter4\"></th>\n" +
        "                    <th class=\"headerFilter5\"></th>\n" +
        "                    <th class=\"headerFilter6\"></th>\n" +
        "                    <th class=\"headerFilter7\"></th>\n" +
        "                    <th class=\"headerFilter8\"></th>\n" +
        "                    <th class=\"headerFilter9\"></th>\n" +
        "                    <th class=\"headerFilter10\"></th>\n" +
        "                    <th class=\"headerFilter11\"></th>\n" +
        "                    <th class=\"headerFilter12\"></th>\n" +
        "                </tr>\n" +
        "            </thead>\n" +
        "        </table>\n" +
        " \n" +
        "\n" +
        "        </div>\n" +
        "    \n" +
        "</div>\n" +
        " \n" +
        "</div>");
}]);

angular.module("../app/modules/LandingPage/views/footer.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LandingPage/views/footer.html",
        "<div class=\"col-md-3 col-lg-3 needhelppopout\">\n" +
        "<div  class=\"needhelp-toggle\" style = \"display: none;\">\n" +
        "  <button class=\"btn btn-sm btn-success pull-right\" type=\"button\"   help-popup> Need Help? </button>\n" +
        "  <div class=\"clearfix\"></div>\n" +
        "  <div class=\"needhelp \">\n" +
        "      <p>Enter your comment or question here and click send, we'll take\n" +
        "          care of the rest.</p>\n" +
        "      <form>\n" +
        "          <textarea type=\"text\" class=\"form-control\"> </textarea>\n" +
        "          <div class=\"pull-right top-margin\">\n" +
        "              <button type=\"button\" class=\"btn btn-xs btn-default\" help-popup>\n" +
        "                  NEVERMIND</button>\n" +
        "              <button type=\"button\" class=\"btn btn-xs btn-primary\">SEND\n" +
        "              </button>\n" +
        "          </div>\n" +
        "      </form>\n" +
        "      <div class=\"clearfix\"></div>\n" +
        "  </div>\n" +
        "</div>\n" +
        "</div>\n" +
        " \n" +
        "<footer  class=\"footer-bar\">\n" +
        "    <div class=\"container-fluid\">\n" +
        "       <div class=\"row\">\n" +
        "        <div class=\"Footermenu1-LP col-lg-12 col-md-12 col-sm-12\">\n" +
        "            <ul class=\" list-unstyled \">\n" +
        "                <li><a href=\"http://edrnet.com/\" target=\"_blank\"><i class=\"fa fa-copyright\"></i> 2016 EDR, Inc.</a></li>\n" +
        "             \n" +
        "                <li><a href=\"\" target=\"_blank\">Terms of Service</a></li>\n" +
        "              \n" +
        "                <li><a href=\"http://edrnet.com/contact-us/\" target=\"_blank\">Contact Us</a></li>\n" +
        "              \n" +
        "               <li><a id=\"currentserver\" class=\"decoration-n\">Current Server: AWS118-1c </a></li>\n" +
        "             \n" +
        "               <!--<li class=\"noborder\"><a id=\"currentserver\" class=\"decoration-n\">Example Cookie: {{exampleCookie}} </a></li>-->\n" +
        "            </ul>\n" +
        "            <ul class=\"Needhelp-button\" ng-hide = \"hidebtn\">\n" +
        "        <button id=\"needhelp-btn\" help-btn class=\"btn btn-sm btn-success\" type=\"button\"> Need Help? </button>\n" +
        "      </ul>\n" +
        "        </div> \n" +
        "       \n" +
        "        </div>\n" +
        "    </div>\n" +
        "    </footer>\n" +
        "	\n" +
        "	\n" +
        "	\n" +
        "	\n" +
        "	\n" +
        "	\n" +
        "	\n" +
        "	\n" +
        "	\n" +
        "	\n" +
        "	");
}]);

angular.module("../app/modules/LandingPage/appBridge/dashboard.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LandingPage/appBridge/dashboard.html",
        "<div class=\"container-fluid\" cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "    <ul class=\"nav nav-tabs\">\n" +
        "        <li role=\"presentation\" ng-class=\"{'active': refactorDash}\" ng-click=\"refactorDash = true;\"><a class=\"pointer\">Refactor Dashboard</a></li>\n" +
        "        <li role=\"presentation\" ng-class=\"{'active': !refactorDash}\" ng-click=\"refactorDash = false;\"><a class=\"pointer\">Application Bridge Dashboard</a></li>\n" +
        "    </ul>\n" +
        "    <div ng-show=\"refactorDash\" ng-init=\"refactorDash=true;\">\n" +
        "        <div class=\"row\">\n" +
        "            <div class=\"col-md-4\">\n" +
        "                <div class=\"form-group \">\n" +
        "                    <label>Date Range</label>\n" +
        "                    <div class=\"input-group full-width\">\n" +
        "                        <div id=\"reportrange\" class=\"pull-right form-control input-sm pointer\">\n" +
        "                            <i class=\"fa fa-calendar\"></i>\n" +
        "                            <span></span> <strong class=\"caret\"></strong>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"col-md-2\" data-intro=\"<h4 class='text-white'>REPORT SEARCH & FILTERING</h4>Use these filters to search for reports\n" +
        "by date, status or project name.\" data-position=\"right\">\n" +
        "                <div class=\"form-group \">\n" +
        "                    <label for=\"projStatus\">Status</label>\n" +
        "                    <select id=\"projStatus\" class=\"form-control input-sm\" ng-model=\"dashboard.statusFilter\" ng-change=\"dashboard.filterByStatus();\">\n" +
        "                        <option value=\"0\">Non-Final</option>\n" +
        "                        <option value=\"1\">Final</option>\n" +
        "                        <option value=\"\">All</option>\n" +
        "                    </select>\n" +
        "\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div ng-show=\"dashboard.showFilter\" class=\"col-md-6\" id=\"filter_global\">\n" +
        "                <div class=\"form-inline\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"global_filter\">Project:</label>\n" +
        "                        <div id=\"refactorSelect2\" class=\"custom-select2\" rt-select2=\"select2Options\" provider=\"projectListProvider\" template=\"projectSearchGenerateMarkup\" afterevent=\"displayProject\" minimuminput=3></div>\n" +
        "                        <!--<input type=\"text\" class=\"form-control global_filter input-sm\" id=\"global_filter\">-->\n" +
        "                    </div>\n" +
        "                    <button class=\"btn btn-primary btn-sm goto-project\" ng-disabled=\"!dashboard.isProjectSelected\">Go to project</button>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"row\" data-intro=\"Reports that meet your critera will be listed in the table below. You can further search, sort and filter the results to find just what you are looking for.\" data-position=\"top table-tooltip\">\n" +
        "            <hr class=\"margin-bottom\">\n" +
        "            <table id=\"landingpageTable\" class=\"table table-bordered table-condensend table-hover table-header-shaded small dt-responsive\" load-data-table>\n" +
        "                <thead>\n" +
        "                    <tr class=\"dataTableRow\">\n" +
        "                        <th class=\"pointer thHeader1\">R</th>\n" +
        "                        <th class=\"pointer thHeader2\">P</th>\n" +
        "                        <th class=\"thHeader3\">projectName</th>\n" +
        "                        <th class=\"thHeader4\">clientProp</th>\n" +
        "                        <th class=\"thHeader5\">siteName</th>\n" +
        "                        <th class=\"thHeader6\">address </th>\n" +
        "                        <th class=\"thHeader7\">city </th>\n" +
        "                        <th class=\"thHeader8\">state</th>\n" +
        "                        <th class=\"thHeader9\">reportType </th>\n" +
        "                        <th class=\"thHeader10\">creationDate</th>\n" +
        "                        <th class=\"thHeader11\">siteID </th>\n" +
        "                    </tr>\n" +
        "\n" +
        "                    <tr id=\"filterrow\" class=\"th-bg-white\">\n" +
        "                        <th class=\"headerFilter1\"></th>\n" +
        "                        <th class=\"headerFilter2\"></th>\n" +
        "                        <th class=\"headerFilter3\"></th>\n" +
        "                        <th class=\"headerFilter4\"></th>\n" +
        "                        <th class=\"headerFilter5\"></th>\n" +
        "                        <th class=\"headerFilter6\"></th>\n" +
        "                        <th class=\"headerFilter7\"></th>\n" +
        "                        <th class=\"headerFilter8\"></th>\n" +
        "                        <th class=\"headerFilter9\"></th>\n" +
        "                        <th class=\"headerFilter10\"></th>\n" +
        "                        <th class=\"headerFilter11\"></th>\n" +
        "                    </tr>\n" +
        "                </thead>\n" +
        "            </table>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div ng-show=\"!refactorDash\" ng-controller=\"appBridgeLandingPageController as appBridgeCtrl\">\n" +
        "        <div class=\"row\">            \n" +
        "            <div class=\"col-md-4\">\n" +
        "                <div class=\"form-group \">\n" +
        "                    <label>Date Range</label>\n" +
        "                    <div class=\"input-group full-width\">\n" +
        "                        <div id=\"appBridgeReportRange\" class=\"pull-right form-control input-sm pointer\">\n" +
        "                            <i class=\"fa fa-calendar\"></i>\n" +
        "                            <span></span> <strong class=\"caret\"></strong>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"col-md-2\" data-intro=\"<h4 class='text-white'>REPORT SEARCH & FILTERING</h4>Use these filters to search for reports\n" +
        "by date, status or project name.\" data-position=\"right\">\n" +
        "                <div class=\"form-group \">\n" +
        "                    <label for=\"projStatus\">Status</label>\n" +
        "                    <select id=\"projStatus\" class=\"form-control input-sm\" ng-model=\"appBridgeCtrl.appBridgeStatusFilter\" ng-change=\"appBridgeCtrl.appBridgeFilterByStatus();\">\n" +
        "                        <option value=\"OPEN\">Non-Final</option>\n" +
        "                        <option value=\"CLOSE\">Final</option>\n" +
        "                        <option value=\"ALL\">All</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <!--<div ng-show=\"dashboard.showFilter\" class=\"col-md-6\" id=\"filter_global\">\n" +
        "                <div class=\"form-inline\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"global_filter\">Project:</label>\n" +
        "                        <div id=\"appBridgeSelect2\" class=\"custom-select2\" rt-select2=\"select2Options\" provider=\"projectListProvider\" template=\"generateMarkUp\" afterevent=\"appBridgeDisplayProject\" minimuminput=3></div>\n" +
        "                    </div>\n" +
        "                    <button class=\"btn btn-primary goto-project\" ng-disabled=\"!dashboard.isProjectSelected\">Go to project</button>\n" +
        "                </div>\n" +
        "            </div>-->\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"row\" data-intro=\"Reports that meet your critera will be listed in the table below. You can further search, sort and filter the results to find just what you are looking for.\" data-position=\"top table-tooltip\">\n" +
        "            <hr class=\"margin-bottom\">\n" +
        "            <table id=\"appBridgeDataTable\" class=\"table table-bordered table-condensend table-hover table-header-shaded small\">\n" +
        "                <thead>\n" +
        "                    <tr class=\"dataTableRow\">\n" +
        "                        <th class=\"pointer\">R</th>\n" +
        "                        <th class=\"pointer\">P</th>\n" +
        "                        <th>projectName</th>\n" +
        "                        <th>clientProp</th>\n" +
        "                        <th>siteName</th>\n" +
        "                        <th>address </th>\n" +
        "                        <th>city </th>\n" +
        "                        <th>state</th>\n" +
        "                        <th>reportType </th>\n" +
        "                        <th>creationDate</th>\n" +
        "                        <th>siteID </th>\n" +
        "                    </tr>\n" +
        "\n" +
        "                    <tr id=\"filterrow\" class=\"th-bg-white\">\n" +
        "                        <th></th>\n" +
        "                        <th></th>\n" +
        "                        <th></th>\n" +
        "                        <th></th>\n" +
        "                        <th></th>\n" +
        "                        <th></th>\n" +
        "                        <th></th>\n" +
        "                        <th></th>\n" +
        "                        <th></th>\n" +
        "                        <th></th>\n" +
        "                        <th></th>\n" +
        "                    </tr>\n" +
        "                </thead>\n" +
        "            </table>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/LenderPortfolioCreation/views/LenderPortfolioCreation.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderPortfolioCreation/views/LenderPortfolioCreation.html",
        "<!doctype html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "<style>\n" +
        "	.body-bg-gray{\n" +
        "		background-color: #ffffff !important;\n" +
        "	}\n" +
        "</style>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"container-fluid\">\n" +
        "    <div class=\"row\">\n" +
        "    <form name=\"lenderPortfolio.submitForm\" class=\"rightside-section\">\n" +
        "        <!--Policy Create start  -->\n" +
        "        \n" +
        "        \n" +
        "            <!-- Left panel Start-->\n" +
        "           <div class=\"col-md-3 col-lg-3 col-sm-3 bg-gray sidebar\">\n" +
        "                <div class=\"top-margin\">\n" +
        "                    <ul id=\"ulnavigation\" class=\"nav nav-pills nav-stacked-lg\">\n" +
        "\n" +
        "                        <li active-class-lender urlparams=\"/LenderPortfolioCreation/ProjectInformation\" class=\"active\"><a> Step 1: <p class=\"text-11\">Enter Project Information </p> </a></li>\n" +
        "                        <li active-class-lender urlparams=\"/LenderPortfolioCreation/ReportInformation\"><a> Step 2:<p class=\"text-11\"> Enter Report Information</p> </a></li>\n" +
        "                        <li active-class-lender urlparams=\"/LenderPortfolioCreation/FeeInformation\"><a> Step 3:<p class=\"text-11\"> Select an Environmental Consultant </p> </a></li>\n" +
        "                        <li active-class-lender urlparams=\"/LenderPortfolioCreation/Attachments\"><a>Step 4:<p class=\"text-11\"> Attach Documents </p> </a></li>\n" +
        "                        <li active-class-lender urlparams=\"/LenderPortfolioCreation/GrantAccess\"><a> Step 5:<p class=\"text-11\"> Grant Access</p> </a></li>\n" +
        "                        <li active-class-lender urlparams=\"/LenderPortfolioCreation/ConfirmProjectInformation\"><a> Step 6:<p class=\"text-11\"> Confirm Project Information</p> </a></li>\n" +
        "\n" +
        "                    </ul>\n" +
        "                    <hr>\n" +
        "                    <div class=\"col-md-12 col-sm-12\">\n" +
        "\n" +
        "                        <button id=\"previousStep\" shift-previous-lender class=\"btn btn-md btn-primary pull-left\" type=\"button\"> Previous </button>\n" +
        "                        <!-- <button id=\"nextButton\" shift-next class=\"btn btn-md btn-primary pull-right\" type=\"button\"> {{lenderPortfolioCreation.nextButtonText}} </button>-->\n" +
        "                        <div next-step get-submit-project-data=\"lenderPortfolio.getProjectData()\" form=\"lenderPortfolio.submitForm\" response-receiver=\"lenderPortfolio.setResponseProjectData(projectData)\" current-project-data=\"lenderPortfolio.project\" button-text=\"nextButtonText\" state-navigation=\"lenderPortfolio.stateNavigation\" error-handler=\"lenderPortfolio.showServiceError(errorMsg)\"></div>\n" +
        "\n" +
        "                    </div>\n" +
        "                    \n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <!-- Left panel end-->\n" +
        " \n" +
        "        <!-- Policy Create  end  -->\n" +
        "        <div class=\"col-md-9 col-lg-9 col-sm-9 col-sm-offset-3\">\n" +
        "            <h2 class=\"page-header\"> New Portfolio</h2>\n" +
        "            <div ui-view=\"\"></div>\n" +
        "            \n" +
        "        </div>\n" +
        "    </form>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderPortfolioCreation/views/lenderportfolio.AddLocation.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderPortfolioCreation/views/lenderportfolio.AddLocation.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"modal-header dividerline\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"Cancel()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\"> {{addLocation.title}}</h4>\n" +
        "    </div>\n" +
        "\n" +
        "    <form>\n" +
        "        <div class=\"modal-body\">\n" +
        "           \n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"property\" class=\"control-label\">\n" +
        "                                Property #\n" +
        "                            </label>\n" +
        "                            <input id=\"property\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.propertyNumber\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"name\" class=\"control-label\">\n" +
        "                                Name\n" +
        "                            </label>\n" +
        "                            <input id=\"name\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.name\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "           \n" +
        "            \n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-sm-12 col-md-12\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"address\" class=\"control-label\">\n" +
        "                            Address\n" +
        "                        </label>\n" +
        "                        <input id=\"address\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.address1\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            \n" +
        "          \n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-sm-12 col-md-12\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <input type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.address2\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "          \n" +
        "            \n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"city\" class=\"control-label\">\n" +
        "                            City\n" +
        "                        </label>\n" +
        "\n" +
        "                        <input id=\"city\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.city\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"state\" class=\"control-label\">\n" +
        "                            State\n" +
        "                        </label>\n" +
        "\n" +
        "                        <input id=\"state\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.state\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"zip\" class=\"control-label\">\n" +
        "                            Zip\n" +
        "                        </label>\n" +
        "\n" +
        "                        <input id=\"zip\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.zip\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "           \n" +
        "           \n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"county\" class=\"control-label \">\n" +
        "                            County\n" +
        "                        </label>\n" +
        "\n" +
        "                        <input id=\"county\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.county\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"country\" class=\"control-label \">\n" +
        "                            Country\n" +
        "                        </label>\n" +
        "\n" +
        "                        <input id=\"country\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.country\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "           \n" +
        "           \n" +
        "                <div class=\"row\">\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"latitude\" class=\"control-label\">\n" +
        "                            Latitude\n" +
        "                        </label>\n" +
        "\n" +
        "                        <input id=\"latitude\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.latitude\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"longitude\" class=\"control-label\">\n" +
        "                            Longitude\n" +
        "                        </label>\n" +
        "\n" +
        "                        <input id=\"longitude\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.longitude\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "           \n" +
        "           \n" +
        "                <div class=\"row\">\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"contact\" class=\"control-label\">\n" +
        "                            Contact\n" +
        "                        </label>\n" +
        "                        <input id=\"contact\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.contact\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"phone\" class=\"control-label\">\n" +
        "                            Phone\n" +
        "                        </label>\n" +
        "\n" +
        "                        <input id=\"phone\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.phone\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"fax\" class=\"control-label\">\n" +
        "                            Fax\n" +
        "                        </label>\n" +
        "\n" +
        "                        <input id=\"fax\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.fax\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "           \n" +
        "            \n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"email\" class=\"control-label\">\n" +
        "                            Email\n" +
        "                        </label>\n" +
        "\n" +
        "                        <input id=\"email\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.email\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"ponumber\" class=\"control-label\">\n" +
        "                            PO Number\n" +
        "                        </label>\n" +
        "\n" +
        "                        <input id=\"ponumber\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.poNumber\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "        \n" +
        "        </div>\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <button type=\"reset\" class=\"btn btn-md btn-default\" ng-click=\"addLocation.cancel()\"> Cancel</button>\n" +
        "            <button type=\"submit\" class=\"btn btn-md btn-success\" ng-click=\"addLocation.addSite()\"> {{addLocation.action}} This Site</button>\n" +
        "\n" +
        "\n" +
        "        </div>\n" +
        "    </form>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderPortfolioCreation/views/lenderportfolio.Attachments.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderPortfolioCreation/views/lenderportfolio.Attachments.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "\n" +
        "    <div class=\"alert alert-info\">\n" +
        "\n" +
        "        <b>\n" +
        "                The file was blocked due to an insecure file type.\n" +
        "                Attach Documents\n" +
        "                Use this area to attach documents to the project\n" +
        "                (Example: Prior Phase I ESAs, Title Records, etc.)\n" +
        "            </b>\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"form-group\" id=\"collapseAttachment\" class=\"top-margin\" ng-controller=\"LenderPortfolioAttachmentCtrl as portfolioAttachments\">\n" +
        "\n" +
        "        <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"portfolioAttachments.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"portfolioAttachments.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{portfolioAttachments.serviceResponseText}}\n" +
        "        </div>\n" +
        "\n" +
        "        <form id=\"fileupload\">\n" +
        "            <div class=\"fileupload-buttonbar AU_uploadbox\">\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "\n" +
        "                    <span class=\"btn btn-md btn-success fileinput-button\" ng-class=\"{disabled: disabled}\">\n" +
        "                                <i class=\"fa fa-file-text-o\"></i> Attach <input id=\"file-3\"\n" +
        "                                                                                type=\"file\" data-file-input=\"files\"\n" +
        "                                                                                ngf-select ngf-change=\"upload($files)\" ngf-multiple=\"true\" >\n" +
        "                            </span>\n" +
        "                   <!-- <button type=\"button\" class=\"btn btn-md btn-primary start\" ng-click=\"portfolioAttachments.Upload()\">\n" +
        "                        <span class=\"glyphicon glyphicon-upload\"></span> Upload\n" +
        "                    </button>-->\n" +
        "                    <span class=\"AU_uploadFilename text-primary\" ng-repeat=\"file in files\">{{file.name}}</span>\n" +
        "\n" +
        "                    <hr>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "                <div class=\" form-group\" ng-hide=\"portfolioAttachments.attachmentFiles.length == 0\">\n" +
        "\n" +
        "\n" +
        "\n" +
        "                    <table class=\"table table-condensed  table-bordered table-hover top-margin\">\n" +
        "\n" +
        "                        <thead>\n" +
        "                            <tr>\n" +
        "                                <th>Action</th>\n" +
        "                                <th>File Name</th>\n" +
        "                                <!--<th>File Description</th>-->\n" +
        "                                <th>File Size</th>\n" +
        "\n" +
        "                            </tr>\n" +
        "                        </thead>\n" +
        "                        <tbody>\n" +
        "                            <tr ng-repeat=\"file in portfolioAttachments.attachmentFiles\">\n" +
        "                                <td><a style=\"cursor: pointer;\" ng-click=\"portfolioAttachments.removeAttachment(file.name);\">Remove</a></td>\n" +
        "                                <td>{{file.name}}</td>\n" +
        "\n" +
        "                                <td>{{file.size}} Bytes</td>\n" +
        "                            </tr>\n" +
        "\n" +
        "                        </tbody>\n" +
        "\n" +
        "                    </table>\n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <!--<div class=\"alert alert-success\" ng-hide=\"portfolioAttachments.attachmentFiles.length == 0\">\n" +
        "\n" +
        "                        <span>Files Uploaded Successfully</span>\n" +
        "                    </div>-->\n" +
        "\n" +
        "\n" +
        "                    <div class=\"alert alert-danger\" ng-show=\"portfolioAttachments.isUploadErrorMsg\">\n" +
        "                        <span>{{portfolioAttachments.UploadErrorMsg}}</span>\n" +
        "                    </div>\n" +
        "                    <div class=\"alert alert-danger\" ng-show=\"portfolioAttachments.isUploadErrorMsg\">\n" +
        "                        <span>{{portfolioAttachments.IncorrectFormat}}</span>\n" +
        "                    </div>\n" +
        "                    <div class=\"alert alert-danger\" ng-show=\"portfolioAttachments.isUploadErrorMsg\">\n" +
        "\n" +
        "                        <a ng-click=\"ShowUploadStatus()\" ng-show=\"popuplink\">Click here for more details</a>\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderPortfolioCreation/views/lenderportfolio.ConfirmProjectInfo.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderPortfolioCreation/views/lenderportfolio.ConfirmProjectInfo.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        " \n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div ng-controller=\"LenderPortfolioConfirmInfoCtrl as confirmInfo\">\n" +
        "\n" +
        "        <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"confirmInfo.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"confirmInfo.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{confirmInfo.serviceResponseText}}\n" +
        "        </div>\n" +
        "\n" +
        "        <!-- right panel start-->\n" +
        "\n" +
        "        <h4 class=\"heading-border\"> Project Info</h4>\n" +
        "        <form name=\"propertyInfoForm\" class=\"form-horizontal\">\n" +
        "\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label for=\"projectName\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Project Name:\n" +
        "                </label>\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <input type=\"text\" class=\"form-control\" name=\"projectName\" ng-model=\"confirmInfo.editProjectInfo.name\" required>\n" +
        "                </div>\n" +
        "                \n" +
        "            </div>\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Client Requesting Work:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <select class=\"form-control\" ng-model=\"confirmInfo.editProjectInfo.client.companyName\" data-ng-options=\"client.name as client.name for client in lenderPortfolio.loadData.relatedCompanies | filter: lenderPortfolio.filterByContains('functions', 'Client')\">\n" +
        "                        <option value=\"\">Select a Client</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                 \n" +
        "            </div>\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Date draft report:\n" +
        "                </label>\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <div class=\"input-group\">\n" +
        "\n" +
        "                        <input type=\"text\" class=\"form-control\" datetime-picker=\"dd MMM yyyy\" ng-model=\"confirmInfo.editProjectInfo.draftDueDate\" is-open=\"open.draftDate\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"true\" show-button-bar=\"false\" ng-click=\"openCalendar($event, 'draftDate')\" ng-focus=\"openCalendar($event, 'draftDate')\">\n" +
        "\n" +
        "\n" +
        "                        <span class=\"input-group-btn\">\n" +
        "                                <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'draftDate')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                            </span>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "               \n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Date final report:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <div class=\"input-group\">\n" +
        "\n" +
        "                        <input type=\"text\" class=\"form-control\" datetime-picker=\"dd MMM yyyy\" ng-model=\"confirmInfo.editProjectInfo.finalDueDate\" is-open=\"open.finalDate\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"true\" show-button-bar=\"false\">\n" +
        "\n" +
        "                        <span class=\"input-group-btn\">\n" +
        "                                <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'finalDate')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                            </span>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                \n" +
        "            </div>\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Project Comments:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "\n" +
        "                    <textarea class=\"form-control\" placeholder=\"Project Comments\" ng-model=\"confirmInfo.editProjectInfo.comments\"></textarea>\n" +
        "                </div>\n" +
        "             \n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <div class=\"col-md-offset-3 col-md-9 col-sm-9 col-xs-12\">\n" +
        "                    <button type=\"submit\" class=\"btn btn-md btn-danger \" ng-click=\"confirmInfo.resetProjectInfo()\"><i class=\"fa fa-times\"></i> &nbsp; Reset</button>\n" +
        "                    <!--<button type=\"submit\" class=\"btn btn-md btn-primary \" ng-click=\"confirmInfo.updateProjectInfo()\"><i class=\"fa fa-pencil\"></i> &nbsp; Update</button>-->\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "        <hr>\n" +
        "\n" +
        "        <h4 class=\"heading-border\"> Sites  Info</h4>\n" +
        "        <div class=\"sitestable overflow-auto\">\n" +
        "            <table class=\"table table-bordered \">\n" +
        "                <thead>\n" +
        "                    <tr>\n" +
        "                        <th>Sr. No</th>\n" +
        "                        <th>Property # </th>\n" +
        "                        <th>Site Name </th>\n" +
        "                        <th>Address, City, State or Province, Zip</th>\n" +
        "                        <th>Contact</th>\n" +
        "                        <th>Email</th>\n" +
        "                        <th>Report template</th>\n" +
        "                        <th>Consultant</th>\n" +
        "                        <th>Fee</th>\n" +
        "                        <th>Action</th>\n" +
        "                    </tr>\n" +
        "                </thead>\n" +
        "                <tbody>\n" +
        "                    <tr ng-repeat=\"data in confirmInfo.tableArr\">\n" +
        "                        <th scope=\"row\">{{$index + 1}}</th>\n" +
        "                        <td>{{data.locationObj.propertyNumber}}</td>\n" +
        "                        <td>{{data.locationObj.name}}</td>\n" +
        "                        <td>{{data.locationObj.address1}}</td>\n" +
        "                        <td>{{data.contactObj.name}}</td>\n" +
        "                        <td>{{data.contactObj.email}}</td>\n" +
        "                        <td>{{data.templateObj.name}}</td>\n" +
        "                        <td>{{data.consultantObj.name}}</td>\n" +
        "                        <td>{{data.fee}}</td>\n" +
        "                        <td>\n" +
        "                            <div class=\"btn-group\">\n" +
        "                                <button data-toggle=\"dropdown\" class=\"btn btn-xs dropdown-toggle\" data-original-title=\"\" title=\"\">\n" +
        "                                    Action\n" +
        "                                    <span class=\"caret\">\n" +
        "                                        </span>\n" +
        "                                </button>\n" +
        "                                <ul class=\"dropdown-menu pull-right\">\n" +
        "                                    <li>\n" +
        "                                        <a ng-click=\"confirmInfo.editSiteInfo(data, $index)\"><i class=\"fa fa-pencil\"></i>&nbsp;  Edit</a>\n" +
        "                                    </li>\n" +
        "                                    <li>\n" +
        "                                        <a ng-click=\"confirmInfo.deleteReport(data)\"><i class=\"fa fa-times text-danger\"></i>&nbsp; Delete Report</a>\n" +
        "                                    </li>\n" +
        "\n" +
        "                                    <li>\n" +
        "                                        <a ng-click=\"confirmInfo.deleteReport(data, true)\"><i class=\"fa fa-times text-danger\"></i>&nbsp; Delete Site</a>\n" +
        "                                    </li>\n" +
        "\n" +
        "                                </ul>\n" +
        "                            </div>\n" +
        "\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "\n" +
        "\n" +
        "                </tbody>\n" +
        "            </table>\n" +
        "\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "        <!-- right panel end-->\n" +
        "    </div>\n" +
        "\n" +
        "    <script type=\"text/ng-template\" id=\"editSiteInfo.html\">\n" +
        "\n" +
        "        <div class=\"modal-header dividerline\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"Cancel()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Edit Site Info</h4>\n" +
        "        </div>\n" +
        "\n" +
        "        <form name=\"ContactListForm\" novalidate>\n" +
        "            <div class=\"modal-body \">\n" +
        "\n" +
        "                \n" +
        "                    <div class=\"row\">\n" +
        "                        <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                            <label class=\"control-label\">\n" +
        "                                Property Name:\n" +
        "                            </label>\n" +
        "                            <input type=\"text\" class=\"form-control\" ng-model=\"modalObjContainer.data.locationObj.name\" ng-disabled=\"true\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                \n" +
        "               \n" +
        "                    <div class=\"row\">\n" +
        "                        <div class=\"col-xs-12 col-sm-12 col-md-12\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                            <label class=\"control-label\">\n" +
        "                                Address:<span class=\"text-danger\"> * </span>\n" +
        "                            </label>\n" +
        "                            <input type=\"text\" class=\"form-control\" ng-model=\"modalObjContainer.data.locationObj.address1\" required>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                        <div class=\"col-xs-12 col-sm-12 col-md-12\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                            <input type=\"text\" class=\"form-control\" ng-model=\"modalObjContainer.data.locationObj.address2\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                \n" +
        "                \n" +
        "                    <div class=\"row\">\n" +
        "                        <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                            <label class=\"control-label\">\n" +
        "                                City:<span class=\"text-danger\">*</span>\n" +
        "                            </label>\n" +
        "\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"City\" required ng-model=\"modalObjContainer.data.locationObj.city\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "\n" +
        "                        <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                            <label class=\"control-label\">\n" +
        "                                State or Province:<span class=\"text-danger\">*</span>\n" +
        "                            </label>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"State or Province\" required ng-model=\"modalObjContainer.data.locationObj.state\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "\n" +
        "                        <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                            <label class=\"control-label\">\n" +
        "                                Zip:<span class=\"text-danger\">*</span>\n" +
        "                            </label>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"Zip\" required ng-model=\"modalObjContainer.data.locationObj.zip\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "               \n" +
        "\n" +
        "\n" +
        "               \n" +
        "                    <div class=\"row\">\n" +
        "                        <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                            <label class=\"control-label\">\n" +
        "                                Contact Name:\n" +
        "                            </label>\n" +
        "                            <input type=\"text\" class=\"form-control\" ng-model=\"modalObjContainer.data.contactObj.name\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "\n" +
        "                        <div class=\" col-md-6 col-sm-6 col-xs-12\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                            <label class=\"control-label\">\n" +
        "                                Contact Email:\n" +
        "                            </label>\n" +
        "                            <input type=\"text\" class=\"form-control\" ng-model=\"modalObjContainer.data.contactObj.email\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "\n" +
        "                    </div>\n" +
        "               \n" +
        "\n" +
        "\n" +
        "               \n" +
        "                    <div class=\"row\">\n" +
        "                        <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                            <label class=\"control-label\">\n" +
        "                                Report Template:\n" +
        "                            </label>\n" +
        "                            <select ng-model=\"modalObjContainer.data.templateObj\" class=\"form-control\" data-ng-options=\"template as template.name for template in lenderPortfolio.loadData.templates\"></select>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "\n" +
        "                        <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                            <label class=\"control-label\">\n" +
        "                                Language Library:\n" +
        "                            </label>\n" +
        "                            <select ng-model=\"modalObjContainer.data.libraryObj\" class=\"form-control\" data-ng-options=\"lib as lib.name for lib in lenderPortfolio.loadData.libraries | filter: lib.reportType = modalObjContainer.data.templateObj.reportType\"></select>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "\n" +
        "                    </div>\n" +
        "               \n" +
        "                \n" +
        "                    <div class=\"row\">\n" +
        "                        <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                            <label class=\"control-label\">\n" +
        "                                Consultant:\n" +
        "                            </label>\n" +
        "                            <select ng-model=\"modalObjContainer.data.consultantObj\" class=\"form-control\" data-ng-options=\"consultant as consultant.name for consultant in lenderPortfolio.loadData.relatedCompanies | filter: modalObjContainer.filterByContains('functions', 'Consultant')\"></select>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "\n" +
        "                        <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                            <label class=\"control-label\">\n" +
        "                                Fee:\n" +
        "                            </label>\n" +
        "\n" +
        "                            <input type=\"text\" class=\"form-control\" ng-model=\"modalObjContainer.data.fee\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "              \n" +
        "\n" +
        "            </div>\n" +
        "        \n" +
        "            <div class=\"modal-footer\">\n" +
        "                <button class=\"btn btn-link\" ng-click=\"cancel()\">Cancel</button>\n" +
        "                <button class=\"btn btn-primary\" ng-click=\"editSiteInfo()\">Update</button>\n" +
        "            </div>\n" +
        "\n" +
        "        </form>\n" +
        "    </script>\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderPortfolioCreation/views/lenderportfolio.GrantAccess.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderPortfolioCreation/views/lenderportfolio.GrantAccess.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        " \n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"form-horizontal\">\n" +
        "    <div class=\"form-group required\" show-errors ng-controller=\"LenderPortfolioGrantAccessCtrl as grantAccess\">\n" +
        "\n" +
        "        <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"grantAccess.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"grantAccess.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{grantAccess.serviceResponseText}}\n" +
        "        </div>\n" +
        "\n" +
        "        <label for=\"grantaccessto\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "            Grant access to:\n" +
        "        </label>\n" +
        "        <div class=\"col-xs-12 col-sm-5 col-md-5\">\n" +
        "\n" +
        "            <select id=\"grantaccessto\" class=\"form-control\" data-ng-options=\"grp as ('Everyone in ' + grp.name + (grp.name.toLowerCase().indexOf(grp.accessType.toLowerCase()) > 0 ? '': ' ' + grp.accessType)) for grp in lenderPortfolio.loadData.grantAccessGrps\" ng-model=\"grantAccess.accessParty\" name=\"grantAccess\" ng-required=\"lenderPortfolio.loadData.grantAccessGrps && lenderPortfolio.loadData.grantAccessGrps.length\"></select>\n" +
        "        </div>\n" +
        "       \n" +
        "\n" +
        "    </div>\n" +
        "    </div>\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderPortfolioCreation/views/lenderportfolio.ProjectInformation.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderPortfolioCreation/views/lenderportfolio.ProjectInformation.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        " \n" +
        "    <style>\n" +
        "    </style>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div>\n" +
        "        <p class=\"alert alert-info\">\n" +
        "            <b>\n" +
        "                Use this page to create a new multi-site project.<br>\n" +
        "                If your project contains a single site, you can set the project up using the<a href=\"#\" ui-sref=\"quickCreateProj\"> New Single Site Project.</a><br>\n" +
        "\n" +
        "                This is a multi-step process. You must complete all steps in order to setup a project.\n" +
        "            </b>\n" +
        "        </p>\n" +
        "\n" +
        "        \n" +
        "            <form name=\"propertyInfoForm\" class=\"form-horizontal\" ng-controller=\"LenderPortfolioProjectInformationCtrl as lenderProjectInfo\">\n" +
        "\n" +
        "                <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"lenderProjectInfo.serviceResponseAlert\">\n" +
        "                    <button type=\"button\" class=\"close\" ng-click=\"lenderProjectInfo.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                        <span aria-hidden=\"true\">&times;</span>\n" +
        "                    </button>\n" +
        "                    {{lenderProjectInfo.serviceResponseText}}\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group required\" show-errors>\n" +
        "                    <label for=\"projectName\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                        Project Name:\n" +
        "                    </label>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input id=\"projectName\" type=\"text\" class=\"form-control\" name=\"projectName\" ng-model=\"lenderProjectInfo.data.name\" required>\n" +
        "                    </div>\n" +
        "                    \n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"customername\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                        Customer Name:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input id=\"customername\" type=\"text\" class=\"form-control\" ng-model=\"lenderProjectInfo.data.client.companyName\" name=\"customerName\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group required\" show-errors>\n" +
        "                    <label class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                        Date draft report:\n" +
        "                    </label>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4 \">\n" +
        "                        <div class=\"input-group\">\n" +
        "                            <input type=\"text\" name=\"reportDraftDate\" class=\"form-control\" datetime-picker=\"dd MMM yyyy\" ng-model=\"lenderProjectInfo.data.draftDueDate\" is-open=\"lenderProjectInfo.open.draftDate\" enable-time=\"false\" datepicker-options=\"lenderProjectInfo.dateOptions\" date-disabled=\"lenderProjectInfo.disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"true\" required show-button-bar=\"false\" ng-click=\"lenderProjectInfo.openCalendar($event, 'draftDate')\" ng-focus=\"lenderProjectInfo.openCalendar($event, 'draftDate')\">\n" +
        "                            <span class=\"input-group-btn\">\n" +
        "                                <button type=\"button\" class=\"btn btn-default\" ng-click=\"lenderProjectInfo.openCalendar($event, 'draftDate')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                            </span>\n" +
        "                        </div>\n" +
        " \n" +
        "\n" +
        "                    </div>\n" +
        " \n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"form-group required\" show-errors>\n" +
        "                    <label class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                        Date final report:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4 \">\n" +
        "\n" +
        "                        <div class=\"input-group\">\n" +
        "                            <input type=\"text\" name=\"reportFinalDate\" class=\"form-control\" datetime-picker=\"dd MMM yyyy\" ng-model=\"lenderProjectInfo.data.finalDueDate\" is-open=\"lenderProjectInfo.open.finalDate\" enable-time=\"false\" datepicker-options=\"lenderProjectInfo.dateOptions\" date-disabled=\"lenderProjectInfo.disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"true\" required show-button-bar=\"false\" ng-click=\"lenderProjectInfo.openCalendar($event, 'finalDate')\" ng-focus=\"lenderProjectInfo.openCalendar($event, 'finalDate')\">\n" +
        "                            <span class=\"input-group-btn\">\n" +
        "                                <button type=\"button\" class=\"btn btn-default\" ng-click=\"lenderProjectInfo.openCalendar($event, 'finalDate')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                            </span>\n" +
        "                        </div>\n" +
        "\n" +
        "\n" +
        "                    </div>\n" +
        "                   \n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"projectcomment\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                        Project Comments:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <textarea id=\"projectcomment\" rows=\"5\" class=\"form-control\" placeholder=\"Project Comments\" ng-model=\"lenderProjectInfo.data.comments\"></textarea>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "\n" +
        "                    <div class=\"col-md-offset-3 col-md-9 col-sm-9 col-xs-12 \">\n" +
        "                        <label class=\"radio-inline\">\n" +
        "                            <input type=\"radio\" name=\"optradio\" ng-model=\"lenderProjectInfo.data.addSiteMethod\" value=\"{{lenderPortfolio.addSiteMethodTypes.manual}}\"> Manually Enter Site(s)\n" +
        "                        </label>\n" +
        "                        <label class=\"radio-inline\">\n" +
        "                            <input type=\"radio\" name=\"optradio\" ng-model=\"lenderProjectInfo.data.addSiteMethod\" value=\"{{lenderPortfolio.addSiteMethodTypes.upload}}\"> Upload Site Spreadsheet\n" +
        "                        </label>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "\n" +
        "                    <div class=\"col-md-offset-3 col-md-9 col-sm-9 col-xs-12 \">\n" +
        "                        <label class=\"checkbox-inline\">\n" +
        "                            <input type=\"checkbox\" name=\"chkProjBid\" ng-model=\"lenderProjectInfo.data.outToBid\">Put project out to bid.\n" +
        "                        </label>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\" ng-show=\"lenderProjectInfo.data.outToBid\">\n" +
        "\n" +
        "                    <div class=\"col-md-offset-3 col-md-9 col-sm-9 col-xs-12 \">\n" +
        "                        <b>Bid Deadline:</b>\n" +
        "                        <div class=\"col-xs-12 col-sm-5 col-md-4 \">\n" +
        "                            <div class=\"input-group\">\n" +
        "                                <input type=\"text\" class=\"form-control\" datetime-picker=\"dd MMM yyyy\" ng-model=\"lenderProjectInfo.data.bidDeadline\" is-open=\"lenderProjectInfo.open.bidDeadline\" enable-time=\"true\" datepicker-options=\"lenderProjectInfo.dateOptions\" date-disabled=\"lenderProjectInfo.disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"true\" show-button-bar=\"false\" ng-click=\"lenderProjectInfo.openCalendar($event, 'bidDeadline')\" ng-focus=\"lenderProjectInfo.openCalendar($event, 'bidDeadline')\">\n" +
        "                                <span class=\"input-group-btn\">\n" +
        "                                    <button type=\"button\" class=\"btn btn-default\" ng-click=\"lenderProjectInfo.openCalendar($event, 'bidDeadline')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                                </span>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </form>\n" +
        "        \n" +
        "\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderPortfolioCreation/views/lenderportfolio.ReportInformation.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderPortfolioCreation/views/lenderportfolio.ReportInformation.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        " \n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div ng-controller=\"LenderPortfolioReportInformationController as reportInfo\">\n" +
        "\n" +
        "        <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"reportInfo.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"reportInfo.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{reportInfo.serviceResponseText}}\n" +
        "        </div>\n" +
        "\n" +
        "        <form>\n" +
        "            <div class=\"form-horizontal\">\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"propertyname\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                    Property Name:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                    <input id=\"propertyname\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].name\">\n" +
        "                </div>\n" +
        "                <!--<span class=\"text-danger\"> * </span>-->\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"propertytype\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                    Property Type:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                    <select id=\"propertytype\" class=\"form-control\" data-ng-options=\"propertyType.propertyTypeGUID as propertyType.propertyTypeName for propertyType in lenderPortfolio.loadData.propertyTypes\" ng-model=\"reportInfo.locations[reportInfo.locationCount].propertyTypeGUID\">\n" +
        "                        <option ng-if=\"!reportInfo.locations[reportInfo.locationCount].propertyType\" value=\"\">*** Select one from the list ***</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group required\" show-errors>\n" +
        "                <label for=\"address\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                    Address:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                    <input id=\"address\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].address1\" required name=\"locationAddress1\">\n" +
        "\n" +
        "                </div>\n" +
        "              \n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group \">\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4 col-md-offset-3\">\n" +
        "                    <input type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].address2\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group required\" show-errors>\n" +
        "                <label for=\"country\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                    Country:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                    <select id=\"country\" class=\"form-control\" required ng-model=\"reportInfo.locations[reportInfo.locationCount].country\" name=\"country\">\n" +
        "                        <option></option>\n" +
        "                        <option>United States</option>\n" +
        "                        <option>Other</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "             \n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group required\" show-errors>\n" +
        "                <label class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                    City/State or Province/Zip:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-2 col-md-2\">\n" +
        "                    <input type=\"text\" class=\"form-control\" placeholder=\"City\" required ng-model=\"reportInfo.locations[reportInfo.locationCount].city\" name=\"city\">\n" +
        "\n" +
        "                </div>\n" +
        "                 \n" +
        "                <div class=\"col-xs-12 col-sm-2 col-md-2\" show-errors>\n" +
        "                    <input type=\"text\" class=\"form-control\" placeholder=\"State or Province\" required ng-model=\"reportInfo.locations[reportInfo.locationCount].state\" name=\"state\">\n" +
        "                </div>\n" +
        "               \n" +
        "                <div class=\"col-xs-12 col-sm-2 col-md-2\" show-errors>\n" +
        "                    <input type=\"text\" class=\"form-control\" placeholder=\"Zip\" required ng-model=\"reportInfo.locations[reportInfo.locationCount].zip\" name=\"zip\">\n" +
        "                </div>\n" +
        "                \n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"county\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                    County:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                    <input id=\"county\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].county\">\n" +
        "\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"latitude\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                    Latitude:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                    <input id=\"latitude\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].latitude\">\n" +
        "                </div>\n" +
        "                <label class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                    <span class=\"pull-left\">(Example: 42.3462)</span>\n" +
        "                </label>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"longitude\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                    Longitude:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                    <input id=\"longitude\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].longitude\">\n" +
        "                </div>\n" +
        "                <label class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                    <span class=\"pull-left\">(Example: -71.0978)</span>\n" +
        "                </label>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "            <div class=\"form-group \">\n" +
        "                <label for=\"propertycontactname\" class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                    Property Contact Name:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4 \">\n" +
        "                    <input id=\"propertycontactname\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].siteContact.name\">\n" +
        "\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group \">\n" +
        "                <label for=\"phone\" class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                    Phone:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4 \">\n" +
        "                    <input id=\"phone\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].siteContact.phone\">\n" +
        "\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group \">\n" +
        "                <label for=\"fax\" class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                    Fax:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4 \">\n" +
        "                    <input id=\"fax\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].siteContact.fax\">\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"form-group \">\n" +
        "                <label for=\"email\" class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                    Email:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4 \">\n" +
        "                    <input id=\"email\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].siteContact.email\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group \">\n" +
        "                <label for=\"po\" class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                    PO #:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4 \">\n" +
        "                    <input id=\"po\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].poNumber\">\n" +
        "\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"transactiontype\" class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                    Transaction Type:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4 \">\n" +
        "                    <select id=\"transactiontype\" class=\"form-control \" data-ng-options=\"transactionType.transactionTypeGUID as transactionType.transactionTypeName for transactionType in lenderPortfolio.loadData.transactionTypes\" ng-model=\"reportInfo.locations[reportInfo.locationCount].transactionTypeGUID\">\n" +
        "                        <option value=\"\">*** Select one from the list ***</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"property\" class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                    Property #:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-3 col-md-4 \">\n" +
        "                    <input id=\"property\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].propertyNumber\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group required\" show-errors>\n" +
        "\n" +
        "                <label class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                    Report Requested:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-8 col-md-8 \">\n" +
        "                    <multiselect class=\"input-xlarge\" multiple=\"true\" ng-model=\"reportInfo.locations[reportInfo.locationCount].reports\" options=\"template as template.name for template in lenderPortfolio.loadData.templates\" required name=\"reports\"></multiselect>\n" +
        "\n" +
        "\n" +
        "                </div>\n" +
        "                \n" +
        "            </div>\n" +
        "            \n" +
        "            <div class=\"form-group\">\n" +
        "            <div class=\"col-md-offset-3 col-md-9 col-xs-12 \">\n" +
        "\n" +
        "                <button type=\"button\" class=\"btn btn-md btn-success\" ng-click=\"reportInfo.addAnotherSite()\"> Add another site</button>\n" +
        "            </div>\n" +
        "            </div>    \n" +
        "                \n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "\n" +
        "    </div>\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderPortfolioCreation/views/lenderportfolio.SelectConsultantWithFee.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderPortfolioCreation/views/lenderportfolio.SelectConsultantWithFee.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "\n" +
        "    <div>\n" +
        "        <h4 class=\"headingmain\"> Upload Spreadsheet Option - Template Selection</h4>\n" +
        "\n" +
        "        <div ng-controller=\"LenderPortfolioSelectConsultantWithFeeCtrl as selectConsultant\">\n" +
        "\n" +
        "            <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"selectConsultant.serviceResponseAlert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"selectConsultant.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                    <span aria-hidden=\"true\">&times;</span>\n" +
        "                </button>\n" +
        "                {{selectConsultant.serviceResponseText}}\n" +
        "            </div>\n" +
        "\n" +
        "            <form name=\"feeInformationForm\" class=\"form-horizontal\">\n" +
        "\n" +
        "\n" +
        "\n" +
        "                <table class=\"table table-condensed  table-bordered table-hover\">\n" +
        "\n" +
        "                    <thead>\n" +
        "                        <tr>\n" +
        "                            <th>Property #</th>\n" +
        "                            <th>Address</th>\n" +
        "                            <th>Report</th>\n" +
        "                            <th>Consultant</th>\n" +
        "                            <th>Fee</th>\n" +
        "                        </tr>\n" +
        "                    </thead>\n" +
        "                    <tbody>\n" +
        "                        <tr ng-repeat=\"report in selectConsultant.reportArr\">\n" +
        "                            <td>\n" +
        "                                {{report.name}}\n" +
        "                            </td>\n" +
        "                            <td>\n" +
        "                                {{report.address}}\n" +
        "                            </td>\n" +
        "                            <td>\n" +
        "                                {{report.reportType}}\n" +
        "                            </td>\n" +
        "                            <td>\n" +
        "                                <select class=\"form-control\" ng-model=\"report.companyID\" style=\"float:left; width: 95%;\" ng-options=\"client.companyID as client.name for client in lenderPortfolio.loadData.relatedCompanies | filter:lenderPortfolio.filterByContains('functions', 'Consultant')\"></select>\n" +
        "                                <span class=\"text-danger\" style=\"float:right;\"> * </span>\n" +
        "                            </td>\n" +
        "                            <td>\n" +
        "                                <input type=\"text\" class=\"form-control\" name=\"feeAmnt\" placeholder=\"N/A\" ng-model=\"report.fee\">\n" +
        "                            </td>\n" +
        "                        </tr>\n" +
        "\n" +
        "                    </tbody>\n" +
        "\n" +
        "                </table>\n" +
        "\n" +
        "            </form>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderPortfolioCreation/views/lenderportfolio.SelectEnvConsultant.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderPortfolioCreation/views/lenderportfolio.SelectEnvConsultant.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <div class=\"container-fluid top-margin\">\n" +
        "\n" +
        "        <!--<p class=\"alert alert-info text-16\">\n" +
        "            <b>\n" +
        "                Select one or more Environmental Vendors to bid on this project.\n" +
        "            </b>\n" +
        "        </p>-->\n" +
        "        <div ng-controller=\"LenderPortfolioSelectEnvironmentalConsultantCtrl as selectEnvConsultant\">\n" +
        "\n" +
        "            <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"selectEnvConsultant.serviceResponseAlert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"selectEnvConsultant.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                    <span aria-hidden=\"true\">&times;</span>\n" +
        "                </button>\n" +
        "                {{selectEnvConsultant.serviceResponseText}}\n" +
        "            </div>\n" +
        "\n" +
        "            <form class=\"form-horizontal\">\n" +
        "                \n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                            Environmental Vendors:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-8 col-md-8 \">\n" +
        "                            <multiselect class=\"input-xlarge\" multiple=\"true\" ng-model=\"selectEnvConsultant.bidCompanyIDs\" options=\"client.companyID as client.name for client in lenderPortfolio.loadData.relatedCompanies|filter:lenderPortfolio.filterByContains('functions', 'Consultant')\" header=\"Select one or more Environmental Consultant\" placeholder=\"Search Environmental Consultant\"></multiselect>\n" +
        "                        </div>\n" +
        "                        <span class=\"text-danger\"> * </span>\n" +
        "                    </div>\n" +
        "                \n" +
        "            </form>\n" +
        "\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderPortfolioCreation/views/lenderportfolio.UploadSites.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderPortfolioCreation/views/lenderportfolio.UploadSites.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <div>\n" +
        "        <h4 class=\"headingmain\"> Upload Site Spreadsheet</h4>\n" +
        "\n" +
        "            <p>\n" +
        "                To upload an Excel spreadsheet containing Property Information, please complete the following steps:\n" +
        "                \n" +
        "            </p>\n" +
        "            <ol>\n" +
        "                <li>Save the Excel template : <b><a href=\"app/modules/PortfolioCreation/assets/propertyTemplate.xls\">XLS</a></b> or <b><a href=\"app/modules/PortfolioCreation/assets/propertyTemplate.xlsx\">XLSX</a></b> to your computer and open it from there.</li>\n" +
        "                <li>\n" +
        "                    Fill out the spreadsheet with your site information, and save your changes.\n" +
        "                    <br> Each site must have data entered for address, city, and state/province.\n" +
        "                </li>\n" +
        "                <li>Click the \"Browse\" button below these instructions and select the file that you just saved.</li>\n" +
        "                <li>Click the \"Upload File\" button.</li>\n" +
        "            </ol>\n" +
        "            <div class=\"\" ng-controller=\"LenderPortfolioUploadPropertyCtrl as reportInfo\">\n" +
        "\n" +
        "                <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"reportInfo.serviceResponseAlert\">\n" +
        "                    <button type=\"button\" class=\"close\" ng-click=\"reportInfo.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                        <span aria-hidden=\"true\">&times;</span>\n" +
        "                    </button>\n" +
        "                    {{reportInfo.serviceResponseText}}\n" +
        "                </div>\n" +
        "\n" +
        "                <form class=\"form-horizontal\">\n" +
        "                   \n" +
        "                        <div class=\"form-group\">\n" +
        "                            <span class=\"btn btn-md btn-primary fileinput-button\" ng-class=\"{disabled: disabled}\">\n" +
        "                                <i class=\"fa fa-file-text-o\"></i> Choose File <input id=\"file-3\"\n" +
        "                                                                                     type=\"file\" data-file-input=\"files\"\n" +
        "                                                                                     ngf-select ngf-change=\"upload($files)\" ngf-multiple=\"false\" >\n" +
        "                            </span>\n" +
        "                            <!--<button type=\"button\" class=\"btn btn-md btn-primary start\" ng-click=\"attachments.Upload()\">\n" +
        "                                <span class=\"glyphicon glyphicon-upload\"></span> Upload File\n" +
        "                            </button>-->\n" +
        "                            <span class=\"AU_uploadFilename text-primary\" ng-repeat=\"file in files\">{{file.name}}</span>\n" +
        "                        </div>\n" +
        "                    \n" +
        "                    \n" +
        "                    <!--\n" +
        "                                        <div class=\"col-md-offset-3 col-md-9 col-xs-12 \" style=\"margin-top:10px; \">\n" +
        "                                            <button type=\"submit \" class=\"btn btn-md btn-success \"> Continue</button>\n" +
        "                                            <button type=\"reset \" class=\"btn btn-md btn-default \"> Cancel This Project</button>\n" +
        "\n" +
        "                                        </div>\n" +
        "                    -->\n" +
        "                </form>\n" +
        "\n" +
        "            </div>\n" +
        "       \n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderPortfolioCreation/views/lenderportfolio.UploadedSiteDetails.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderPortfolioCreation/views/lenderportfolio.UploadedSiteDetails.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "\n" +
        "    <div ng-controller=\"LenderPortfolioUploadedSiteDetailsCtrl as uploadedSiteDetails\">\n" +
        "\n" +
        "        <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"uploadedSiteDetails.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"uploadedSiteDetails.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{uploadedSiteDetails.serviceResponseText}}\n" +
        "        </div>\n" +
        "\n" +
        "        <div>\n" +
        "            \n" +
        "                <button type=\"button\" class=\"btn btn-md btn-primary\" ng-click=\"uploadedSiteDetails.addNewLocation()\">Add New Location</button>\n" +
        " \n" +
        "            <form name=\"\" class=\"form-horizontal\">\n" +
        "\n" +
        "                <div class=\"overflow-auto\">\n" +
        "\n" +
        "                    <table class=\"table table-condensed  table-bordered table-hover top-margin\">\n" +
        "\n" +
        "                        <thead>\n" +
        "                            <tr>\n" +
        "                                <th>Actions</th>\n" +
        "                                <th>Project Number</th>\n" +
        "\n" +
        "                                <th>Property #</th>\n" +
        "                                <th>Name</th>\n" +
        "                                <th>Address</th>\n" +
        "                                <th>City</th>\n" +
        "                                <th>State</th>\n" +
        "                                <th>Zip</th>\n" +
        "                                <th>Country</th>\n" +
        "                                <th>Latitude</th>\n" +
        "                                <th>Longitude</th>\n" +
        "                                <th>Contact</th>\n" +
        "                                <th>Phone</th>\n" +
        "                                <th>Fax</th>\n" +
        "                                <th>Email</th>\n" +
        "                                <th>PO #</th>\n" +
        "                            </tr>\n" +
        "                        </thead>\n" +
        "                        <tbody>\n" +
        "                            <tr ng-repeat=\"site in uploadedSiteDetails.siteDetails\">\n" +
        "                                <td>\n" +
        "                                    <div class=\"btn-group\">\n" +
        "                                        <button data-toggle=\"dropdown\" class=\"btn btn-xs dropdown-toggle\" data-original-title=\"\" title=\"\">\n" +
        "                                            Action\n" +
        "                                            <span class=\"caret\">\n" +
        "                                            </span>\n" +
        "                                        </button>\n" +
        "                                        <ul class=\"dropdown-menu pull-left\">\n" +
        "                                            <li>\n" +
        "                                                <a ng-click=\"uploadedSiteDetails.editSite(site)\"><i class=\"fa fa-pencil\"></i>&nbsp;  Edit</a>\n" +
        "                                            </li>\n" +
        "                                            <li>\n" +
        "                                                <a ng-click=\"uploadedSiteDetails.deleteSite(site)\"><i class=\"fa fa-times text-danger\"></i>&nbsp; Delete</a>\n" +
        "                                            </li>\n" +
        "                                        </ul>\n" +
        "                                    </div>\n" +
        "                                </td>\n" +
        "                                <td>{{site.projectNumber}}</td>\n" +
        "                                <td>{{site.propertyNumber}}</td>\n" +
        "                                <td>{{site.name}}</td>\n" +
        "                                <td>{{site.address1}}</td>\n" +
        "                                <td>{{site.city}}</td>\n" +
        "                                <td>{{site.state}}</td>\n" +
        "                                <td>{{site.zip}}</td>\n" +
        "                                <td>{{site.country}}</td>\n" +
        "                                <td>{{site.latitude}}</td>\n" +
        "                                <td>{{site.longitude}}</td>\n" +
        "                                <td>{{site.contact}}</td>\n" +
        "                                <td>{{site.phone}}</td>\n" +
        "                                <td>{{site.fax}}</td>\n" +
        "                                <td>{{site.email}}</td>\n" +
        "                                <td>{{site.poNumber}}</td>\n" +
        "                            </tr>\n" +
        "\n" +
        "                        </tbody>\n" +
        "\n" +
        "\n" +
        "                    </table>\n" +
        "                </div>\n" +
        "\n" +
        "            </form>\n" +
        "        </div>\n" +
        "        <div class=\"col-md-offset-4 col-md-8 col-sm-8 col-xs-12 top-margin\">\n" +
        "            <!-- <button type=\"button\" class=\"btn btn-md btn-primary \" ui-sref=\"PortfolioCreation.UploadedSitesReportSelection\">Continue</button>-->\n" +
        "            <button type=\"button\" class=\"btn btn-md btn-default \">Delete All Sites and Re-Upload</button>\n" +
        "        </div>\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderPortfolioCreation/views/lenderportfolio.UploadedSitesReportSelection.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderPortfolioCreation/views/lenderportfolio.UploadedSitesReportSelection.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "\n" +
        "    <div ng-controller=\"LenderUploadedSitesReportSelectionCtrl as reportSelection\">\n" +
        "        <h4 class=\"headingmain\"> Upload Spreadsheet Option - Template Selection</h4>\n" +
        "\n" +
        "        <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"reportSelection.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"reportSelection.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{reportSelection.serviceResponseText}}\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"\">\n" +
        "            <form name=\"feeInformationForm\" class=\"form-horizontal\">\n" +
        "\n" +
        "\n" +
        "\n" +
        "                <table class=\"table table-condensed  table-bordered table-hover\">\n" +
        "\n" +
        "                    <thead>\n" +
        "                        <tr>\n" +
        "                            <th>Address</th>\n" +
        "                            <th>Transaction Type</th>\n" +
        "                            <th>Report Requested</th>\n" +
        "                        </tr>\n" +
        "                    </thead>\n" +
        "                    <tbody>\n" +
        "                        <tr ng-repeat=\"location in reportSelection.data.locations\">\n" +
        "                            <td>\n" +
        "                                {{location.address1}}\n" +
        "                            </td>\n" +
        "                            <td>\n" +
        "                                <select class=\"form-control \" data-ng-options=\"transactionType.transactionTypeGUID as transactionType.transactionTypeName for transactionType in lenderPortfolio.loadData.transactionTypes\" ng-model=\"location.transactionTypeGUID\">\n" +
        "                                    <option value=\"\">*** Select one from the list ***</option>\n" +
        "                                </select>\n" +
        "                            </td>\n" +
        "                            <td>\n" +
        "                                <multiselect class=\"input-xlarge\" multiple=\"true\" ng-model=\"location.reports\" options=\"template as template.name for template in lenderPortfolio.loadData.templates\"></multiselect>\n" +
        "\n" +
        "                            </td>\n" +
        "                        </tr>\n" +
        "\n" +
        "                    </tbody>\n" +
        "\n" +
        "                </table>\n" +
        "\n" +
        "            </form>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderPortfolioCreation/views/lenderportfolio.successmessage.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderPortfolioCreation/views/lenderportfolio.successmessage.html",
        "<!doctype html>\n" +
        "<html>\n" +
        "<head>\n" +
        "    <meta charset=\"utf-8\">\n" +
        "    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n" +
        "\n" +
        "\n" +
        "</head>\n" +
        "<body>\n" +
        "    \n" +
        "    <div class=\"col-md-9 col-sm-9 border-1\">\n" +
        "    <div class=\"panel panel-default top-margin\">\n" +
        "        <div class=\"panel-body bg-gray\">\n" +
        "            <ul class=\"nav nav-pills nav-stacked\">\n" +
        "                <h4>The Project has been successfully setup. Please select one of the following links to: </h4>\n" +
        "                <li><a href=\"#\"> <i class=\"fa fa-home btn btn-md bg-orange-light icon-16\"></i> &nbsp; Return to Home Page</a></li>\n" +
        "                <li><a href=\"#\"> <i class=\"fa fa-book btn btn-md bg-orange-light icon-16\"></i> &nbsp; Setup Another Project</a></li>\n" +
        "                <li><a href=\"#\"><i class=\"fa fa-user btn btn-md bg-orange-light icon-16\"></i>  &nbsp; Grant Access </a></li>\n" +
        "                <li><a href=\"#\">   <i class=\"fa fa-tachometer btn btn-md bg-orange-light icon-16\"></i>  &nbsp; View Project Dashboard  </a></li>\n" +
        "                <div class=\"text-center\">\n" +
        "                    <button type=\"button\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-log-out\"></span>&nbsp;&nbsp;Exit Parcel </button>\n" +
        "                </div>\n" +
        "            </ul>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "   \n" +
        "</body>\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_additionalPropertyInfo.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_additionalPropertyInfo.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "    <style type=\"text/css\">\n" +
        "   \n" +
        "    </style>\n" +
        "\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <a class=\"collapsed pointer\" data-toggle=\"collapse\" data-target=\"#collapseAddPropInfo\">Additional Property Information </a>\n" +
        "        </h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapseAddPropInfo\" class=\"panel-collapse collapse\">\n" +
        "        <div class=\"panel-body\" ng-controller=\"LenderAddPropertyInfoCtrl as additionalPropertyInfo\">\n" +
        "        \n" +
        "            <div class=\"form-horizontal\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"propType\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">Property Type:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <select class=\"form-control\" id=\"propType\" type=\"select\" name=\"propTypes\" ng-model=\"main.submitData.property.propertyType\"\n" +
        "                                data-ng-options=\"propertyType.propertyTypeGUID as propertyType.propertyTypeName for propertyType in main.loadData.propertyTypes\">\n" +
        "                            <option value=\"\">Select Property</option>\n" +
        "                            <option value=\"Other...\">Other...</option>\n" +
        "                        </select>\n" +
        "\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\" ng-show=\"additionalPropertyInfo.property.propertyType == 'Other...'\">\n" +
        "\n" +
        "                    <div class=\"col-md-offset-2 col-xs-12 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"otherPropType\" ng-model=\"main.submitData.property.propertyType\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"county\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">County:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"county\" ng-model=\"main.submitData.property.county\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"latitude\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                        Latitude:\n" +
        "                        <a ng-click=\"additionalPropertyInfo.showLatLonHelp()\" title=\"When to enter the latitude and longitude of your site.\" style=\"cursor: pointer; cursor: hand;\"> <i class=\" text-blue fa fa-question-circle\"></i></a>\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"latitude\" ng-model=\"main.submitData.property.latitude\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"longitude\" class=\"control-label  col-md-2 col-sm-3 col-xs-12\">\n" +
        "                        Longitude:\n" +
        "                        <a ng-click=\"additionalPropertyInfo.showLatLonHelp()\" title=\"When to enter the latitude and longitude of your site.\" style=\"cursor: pointer; cursor: hand;\"> <i class=\" text-blue fa fa-question-circle\"></i></a>\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"longitude\" ng-model=\"main.submitData.property.longitude\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"acerage\" class=\"control-label  col-md-2 col-sm-3 col-xs-12\">Acreage:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"acerage\" ng-model=\"main.submitData.property.acreage\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"buildings\" class=\"control-label  col-md-2 col-sm-3 col-xs-12\">Number of Buildings:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"buildings\" ng-model=\"main.submitData.property.numBuildings\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"transactionType\" class=\"control-label  col-md-2 col-sm-3 col-xs-12\">Transaction Type:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <select class=\"form-control\" id=\"transactionType\" type=\"select\" name=\"transactionTypes\" ng-model=\"main.submitData.property.transactionType\"\n" +
        "                                data-ng-options=\"transactionType.transactionTypeGUID as transactionType.transactionTypeName for transactionType in main.loadData.transactionTypes\">\n" +
        "                            <option value=\"\">Select Transaction Type</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "      \n" +
        "        </div>\n" +
        "    </div>\n" +
        " \n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_attachments.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_attachments.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "    <style type=\"text/css\">\n" +
        "\n" +
        "\n" +
        "    </style>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <a class=\" collapsed pointer\" data-toggle=\"collapse\" data-target=\"#collapseAttachment\">Attachments</a>\n" +
        "		</h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapseAttachment\" class=\"panel-collapse collapse\" ng-controller=\"LenderAttachmentCtrl as attachments\">\n" +
        "        <div id=\"fileupload\" class=\" panel-body\">\n" +
        "\n" +
        "            <div class=\"fileupload-buttonbar AU_uploadbox \">\n" +
        "                <div class=\"container-fluid \">\n" +
        "                    <div class=\"form-group row\">\n" +
        "\n" +
        "                        <!-- <button class=\"btn btn-md btn-primary fileinput-button\" ng-class=\"{disabled: disabled}\"><i class=\"fa fa-file-text-o\"></i> Attach\n" +
        "                            <input id=\"file-3\" type=\"file\" data-file-input=\"files\" ngf-select ngf-change=\"upload($files)\" ngf-multiple=\"true\" />\n" +
        "                        </button>-->\n" +
        "\n" +
        "\n" +
        "                        <div class=\"btn btn-md btn-primary fileinput-button\" ng-class=\"{disabled: disabled}\">\n" +
        "                            <i class=\"fa fa-file-text-o\"></i> Attach\n" +
        "                            <input id=\"file-3\" type=\"file\" data-file-input=\"files\" ngf-select ngf-change=\"upload($files)\" ngf-multiple=\"true\">\n" +
        "                        </div>\n" +
        "\n" +
        "                        <!--<button type=\"button\" class=\"btn btn-md btn-primary start\" ng-click=\"attachments.Upload()\">\n" +
        "                            <span class=\"glyphicon glyphicon-upload\"></span> Upload\n" +
        "                        </button>-->\n" +
        "                        <span class=\"AU_uploadFilename text-primary\" ng-repeat=\"file in files\">{{file.name}}</span>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <!-- The global file processing state -->\n" +
        "                <span class=\"fileupload-process\"></span>\n" +
        "                <!-- The global progress state -->\n" +
        "                <div class=\"table-responsive\">\n" +
        "                    <table class=\"table table-condensed  table-bordered table-hover \" ng-hide=\"attachments.attachmentFiles.length == 0\">\n" +
        "                        <thead>\n" +
        "                            <tr>\n" +
        "                                <th>Action</th>\n" +
        "                                <th>File Name</th>\n" +
        "\n" +
        "                                <th>File Size</th>\n" +
        "\n" +
        "                            </tr>\n" +
        "                        </thead>\n" +
        "                        <tbody>\n" +
        "                            <tr ng-repeat=\"file in attachments.attachmentFiles\">\n" +
        "\n" +
        "                                <td><a class=\"pointer\" ng-click=\"attachments.RemoveAttachment(file.name);\">Remove</a></td>\n" +
        "                                <td>{{file.name}}</td>\n" +
        "                                <td>{{file.size}} Bytes</td>\n" +
        "                            </tr>\n" +
        "\n" +
        "                        </tbody>\n" +
        "\n" +
        "                    </table>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <!--<div ng-hide=\"attachments.attachmentFiles.length == 0\">\n" +
        "\n" +
        "                        <div class=\"alert alert-success\">Files Uploaded Successfully</div>\n" +
        "                    </div>-->\n" +
        "\n" +
        "                    <div ng-show=\"attachments.isUploadErrorMsg\">\n" +
        "                        <div class=\"alert alert-danger\">{{attachments.UploadErrorMsg}}</div>\n" +
        "\n" +
        "                    </div>\n" +
        "                    <div ng-show=\"attachments.isUploadErrorMsg\">\n" +
        "\n" +
        "                        <div class=\"alert alert-danger\">{{attachments.IncorrectFormat}}</div>\n" +
        "                    </div>\n" +
        "                    <div ng-show=\"attachments.isUploadErrorMsg\">\n" +
        "                        <span class=\"Error_Red\">\n" +
        "                                <a ng-click=\"ShowUploadStatus()\"\n" +
        "                                   ng-show=\"popuplink\">Click here for more details</a>\n" +
        "                            </span>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_emailContacts.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_emailContacts.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "    <style type=\"text/css\">\n" +
        "     \n" +
        "    </style>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body> \n" +
        "        <!-- ng-controller=\"EmailContactsCtrl as emailContacts\" -->\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"emailContacts.Cancel()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Select Contacts</h4>\n" +
        "        </div> \n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "                <div class=\" tabbable tabs-below\">\n" +
        "                    <div role=\"tabpanel\" class=\"tab-content \">\n" +
        "                        <div id=\"divFindContact container-fluid\">\n" +
        "                            <div class=\"form-group row\">\n" +
        "                                <div class=\"col-md-6 col-sm-6 top-margin\">\n" +
        "                                    <input type=\"text\" class=\"form-control\" placeholder=\"Enter text to search for contacts: \" ng-model=\"emailContacts.searchtext\">\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                            <div class=\"table-responsive\">\n" +
        "                            <table class=\"table table-condensed  table-bordered table-hover\">\n" +
        "\n" +
        "                                <thead>\n" +
        "                                    <tr>\n" +
        "                                        <th>To</th>\n" +
        "                                        <th>CC</th>\n" +
        "                                        <th>Name</th>\n" +
        "                                        <th>Email</th>\n" +
        "                                        <th>Company</th>\n" +
        "                                    </tr>\n" +
        "                                </thead>\n" +
        "                                <tbody>\n" +
        "\n" +
        "                                    <tr ng-repeat=\"contact in emailContacts.filtered = (emailContacts.ContactArr | filter: emailContacts.searchtext) | filter : emailContacts.paginate\">\n" +
        "                                        <td>\n" +
        "                                            <input type=\"checkbox\" id=\"toContact\" name=\"toContact\" ng-model=\"contact.toSelected\" class=\"ng-pristine ng-valid\">\n" +
        "                                        </td>\n" +
        "                                        <td>\n" +
        "                                            <input type=\"checkbox\" id=\"ccContact\" name=\"ccContact\" ng-model=\"contact.ccSelected\" class=\"ng-pristine ng-valid\">\n" +
        "                                        </td>\n" +
        "                                        <td>\n" +
        "                                            {{contact.firstName}} {{contact.lastName}}\n" +
        "                                        </td>\n" +
        "                                        <td>\n" +
        "                                            {{contact.email}}\n" +
        "                                        </td>\n" +
        "                                        <td>\n" +
        "                                            {{contact.companyName}}\n" +
        "                                        </td>\n" +
        "                                    </tr>\n" +
        "\n" +
        "                                </tbody>\n" +
        "\n" +
        "                            </table>\n" +
        "                            </div>\n" +
        "                            <pagination total-items=\"emailContacts.totalItems\" ng-model=\"emailContacts.currentPage\" max-size=\"5\" boundary-links=\"true\" items-per-page=\"emailContacts.numPerPage\" class=\"pagination-sm\">\n" +
        "                            </pagination>\n" +
        "\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <button class=\"btn btn-primary\" ng-click=\"emailContacts.DoneSelection()\">Done</button>\n" +
        "                <button class=\"btn btn-default\" ng-click=\"emailContacts.Cancel()\">Cancel</button>\n" +
        "            </div> \n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_emailNotification.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_emailNotification.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "\n" +
        "    <style type=\"text/css\">\n" +
        "  \n" +
        "    </style>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <a class=\"collapsed pointer\" data-toggle=\"collapse\" data-target=\"#collapseEmailNotification\">Email Notification</a>\n" +
        "        </h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapseEmailNotification\" class=\"panel-collapse collapse \">\n" +
        "\n" +
        "<div class=\"panel-body form-horizontal\"  ng-controller=\"LenderEmailNotificationCtrl as emailNotification\">\n" +
        "       \n" +
        "            \n" +
        "                <div class=\"form-group\">\n" +
        "                    <div class=\"checkbox col-md-12 col-sm-12 col-xs-12\">\n" +
        "                        <label>\n" +
        "                            <input type=\"checkbox\" id=\"sendEmail\" name=\"mail\" ng-change=\"emailNotification.sendNotification()\" ng-model=\"main.submitData.notification.sendEmailNotification\" /><span>\n" +
        "                                Send Email Notification to Other Users\n" +
        "                            <a ng-click=\"emailNotification.ShowEmailHelp()\" title=\"The basics of email notification\" class=\"pointer\">\n" +
        "                                    <i class=\" text-blue fa fa-question-circle\"></i>\n" +
        "                                </a>\n" +
        "                            </span>\n" +
        "                        </label>\n" +
        "                    </div>\n" +
        "                </div> \n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"from\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">From:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <p>{{emailNotification.emailNotificationObj.from.name}}</p>\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div id=\"divEmailTo\" class=\"form-group\" show-errors>\n" +
        "                    <label for=\"to\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">To:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"to\" ng-disabled=\"!main.submitData.notification.sendEmailNotification\" ng-model=\"emailNotification.emailNotificationObj.to.display\" ng-bind=\"main.submitData.notification.emailTo = emailNotification.emailNotificationObj.to.display;\" name=\"To\" email-validator />\n" +
        "                        <a class=\"pointer\" ng-click=\"!main.submitData.notification.sendEmailNotification || emailNotification.ShowFindContact()\"\n" +
        "                           ng-class=\"{disabled: !main.submitData.notification.sendEmailNotification, enabled: main.submitData.notification.sendEmailNotification}\">Find Contact</a>\n" +
        "                    </div>\n" +
        "                    <p ng-if=\"emailNotificationForm.To.$error.pattern\">The email address is invalid</p>\n" +
        "                </div>\n" +
        "                <div id=\"divEmailCC\" class=\"form-group\" show-errors>\n" +
        "                    <label for=\"cc\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">CC:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"cc\" ng-disabled=\"!main.submitData.notification.sendEmailNotification\" ng-model=\"emailNotification.emailNotificationObj.cc.display\" ng-bind=\"main.submitData.notification.emailCC = emailNotification.emailNotificationObj.cc.display;\" name=\"CC\" email-validator/>\n" +
        "                    </div>\n" +
        "                    <p ng-if=\"emailNotificationForm.CC.$error.pattern\">The email address is invalid</p>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"message\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">Message:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <textarea class=\"form-control\" id=\"message\" ng-disabled=\"!main.submitData.notification.sendEmailNotification\"\n" +
        "                                  ng-model=\"main.submitData.notification.emailBody\"></textarea>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "             \n" +
        "    </div> \n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_findContact.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_findContact.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "    <head>\n" +
        "    <title></title>\n" +
        "    <style type=\"text/css\"></style>\n" +
        "\n" +
        "    </head>\n" +
        "    <body>\n" +
        "<form name=\"findContactForm\" class=\"form-horizontal\">\n" +
        "<div class=\"modal-header\">\n" +
        "      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"findContact.CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "      <h4 class=\"modal-title\">Find Contacts</h4>\n" +
        "    </div>\n" +
        "<form name=\"ContactListForm\" novalidate class=\"form-horizontal\">\n" +
        "<div class=\"modal-body \">\n" +
        "<div class=\" tabbable tabs-below\" ng-show=\"!findContact.editSelected\">\n" +
        "<div class=\"bs-example\">\n" +
        "      <ul class=\" nav nav-tabs\">\n" +
        "    <li ng-class=\"{active: selectedTab == 1}\"> <a class=\"pointer\" ng-click=\"findContact.FindContactClick()\">Find Contact</a> </li>\n" +
        "    <li ng-class=\"{active: selectedTab == 2}\"> <a class=\"pointer\" ng-click=\"findContact.AddContactClick()\">Add Contact</a> </li>\n" +
        "  </ul>\n" +
        "    </div>\n" +
        "<div role=\"tabpanel\" class=\"tab-content \" ng-show=\"selectedTab == 1\">\n" +
        "      <div id=\"divFindContact\">\n" +
        "    <div class=\"row\">\n" +
        "          <div class=\"col-md-6 col-sm-6 form-group\">\n" +
        "        <input type=\"text\" class=\"form-control\" placeholder=\"Enter text to search for contacts: \" ng-model=\"findContact.searchterm\">\n" +
        "      </div>\n" +
        "        </div>\n" +
        "    <div class=\"table-responsive\">\n" +
        "          <table class=\"table table-condensed  table-bordered table-hover \">\n" +
        "        <thead>\n" +
        "              <tr>\n" +
        "            <th>Action</th>\n" +
        "            <th>First Name</th>\n" +
        "            <th>Last Name</th>\n" +
        "            <th>Company</th>\n" +
        "            <th>Email Address</th>\n" +
        "            <th>Phone #</th>\n" +
        "          </tr>\n" +
        "            </thead>\n" +
        "        <tbody>\n" +
        "              <tr ng-repeat=\"contact in findContact.filtered = (findContact.CompanyContactsArr | filter: findContact.searchterm) | filter : findContact.paginate\">\n" +
        "            <td><a class=\"pointer\" ng-click=\"findContact.EditContact(contact)\">Edit</a></td>\n" +
        "            <td><a class=\"pointer\" ng-click=\"findContact.ContactSelected(contact)\">{{contact.firstName}}</a></td>\n" +
        "            <td> {{contact.lastName}} </td>\n" +
        "            <td> {{contact.companyName}} </td>\n" +
        "            <td> {{contact.email}} </td>\n" +
        "            <td> {{contact.phone}} </td>\n" +
        "          </tr>\n" +
        "            </tbody>\n" +
        "      </table>\n" +
        "        </div>\n" +
        "    <pagination total-items=\"findContact.totalItems\" ng-model=\"findContact.currentPage\"\n" +
        "                                        max-size=\"5\" boundary-links=\"true\"\n" +
        "                                        items-per-page=\"findContact.numPerPage\" class=\"pagination-sm\"> </pagination>\n" +
        "  </div>\n" +
        "    </div>\n" +
        "<div role=\"tabpanel\" class=\"tab-content border-right\" ng-show=\"selectedTab == 2\">\n" +
        "      <div id=\"divAddContact\">\n" +
        "    <div class=\"container-fluid\">\n" +
        "          <div class=\"row\">\n" +
        "        <div class=\"form-group col-md-6 col-sm-6 col-xs-12\" show-errors>\n" +
        "              <label for=\"exampleInputFirstName\">First Name</label>\n" +
        "              <input type=\"text\" class=\"form-control\" id=\"firstName\"\n" +
        "                                           ng-model=\"findContact.newContact.firstName\" name=\"firstName\" placeholder=\"First Name\" required>\n" +
        "            </div>\n" +
        "        <div class=\"form-group  col-md-6 col-sm-6 col-xs-12\" show-errors>\n" +
        "              <label for=\"exampleInputLastName\">Last Name</label>\n" +
        "              <input type=\"text\" class=\"form-control\" id=\"lastName\"\n" +
        "                                           ng-model=\"findContact.newContact.lastName\" name=\"lastName\" placeholder=\"Last Name\" required>\n" +
        "            </div>\n" +
        "      </div>\n" +
        "          <div class=\"row\">\n" +
        "        <div class=\"form-group  col-md-6 col-sm-6 col-xs-12\">\n" +
        "              <label for=\"exampleInputCompanyName\">Company Name</label>\n" +
        "              <input type=\"text\" class=\"form-control\" name=\"CompanyName\" placeholder=\"Company Name\" ng-model=\"findContact.newContact.companyName\">\n" +
        "            </div>\n" +
        "        <div class=\"form-group  col-md-6 col-sm-6 col-xs-12\">\n" +
        "              <label for=\"exampleInputAddress\">Address</label>\n" +
        "              <input type=\"text\" class=\"form-control\" name=\"Address\" placeholder=\"Address\" ng-model=\"findContact.newContact.address\">\n" +
        "            </div>\n" +
        "      </div>\n" +
        "          <div class=\"row\">\n" +
        "        <div class=\"form-group  col-md-6 col-sm-6 col-xs-12\">\n" +
        "              <label for=\"exampleInputCity\">City</label>\n" +
        "              <input type=\"text\" class=\"form-control\" name=\"City\" placeholder=\"City\" ng-model=\"findContact.newContact.city\">\n" +
        "            </div>\n" +
        "        <div class=\"form-group  col-md-6 col-sm-6 col-xs-12\">\n" +
        "              <label for=\"exampleInputState\">State</label>\n" +
        "              <input type=\"text\" class=\"form-control\" name=\"State\" placeholder=\"State\" ng-model=\"findContact.newContact.state\">\n" +
        "            </div>\n" +
        "      </div>\n" +
        "          <div class=\"row\">\n" +
        "        <div class=\"form-group  col-md-6 col-sm-6 col-xs-12\">\n" +
        "              <label for=\"exampleInputZipCode\">Zip Code</label>\n" +
        "              <input type=\"text\" class=\"form-control\" name=\"ZipCode\" placeholder=\"Zip Code\" ng-model=\"findContact.newContact.zipCode\">\n" +
        "            </div>\n" +
        "        <div class=\"form-group  col-md-6 col-sm-6 col-xs-12\">\n" +
        "              <label for=\"exampleInputPhone\">Phone</label>\n" +
        "              <input type=\"text\" class=\"form-control\" name=\"Phone\" placeholder=\"Phone\" ng-model=\"findContact.newContact.phone\">\n" +
        "            </div>\n" +
        "      </div>\n" +
        "          <div class=\"row\">\n" +
        "        <div class=\"form-group  col-md-6 col-sm-6 col-xs-12\">\n" +
        "              <label for=\"exampleInputFax\">Fax</label>\n" +
        "              <input type=\"text\" class=\"form-control\" name=\"Fax\" placeholder=\"Fax\" ng-model=\"findContact.newContact.fax\">\n" +
        "            </div>\n" +
        "        <div class=\"form-group  col-md-6 col-sm-6 col-xs-12\">\n" +
        "              <label for=\"exampleInputEmail\">Email</label>\n" +
        "              <input type=\"text\" class=\"form-control\" name=\"Email\" placeholder=\"Email\" ng-model=\"findContact.newContact.email\">\n" +
        "            </div>\n" +
        "      </div>\n" +
        "          <div class=\"row\">\n" +
        "        <div class=\"form-group  col-md-6 col-sm-6 col-xs-12\">\n" +
        "              <button type=\"submit\" class=\"btn btn-primary\" ng-click=\"findContact.SubmitContact()\">Submit Changes </button>\n" +
        "              <button type=\"reset\" class=\"btn btn-default\" ng-click=\"findContact.Reset()\">Reset </button>\n" +
        "            </div>\n" +
        "      </div>\n" +
        "        </div>\n" +
        "  </div>\n" +
        "    </div>\n" +
        "\n" +
        "<!-- edit contact -->\n" +
        "<div class=\" tabbable tabs-below\" ng-show=\"findContact.editSelected\">\n" +
        "\n" +
        "<!-- tab layout -->\n" +
        "<div class=\"bs-example\">\n" +
        "      <ul class=\" nav nav-tabs\">\n" +
        "    <li ng-class=\"{active: true}\"> <a class=\"pointer\">Edit Contact</a> </li>\n" +
        "  </ul>\n" +
        "    </div>\n" +
        "<!-- tab layout end --> \n" +
        "<!-- tab content -->\n" +
        "<div role=\"tabpanel\" class=\"tab-content border-right\">\n" +
        "<div id=\"divEditContact\">\n" +
        " \n" +
        "      <div class=\"container-fluid\">\n" +
        "    <div class=\"row\">\n" +
        "          <div class=\"form-group col-md-6 col-sm-6 col-xs-12\">\n" +
        "        <label for=\"exampleInputFirstName\">First Name</label>\n" +
        "        <input type=\"text\" class=\"form-control\" id=\"firstName\"\n" +
        "                                           ng-model=\"findContact.editedContact.firstName\" name=\"firstName\" placeholder=\"First Name\" required>\n" +
        "      </div>\n" +
        "          <div class=\"form-group col-md-6 col-sm-6 col-xs-12\">\n" +
        "        <label for=\"exampleInputLastName\">Last Name</label>\n" +
        "        <input type=\"text\" class=\"form-control\" id=\"lastName\"\n" +
        "                                           ng-model=\"findContact.editedContact.lastName\" name=\"lastName\" placeholder=\"Last Name\" required>\n" +
        "      </div>\n" +
        "        </div>\n" +
        "    <div class=\"row\">\n" +
        "          <div class=\"form-group col-md-6 col-sm-6 col-xs-12\">\n" +
        "        <label for=\"exampleInputCompanyName\">Company Name</label>\n" +
        "        <input type=\"text\" class=\"form-control\" name=\"CompanyName\" placeholder=\"Company Name\" ng-model=\"findContact.editedContact.companyName\">\n" +
        "      </div>\n" +
        "          <div class=\"form-group col-md-6 col-sm-6 col-xs-12\">\n" +
        "        <label for=\"exampleInputAddress\">Address</label>\n" +
        "        <input type=\"text\" class=\"form-control\" name=\"Address\" placeholder=\"Address\" ng-model=\"findContact.editedContact.address\">\n" +
        "      </div>\n" +
        "        </div>\n" +
        "    <div class=\"row\">\n" +
        "          <div class=\"form-group col-md-6 col-sm-6 col-xs-12\">\n" +
        "        <label for=\"exampleInputCity\">City</label>\n" +
        "        <input type=\"text\" class=\"form-control\" name=\"City\" placeholder=\"City\" ng-model=\"findContact.editedContact.city\">\n" +
        "      </div>\n" +
        "          <div class=\"form-group col-md-6 col-sm-6 col-xs-12\">\n" +
        "        <label for=\"exampleInputState\">State</label>\n" +
        "        <input type=\"text\" class=\"form-control\" name=\"State\" placeholder=\"State\" ng-model=\"findContact.editedContact.state\">\n" +
        "      </div>\n" +
        "        </div>\n" +
        "    <div class=\"row\">\n" +
        "          <div class=\"top-margin col-md-6 col-sm-6 col-xs-12\">\n" +
        "        <label for=\"exampleInputZipCode\">Zip Code</label>\n" +
        "        <input type=\"text\" class=\"form-control\" name=\"ZipCode\" placeholder=\"Zip Code\" ng-model=\"findContact.editedContact.zipCode\">\n" +
        "      </div>\n" +
        "          <div class=\"form-group col-md-6 col-sm-6 col-xs-12\">\n" +
        "        <label for=\"exampleInputPhone\">Phone</label>\n" +
        "        <input type=\"text\" class=\"form-control\" name=\"Phone\" placeholder=\"Phone\" ng-model=\"findContact.editedContact.phone\">\n" +
        "      </div>\n" +
        "        </div>\n" +
        "    <div class=\"row\">\n" +
        "          <div class=\"form-group col-md-6 col-sm-6 col-xs-12\">\n" +
        "        <label for=\"exampleInputFax\">Fax</label>\n" +
        "        <input type=\"text\" class=\"form-control\" name=\"Fax\" placeholder=\"Fax\" ng-model=\"findContact.editedContact.fax\">\n" +
        "      </div>\n" +
        "          <div class=\"form-group col-md-6 col-sm-6 col-xs-12\">\n" +
        "        <label for=\"exampleInputEmail\">Email</label>\n" +
        "        <input type=\"text\" class=\"form-control\" name=\"Email\" placeholder=\"Email\" ng-model=\"findContact.editedContact.email\">\n" +
        "      </div>\n" +
        "        </div>\n" +
        "    <div class=\"row\">\n" +
        "          <div class=\"form-group col-md-6 col-sm-6 col-xs-12\">\n" +
        "        <button type=\"submit\" class=\"btn btn-primary\" ng-click=\"findContact.SubmitEdit()\">Submit Changes </button>\n" +
        "        <button type=\"button\" class=\"btn btn-default\" ng-click=\"findContact.ResetEditChanges()\">Reset </button>\n" +
        "        <button type=\"button\" class=\"btn btn-default\" ng-click=\"findContact.CancelEdit()\">Cancel Edit </button>\n" +
        "      </div>\n" +
        "        </div>\n" +
        "  </div>\n" +
        "      </div>\n" +
        "      <!-- tab content end -->\n" +
        "      \n" +
        "      </div>\n" +
        "      <!-- edit contact end -->\n" +
        "      \n" +
        "      </div>\n" +
        "      <div class=\"modal-footer\">\n" +
        "    <button class=\"btn btn-default\" ng-click=\"findContact.CancelDelete()\">Cancel</button>\n" +
        "  </div>\n" +
        " \n" +
        "</body>\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_form.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_form.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "    <style>\n" +
        "        \n" +
        "    </style>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <div class=\"container-fluid\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "		<div class=\"panel-body\">\n" +
        "        <h2 class=\"page-header\">New Single Site Project </h2>\n" +
        "        <div class=\"alert alert-info\"><strong>Use this page to create a new single-site project. <br> If your project contains multiple sites, you can set them up under a single portfolio using the <a href=\"#\" ui-sref=\"PortfolioCreation.ProjectInformation\" tabindex=\"-1\">New Portfolio</a>.</strong></div>\n" +
        "        <div class=\"alert\" ng-class=\"main.msgType\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"main.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"main.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{main.serviceResponseText}}\n" +
        "        </div>\n" +
        "    \n" +
        "        <form name=\"userForm\">\n" +
        "            <div class=\"panel-group\" id=\"accordion\">\n" +
        "\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/LenderProjectCreation/views/lender_projectInfo.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/LenderProjectCreation/views/lender_mortgageBanker.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/LenderProjectCreation/views/lender_propertyInfo.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/LenderProjectCreation/views/lender_reportSelection.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/LenderProjectCreation/views/lender_additionalPropertyInfo.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/LenderProjectCreation/views/lender_siteContactInfo.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/LenderProjectCreation/views/lender_grantAccessToUsers.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/LenderProjectCreation/views/lender_attachments.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/LenderProjectCreation/views/lender_emailNotification.html'\"></div>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"text-center form-group\" ng-show=\"main.lastDivLoaded\">\n" +
        "			 <button class=\"btn btn-md btn-default btn-link\" ng-click=\"main.cancelCreateProject()\">Cancel and Return Home\n" +
        "                </button>\n" +
        "                <button class=\"btn btn-md btn-primary\" ng-click=\"main.CreateProject(userForm)\">Create Project</button>\n" +
        "               \n" +
        "            </div> \n" +
        "        </form>\n" +
        "		</div>\n" +
        "		</div>\n" +
        "    </div>\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_grantAccessToUsers.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_grantAccessToUsers.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "    <style type=\"text/css\">\n" +
        "   \n" +
        "    </style>\n" +
        "\n" +
        "</head>\n" +
        "<body>\n" +
        "\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <a class=\"collapsed pointer\" data-toggle=\"collapse\" data-target=\"#collapseGrantAccess\">Grant Access to Other Users</a>\n" +
        "        </h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapseGrantAccess\"\n" +
        "         class=\"panel-collapse collapse\" ng-controller=\"LenderGrantAccessCtrl as grantAccess\">\n" +
        " \n" +
        "            <div class=\"panel-body\">\n" +
        "            <div class=\"form-horizontal\">\n" +
        "            <div class=\"form-group\" >\n" +
        "                <div class=\"col-md-12 col-sm-12 col-xs-12\">\n" +
        "                <label>\n" +
        "                    Grant Access to:\n" +
        "                </label>\n" +
        "                <a ng-click=\"grantAccess.ShowAccessHelp()\" title=\"How you can control access to your reports ?\"  class=\"pointer\">\n" +
        "                    <i class=\" text-blue fa fa-question-circle\"></i>\n" +
        "                </a>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group \">\n" +
        "                <div class=\" col-md-2 col-sm-3 col-xs-12\">\n" +
        "                    <div class=\"checkbox\">\n" +
        "                        <label>\n" +
        "                            <input type=\"checkbox\" id=\"chkOffices\" name=\"chkOffices\"\n" +
        "                                   checked=\"checked\" disabled=\"disabled\" /><span>\n" +
        "                                Your\n" +
        "                                Organization:\n" +
        "                            </span>\n" +
        "                        </label>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <select class=\"form-control\" id=\"drpdownOffices\" type=\"select\"\n" +
        "                            name=\"drpdownOffices\" ng-model=\"(main.submitData.accessCollector['organization'] = main.submitData.accessCollector['organization'] || { selected: true }).val\"\n" +
        "                            data-ng-options=\"organization as organization.name for organization in main.loadData.accessTo.organizationOptions\">\n" +
        "                        <option value=\"\">Select Organization</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        \n" +
        "            <div class=\"form-group \">\n" +
        "                <div class=\"col-md-2 col-md-3 col-xs-12\">\n" +
        "                    <div class=\"checkbox\">\n" +
        "                        <label>\n" +
        "                            <input type=\"checkbox\" id=\"chkboxTeams\" name=\"chkTeams\"\n" +
        "                                   ng-model=\"(main.submitData.accessCollector['client'] = main.submitData.accessCollector['client'] || {}).selected\" /><span>\n" +
        "                                Your\n" +
        "                                Client:\n" +
        "                            </span>\n" +
        "                        </label>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <select class=\"form-control\" id=\"drpdownTeams\" type=\"select\"\n" +
        "                            name=\"drpdownTeams\" ng-disabled=\"!main.submitData.accessCollector['client'].selected\"\n" +
        "                            ng-model=\"main.submitData.accessCollector['client'].val\"\n" +
        "                            data-ng-options=\"client as client.name for client in main.loadData.accessTo.clientOptions\">\n" +
        "                        <option value=\"\">Select Client</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "           \n" +
        "            <div class=\"form-group\">\n" +
        "                <div class=\" col-md-2 col-md-3 col-xs-12\">\n" +
        "                    <div class=\"checkbox\">\n" +
        "                        <label>\n" +
        "                            <input type=\"checkbox\" id=\"chkboxRelatedCompanies\" name=\"chkRelatedCompanies\"\n" +
        "                                   ng-model=\"(main.submitData.accessCollector['third-party'] = main.submitData.accessCollector['third-party'] || {}).selected\" /><span>\n" +
        "                                Your A Third Party:\n" +
        "                            </span>\n" +
        "                        </label>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <select class=\"form-control\" id=\"drpdownClient\" type=\"select\"\n" +
        "                            name=\"drpdownClient\" ng-disabled=\"!main.submitData.accessCollector['third-party'].selected\"\n" +
        "                            ng-model=\"main.submitData.accessCollector['third-party'].val\"\n" +
        "                            data-ng-options=\"option as option.name for option in main.loadData.accessTo.thirdPartyOptions\">\n" +
        "                        <option value=\"\">Select Third Party</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            </div> \n" +
        "            </div>  \n" +
        "    </div> \n" +
        "</body>\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_helpAccess.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_helpAccess.html",
        "<div class=\"modal-header dividerline\">\n" +
        "    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <h4 class=\"modal-title\">PARCEL - Granting Access</h4>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"modal-body\">\n" +
        "    <h5>Granting Access to Other PARCEL Users</h5>\n" +
        "    <p>\n" +
        "        You have the option of letting other PARCEL users see the project you are creating.\n" +
        "\n" +
        "        This can include other members of your company, as well as users from other companies you work with. The only requirement is that they have an account on PARCEL.\n" +
        "    </p>\n" +
        "    <p>\n" +
        "        In two cases, access is automatically granted to other users:\n" +
        "    </p>\n" +
        "    <ol>\n" +
        "        <li>If you are using PARCEL to task a consultant with work, they will automatically receive access to the report.</li>\n" +
        "        <li>Your company can request that some users have access to all reports created within their company.</li>\n" +
        "    </ol>\n" +
        "        If you are a consultant who prefers that your client does not have access until the project is complete, you should not grant access at this time. When the report is ready, you can use the 'Grant Access' screen to let them see your report.\n" +
        "\n" +
        "</div>\n" +
        "         \n" +
        "<div class=\"modal-footer \">\n" +
        "    <button class=\"btn btn-default\" ng-click=\"CancelDelete()\">OK</button>\n" +
        "\n" +
        "</div>\n" +
        "\n" +
        " ");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_helpEmailConsultant.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_helpEmailConsultant.html",
        "<div class=\"modal-header\">\n" +
        "     <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <h4 class=\"modal-title\">PARCEL - Email Notification</h4> \n" +
        "</div>\n" +
        "\n" +
        "<div class=\"modal-body \">        \n" +
        "    <p> Every time you create a project on PARCEL, a confirmation email will be sent to the email address listed for your account.\n" +
        "    </p>\n" +
        "    <p> The email will include a PDF file summarizing the information you enter on this page.\n" +
        "    </p>\n" +
        "    <p> If you want to notify other users of the project's creation, enter their email addresses below separated by commas or semicolons. Note that sending the email does not necessarily <a ng-click=\"ShowAccessHelp()\">grant them access</a> to the project.\n" +
        "    </p>\n" +
        "     You can use the 'Find Contact' link to search for other PARCEL users or to store information for frequent contacts.\n" +
        "\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"modal-footer\">\n" +
        "    <button class=\"btn btn-default\" ng-click=\"CancelDelete()\">OK</button>\n" +
        "</div>\n" +
        "\n" +
        "");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_helpFee.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_helpFee.html",
        "<div class=\"modal-header\">\n" +
        "    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <h4 class=\"modal-title\">PARCEL - Fee Information</h4>\n" +
        "</div>\n" +
        "\n" +
        " \n" +
        "    \n" +
        "\n" +
        "<div class=\"modal-body\">\n" +
        "    <h5>Fee Information</h5>\n" +
        "\n" +
        "    <ul>\n" +
        "        <li><p>\n" +
        "                The 'Fee' field is an <b>optional field</b>, provided so that environmental consultants and their clients can communicate the consultant's fee via the Project Setup process.\n" +
        "            </p>\n" +
        "\n" +
        "        </li>\n" +
        "        <li><p>\n" +
        "            The information entered here will appear in the Work Order PDF file that is sent along with the project setup notification. This document is also stored in the 'Project Documents' section of your Project.\n" +
        "        </p>\n" +
        "\n" +
        "        </li>\n" +
        "    </ul>\n" +
        "</div> \n" +
        "<div class=\"modal-footer\">\n" +
        "    <button class=\"btn btn-default\" ng-click=\"CancelDelete()\">OK</button>\n" +
        "\n" +
        "</div>\n" +
        "   \n" +
        " ");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_helpLatLon.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_helpLatLon.html",
        "<div class=\"modal-header\">\n" +
        "    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <h4 class=\"modal-title\">PARCEL - Latitude and Longitude</h4>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"modal-body\">\n" +
        "    <ul>\n" +
        "        <li> <p>\n" +
        "                If you do not enter a latitude and longitude for your site, PARCEL will attempt to determine the latitude and longitude of your report using a third party service at no additional cost.\n" +
        "            </p>\n" +
        "\n" +
        "        </li>\n" +
        "        <li><p>\n" +
        "            Because of this service, we recommend that if you do not have reliable coordinates for your site, you should leave the latitude and longitude blank.\n" +
        "        </p>\n" +
        "\n" +
        "        </li>\n" +
        "        <li><p>Consultants will be able to change the latitude and longitude at any time in the General Information section of their report.</p></li>\n" +
        "    </ul>\n" +
        "\n" +
        "</div> \n" +
        "<div class=\"modal-footer\">\n" +
        "    <button class=\"btn btn-default\" ng-click=\"CancelDelete()\">OK</button>\n" +
        "</div>\n" +
        "   \n" +
        " ");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_mortgageBanker.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_mortgageBanker.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "\n" +
        "    <style type=\"text/css\">\n" +
        " \n" +
        "    </style>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        " \n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <a class=\"collapsed pointer\" data-toggle=\"collapse\" data-target=\"#collapseClientInfo\">Mortgage Banker</a>\n" +
        "        </h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapseClientInfo\" class=\"panel-collapse collapse \">\n" +
        "        <div class=\"panel-body\" ng-controller=\"LenderMortgageBankerCtrl as mortgageBankerInfo\">\n" +
        "            <div class=\"form-horizontal\">\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"comapnyName\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                    Company Name:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <input type=\"text\" class=\"form-control\" id=\"comapnyName\" ng-model=\"mortgageBankerInfo.data.mortgageBroker.companyName\">\n" +
        "                </div>\n" +
        "               \n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"contact\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">Contact:</label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <input type=\"text\" class=\"form-control\" id=\"contact\" ng-model=\"mortgageBankerInfo.data.mortgageBroker.contactName\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"address\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">Address:</label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <input type=\"text\" class=\"form-control\" id=\"address\" ng-model=\"mortgageBankerInfo.data.mortgageBroker.address\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"city\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">City:</label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <input type=\"text\" class=\"form-control\" id=\"city\" ng-model=\"mortgageBankerInfo.data.mortgageBroker.city\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"country\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">Country:</label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <select class=\"form-control\" id=\"country\" type=\"select\" name=\"Roles\" country-select country-model=\"mortgageBankerInfo.data.mortgageBroker.country\">\n" +
        "                        <option value=\"\">Select Country</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"state\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">State:</label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <select class=\"form-control\" id=\"state\" type=\"select\" state-model=\"mortgageBankerInfo.data.mortgageBroker.state\" state-select country-model=\"mortgageBankerInfo.data.mortgageBroker.country\" name=\"propertyState\">\n" +
        "                        <option value=\"\">Select State</option>\n" +
        "                    </select>\n" +
        "                    <input type=\"text\" class=\"form-control\" id=\"state\" ng-model=\"mortgageBankerInfo.data.mortgageBroker.state\" state-input>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"zip\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">Zip:</label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <input type=\"text\" class=\"form-control\" id=\"zip\" ng-model=\"mortgageBankerInfo.data.mortgageBroker.zip\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"phone\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">Phone:</label>\n" +
        "                <div class=\"col-xs-12 col-sm-5  col-md-4\">\n" +
        "                    <input type=\"text\" class=\"form-control\" id=\"phone\" ng-model=\"mortgageBankerInfo.data.mortgageBroker.phone\" name=\"phone\" />\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"email\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">Email:</label>\n" +
        "                <div class=\"col-xs-12 col-sm-5  col-md-4\">\n" +
        "                    <input type=\"text\" class=\"form-control\" id=\"email\" ng-model=\"mortgageBankerInfo.data.mortgageBroker.email\" name=\"email\" />\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "            </div> \n" +
        "        </div>\n" +
        "    </div> \n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_projectInfo.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_projectInfo.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        " \n" +
        "    <style type=\"text/css\">\n" +
        "      \n" +
        "    </style>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <script id=\"ProjectTips.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Tips for Naming Your Project: </h4>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"modal-body \">\n" +
        "                <ul>\n" +
        "                    <li>Choose a name that will help you identify this project from the rest of your projects on PARCEL. If your company already has a project-numbering system, you should include that number in your PARCEL project name.\n" +
        "                        <br>\n" +
        "                        <br>\n" +
        "                    </li>\n" +
        "                    <li>Keep in mind that your list of projects will be sorted alphabetically. Beginning project names with a standard format will make them easier to find in a long list.\n" +
        "                        <br>\n" +
        "                        <br>\n" +
        "                    </li>\n" +
        "                    <li>In most cases, it is best to omit phrases like &quot;Phase I&quot; that will be common to a number of projects.\n" +
        "                        <br>\n" +
        "                        <br>\n" +
        "                    </li>\n" +
        "                    <li>Your decision here need not be final. You will be able to change the name of the project, and the project name you enter here can be different from the one you include in your report.\n" +
        "                        <br>\n" +
        "                        <br>\n" +
        "                    </li>\n" +
        "                </ul>\n" +
        "            </div> \n" +
        "            <div class=\"modal-footer\">\n" +
        "                <button class=\"btn btn-default\" ng-click=\"CancelDelete()\">OK</button>\n" +
        "\n" +
        "            </div>\n" +
        "       \n" +
        "    </script>\n" +
        "\n" +
        "\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h3 class=\"panel-title\">\n" +
        "            <span class=\" pointer\">Project Information</span>\n" +
        "        </h3>\n" +
        "    </div>\n" +
        "    <div id=\"collapseProjInfo\" class=\"panel-collapse collapse in\">\n" +
        " \n" +
        "            <div class=\"panel-body\"  ng-controller=\"LenderProjectInfoCtrl as projectInfo\">\n" +
        "            <div class=\"form-horizontal\">\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label for=\"projectName\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                        Project Name:\n" +
        "                        <a class=\"pointer\" ng-click=\"ShowProjectTips()\"><i class=\"fa fa-question-circle\"></i></a>\n" +
        "                    </label>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Project Name\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"projectName\" ng-model=\"main.submitData.name\" name=\"projectName\" required autofocus tabindex=\"1\">\n" +
        "                    </div>\n" +
        "                  \n" +
        "                </div>\n" +
        "               <div class=\"form-group required\">\n" +
        "                <label for=\"dateDraftDue\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                    Date\n" +
        "                    Draft Due:\n" +
        "                </label>\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Date Draft Due\">\n" +
        "                    <div class=\" input-group\">\n" +
        "                        <input type=\"text\" class=\"form-control\" datetime-picker=\"dd MMM yyyy\" ng-model=\"main.submitData.draftDueDate\" is-open=\"open.date1\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"true\" name=\"draftDueDate\" required show-button-bar=\"false\" ng-click=\"openCalendar($event, 'date1')\" ng-focus=\"openCalendar($event, 'date1')\" tabindex=\"2\">\n" +
        "                        <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'date1')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                       \n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "               \n" +
        "            </div>\n" +
        "           \n" +
        "            <div class=\"form-group required\">\n" +
        "                <label for=\"dateFinalDue\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                    Date\n" +
        "                    Final Due:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Date Final Due\">\n" +
        "                    <div class=\" input-group\">\n" +
        "                        <input type=\"text\" class=\"form-control\" datetime-picker=\"dd MMM yyyy\" ng-model=\"main.submitData.finalDueDate\" is-open=\"open.date2\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"true\" name=\"finalDueDate\" required show-button-bar=\"false\" ng-click=\"openCalendar($event, 'date2')\" ng-focus=\"openCalendar($event, 'date2')\" tabindex=\"3\">\n" +
        "                        <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'date2')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                     \n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "             \n" +
        "            </div>\n" +
        "          \n" +
        "            <div class=\"form-group required\">\n" +
        "                <label for=\"projectName\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                    Put Project Out to Bid:\n" +
        "\n" +
        "                </label>\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Put Project Out to Bid\">\n" +
        "\n" +
        "                    <label class=\"radio-inline\">\n" +
        "                        <input type=\"radio\" required name=\"optradioBid\" ng-model=\"main.submitData.outToBid\" tabindex=\"5\" value=\"1\"> Yes\n" +
        "                    </label>\n" +
        "                    <label class=\"radio-inline\">\n" +
        "                        <input type=\"radio\" required name=\"optradioBid\" ng-model=\"main.submitData.outToBid\" tabindex=\"6\" value=\"0\"> No\n" +
        "                    </label>\n" +
        "\n" +
        "\n" +
        "                </div>\n" +
        "                \n" +
        "            </div>\n" +
        "        </div>\n" +
        "        </div>\n" +
        "        \n" +
        "    </div>\n" +
        " \n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_projectStartMenu.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_projectStartMenu.html",
        "<div class=\"span3 bg startpanel panel \">\n" +
        "    <h3 class=\"panel-name\" id=\"start-panel\">Start</h3>\n" +
        "    <div class=\"row-fluid\">\n" +
        "        <div class=\"span12 group0\">\n" +
        "            <div class=\"content\" id=\"contentstart-content\">\n" +
        "                <ul class=\"nav nav-list\">\n" +
        "                    <li>\n" +
        "                        <a href=\"/workOrder/express.php\" class=\"feature157\"><img src=\"/images/icons/address.png\"> New Single Site Project</a>\n" +
        "                    </li>\n" +
        "                    <li>\n" +
        "                        <a href=\"/workOrder/portfolio.php\" class=\"feature158\"><img src=\"/images/icons/archives.png\"> New Portfolio</a>\n" +
        "                    </li>\n" +
        "                    <li>\n" +
        "                        <a href=\"/edr/linkedOrderList.php\" class=\"feature159\"><img src=\"/images/icons/link.png\"> Order placed on the EDR Website?</a>\n" +
        "                    </li>\n" +
        "                </ul>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <!-- end row-fluid -->\n" +
        "    </div>\n" +
        "    <!-- end groupArray -->\n" +
        "</div>");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_propertyInfo.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_propertyInfo.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        " \n" +
        "    <style type=\"text/css\">\n" +
        "      \n" +
        "    </style>\n" +
        "</head>\n" +
        "<body> \n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <span class=\"pointer\">Property Information</span>\n" +
        "        </h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapsePropInfo\" class=\"panel-collapse collapse in\">\n" +
        "        <form name=\"propertyInfoForm\" class=\"form-horizontal \"\n" +
        "              ng-controller=\"LenderPropertyInfoCtrl as propertyInfo\">\n" +
        "            <div class=\"panel-body\">\n" +
        "                \n" +
        "          \n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"clientPropNum\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                        Client Property Number:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"clientPropNum\"\n" +
        "                               ng-model=\"main.submitData.property.propertyNumber\">\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label for=\"propName\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                        Property Name:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Property Name\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"propName\"\n" +
        "                               ng-model=\"main.submitData.property.name\" required name=\"propName\">\n" +
        "\n" +
        "                    </div>\n" +
        "                   \n" +
        "                </div>\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label for=\"address\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">Address:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5  col-md-4\" field-validation=\"Address\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"address\"\n" +
        "                               ng-model=\"main.submitData.property.address1\" required name=\"address\" />\n" +
        "                    </div>\n" +
        "                  \n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "\n" +
        "                    <div class=\"col-md-offset-2 col-xs-12 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"address\"\n" +
        "                               ng-model=\"main.submitData.property.address2\" name=\"address1\" />\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group required\" field-validation=\"City\">\n" +
        "                    <label for=\"city\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">City:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5  col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"city\"\n" +
        "                               ng-model=\"main.submitData.property.city\" required name=\"city\">\n" +
        "                    </div>\n" +
        "                   \n" +
        "                </div>\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label for=\"country\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">Country:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5  col-md-4\" field-validation=\"Country\">\n" +
        "                        <select class=\"form-control\" id=\"country\" type=\"select\"\n" +
        "                                country-select country-model=\"main.submitData.property.country\"\n" +
        "                                required name=\"lenderPropertyCountry\">\n" +
        "                            <option value=\"\">Select Country</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                  \n" +
        "                </div>\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label for=\"state\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">State:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5  col-md-4\" field-validation=\"State\">\n" +
        "                        <select class=\"form-control\" id=\"state\" type=\"select\" state-model=\"main.submitData.property.state\" state-select country-model=\"main.submitData.property.country\" name=\"propertyState\" required>\n" +
        "                            <option value=\"\">Select State</option>\n" +
        "                        </select>\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"state\"\n" +
        "                               ng-model=\"main.submitData.property.state\" required name=\"propertyState\" state-input>\n" +
        "                    </div>\n" +
        "                    \n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"zip\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">Zip:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5  col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"zip\"\n" +
        "                               ng-model=\"main.submitData.property.zip\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "           \n" +
        "</div>\n" +
        "        </form>\n" +
        "    </div>\n" +
        "</body>\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_reportSelection.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_reportSelection.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "\n" +
        "    <style></style>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\"> <span class=\"pointer\">Report Selection</span> </h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapseReportDiv\" class=\"panel-collapse collapse in\">\n" +
        "\n" +
        "        <div class=\"panel-body\" ng-controller=\"LenderReportSelectionCtrl as reportSelection\">\n" +
        "            <div class=\"form-horizontal\">\n" +
        "                <div class=\"alert alert-info\"> <span>*Select report to create Project</span> </div>\n" +
        "                <div>To select multiple report types, check the box next to each desired type.</div>\n" +
        "                <div ng-repeat=\"report in main.loadData.reportTypes\">\n" +
        "                    <div class=\"text-left\">\n" +
        "                        <h5>{{report.title}} </h5>\n" +
        "                    </div>\n" +
        "                    <hr>\n" +
        "                    <div ng-repeat=\"template in report.templates\">\n" +
        "                        <div class=\"container-fluid\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                                <div class=\"checkbox\">\n" +
        "                                    <label>\n" +
        "                                        <input type=\"checkbox\" id=\"Report\" name=\"Report\" ng-model=\"(main.submitData.reports[template.templateID] = main.submitData.reports[template.templateID] || {}).selected\" />\n" +
        "                                        <span> {{template.name}} </span> </label>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                            <div id=\"{{template.templateID}}\" ng-show=\"main.submitData.reports[template.templateID].selected\">\n" +
        "\n" +
        "                                <div class=\"col-md-6\">\n" +
        "                                    <div class=\"radio\">\n" +
        "                                        <input id=\"assign\" type=\"radio\" name=\"{{template.templateID}}.content\" ng-model=\"main.submitData.reports[template.templateID].content\" value=\"assign\">\n" +
        "                                        <label>Assign a consultant to this report</label>\n" +
        "                                    </div>\n" +
        "                                    <div class=\"col-md-11\" ng-show=\"main.submitData.reports[template.templateID].content == 'assign'\">\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            <hr>\n" +
        "                                            <select class=\"form-control\" id=\"consultant\" type=\"select\" name=\"consultant\" data-ng-options=\"consultant.companyID as consultant.name for consultant in main.loadData.consultants\" ng-model=\"main.submitData.reports[template.templateID].companyID\">\n" +
        "                                                <option value=\"\">Select a Company</option>\n" +
        "                                            </select>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                                <div class=\"col-md-6\">\n" +
        "                                    <div class=\"radio\">\n" +
        "                                        <input id=\"request\" type=\"radio\" name=\"{{template.templateID}}.content\" ng-model=\"main.submitData.reports[template.templateID].content\" value=\"request\">\n" +
        "                                        <label>Request bids from one or more consultants</label>\n" +
        "                                    </div>\n" +
        "                                    <div class=\"col-md-11\" ng-show=\"main.submitData.reports[template.templateID].content == 'request'\">\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            <hr>\n" +
        "                                            <label for=\"bid\" class=\"control-label\">Set Bid deadline date/time: </label>\n" +
        "                                            <div class=\"input-group\">\n" +
        "                                                <input type=\"text\" class=\"form-control\" datetime-picker=\"dd MMM yyyy\" ng-model=\"main.submitData.reports[template.templateID].bidDeadline\" is-open=\"open[template.templateID]\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"false\" datepicker-append-to-body=\"false\" />\n" +
        "                                                <span class=\"input-group-btn\">\n" +
        "                      <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, template.templateID)\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                      </span> </div>\n" +
        "                                        </div>\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            <multiselect class=\"input-xlarge\" multiple=\"true\" ng-model=\"main.submitData.reports[template.templateID].bidCompanys\" header=\"select consultants\" options=\"consultant.companyID as consultant.name for consultant in main.loadData.consultants\"></multiselect>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/LenderProjectCreation/views/lender_siteContactInfo.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/LenderProjectCreation/views/lender_siteContactInfo.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "<head>\n" +
        "<meta charset=\"ISO-8859-1\">\n" +
        "\n" +
        "    <style type=\"text/css\">\n" +
        " \n" +
        "    </style>\n" +
        "\n" +
        "</head>\n" +
        "<body>\n" +
        "	<div class=\"panel-heading\">\n" +
        "		<h5 class=\"panel-title\">\n" +
        "            <a class=\"collapsed pointer\" data-toggle=\"collapse\" data-target=\"#collapseSiteContactInfo\">\n" +
        "                Site Contact Information\n" +
        "            </a>\n" +
        "		</h5>\n" +
        "	</div>\n" +
        "	<div id=\"collapseSiteContactInfo\"\n" +
        "		class=\"panel-collapse collapse\">  \n" +
        "            <div class=\"panel-body\" ng-controller=\"LenderSiteContactInfoCtrl as siteContactInfo\">\n" +
        "                <div class=\"form-horizontal\"> \n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"contactName\" class=\"control-label col-md-2 col-md-3 col-xs-12\">\n" +
        "                        Contact Name:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"contactName\"\n" +
        "                               ng-model=\"main.submitData.siteContact.name\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"contactPhone\" class=\"control-label col-md-2 col-md-3 col-xs-12\">\n" +
        "                        Contact Phone:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"contactPhone\"\n" +
        "                               ng-model=\"main.submitData.siteContact.phone\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"contactFax\" class=\"control-label col-md-2 col-md-3 col-xs-12\">\n" +
        "                        Contact Fax:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"contactFax\"\n" +
        "                               ng-model=\"main.submitData.siteContact.fax\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\" show-errors>\n" +
        "                    <label for=\"contactEmail\" class=\"control-label col-md-2 col-md-3 col-xs-12\">\n" +
        "                        Contact Email:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4 \">\n" +
        "                        <input type=\"email\" class=\"form-control\" id=\"contactEmail\"\n" +
        "                               ng-model=\"main.submitData.siteContact.email\" name=\"lenderSiteContactEmail\">\n" +
        "                    </div>\n" +
        "                </div> \n" +
        "                    </div>\n" +
        "                </div> \n" +
        "	</div> \n" +
        "</body>\n" +
        "</html>");
}]);

angular.module("../app/modules/OrderPlacedOnEDR/views/Order-placed.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/OrderPlacedOnEDR/views/Order-placed.html",
        "<!doctype html>\n" +
        "<html>\n" +
        "<head>\n" +
        "<meta charset=\"utf-8\">\n" +
        "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n" +
        "\n" +
        "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n" +
        " \n" +
        "</head>\n" +
        "<body >\n" +
        " \n" +
        " <div class=\"container-fluid\">\n" +
        "	 <div class=\"panel panel-default\">\n" +
        "	 <div class=\"panel-body\">\n" +
        "     <div class=\"row\">\n" +
        "         <div class=\"col-md-12 col-lg-12\">\n" +
        "             <h2 class=\"page-header\">  Order placed on the EDR website </h2>\n" +
        "             <div class=\"alert alert-info\">\n" +
        "                <p>This is a list of orders that your company has placed on the EDR Website. To complete an order, click on the Finish button.</p>\n" +
        "             </div>\n" +
        "             <div class=\"overflow-auto\">\n" +
        "\n" +
        "               <table class=\"table table-hover table-responsive\">\n" +
        "                  <thead>\n" +
        "                    <tr>\n" +
        "                      <th>Order Number</th>\n" +
        "                      <th>Account Number</th>\n" +
        "                      <th>Contact Name</th>\n" +
        "                      <th>Contact Email</th>\n" +
        "                      <th>#Properties</th>\n" +
        "                      <th> </th>\n" +
        "                    </tr>\n" +
        "                  </thead>\n" +
        "                  <tbody>\n" +
        "                    <tr>\n" +
        "                      <th scope=\"row\">132</th>\n" +
        "                      <td>2055520</td>\n" +
        "                      <td>Otto</td>\n" +
        "                      <td>@mdo</td>\n" +
        "                      <td>XYZ</td>\n" +
        "                      <td><button class=\"btn btn-md btn-primary\">Finish Order  </button></td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                      <th scope=\"row\">332</th>\n" +
        "                      <td>203320</td>\n" +
        "                      <td>Thornton</td>\n" +
        "                      <td>@fat</td>\n" +
        "                      <td>XYZ</td>\n" +
        "                      <td><button class=\"btn btn-md btn-primary\">Finish Order  </button></td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                      <th scope=\"row\">342</th>\n" +
        "                      <td>2033520</td>\n" +
        "                      <td>the Bird</td>\n" +
        "                      <td>@twitter</td>\n" +
        "                      <td>XYZ</td>\n" +
        "                      <td><button class=\"btn btn-md btn-primary\">Finish Order  </button></td>\n" +
        "                    </tr>\n" +
        "                     <tr>\n" +
        "                      <th scope=\"row\">356</th>\n" +
        "                      <td>2055520</td>\n" +
        "                      <td>Otto</td>\n" +
        "                      <td>@mdo</td>\n" +
        "                      <td>XYZ</td>\n" +
        "                      <td><button class=\"btn btn-md btn-primary\">Finish Order  </button></td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                      <th scope=\"row\">390</th>\n" +
        "                      <td>203320</td>\n" +
        "                      <td>Thornton</td>\n" +
        "                      <td>@fat</td>\n" +
        "                      <td>XYZ</td>\n" +
        "                      <td><button class=\"btn btn-md btn-primary\">Finish Order  </button></td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                      <th scope=\"row\">412</th>\n" +
        "                      <td>2033520</td>\n" +
        "                      <td>the Bird</td>\n" +
        "                      <td>@twitter</td>\n" +
        "                      <td>XYZ</td>\n" +
        "                      <td><button class=\"btn btn-md btn-primary\">Finish Order  </button></td>\n" +
        "                    </tr>\n" +
        "                     <tr>\n" +
        "                      <th scope=\"row\">432</th>\n" +
        "                      <td>2055520</td>\n" +
        "                      <td>Otto</td>\n" +
        "                      <td>@mdo</td>\n" +
        "                      <td>XYZ</td>\n" +
        "                      <td><button class=\"btn btn-md btn-primary\">Finish Order  </button></td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                      <th scope=\"row\">502</th>\n" +
        "                      <td>203320</td>\n" +
        "                      <td>Thornton</td>\n" +
        "                      <td>@fat</td>\n" +
        "                      <td>XYZ</td>\n" +
        "                      <td><button class=\"btn btn-md btn-primary\">Finish Order  </button></td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                      <th scope=\"row\">552</th>\n" +
        "                      <td>2033520</td>\n" +
        "                      <td>the Bird</td>\n" +
        "                      <td>@twitter</td>\n" +
        "                      <td>XYZ</td>\n" +
        "                      <td><button class=\"btn btn-md btn-primary\">Finish Order  </button></td>\n" +
        "                    </tr>\n" +
        "                  </tbody>\n" +
        "                </table>\n" +
        "             </div>\n" +
        "         </div>    \n" +
        "    </div>\n" +
        "	 </div>\n" +
        "	 </div>\n" +
        "</div>\n" +
        "  \n" +
        "</body>\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/PortfolioCreation/views/PortfolioCreation.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/PortfolioCreation/views/PortfolioCreation.html",
        "<!doctype html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <style>\n" +
        "        .body-bg-gray {\n" +
        "            background-color: #ffffff !important;\n" +
        "        }\n" +
        "\n" +
        "    </style>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <!--Policy Create start  -->\n" +
        "    <form name=\"portfolio.submitForm\" class=\"rightside-section\" novalidate>\n" +
        "        <div class=\"container-fluid\" cg-busy=\"portfolio.waitingProcessResources\">\n" +
        "\n" +
        "            <div class=\"row \">\n" +
        "                <!-- Left panel Start-->\n" +
        "                <div class=\"col-md-3 col-lg-3 col-sm-3 bg-gray sidebar\">\n" +
        "\n" +
        "                    <div class=\"top-margin\">\n" +
        "                        <ul id=\"ulnavigation\" class=\"nav nav-pills nav-stacked-lg\">\n" +
        "\n" +
        "                            <li id=\"projectInformationId\" active-class urlparams=\"/PortfolioCreation/ProjectInformation\" class=\"active\"><a> Step 1: <p class=\"text-11\">Enter Project Information </p> </a></li>\n" +
        "                            <li id=\"ReportInformation\" active-class urlparams=\"/PortfolioCreation/ReportInformation\"><a> Step 2:<p class=\"text-11\"> Enter Report Information</p> </a></li>\n" +
        "                            <li id=\"FeeInformation\" active-class urlparams=\"/PortfolioCreation/FeeInformation\"><a> Step 3:<p class=\"text-11\"> Enter Fee Information </p> </a></li>\n" +
        "                            <li id=\"Attachments\" active-class urlparams=\"/PortfolioCreation/Attachments\"><a>Step 4:<p class=\"text-11\"> Attach Documents </p> </a></li>\n" +
        "                            <li id=\"grantAccessId\" active-class urlparams=\"/PortfolioCreation/GrantAccess\"><a> Step 5:<p class=\"text-11\"> Grant Access</p> </a></li>\n" +
        "                            <li id=\"ConfirmProjectInformation\" active-class urlparams=\"/PortfolioCreation/ConfirmProjectInformation\"><a> Step 6:<p class=\"text-11\"> Confirm Project Information</p> </a></li>\n" +
        "                            <li id=\"Email\" active-class urlparams=\"/PortfolioCreation/Email\"><a> Step 7:<p class=\"text-11\"> Email Project Information</p> </a></li>\n" +
        "\n" +
        "                        </ul>\n" +
        "                        <hr class=\"border-gray top-margin-xs\">\n" +
        "                        <div class=\"container-fluid\">\n" +
        "                            <div class=\"row\">\n" +
        "                                <div class=\"col-md-12 col-sm-12 bottom-margin\">\n" +
        "\n" +
        "                                    <button id=\"previousStep\" shift-previous class=\"btn btn-md btn-primary pull-left\" type=\"button\"> Previous </button>\n" +
        "                                    <a id=\"cancelThisProject_topbtn\" cancel-project href=\"#/\" class=\"btn btn-md btn-primary pull-left\">Cancel</a>\n" +
        "                                    <!--<button id=\"nextButton\" shift-next class=\"btn btn-md btn-primary pull-right\" type=\"button\" ng-click=\"portfolio.submitData(portfolio.submitForm)\"> {{nextButtonText}} </button>-->\n" +
        "                                    <div next-step get-submit-project-data=\"portfolio.getProjectData()\" form=\"portfolio.submitForm\" response-receiver=\"portfolio.setResponseProjectData(projectData)\" error-handler=\"portfolio.showServiceError(errorMsg)\" current-project-data=\"portfolio.project\" button-text=\"nextButtonText\" state-navigation=\"portfolio.stateNavigation\" disable-step-wise=\"portfolio.disableStepWise\"></div>\n" +
        "\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                            <div class=\"row\">\n" +
        "                                <div class=\"col-md-12\">\n" +
        "                                    <a id=\"cancelThisProject_bottombtn\" href=\"#/\" class=\"btn btn-md btn-danger full-width\">Cancel</a>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                        <hr class=\"border-gray\">\n" +
        "\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <!-- Left panel end-->\n" +
        "\n" +
        "\n" +
        "                <div class=\"col-md-9 col-lg-9 col-sm-9 col-sm-offset-3\">\n" +
        "                    <h2 class=\"page-header\"> New Portfolio</h2>\n" +
        "                    <div ui-view=\"\"></div>\n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"clearfix\"></div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </form>\n" +
        "    <!-- Policy Create  end  -->\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/PortfolioCreation/views/portfolio.AddLocation.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/PortfolioCreation/views/portfolio.AddLocation.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"modal-header dividerline\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"close()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\"> {{addLocation.title}}</h4>\n" +
        "    </div>\n" +
        "\n" +
        "\n" +
        "    <div class=\"modal-body\">\n" +
        "        <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"addLocation.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"addLocation.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{addLocation.serviceResponseText}}\n" +
        "        </div>\n" +
        "\n" +
        "        <form name=\"addLocationForm\" novalidate>\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"property\" class=\"control-label\">\n" +
        "                            Property #\n" +
        "                        </label>\n" +
        "                        <input id=\"property\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.propertyNumber\" focus-if>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"name\" class=\"control-label\">\n" +
        "                            Name\n" +
        "                        </label>\n" +
        "                        <input id=\"name\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.name\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-xs-12 col-sm-12 col-md-12 \">\n" +
        "                    <div class=\"form-group required\" field-validation=\"Address\">\n" +
        "                        <label for=\"address\" class=\"control-label\">\n" +
        "                            Address\n" +
        "                        </label>\n" +
        "                        <input id=\"address\" name=\"addressPortfolioLocation\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.address1\" required>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-xs-12 col-sm-12 col-md-12\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <input type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.address2\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "            <div class=\"row\">\n" +
        "                <!-- <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                        <label for=\"county\" class=\"control-label \">\n" +
        "                            County\n" +
        "                        </label>\n" +
        "                        <input id=\"county\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.county\">\n" +
        "                        </div>\n" +
        "                    </div>-->\n" +
        "                <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                    <div class=\"form-group required\" field-validation=\"Country\">\n" +
        "                        <label for=\"country\" class=\"control-label \">\n" +
        "                            Country\n" +
        "                        </label>\n" +
        "\n" +
        "                        <!--  <select class=\"form-control\" id=\"country\" type=\"select\" country-model=\"addLocation.location.country\" country-select name=\"countryPortfolioLocation\" tabindex=\"5\" required>\n" +
        "                            <option value=\"\">Select Country</option>\n" +
        "                        </select>-->\n" +
        "                        <select ng-model=\"addLocation.selectedCountry\" ng-change=\"addLocation.editCountry()\" ng-options=\"country as country.name for country in addLocation.countries\n" +
        "                            track by country.code\" class=\"form-control\">\n" +
        "                            <option value=\"\">Select Country</option>\n" +
        "                        </select>\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "				<div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                    <div class=\"form-group required\" field-validation=\"state\">\n" +
        "                        <label for=\"state\" class=\"control-label\">\n" +
        "                            State\n" +
        "                        </label>\n" +
        "\n" +
        "                        <!--<select class=\"form-control\" id=\"state\" type=\"select\" state-model=\"addLocation.location.state\" state-select country-model=\"addLocation.location.country\" name=\"statePortfolioLocation\" required tabindex=\"7\">\n" +
        "                            <option value=\"\">Select State</option>\n" +
        "                        </select>\n" +
        "\n" +
        "                        <input type=\"text\" class=\"form-control\" name=\"statePortfolioLocation\" id=\"state\" ng-model=\"addLocation.location.state\" required state-input tabindex=\"7\" />-->\n" +
        "\n" +
        "\n" +
        "\n" +
        "                        <select name=\"statePortfolioLocation\" ng-show=\"addLocation.selectedCountry.isStateProvDataAvailable\" ng-model=\"addLocation.location.state\" ng-options=\"state as state.name for state in addLocation.states track by state.code\" class=\"form-control\">\n" +
        "                            <option value=\"\">Select State</option>\n" +
        "                        </select>\n" +
        "                        <input name=\"statePortfolioLocation\" ng-show=\"!addLocation.selectedCountry.isStateProvDataAvailable\" type=\"text\" ng-model=\"addLocation.location.state\" class=\"form-control\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                    <div class=\"form-group required\" field-validation=\"city\">\n" +
        "                        <label for=\"city\" class=\"control-label\">\n" +
        "                            City\n" +
        "                        </label>\n" +
        "                        <input id=\"city\" name=\"cityPortfolioLocation\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.city\" required />\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "       \n" +
        "                <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                    <div class=\"form-group required\" field-validation=\"zip\">\n" +
        "                        <label for=\"zip\" class=\"control-label\">\n" +
        "                            Zip\n" +
        "                        </label>\n" +
        "                        <input id=\"zip\" type=\"text\" class=\"form-control\" name=\"zipPortfolioLocation\" ng-model=\"addLocation.location.zip\" required>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"row\">\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"latitude\" class=\"control-label\">\n" +
        "                            Latitude\n" +
        "                        </label>\n" +
        "                        <input id=\"latitude\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.latitude\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"longitude\" class=\"control-label\">\n" +
        "                            Longitude\n" +
        "                        </label>\n" +
        "                        <input id=\"longitude\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.longitude\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "            <div class=\"row\">\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"contact\" class=\"control-label\">\n" +
        "                            Contact\n" +
        "                        </label>\n" +
        "                        <input id=\"contact\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.contact\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"phone\" class=\"control-label\">\n" +
        "                            Phone\n" +
        "                        </label>\n" +
        "                        <input id=\"phone\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.phone\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"fax\" class=\"control-label\">\n" +
        "                            Fax\n" +
        "                        </label>\n" +
        "                        <input id=\"fax\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.fax\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                    <div class=\"form-group\" emailfield-validation=\"Email\">\n" +
        "                        <label for=\"email\" class=\"control-label\">\n" +
        "                            Email\n" +
        "                        </label>\n" +
        "                        <input id=\"email\" type=\"text\" name=\"emailPortfolioLocation\" class=\"form-control\" ng-model=\"addLocation.location.email\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"ponumber\" class=\"control-label\">\n" +
        "                            PO Number\n" +
        "                        </label>\n" +
        "                        <input id=\"ponumber\" type=\"text\" class=\"form-control\" ng-model=\"addLocation.location.poNumber\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "    </div>\n" +
        "    <div class=\"modal-footer\">\n" +
        "\n" +
        "        <button type=\"reset\" class=\"btn btn-md btn-default\" ng-click=\"addLocation.Cancel()\"> Cancel</button>\n" +
        "        <button type=\"button\" class=\"btn btn-md btn-primary\" ng-click=\"addLocation.AddSite(addLocationForm)\"> {{addLocation.action}} This Site</button>\n" +
        "\n" +
        "        </form>\n" +
        "    </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/PortfolioCreation/views/portfolio.Attachments.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/PortfolioCreation/views/portfolio.Attachments.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "\n" +
        "    <div class=\"alert alert-info\">\n" +
        "\n" +
        "        <p>\n" +
        "            <b>\n" +
        "                The file was blocked due to an insecure file type.\n" +
        "                Attach Documents\n" +
        "                Use this area to attach documents to the project\n" +
        "                (Example: Prior Phase I ESAs, Title Records, etc.)\n" +
        "            </b>\n" +
        "        </p>\n" +
        "\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"form-group\" id=\"collapseAttachment\" class=\"top-margin\" ng-controller=\"PortfolioAttachmentCtrl as portfolioAttachments\">\n" +
        "        <form id=\"fileupload\">\n" +
        "            <div class=\"fileupload-buttonbar AU_uploadbox\">\n" +
        "\n" +
        "                <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"portfolioAttachments.serviceResponseAlert\">\n" +
        "                    <button type=\"button\" class=\"close\" ng-click=\"portfolioAttachments.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                        <span aria-hidden=\"true\">&times;</span>\n" +
        "                    </button>\n" +
        "                    {{portfolioAttachments.serviceResponseText}}\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-inline\">\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <span class=\"btn btn-md btn-primary fileinput-button\" ng-class=\"{disabled: disabled}\">\n" +
        "                                            <i class=\"fa fa-file-text-o\"></i> Choose Files <input id=\"file-3\"\n" +
        "                                                                                            type=\"file\" data-file-input=\"files\"\n" +
        "                                                                                            ngf-select ngf-change=\"upload($files)\" ngf-multiple=\"true\" >\n" +
        "                                        </span>\n" +
        "                        <!--<button type=\"button\" class=\"btn btn-md btn-primary start\" ng-click=\"portfolioAttachments.Upload()\">\n" +
        "                                    <span class=\"glyphicon glyphicon-upload\"></span> Upload\n" +
        "                                </button>-->\n" +
        "\n" +
        "                        <!--<span class=\"AU_uploadFilename text-primary\" ng-repeat=\"file in files\">{{file.name}}</span>-->\n" +
        "                    </div>\n" +
        "\n" +
        "                    <!--<div ng-show=\"files && files.length\" class=\"form-group\">\n" +
        "                        <input class=\"form-control\" type=\"text\" placeholder=\"Add Description\" ng-model=\"files[0].description\">\n" +
        "                        <button type=\"button\" class=\"btn btn-md btn-primary start\" ng-click=\"portfolioAttachments.submitToAttachFiles()\">\n" +
        "                            <span class=\"glyphicon glyphicon-upload\"></span> Submit\n" +
        "                        </button>\n" +
        "                    </div>-->\n" +
        "\n" +
        "\n" +
        "                    <hr>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "                <div class=\" form-group\" ng-hide=\"portfolioAttachments.attachmentFiles.length == 0\">\n" +
        "\n" +
        "\n" +
        "\n" +
        "                    <table class=\"table table-condensed  table-bordered table-hover top-margin\">\n" +
        "\n" +
        "                        <thead>\n" +
        "                            <tr>\n" +
        "                                <th>Action</th>\n" +
        "                                <th>File Name</th>\n" +
        "                                <!--<th>File Description</th>-->\n" +
        "                                <th>File Size</th>\n" +
        "\n" +
        "                            </tr>\n" +
        "                        </thead>\n" +
        "                        <tbody>\n" +
        "                            <tr ng-repeat=\"file in portfolioAttachments.attachmentFiles\">\n" +
        "                                <td>\n" +
        "                                    <button class=\"btn btn-danger btn-xs\" ng-click=\"portfolioAttachments.removeAttachment($index);\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Delete\"><i class=\"glyphicon glyphicon-trash\"></i></button>\n" +
        "                                </td>\n" +
        "                                <td>{{file.name}}</td>\n" +
        "                                <!--<td ng-click=\"portfolioAttachments.enableAttachedFileEdit(file, $index, fileupload)\">\n" +
        "                                    <span ng-show=\"!file.editDesc\">{{file.description}}</span>\n" +
        "                                    <input id=\"fileDesc_{{$index}}\" class=\"form-control\" type=\"text\" ng-model=\"file.description\" ng-show=\"file.editDesc\" ng-blur=\"file.editDesc = false;\">\n" +
        "                                </td>-->\n" +
        "                                <td>{{file.size}}</td>\n" +
        "                            </tr>\n" +
        "\n" +
        "                        </tbody>\n" +
        "\n" +
        "                    </table>\n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <!--<div class=\"alert alert-success\" ng-hide=\"portfolioAttachments.attachmentFiles.length == 0\">\n" +
        "\n" +
        "                        <span>Files Uploaded Successfully</span>\n" +
        "                    </div>-->\n" +
        "\n" +
        "\n" +
        "                    <div class=\"alert alert-danger\" ng-show=\"portfolioAttachments.isUploadErrorMsg\">\n" +
        "                        <span>{{portfolioAttachments.UploadErrorMsg}}</span>\n" +
        "                    </div>\n" +
        "                    <div class=\"alert alert-danger\" ng-show=\"portfolioAttachments.isUploadErrorMsg\">\n" +
        "                        <span>{{portfolioAttachments.IncorrectFormat}}</span>\n" +
        "                    </div>\n" +
        "                    <div class=\"alert alert-danger\" ng-show=\"portfolioAttachments.isUploadErrorMsg\">\n" +
        "\n" +
        "                        <a ng-click=\"ShowUploadStatus()\" ng-show=\"popuplink\">Click here for more details</a>\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/PortfolioCreation/views/portfolio.ConfirmProjectInfo.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/PortfolioCreation/views/portfolio.ConfirmProjectInfo.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <div ng-controller=\"PortfolioConfirmInfoCtrl as confirmInfo\">\n" +
        "\n" +
        "        <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"confirmInfo.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"confirmInfo.serviceResponseAlert = false;\" aria-label=\"Close\" tabindex=\"-1\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{confirmInfo.serviceResponseText}}\n" +
        "        </div>\n" +
        "\n" +
        "        <!-- right panel start-->\n" +
        "\n" +
        "        <h4 class=\"heading-border\"> Project Info</h4>\n" +
        "        <form name=\"confirmProjectInfo\" class=\"form-horizontal\">\n" +
        "\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label for=\"projectname\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Project Name:\n" +
        "                </label>\n" +
        "\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Project Name\">\n" +
        "                    <input id=\"projectname\" type=\"text\" class=\"form-control\" name=\"projectName\" ng-model=\"confirmInfo.editProjectInfo.name\" focus-if required tabindex=\"1\">\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"clientrequestingwork\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Client Requesting Work:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <select id=\"clientrequestingwork\" class=\"form-control\" ng-model=\"confirmInfo.editProjectInfo.client.companyName\" data-ng-options=\"client.name as client.name for client in portfolio.loadData.relatedCompanies | filter: portfolio.filterByContains('functions', 'Client')\" tabindex=\"2\" name=\"ClientRequestingWork\">\n" +
        "                        <option value=\"\">Select a Client</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Date draft report:\n" +
        "                </label>\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Date draft report\">\n" +
        "                    <div class=\"input-group\">\n" +
        "\n" +
        "                        <input type=\"text\" class=\"form-control\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"confirmInfo.editProjectInfo.draftDueDate\" is-open=\"open.draftDate\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"true\" ng-click=\"openCalendar($event, 'draftDate')\" required name=\"Datedraftreport\" show-button-bar=\"false\" tabindex=\"3\">\n" +
        "\n" +
        "\n" +
        "                        <span class=\"input-group-btn\">\n" +
        "                                <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'draftDate')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                            </span>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Date final report:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Date final report\">\n" +
        "                    <div class=\"input-group\">\n" +
        "\n" +
        "                        <input type=\"text\" class=\"form-control\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"confirmInfo.editProjectInfo.finalDueDate\" is-open=\"open.finalDate\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"true\" ng-click=\"openCalendar($event, 'finalDate')\" show-button-bar=\"false\" tabindex=\"4\" required name=\"Datefinalreport\">\n" +
        "\n" +
        "                        <span class=\"input-group-btn\">\n" +
        "                                <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'finalDate')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                            </span>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"projectcomments\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Project Comments:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "\n" +
        "                    <textarea id=\"projectcomments\" class=\"form-control\" placeholder=\"Project Comments\" ng-model=\"confirmInfo.editProjectInfo.comments\" name=\"projectcomments\" tabindex=\"5\"></textarea>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"col-md-offset-3 col-md-9 col-sm-9 col-xs-12\">\n" +
        "\n" +
        "\n" +
        "                <button type=\"submit\" class=\"btn btn-md btn-danger \" ng-click=\"confirmInfo.resetProjectInfo()\" tabindex=\"6\"><i class=\"fa fa-times\"></i> &nbsp; Reset</button>\n" +
        "                <!--<button type=\"submit\" class=\"btn btn-md btn-primary \" ng-click=\"confirmInfo.updateProjectInfo()\"><i class=\"fa fa-pencil\"></i> &nbsp; Update</button>-->\n" +
        "\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "        <hr>\n" +
        "\n" +
        "        <h4 class=\"heading-border\"> Sites  Info</h4>\n" +
        "        <div class=\"sitestable overflow-auto\" id=\"prjConfirmDiv\">\n" +
        "            <table class=\"table table-bordered \">\n" +
        "                <thead>\n" +
        "                    <tr>\n" +
        "                        <th>Sr. No</th>\n" +
        "                        <!-- <th>Property # </th>-->\n" +
        "                        <th>Site Name </th>\n" +
        "                        <th>Address, City, State or Province, Zip</th>\n" +
        "                        <th>Contact</th>\n" +
        "                        <th>Email</th>\n" +
        "                        <th>Consultant</th>\n" +
        "                        <th>Fee</th>\n" +
        "                        <th>Action</th>\n" +
        "                    </tr>\n" +
        "                </thead>\n" +
        "                <tbody ng-repeat=\"loc in confirmInfo.tableArr\">\n" +
        "                    <tr class=\"info\">\n" +
        "                        <th scope=\"row\">{{$index + 1}}</th>\n" +
        "                        <!--<td>{{loc.locationObj.propertyNumber}}</td>-->\n" +
        "                        <td>{{loc.locationObj.name}}</td>\n" +
        "                        <td>{{loc.locationObj.address1}}, {{loc.locationObj.city}}, {{loc.locationObj.state}}, {{loc.locationObj.zip}}</td>\n" +
        "                        <td>{{loc.contactObj.name}}</td>\n" +
        "                        <td>{{loc.contactObj.email}}</td>\n" +
        "                        <td></td>\n" +
        "\n" +
        "                        <td></td>\n" +
        "                        <td class=\"tableNewRequest-action\">\n" +
        "                            <div class=\"btn-group\">\n" +
        "                                <button class=\"btn btn-primary btn-xs\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Edit Site\" ng-click=\"confirmInfo.editSiteInfo(loc, $index)\"><span class=\"glyphicon glyphicon-pencil\"></span></button>\n" +
        "                                <button class=\"btn btn-danger btn-xs\" data-toggle=\"tooltip\" ng-show=\"confirmInfo.tableArr.length>1\" data-placement=\"top\" title=\"Delete Site\" ng-click=\"confirmInfo.deleteSite($index)\"><span class=\"glyphicon glyphicon-trash\"></span></button>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr ng-repeat=\"report in loc.reportsArray\">\n" +
        "                        <td></td>\n" +
        "                        <td colspan=\"4\"> <strong>Report: </strong> {{report.templateObj.name}}</td>\n" +
        "\n" +
        "                        <td></td>\n" +
        "                        <td>{{report.fee}}</td>\n" +
        "                        <td class=\"tableNewRequest-action\">\n" +
        "                            <div class=\"btn-group\">\n" +
        "                                <button class=\"btn btn-primary btn-xs\" ng-click=\"confirmInfo.editReportInfo(report, $parent.$index,$index)\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Edit Report\"><i class=\"fa fa-pencil\"></i></button>\n" +
        "                                <button class=\"btn btn-danger btn-xs\" ng-show=\"loc.reportsArray.length>1\" ng-click=\"confirmInfo.deleteReport($parent.$index,$index)\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Delete Report\"><i class=\"glyphicon glyphicon-trash\"></i></button>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "\n" +
        "\n" +
        "                </tbody>\n" +
        "            </table>\n" +
        "\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "        <!-- right panel end-->\n" +
        "    </div>\n" +
        "\n" +
        "    <script type=\"text/ng-template\" id=\"editSiteInfo.html\">\n" +
        "\n" +
        "        <div class=\"modal-header dividerline\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"Cancel()\" aria-label=\"Close\" tabindex=\"15\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Edit Site Info</h4>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"alert\" ng-class=\"msgType\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{serviceResponseText}}\n" +
        "        </div>\n" +
        "\n" +
        "        <form name=\"ContactListForm\" novalidate>\n" +
        "            <div class=\"modal-body \">\n" +
        "\n" +
        "\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"propertyname\" class=\"control-label\">\n" +
        "                                Site Name:\n" +
        "                            </label>\n" +
        "                            <input id=\"propertyname\" type=\"text\" class=\"form-control\" ng-model=\"modalObjContainer.data.locationObj.name\" ng-disabled=\"true\" tabindex=\"1\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-sm-12 col-md-12\">\n" +
        "\n" +
        "                        <div class=\"form-group required\" field-validation=\"Address\">\n" +
        "                            <label for=\"address\" class=\"control-label\">\n" +
        "                                Address:\n" +
        "                            </label>\n" +
        "                            <input id=\"address\" type=\"text\" name=\"address\" class=\"form-control\" ng-model=\"modalObjContainer.data.locationObj.address1\" required tabindex=\"2\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-xs-12 col-sm-12 col-md-12\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <input type=\"text\" class=\"form-control\" ng-model=\"modalObjContainer.data.locationObj.address2\" tabindex=\"3\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "\n" +
        "                        <div class=\"form-group required\" field-validation=\"City\">\n" +
        "\n" +
        "                            <label for=\"city\" class=\"control-label\">\n" +
        "                                City:\n" +
        "                            </label>\n" +
        "                            <input id=\"city\" name=\"city\" type=\"text\" class=\"form-control\" placeholder=\"City\" required ng-model=\"modalObjContainer.data.locationObj.city\" tabindex=\"4\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "\n" +
        "                        <div class=\"form-group required\" field-validation=\"State\">\n" +
        "\n" +
        "                            <label for=\"stateorprovince\" class=\"control-label\">\n" +
        "                                State or Province:\n" +
        "                            </label>\n" +
        "                            <input id=\"stateorprovince\" name=\"state\" type=\"text\" class=\"form-control\" placeholder=\"State or Province\" required ng-model=\"modalObjContainer.data.locationObj.state\" tabindex=\"5\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "\n" +
        "                        <div class=\"form-group required\" field-validation=\"Zip\">\n" +
        "\n" +
        "                            <label for=\"zip\" class=\"control-label\">\n" +
        "                                Zip:\n" +
        "                            </label>\n" +
        "                            <input id=\"zip\" name=\"zip\" type=\"text\" class=\"form-control\" placeholder=\"Zip\" required ng-model=\"modalObjContainer.data.locationObj.zip\" tabindex=\"6\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-sm-6 col-md-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"contactname\" class=\"control-label\">\n" +
        "                                Contact Name:\n" +
        "                            </label>\n" +
        "                            <input id=\"contactname\" type=\"text\" class=\"form-control\" ng-model=\"modalObjContainer.data.contactObj.name\" tabindex=\"7\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\" col-md-6 col-sm-6 col-xs-12\">\n" +
        "                        <div class=\"form-group\" emailfield-validation=\"Email\">\n" +
        "                            <label for=\"contactemail\" class=\"control-label\">\n" +
        "                                Contact Email:\n" +
        "                            </label>\n" +
        "                            <input id=\"contactemail\" name=\"email\" type=\"email\" class=\"form-control\" ng-model=\"modalObjContainer.data.contactObj.email\" tabindex=\"8\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"modal-footer\">\n" +
        "\n" +
        "\n" +
        "                <button class=\"btn btn-default\" ng-click=\"Cancel()\" tabindex=\"14\">Cancel</button>\n" +
        "                <button class=\"btn btn-primary\" ng-click=\"EditSiteInfo(ContactListForm)\" tabindex=\"13\">Edit</button>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "        </form>\n" +
        "    </script>\n" +
        "\n" +
        "\n" +
        "\n" +
        "    <script type=\"text/ng-template\" id=\"editReportInfo.html\">\n" +
        "\n" +
        "        <div class=\"modal-header dividerline\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"Cancel()\" aria-label=\"Close\" tabindex=\"15\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Edit Site Info</h4>\n" +
        "        </div>\n" +
        "\n" +
        "        <form name=\"ReportListForm\" novalidate>\n" +
        "            <div class=\"modal-body \">\n" +
        "\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"reporttemplate\" class=\"control-label\">\n" +
        "                                Report Template:\n" +
        "                            </label>\n" +
        "                            <select id=\"reporttemplate\" ng-model=\"modalObjContainer.data.templateObj\" class=\"form-control\" data-ng-options=\"template as template.name for template in portfolio.loadData.templates\" tabindex=\"9\"></select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"languagelibrary\" class=\"control-label\">\n" +
        "                                Language Library:\n" +
        "                            </label>\n" +
        "                            <select id=\"languagelibrary\" ng-model=\"modalObjContainer.data.libraryObj\" class=\"form-control\" data-ng-options=\"lib as lib.name for lib in portfolio.loadData.libraries | filter: lib.reportType = modalObjContainer.data.templateObj.reportType\" tabindex=\"10\"></select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"consultant\" class=\"control-label\">\n" +
        "                                Consultant:\n" +
        "                            </label>\n" +
        "                            <select id=\"consultant\" ng-model=\"modalObjContainer.data.consultantObj\" class=\"form-control\" data-ng-options=\"consultant as consultant.name for consultant in portfolio.loadData.relatedCompanies | filter: modalObjContainer.filterByContains('functions', 'Consultant')\" tabindex=\"11\"></select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"fee\" class=\"control-label\">\n" +
        "                                Fee:\n" +
        "                            </label>\n" +
        "                            <input id=\"fee\" type=\"text\" class=\"form-control\" ng-model=\"modalObjContainer.data.fee\" tabindex=\"12\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <button class=\"btn btn-default\" ng-click=\"Cancel()\" tabindex=\"14\">Cancel</button>\n" +
        "                <button class=\"btn btn-primary\" ng-click=\"EditReportInfo(ReportListForm)\" tabindex=\"13\">Edit</button>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "        </form>\n" +
        "</body>\n" +
        "\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/PortfolioCreation/views/portfolio.Email.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/PortfolioCreation/views/portfolio.Email.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"alert alert-info\">\n" +
        "        <p>\n" +
        "            <b>\n" +
        "                This step automatically emails you and attaches a PDF document with the project information for your records.<br>\n" +
        "                If you would like to notify additional project team members and/or client contacts that the project has been setup in PARCEL, please add their email addresses in the CC box below. Otherwise, click 'Send Email' to complete the Project Setup.\n" +
        "            </b>\n" +
        "        </p>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"form-horizontal\" ng-controller=\"PortfolioEmailCtrl as email\">\n" +
        "\n" +
        "        <form name=\"EmailForm\">\n" +
        "\n" +
        "            <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"email.serviceResponseAlert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"email.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                    <span aria-hidden=\"true\">&times;</span>\n" +
        "                </button>\n" +
        "                {{email.serviceResponseText}}\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <label class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    To:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <p class=\"form-control-static\">\n" +
        "                        {{portfolio.loadData.currentUser.email}}\n" +
        "                    </p>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\" form-group\">\n" +
        "                <label class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    From:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <p class=\"form-control-static\">\n" +
        "                        {{portfolio.loadData.currentUser.email}}\n" +
        "                    </p>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"cc\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    CC:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\" emailfield-validation=\"CC\">\n" +
        "                    <!-- <textarea autofocus id=\"cc\" class=\"form-control\" type=\"text\" ng-model=\"email.emailCC\" tabindex=\"1\"></textarea>-->\n" +
        "                    <input type=\"text\" class=\"form-control\" id=\"cc\" ng-model=\"email.emailCC\" tabindex=\"1\" name=\"CC\" />\n" +
        "                    <!--<a class=\"pointer\" ng-click=\"email.ShowFindContact()\">Find Contact</a>-->\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"message\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Message:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <textarea id=\"message\" class=\"form-control\" rows=\"6\" type=\"text\" ng-model=\"email.emailBody\" tabindex=\"2\"></textarea>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "        </form>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/PortfolioCreation/views/portfolio.FeeInformation.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/PortfolioCreation/views/portfolio.FeeInformation.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "\n" +
        "    <form name=\"feeInformationForm\" class=\"form-horizontal\">\n" +
        "\n" +
        "\n" +
        "        <div class=\"overflow-auto\" ng-controller=\"PortfolioFeeInfoCtrl as feeInfo\">\n" +
        "\n" +
        "            <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"feeInfo.serviceResponseAlert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"feeInfo.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                    <span aria-hidden=\"true\">&times;</span>\n" +
        "                </button>\n" +
        "                {{feeInfo.serviceResponseText}}\n" +
        "            </div>\n" +
        "            <div class=\"table-responsive\">\n" +
        "                <table class=\"table table-condensed table-bordered\">\n" +
        "\n" +
        "                    <thead>\n" +
        "                        <tr>\n" +
        "                            <th>Property #</th>\n" +
        "                            <th>Address</th>\n" +
        "                            <th>Report</th>\n" +
        "                            <th>Consultant</th>\n" +
        "                            <th>Language Library</th>\n" +
        "                            <th>Project Number</th>\n" +
        "                            <th>Cost to Client</th>\n" +
        "                        </tr>\n" +
        "                    </thead>\n" +
        "                    <tbody>\n" +
        "                        <tr ng-repeat=\"data in feeInfo.tableArr\">\n" +
        "                            <td>{{data.propertyNumber}}</td>\n" +
        "                            <td>{{data.address}}</td>\n" +
        "                            <td>{{data.reportType}}</td>\n" +
        "                            <td>\n" +
        "                                <select ng-model=\"data.companyGUID\" class=\"form-control\" data-ng-options=\"consultant.companyGUID as consultant.name for consultant in portfolio.loadData.relatedCompanies | filter: portfolio.filterByContains('functions', 'Consultant')\" tabindex=\"1\" autofocus>\n" +
        "                                    <option value=\"\">Select Consultant</option>\n" +
        "                                </select>\n" +
        "                            </td>\n" +
        "                            <td>\n" +
        "                                <select class=\"form-control\" ng-model=\"data.languageLibraryGUID\" data-ng-options=\"lib.libraryGUID as lib.name for lib in portfolio.loadData.libraries | filter: lib.reportType = data.reportType\" tabindex=\"2\">\n" +
        "                                    <option value=\"\">\n" +
        "                                        Select Language Library\n" +
        "                                    </option>\n" +
        "                                </select>\n" +
        "                            </td>\n" +
        "                            <td>\n" +
        "                                <input class=\"form-control\" type=\"text\" name=\"projNumber\" ng-model=\"data.projectNumber\" tabindex=\"3\">\n" +
        "\n" +
        "                            </td>\n" +
        "\n" +
        "\n" +
        "                            <td class=\"cost-to-client\">\n" +
        "                                <div class=\"form-inline\">\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <input class=\"form-control\" type=\"text\" name=\"costToClient\" ng-model=\"data.fee\" tabindex=\"4\">\n" +
        "                                    </div>\n" +
        "\n" +
        "                                    <button ng-show=\"$index==0 && feeInfo.tableArr.length>1\" class=\"btn btn-sm btn-primary\" ng-click=\"fillDown(data.fee,data.projectNumber)\">Fill Down</button>\n" +
        "\n" +
        "                                </div>\n" +
        "                            </td>\n" +
        "\n" +
        "                        </tr>\n" +
        "\n" +
        "                    </tbody>\n" +
        "\n" +
        "                </table>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </form>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/PortfolioCreation/views/portfolio.GrantAccess.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/PortfolioCreation/views/portfolio.GrantAccess.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <div class=\"form-horizontal\">\n" +
        "        <div ng-controller=\"PortfolioGrantAccessCtrl as grantAccess\">\n" +
        "            <div class=\"form-group required\">\n" +
        "                <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"grantAccess.serviceResponseAlert\">\n" +
        "                    <button type=\"button\" class=\"close\" ng-click=\"grantAccess.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                        <span aria-hidden=\"true\">&times;</span>\n" +
        "                    </button>\n" +
        "                    {{grantAccess.serviceResponseText}}\n" +
        "                </div>\n" +
        "\n" +
        "                <label for=\"grantaccessto\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Grant access to:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-5\" field-validation=\"Grant access to\">\n" +
        "\n" +
        "                    <select id=\"grantaccessto\" class=\"form-control\" data-ng-options=\"grp as grp.name for grp in portfolio.loadData.grantAccessGrps\" ng-model=\"grantAccess.accessParty\" ng-required=\"portfolio.loadData.grantAccessGrps && portfolio.loadData.grantAccessGrps.length\" name=\"grantAccess\" focus-if tabindex=\"1\">\n" +
        "                    </select>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/PortfolioCreation/views/portfolio.ProjectInformation.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/PortfolioCreation/views/portfolio.ProjectInformation.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "    <style>\n" +
        "\n" +
        "\n" +
        "    </style>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div>\n" +
        "        <p class=\"alert alert-info\">\n" +
        "            <b>\n" +
        "                You have selected to create a new Portfolio. A Portfolio is a project with contains multiple sites. Multiple sites is considered to be two or more sites. If you have a single site, please select <a href=\"#\" ui-sref=\"quickCreateProj\" tabindex=\"-1\">'New Single Site Project'</a>. Creating a new project is a multi-step process. After you complete and save each section, simply click the 'Next' button to advance.                                \n" +
        "            </b>\n" +
        "\n" +
        "        </p>\n" +
        "        <hr>\n" +
        "\n" +
        "        <form name=\"propertyInfoForm\" class=\"form-horizontal\" ng-controller=\"PortfolioProjectInfoController as projectInfo\" confirm-on-exit>\n" +
        "\n" +
        "            <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"projectInfo.serviceResponseAlert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"projectInfo.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                    <span aria-hidden=\"true\">&times;</span>\n" +
        "                </button>\n" +
        "                {{projectInfo.serviceResponseText}}\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label for=\"projectName\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Project Name:\n" +
        "                </label>\n" +
        "\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Project Name\">\n" +
        "                    <input id=\"projectName\" type=\"text\" class=\"form-control\" name=\"projectName\" ng-model=\"projectInfo.data.name\" required focus-if>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label for=\"clientrequestingwork\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Client Requesting Work:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Client\">\n" +
        "                    <select id=\"clientrequestingwork\" name=\"requestingClient\" class=\"form-control\" ng-model=\"projectInfo.data.client.companyName\" data-ng-options=\"client.name as client.name for client in portfolio.filteredClients = (portfolio.loadData.relatedCompanies | filter: portfolio.filterByContains('functions', 'Client'))\" ng-required=\"portfolio.filteredClients && portfolio.filteredClients.length\">\n" +
        "                        <option value=\"\">Select a Client</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Date draft report:\n" +
        "                </label>\n" +
        "\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4 \" field-validation=\"Draft Due Date\">\n" +
        "                    <div class=\"input-group\">\n" +
        "\n" +
        "                        <input name=\"draftDate\" type=\"text\" class=\"form-control\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"projectInfo.data.draftDueDate\" is-open=\"open.draftDate\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"true\" required ng-click=\"openCalendar($event, 'draftDate')\" show-button-bar=\"false\" tabindex=\"3\">\n" +
        "\n" +
        "                        <span class=\"input-group-btn\">\n" +
        "                                <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'draftDate')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        " \n" +
        "                            </span>\n" +
        "                    </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Date final report:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4 \" field-validation=\"Date Final Due\">\n" +
        "\n" +
        "                    <div class=\"input-group\">\n" +
        "\n" +
        "                        <input name=\"finalDate\" type=\"text\" class=\"form-control\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"projectInfo.data.finalDueDate\" is-open=\"open.finalDate\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"true\" required ng-click=\"openCalendar($event, 'finalDate')\" show-button-bar=\"false\" tabindex=\"4\">\n" +
        "\n" +
        "                        <span class=\"input-group-btn\">\n" +
        "                                <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'finalDate')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        " \n" +
        "                            </span>\n" +
        "                    </div>\n" +
        "\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"projectcomments\" class=\"control-label col-md-3 col-sm-4 col-xs-12\">\n" +
        "                    Project Comments:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                    <textarea id=\"projectcomments\" name=\"projectcomments\" rows=\"5\" class=\"form-control\" placeholder=\"Project Comments\" ng-model=\"projectInfo.data.comments\"></textarea>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "\n" +
        "                <div class=\"col-md-offset-3 col-md-9 col-sm-9 col-xs-12 \">\n" +
        "                    <label class=\"radio-inline\">\n" +
        "                        <input type=\"radio\" name=\"optradio\" ng-model=\"projectInfo.data.addSiteMethod\" value=\"{{portfolio.addSiteMethodTypes.manual}}\"> Manually Enter Site(s)\n" +
        "                    </label>\n" +
        "                    <label class=\"radio-inline\">\n" +
        "                        <input type=\"radio\" name=\"optradio\" ng-model=\"projectInfo.data.addSiteMethod\" value=\"{{portfolio.addSiteMethodTypes.upload}}\"> Upload Site Spreadsheet\n" +
        "                    </label>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "        </form>\n" +
        "    </div>\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/PortfolioCreation/views/portfolio.PropertyUpload.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/PortfolioCreation/views/portfolio.PropertyUpload.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <div>\n" +
        "        <h4 class=\"headingmain\"> Upload Site Spreadsheet</h4>\n" +
        "        <div>\n" +
        "\n" +
        "            <p>\n" +
        "                To upload an Excel spreadsheet containing Property Information, please complete the following steps:\n" +
        "            </p>\n" +
        "            <ol>\n" +
        "                <li>Save the Excel template : <b><a href=\"app/modules/PortfolioCreation/assets/propertyTemplate.xls\">XLS</a></b> or <b><a href=\"app/modules/PortfolioCreation/assets/propertyTemplate.xlsx\">XLSX</a></b> to your computer and open it from there.</li>\n" +
        "                <li>Fill out the spreadsheet with your site information, and save your changes.\n" +
        "                    <br> Each site must have data entered for address, city, and state/province.</li>\n" +
        "                <li>Click the \"Browse\" button below these instructions and select the file that you just saved.</li>\n" +
        "                <li>Click the \"Upload File\" button.</li>\n" +
        "            </ol>\n" +
        "            <div class=\"\" ng-controller=\"ReportInfoCtrl as reportInfo\">\n" +
        "                <form class=\"form-horizontal\">\n" +
        "\n" +
        "                    <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"reportInfo.serviceResponseAlert\">\n" +
        "                        <button type=\"button\" class=\"close\" ng-click=\"reportInfo.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                            <span aria-hidden=\"true\">&times;</span>\n" +
        "                        </button>\n" +
        "                        {{reportInfo.serviceResponseText}}\n" +
        "                    </div>\n" +
        "                   \n" +
        "                        <div class=\"form-group\">\n" +
        "                            <span class=\"btn btn-md btn-primary fileinput-button\" ng-class=\"{disabled: disabled}\"><i\n" +
        "							class=\"fa fa-file-text-o\"></i> Choose File <input id=\"file-3\"\n" +
        "							type=\"file\" data-file-input=\"files\"\n" +
        "							ngf-select ngf-change=\"upload($files)\" ngf-multiple=\"false\">\n" +
        "						</span>\n" +
        "                            <!--<button type=\"button\" class=\"btn btn-md btn-primary start\" ng-click=\"reportInfo.Upload()\">\n" +
        "                                <span class=\"glyphicon glyphicon-upload\"></span> Upload File\n" +
        "                            </button>-->\n" +
        "                            <span class=\"AU_uploadFilename text-primary\" ng-repeat=\"file in files\">{{file.name}}</span>\n" +
        "                        </div>                    \n" +
        "\n" +
        "                </form>\n" +
        "\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/PortfolioCreation/views/portfolio.ReportInformation.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/PortfolioCreation/views/portfolio.ReportInformation.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div ng-controller=\"PortfolioReportInformationController as reportInfo\">\n" +
        "\n" +
        "        <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"reportInfo.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"reportInfo.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{reportInfo.serviceResponseText}}\n" +
        "        </div>\n" +
        "\n" +
        "        <form novalidate>\n" +
        "            <div class=\"form-horizontal\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"propertyname\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Property Name:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                        <input id=\"propertyname\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].name\" tabindex=\"1\" focus-if>\n" +
        "                    </div>\n" +
        "                    <!--<span class=\"text-danger\"> * </span>-->\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"propertytype\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Property Type:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                        <select id=\"propertytype\" class=\"form-control\" data-ng-options=\"propertyType.propertyTypeGUID as propertyType.propertyTypeName for propertyType in portfolio.loadData.propertyTypes\" ng-model=\"reportInfo.locations[reportInfo.locationCount].propertyTypeGUID\" tabindex=\"2\">\n" +
        "                            <option ng-if=\"!portfolio.submitData\" value=\"\">*** Select one from the list ***</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label for=\"address\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Address:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4\" field-validation=\"Address\">\n" +
        "                        <input id=\"address\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].address1\" required name=\"locationAddress1\" tabindex=\"3\">\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4 col-md-offset-3 col-sm-offset-3\">\n" +
        "                        <input type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].address2\" tabindex=\"4\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group required\">\n" +
        "\n" +
        "                    <label for=\"country\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Country:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4\" field-validation=\"Country\">\n" +
        "                        <!--<select id=\"country\" class=\"form-control\" required ng-model=\"reportInfo.locations[reportInfo.locationCount].country\" name=\"country\" tabindex=\"5\">\n" +
        "                        <option></option>\n" +
        "                        <option>United States</option>\n" +
        "                        <option>Other</option>\n" +
        "                    </select>-->\n" +
        "                        <select class=\"form-control\" id=\"country\" type=\"select\" country-model=\"reportInfo.locations[reportInfo.locationCount].country\" country-select required name=\"country\" tabindex=\"5\">\n" +
        "                            <option value=\"\">Select Country</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                        City/State or Province/Zip:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-2 col-md-2\" field-validation=\"City\">\n" +
        "                        <input type=\"text\" class=\"form-control\" placeholder=\"City\" required ng-model=\"reportInfo.locations[reportInfo.locationCount].city\" name=\"city\" tabindex=\"6\">\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-2 col-md-2\" field-validation=\"State\">\n" +
        "                        <!--<input type=\"text\" class=\"form-control\" placeholder=\"State or Province\" required ng-model=\"reportInfo.locations[reportInfo.locationCount].state\" name=\"state\" tabindex=\"7\">-->\n" +
        "                        <select class=\"form-control\" id=\"state\" type=\"select\" state-model=\"reportInfo.locations[reportInfo.locationCount].state\" state-select country-model=\"reportInfo.locations[reportInfo.locationCount].country\" name=\"state\" required tabindex=\"7\">\n" +
        "                            <option value=\"\">Select State</option>\n" +
        "                        </select>\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"state\" ng-model=\"reportInfo.locations[reportInfo.locationCount].state\" required name=\"propertyStateIp\" state-input tabindex=\"7\">\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-2 col-md-2\" field-validation=\"Zip\">\n" +
        "                        <input type=\"text\" class=\"form-control\" placeholder=\"Zip\" required ng-model=\"reportInfo.locations[reportInfo.locationCount].zip\" name=\"zip\" id=\"zip\" data-CountryCode=\"{{reportInfo.locations[reportInfo.locationCount].country.code}}\" required tabindex=\"8\" format-zip>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"county\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        County:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                        <input id=\"county\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].county\" tabindex=\"9\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"latitude\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Latitude:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                        <input id=\"latitude\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].latitude\" tabindex=\"10\">\n" +
        "                    </div>\n" +
        "                    <label class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        <span class=\"pull-left\">(Example: 42.3462)</span>\n" +
        "                    </label>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"longitude\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Longitude:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "                        <input id=\"longitude\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].longitude\" tabindex=\"11\">\n" +
        "                    </div>\n" +
        "                    <label class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        <span class=\"pull-left\">(Example: -71.0978)</span>\n" +
        "                    </label>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "                <div class=\"form-group \">\n" +
        "                    <label for=\"propertycontactname\" class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                        Property Contact Name:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4 \">\n" +
        "                        <input id=\"propertycontactname\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].siteContact.name\" tabindex=\"12\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group \">\n" +
        "                    <label for=\"phone\" class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                        Phone:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4 \">\n" +
        "                        <input id=\"phone\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].siteContact.phone\" tabindex=\"13\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group \">\n" +
        "                    <label for=\"fax\" class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                        Fax:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4 \">\n" +
        "                        <input id=\"fax\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].siteContact.fax\" tabindex=\"14\">\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"form-group \">\n" +
        "                    <label for=\"email\" class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                        Email:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4 \" field-validation=\"Email\">\n" +
        "                        <input id=\"email\" name=\"reportInfoEmail\" type=\"email\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].siteContact.email\" tabindex=\"15\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group \">\n" +
        "                    <label for=\"po\" class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                        PO #:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4 \">\n" +
        "                        <input id=\"po\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.poNumber\" tabindex=\"16\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"transactiontype\" class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                        Transaction Type:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4 \">\n" +
        "                        <select id=\"transactiontype\" class=\"form-control \" data-ng-options=\"transactionType.transactionTypeGUID as transactionType.transactionTypeName for transactionType in portfolio.loadData.transactionTypes\" ng-model=\"reportInfo.locations[reportInfo.locationCount].transactionTypeGUID\" tabindex=\"17\">\n" +
        "                            <option value=\"\">*** Select one from the list ***</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"property\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Property #:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-3 col-md-4 \">\n" +
        "                        <input id=\"property\" type=\"text\" class=\"form-control\" ng-model=\"reportInfo.locations[reportInfo.locationCount].propertyNumber\" tabindex=\"18\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label class=\"control-label col-md-3 col-sm-3 col-xs-12 \">\n" +
        "                        Report Requested:\n" +
        "                    </label>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-8 col-md-8\" field-validation=\"Report Requested\">\n" +
        "                        <multiselect class=\"input-xlarge dropup\" multiple=\"true\" ng-model=\"reportInfo.locations[reportInfo.locationCount].reports\" options=\"template as template.name for template in portfolio.loadData.templates\" required name=\"reports\" header=\"Select Report Requested\" place-holder=\"Search Report Requested \" tabindex=\"19 \"></multiselect>\n" +
        "\n" +
        "                        <!--<span class=\"help-block error-text \" ng-if=\"!reportInfo.locations[reportInfo.locationCount].reports || !reportInfo.locations[reportInfo.locationCount].reports.length \">Reports are mandatory</span>-->\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group \">\n" +
        "                    <div class=\"col-md-offset-3 col-md-9 col-xs-12 \">\n" +
        "                        <button type=\"button \" class=\"btn btn-md btn-success \" ng-click=\"reportInfo.addAnotherSite() \" tabindex=\"20 \"> Add another site</button>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "\n" +
        "    </div>\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/PortfolioCreation/views/portfolio.UploadedSiteDetails.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/PortfolioCreation/views/portfolio.UploadedSiteDetails.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <div ng-controller=\"PortfolioUploadedSiteDetailsCtrl as uploadedSiteDetails\">\n" +
        "\n" +
        "        <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"uploadedSiteDetails.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"uploadedSiteDetails.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{uploadedSiteDetails.serviceResponseText}}\n" +
        "        </div>\n" +
        "\n" +
        "        <div>\n" +
        "\n" +
        "            <button type=\"button\" class=\"btn btn-md btn-primary\" ng-click=\"uploadedSiteDetails.addNewLocation()\">Add New Location</button>\n" +
        "\n" +
        "            <form name=\"\" class=\"form-horizontal\">\n" +
        "\n" +
        "                <div class=\"table-responsive\">\n" +
        "\n" +
        "                    <table class=\"table table-condensed  table-bordered table-hover top-margin no-wrapthead\">\n" +
        "\n" +
        "                        <thead>\n" +
        "                            <tr>\n" +
        "                                <th>Actions</th>\n" +
        "                                <th>Project Number</th>\n" +
        "\n" +
        "                                <th>Property #</th>\n" +
        "                                <th>Name</th>\n" +
        "                                <th>Address</th>\n" +
        "                                <th>City</th>\n" +
        "                                <th>State</th>\n" +
        "                                <th>Zip</th>\n" +
        "                                <th>Country</th>\n" +
        "                                <th>Latitude</th>\n" +
        "                                <th>Longitude</th>\n" +
        "                                <th>Contact</th>\n" +
        "                                <th>Phone</th>\n" +
        "                                <th>Fax</th>\n" +
        "                                <th>Email</th>\n" +
        "                                <th>PO #</th>\n" +
        "                            </tr>\n" +
        "                        </thead>\n" +
        "                        <tbody>\n" +
        "                            <tr ng-repeat=\"site in uploadedSiteDetails.siteDetails\">\n" +
        "                                <td>\n" +
        "                                    <div class=\"btn-group\">\n" +
        "										<button class=\"btn btn-primary btn-xs\" ng-click=\"uploadedSiteDetails.editSite(site)\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Edit\"><i class=\"fa fa-pencil\"></i></button>\n" +
        "										<button class=\"btn btn-danger btn-xs\" ng-click=\"uploadedSiteDetails.deleteSite(site)\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Delete\"><i class=\"glyphicon glyphicon-trash\"></i></button>\n" +
        "                                    </div>\n" +
        "                                </td>\n" +
        "                                <td>{{site.projectNumber}}</td>\n" +
        "                                <td>{{site.propertyNumber}}</td>\n" +
        "                                <td>{{site.name}}</td>\n" +
        "                                <td>{{site.address1}}</td>\n" +
        "                                <td>{{site.city}}</td>\n" +
        "                                <td>{{site.state.name}}</td>\n" +
        "                                <td>{{site.zip}}</td>\n" +
        "                                <td>{{site.country.name}}</td>\n" +
        "                                <td>{{site.latitude}}</td>\n" +
        "                                <td>{{site.longitude}}</td>\n" +
        "                                <td>{{site.contact}}</td>\n" +
        "                                <td>{{site.phone}}</td>\n" +
        "                                <td>{{site.fax}}</td>\n" +
        "                                <td>{{site.email}}</td>\n" +
        "                                <td>{{site.poNumber}}</td>\n" +
        "                            </tr>\n" +
        "\n" +
        "                        </tbody>\n" +
        "\n" +
        "\n" +
        "                    </table>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "            </form>\n" +
        "        </div>\n" +
        "        <div class=\"col-md-offset-4 col-md-8 col-sm-8 col-xs-12 top-margin\">\n" +
        "            <!-- <button type=\"button\" class=\"btn btn-md btn-primary \" ui-sref=\"PortfolioCreation.UploadedSitesReportSelection\">Continue</button>-->\n" +
        "            <button type=\"button\" class=\"btn btn-md btn-default \" ng-click=\"uploadedSiteDetails.deleteAllSites()\">Delete All Sites and Re-Upload</button>\n" +
        "        </div>\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/PortfolioCreation/views/portfolio.UploadedSitesReportSelection.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/PortfolioCreation/views/portfolio.UploadedSitesReportSelection.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <div>\n" +
        "        <h4 class=\"headingmain\"> Upload Spreadsheet Option - Template Selection</h4>\n" +
        "        <div class=\"\" ng-controller=\"UploadedSitesReportSelectionCtrl as reportSelection\">\n" +
        "\n" +
        "            <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"reportSelection.serviceResponseAlert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"reportSelection.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                    <span aria-hidden=\"true\">&times;</span>\n" +
        "                </button>\n" +
        "                {{reportSelection.serviceResponseText}}\n" +
        "            </div>\n" +
        "\n" +
        "            <form name=\"feeInformationForm\">\n" +
        "                <table class=\"table table-condensed  table-bordered table-hover no-margin\">\n" +
        "\n" +
        "                    <thead>\n" +
        "                        <tr>\n" +
        "                            <th>Address</th>\n" +
        "                            <th>Transaction Type</th>\n" +
        "                            <th>Report Requested</th>\n" +
        "                        </tr>\n" +
        "                    </thead>\n" +
        "                    <tbody>\n" +
        "                        <tr ng-repeat=\"location in reportSelection.data.locations\">\n" +
        "                            <td>\n" +
        "                                {{location.address1}}\n" +
        "                            </td>\n" +
        "                            <td>\n" +
        "                                <select class=\"form-control \" data-ng-options=\"transactionType.transactionTypeGUID as transactionType.transactionTypeName for transactionType in portfolio.loadData.transactionTypes\" ng-model=\"location.transactionTypeGUID\">\n" +
        "                                    <option value=\"\">*** Select one from the list ***</option>\n" +
        "                                </select>\n" +
        "                            </td>\n" +
        "\n" +
        "                            <td id=\"showPopupatTop\" class=\"cost-to-client\" multiselectfield-validation=\"Report Requested\">\n" +
        "\n" +
        "                                <multiselect class=\"col-sm-8\" multiple=\"true\" ng-model=\"location.reports\" options=\"template as template.name for template in portfolio.loadData.templates\" name=\"reports{{$index}}\" required></multiselect>\n" +
        "\n" +
        "                                <button ng-show=\"$index==0 && reportSelection.data.locations.length>1\" class=\"btn btn-primary\" ng-click=\"reportSelection.fillReportAndTransactionDown(location.reports,location.transactionTypeGUID)\">Fill Down</button>\n" +
        "\n" +
        "                            </td>\n" +
        "                        </tr>\n" +
        "                    </tbody>\n" +
        "\n" +
        "                </table>\n" +
        "            </form>\n" +
        "        </div>\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/PortfolioCreation/views/portfolio.successmessage.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/PortfolioCreation/views/portfolio.successmessage.html",
        "<!doctype html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"utf-8\">\n" +
        "    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n" +
        "\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"col-md-9 col-sm-9 border-1\" ng-controller=\"PortfolioSuccessMessageCtrl as successmessage\">\n" +
        "\n" +
        "\n" +
        "        <div class=\"panel panel-default top-margin\">\n" +
        "            <div class=\"panel-body bg-gray\">\n" +
        "                <ul class=\"nav nav-pills nav-stacked\">\n" +
        "                    <h4>The Project has been successfully setup. Please select one of the following links to: </h4>\n" +
        "                    <li>\n" +
        "                        <a href=\"#\"> <i class=\"fa fa-home btn btn-md btn-warning icon-16\"></i> &nbsp; Return to Home Page</a>\n" +
        "                    </li>\n" +
        "                    <li>\n" +
        "                        <a href=\"\" ng-click='addAnotherProject()'> <i class=\"fa fa-book btn btn btn-md btn-warning icon-16\"></i> &nbsp; Setup Another Project</a>\n" +
        "                    </li>\n" +
        "                    <li><a href=\"#\"><i class=\"fa fa-user btn btn-md btn-warning icon-16\"></i>  &nbsp; Grant Access </a></li>\n" +
        "                    <li>\n" +
        "                        <a href=\"{{viewDashBoardURL}}\"> <i class=\"fa fa-tachometer btn btn-md btn-warning icon-16\"></i> &nbsp; View Project Dashboard </a>\n" +
        "                    </li>\n" +
        "                    <div align=\"center\" class=\"top-margin\">\n" +
        "                        <button type=\"button\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-log-out\"></span>&nbsp;&nbsp;Exit Parcel </button>\n" +
        "                    </div>\n" +
        "                </ul>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ProjectCreation/views/ProjectSearch.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/ProjectSearch.html",
        "<div class=\"container-fluid\" ng-controller=\"ProjectSearchCtrl as ProjectSearchCtrl\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "		<div class=\"panel-body\">	\n" +
        "        <h2 class=\"page-header\">Project Management</h2>\n" +
        "\n" +
        "        <form name=\"ProjectPortfolioSearch\" confirm-on-exit>\n" +
        "            <div class=\"row\">                \n" +
        "                <div class=\"col-xs-3 col-xs-offset-3\">\n" +
        "                    <h6>Search for Project/Reports Where</h6>\n" +
        "                </div>                \n" +
        "                <div class=\"col-xs-3 col-xs-offset-3\">\n" +
        "                    <h6><span class=\"reqText\">*</span> Dates are to be entered as \"YYYY-MM-DD\"</h6>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-xs-3\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <select class=\"form-control\">\n" +
        "                            <option>And</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"col-xs-3\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <select class=\"form-control\" name=\"field1\" ng-model=\"ProjectSearchCtrl.ProjectSearchFields.field1\" ng-change=\"ProjectSearchCtrl.getSearchOperators(ProjectSearchCtrl.ProjectSearchFields.field1,'type1')\">                                                      \n" +
        "                           <option ng-repeat=\"filter in ProjectSearchCtrl.ProjectSearchFilters\" value=\"{{filter.filterGUID}}\">{{filter.filterName}}</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <select class=\"form-control\" name=\"field2\" ng-model=\"ProjectSearchCtrl.ProjectSearchFields.field2\" ng-change=\"ProjectSearchCtrl.getSearchOperators(ProjectSearchCtrl.ProjectSearchFields.field2,'type2')\">\n" +
        "                           <option ng-repeat=\"filter in ProjectSearchCtrl.ProjectSearchFilters\" value=\"{{filter.filterGUID}}\">{{filter.filterName}}</option>                           \n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <h6>Within</strong></h6>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <select class=\"form-control\" name=\"ReportTypes\" ng-init=\"ProjectSearchCtrl.ProjectSearchFields.reportTypes='ALL'\" ng-model=\"ProjectSearchCtrl.ProjectSearchFields.reportTypes\" multiple>\n" +
        "                            <option value=\"ALL\">All Report Types</option>\n" +
        "        <option ng-repeat=\"rtype in ProjectSearchCtrl.allReportTypes\" value=\"{{rtype.reportTypeGUID}}\">{{rtype.reportTypeName}}</option>\n" +
        "                           \n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"col-xs-3\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <select class=\"form-control\"  name=\"type1\" ng-init=\"ProjectSearchCtrl.ProjectSearchFields.type1='Contains'\" ng-model=\"ProjectSearchCtrl.ProjectSearchFields.type1\">\n" +
        "                           <option ng-repeat=\"filter in ProjectSearchCtrl.ProjectSearchOperators1\" value=\"{{filter.operatorGUID}}\">{{filter.operatorName}}</option> \n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <select class=\"form-control\" name=\"type2\" ng-init=\"ProjectSearchCtrl.ProjectSearchFields.type2='Contains'\" ng-model=\"ProjectSearchCtrl.ProjectSearchFields.type2\">\n" +
        "                           <option ng-repeat=\"filter in ProjectSearchCtrl.ProjectSearchOperators2\" value=\"{{filter.operatorGUID}}\">{{filter.operatorName}}</option> \n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>                                \n" +
        "            \n" +
        "                <div class=\"col-xs-3\">\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "    <input class=\"form-control\" type=\"text\" name=\"text1\" ng-model=\"ProjectSearchCtrl.ProjectSearchFields.text1\" required>                        \n" +
        "                    </div>\n" +
        "\n" +
        "                          <div class=\"form-group\">                                \n" +
        "                            <input class=\"form-control\" name=\"text2\" ng-model=\"ProjectSearchCtrl.ProjectSearchFields.text2\"  type=\"text\" required>                                        </div>\n" +
        "                    \n" +
        "                </div>\n" +
        "            \n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"row\">\n" +
        "            <div class=\"col-xs-12\">\n" +
        "                    <div class=\"text-center\">\n" +
        "            <button type=\"button\" class=\"btn btn-primary\" ng-click=\"ProjectSearchCtrl.SearchProjects()\">Submit</button>\n" +
        "                        </div>\n" +
        "            </div></div>\n" +
        "        \n" +
        "        </form>\n" +
        "        <!--<hr>-->\n" +
        "        <div class=\"row\" ng-init=\"ProjectSearchCtrl.showSearchResults=false\" ng-show=\"ProjectSearchCtrl.showSearchResults\">\n" +
        "            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n" +
        "                <div class=\"table-responsive\">\n" +
        "                    <table  class=\"table table-striped\" width=\"100%\" id=\"tblprojectSearch\" name=\"tblprojectSearch\">\n" +
        "                        <thead>\n" +
        "                            <tr>\n" +
        "                                <th class=\"filter\"><a>Project Name</a></th>\n" +
        "                                <th>Project Number</th>\n" +
        "                                <th class=\"filter\"><a>Client</a> </th>\n" +
        "                                <th># Sites Final/Total </th>\n" +
        "                                <!--<th>Actions</th>-->\n" +
        "                            </tr>\n" +
        "                        </thead>\n" +
        "                        <tbody>                            \n" +
        "\n" +
        "                           <!-- <tr ng-repeat=\"search in ProjectSearchCtrl.SearchData\">\n" +
        "                                <td scope=\"row\" ng-bind=\"search.projectName\"></td>\n" +
        "                                <td ng-bind=\"search.projectNumber\"></td>\n" +
        "                                <td><a href=\"#\" type=\"button\" data-toggle=\"tooltip\" data-placement=\"bottom\" ng-bind=\"search.clientCompanyName\"> </a></td>\n" +
        "                                <td ng-bind=\"search.FinalTotal\"></td>\n" +
        "                                <td><a type=\"button\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Go to the Access Management Page for this Page \">Access</a>&nbsp;&nbsp;\n" +
        "                                <a type=\"button\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"View document for this Project\">Documents</a>&nbsp;\n" +
        "                                <a type=\"button\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Archive this Project\">Archive</a></td>\n" +
        "                            </tr>        -->     \n" +
        "                           \n" +
        "                        </tbody>\n" +
        "                    </table>\n" +
        "\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>   \n" +
        "		</div>\n" +
        "		</div>\n" +
        "	</div>");
}]);

angular.module("../app/modules/ProjectCreation/views/additionalPropertyInfo.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/additionalPropertyInfo.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "\n" +
        "    <style>\n" +
        "\n" +
        "\n" +
        "    </style>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <a class=\"collapsed pointer\" data-toggle=\"collapse\" data-target=\"#collapseAddPropertyInformation\">Additional Property Information </a>\n" +
        "        </h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapseAddPropertyInformation\" class=\"panel-collapse collapse \">\n" +
        "        <div class=\"panel-body\" ng-controller=\"AddPropertyInfoCtrl as additionalPropertyInformation\">\n" +
        "\n" +
        "            <div class=\"form-horizontal\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"propType\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Property Type:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <select class=\"form-control\" id=\"propType\" type=\"select\" name=\"propTypes\" ng-model=\"main.submitData.property.propertyTypeGUID\" data-ng-options=\"propertyType.propertyTypeGUID as propertyType.propertyTypeName for propertyType in main.loadData.propertyTypes\">\n" +
        "                            <option value=\"\">Select a Property Type</option>\n" +
        "                            <option value=\"Other...\">Other...</option>\n" +
        "                        </select>\n" +
        "\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\" ng-show=\"additionalPropertyInformation.property.propertyType == 'Other...'\">\n" +
        "\n" +
        "                    <div class=\"col-md-offset-3 col-xs-12 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"otherPropType\" ng-model=\"main.submitData.property.propertyType\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"county\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">County:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"county\" ng-model=\"main.submitData.property.county\" name=\"County\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"latitude\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Latitude:\n" +
        "                        <a ng-click=\"additionalPropertyInformation.showLatLonHelp()\" class=\"pointer\" title=\"When to enter the latitude and longitude of your site.\"> <i class=\" text-blue fa fa-question-circle\"></i></a>\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"latitude\" ng-model=\"main.submitData.property.latitude\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"longitude\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Longitude:\n" +
        "                        <a ng-click=\"additionalPropertyInformation.showLatLonHelp()\" title=\"When to enter the latitude and longitude of your site.\" class=\"pointer\"> <i class=\" text-blue fa fa-question-circle\"></i></a>\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"longitude\" ng-model=\"main.submitData.property.longitude\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"acerage\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Acreage:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"acerage\" ng-model=\"main.submitData.property.acreage\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"buildings\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Number of Buildings:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"buildings\" ng-model=\"main.submitData.property.numBuildings\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"transactionType\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Transaction Type:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <select class=\"form-control\" id=\"transactionType\" type=\"select\" name=\"transactionTypes\" ng-model=\"main.submitData.property.transactionTypeGUID\" data-ng-options=\"transactionType.transactionTypeGUID as transactionType.transactionTypeName for transactionType in main.loadData.transactionTypes\">\n" +
        "                            <option value=\"\">Select Transaction Type</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ProjectCreation/views/attachments.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/attachments.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "\n" +
        "    <style type=\"text/css\">\n" +
        "\n" +
        "\n" +
        "    </style>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <a class=\" collapsed pointer\" data-toggle=\"collapse\" \n" +
        "               data-target=\"#collapseAttachment\">Attachments</a>\n" +
        "		</h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapseAttachment\" class=\"panel-collapse collapse\" ng-controller=\"AttachmentCtrl as attachments\">\n" +
        "        <div id=\"fileupload\" class=\"panel-body\">\n" +
        "\n" +
        "            <div class=\"fileupload-buttonbar AU_uploadbox \">\n" +
        "                \n" +
        "                    <div class=\"form-group\">\n" +
        "\n" +
        "                        <div class=\"btn btn-md btn-primary fileinput-button\" ng-class=\"{disabled: disabled}\">\n" +
        "                            <i class=\"fa fa-file-text-o\"></i> Attach\n" +
        "                            <input id=\"file-3\" type=\"file\" data-file-input=\"files\" ngf-select ngf-change=\"upload($files)\" ngf-multiple=\"true\">\n" +
        "                        </div>\n" +
        "\n" +
        "                        <!--\n" +
        "                        <button class=\"btn btn-md btn-primary fileinput-button\" ng-class=\"{disabled: disabled}\"><i\n" +
        "							class=\"fa fa-file-text-o\"></i> Attach <input id=\"file-3\"\n" +
        "							type=\"file\" data-file-input=\"files\"\n" +
        "							ngf-select ngf-change=\"upload($files)\" ngf-multiple=\"true\">\n" +
        "						</button>-->\n" +
        "\n" +
        "                        <!--<button type=\"button\" class=\"btn btn-md btn-primary start\" ng-click=\"attachments.Upload()\">\n" +
        "                            <span class=\"glyphicon glyphicon-upload\"></span> Done\n" +
        "                        </button>-->\n" +
        "                        <span class=\"AU_uploadFilename text-primary\" ng-repeat=\"file in files\">{{file.name}}</span>\n" +
        "                    </div>\n" +
        "                \n" +
        "                <!-- The global file processing state -->\n" +
        "                <span class=\"fileupload-process\"></span>\n" +
        "                <!-- The global progress state -->\n" +
        "                <div class=\"table-responsive\">\n" +
        "                    <table class=\"table table-condensed  table-bordered table-hover no-margin\" ng-show=\"attachments.attachmentFilesExists\">\n" +
        "                        <thead>\n" +
        "                            <tr>\n" +
        "                                <th>Action</th>\n" +
        "                                <th>File Name</th>\n" +
        "\n" +
        "                                <th>File Size</th>\n" +
        "\n" +
        "                            </tr>\n" +
        "                        </thead>\n" +
        "                        <tbody>\n" +
        "                            <tr ng-repeat=\"file in attachments.attachmentFiles\">\n" +
        "\n" +
        "                                <td><a style=\"cursor: pointer;\" ng-click=\"attachments.RemoveAttachment(file.name);\">Remove</a></td>\n" +
        "                                <td>{{file.name}}</td>\n" +
        "                                <td>{{file.size}}</td>\n" +
        "                            </tr>\n" +
        "\n" +
        "                        </tbody>\n" +
        "\n" +
        "                    </table>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <!--<div  ng-hide=\"attachments.attachmentFiles.length == 0\">\n" +
        "\n" +
        "                            <div class=\"alert alert-success\">Files Uploaded Successfully</div>\n" +
        "                        </div>-->\n" +
        "\n" +
        "                    <div ng-show=\"attachments.isUploadErrorMsg\">\n" +
        "                        <div class=\"alert alert-danger\">{{attachments.UploadErrorMsg}}</div>\n" +
        "                    </div>\n" +
        "                    <div ng-show=\"attachments.isUploadErrorMsg\">\n" +
        "                        <div class=\"alert alert-danger\">{{attachments.IncorrectFormat}}</div>\n" +
        "                    </div>\n" +
        "                    <div ng-show=\"attachments.isUploadErrorMsg\">\n" +
        "                        <div class=\"alert alert-danger\">\n" +
        "                            <a ng-click=\"ShowUploadStatus()\" ng-show=\"popuplink\">Click here for more details</a>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ProjectCreation/views/clientInfo.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/clientInfo.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "\n" +
        "    <style type=\"text/css\">\n" +
        "\n" +
        "\n" +
        "    </style>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <a class=\"collapsed pointer\" data-toggle=\"collapse\" \n" +
        "               data-target=\"#collapseClientInfo\">Client Information</a>\n" +
        "        </h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapseClientInfo\" class=\"panel-collapse collapse \">\n" +
        "        <div class=\"panel-body\" ng-controller=\"ClientInfoCtrl as clientInfo\">\n" +
        "\n" +
        "            <div class=\"form-horizontal\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"comapnyName\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Company Name:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" name=\"comapnyName\" id=\"comapnyName\" ng-model=\"clientInfo.data.client.companyName\"> <a class=\"pointer\" ng-click=\"clientInfo.ShowFindContact()\">Find Contact</a>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"contact\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Contact:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" name=\"contact\" id=\"contact\" ng-model=\"clientInfo.data.client.contactName\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"address\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Address:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"address\" name=\"addressfield\" ng-model=\"clientInfo.data.client.address\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"city\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">City:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"city\" ng-model=\"clientInfo.data.client.city\" name=\"City\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"country\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Country:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <select class=\"form-control\" id=\"country\" type=\"select\" name=\"Roles\" country-model=\"clientInfo.data.client.country\" country-select>\n" +
        "                            <option value=\"\">Select Country</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"state\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">State:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <select class=\"form-control\" id=\"state\" type=\"select\" state-model=\"clientInfo.data.client.state\" state-select country-model=\"clientInfo.data.client.country\" name=\"clientState\">\n" +
        "                            <option value=\"\">Select State</option>\n" +
        "                        </select>\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"state\" ng-model=\"clientInfo.data.client.state\" state-input name=\"clientState\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"zip\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Zip:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"zip\" ng-model=\"clientInfo.data.client.zip\" name=\"zip\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ProjectCreation/views/emailContacts.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/emailContacts.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "    <style type=\"text/css\">\n" +
        "        /* Fix alignment issue of label on extra small devices in Bootstrap 3.2 */\n" +
        "\n" +
        "    </style>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "\n" +
        "    <!-- ng-controller=\"EmailContactsCtrl as emailContacts\" -->\n" +
        "\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"emailContacts.Cancel()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\" ng-show=\"!emailContacts.editSelected\">Select Contacts</h4>\n" +
        "        <h4 class=\"modal-title\" ng-show=\"emailContacts.editSelected\">Edit Contacts</h4>\n" +
        "\n" +
        "    </div>\n" +
        "    <div class=\"modal-body\">\n" +
        "\n" +
        "        <div ng-show=\"!emailContacts.editSelected\">\n" +
        "            <div class=\"bottom-margin-sm\">\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-6 col-sm-6\">\n" +
        "                        <input type=\"text\" class=\"form-control\" placeholder=\"\" ng-model=\"emailContacts.searchtext\">\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-12 col-sm-12\">Enter text to search for contacts,first name,last name,company,email address </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"table-responsive\">\n" +
        "                <table class=\"table table-condensed  table-bordered table-hover\">\n" +
        "\n" +
        "                    <thead>\n" +
        "                        <tr>\n" +
        "                            <th>To</th>\n" +
        "                            <th>CC</th>\n" +
        "                            <th>Action</th>\n" +
        "                            <th>Name</th>\n" +
        "                            <th>Email</th>\n" +
        "                            <th>Company</th>\n" +
        "                        </tr>\n" +
        "                    </thead>\n" +
        "                    <tbody>\n" +
        "\n" +
        "                        <tr ng-repeat=\"contact in emailContacts.filtered = (emailContacts.ContactArr | selectColumnFilter: emailContacts.searchtext) | filter : emailContacts.paginate\">\n" +
        "                            <td>\n" +
        "                                <input type=\"checkbox\" id=\"toContact\" name=\"toContact\" ng-model=\"contact.toSelected\" ng-change=\"contact.getCheckedToContact(contact.toSelected)\" ng-show=\"contact.email\" class=\"ng-pristine ng-valid\">\n" +
        "                            </td>\n" +
        "                            <td>\n" +
        "                                <input type=\"checkbox\" id=\"ccContact\" ng-show=\"contact.email\" name=\"ccContact\" ng-change=\"contact.getCheckedCCContact(contact.ccSelected)\" ng-model=\"contact.ccSelected\" class=\"ng-pristine ng-valid\">\n" +
        "                            </td>\n" +
        "                            <td><a class=\"pointer\" ng-click=\"emailContacts.EditContact(contact)\">Edit</a></td>\n" +
        "                            <td>\n" +
        "                                {{contact.firstName}} {{contact.lastName}}\n" +
        "                            </td>\n" +
        "                            <td>\n" +
        "                                {{contact.email}}\n" +
        "                            </td>\n" +
        "                            <td>\n" +
        "                                {{contact.companyName}}\n" +
        "                            </td>\n" +
        "                        </tr>\n" +
        "                        <tr ng-if=\"!emailContacts.filtered.length\">\n" +
        "                            <td colspan=\"6\">\n" +
        "                                <div class=\"alert alert-info\">No contacts matched your search text.</div>\n" +
        "                            </td>\n" +
        "                        </tr>\n" +
        "\n" +
        "                    </tbody>\n" +
        "\n" +
        "                </table>\n" +
        "            </div>\n" +
        "\n" +
        "            <pagination ng-if=\"emailContacts.filtered.length\" total-items=\"emailContacts.totalItems\" ng-model=\"emailContacts.currentPage\" max-size=\"5\" boundary-links=\"true\" items-per-page=\"emailContacts.numPerPage\" class=\"pagination-sm\">\n" +
        "\n" +
        "            </pagination>\n" +
        "\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "        <!-- tab content -->\n" +
        "        <div ng-show=\"emailContacts.editSelected\">\n" +
        "\n" +
        "            <form name=\"editContactForm\" novalidate>\n" +
        "\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                        <div class=\"form-group required\" show-errors field-validation=\"First Name\">\n" +
        "                            <label for=\"exampleInputFirstName\">First Name </label>\n" +
        "                            <input type=\"text\" class=\"form-control\" id=\"editfirstName\" ng-model=\"emailContacts.editedContact.firstName\" name=\"editfirstName\" placeholder=\"First Name\" required>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group required\" show-errors field-validation=\"Last Name\">\n" +
        "                            <label for=\"exampleInputLastName\">Last Name </label>\n" +
        "                            <input type=\"text\" class=\"form-control\" id=\"editlastName\" ng-model=\"emailContacts.editedContact.lastName\" name=\"editlastName\" placeholder=\"Last Name\" required>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"exampleInputCompanyName\">Company Name</label>\n" +
        "                            <input type=\"text\" class=\"form-control\" name=\"editCompanyName\" placeholder=\"Company Name\" ng-model=\"emailContacts.editedContact.companyName\">\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"exampleInputAddress\">Address</label>\n" +
        "                            <input type=\"text\" class=\"form-control\" name=\"Address\" placeholder=\"Address\" ng-model=\"emailContacts.editedContact.address\">\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"exampleInputCity\">City</label>\n" +
        "                            <input type=\"text\" class=\"form-control\" name=\"editCity\" placeholder=\"City\" ng-model=\"emailContacts.editedContact.city\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"exampleInputState\">State</label>\n" +
        "                            <input type=\"text\" class=\"form-control\" name=\"editState\" placeholder=\"State\" ng-model=\"emailContacts.editedContact.state\">\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"exampleInputZipCode\">Zip Code</label>\n" +
        "                            <input type=\"text\" class=\"form-control\" name=\"editZipCode\" placeholder=\"Zip Code\" ng-model=\"emailContacts.editedContact.zipCode\">\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"exampleInputPhone\">Phone</label>\n" +
        "                            <input type=\"text\" class=\"form-control\" name=\"editPhone\" placeholder=\"Phone\" ng-model=\"emailContacts.editedContact.phone\">\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"exampleInputFax\">Fax</label>\n" +
        "                            <input type=\"text\" class=\"form-control\" name=\"editFax\" placeholder=\"Fax\" ng-model=\"emailContacts.editedContact.fax\">\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\" field-validation=\"Email\">\n" +
        "                            <label for=\"exampleInputEmail\">Email</label>\n" +
        "                            <input type=\"email\" class=\"form-control\" name=\"editEmail\" placeholder=\"Email\" ng-model=\"emailContacts.editedContact.email\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"alert\" ng-class=\"findContact.isEditContactOpSuccess ? 'alert-success' : 'alert-danger'\" ng-show=\"findContact.showEditContactOpMsg\">\n" +
        "                    <button type=\"button\" class=\"close\" ng-click=\"findContact.showEditContactOpMsg = false;\" aria-label=\"Close\">\n" +
        "                        <span aria-hidden=\"true\">&times;</span>\n" +
        "                    </button>\n" +
        "                    {{findContact.editContactOpMsg}}\n" +
        "                </div>\n" +
        "\n" +
        "                <!--   <div class=\"row\">\n" +
        "                                <div class=\" form-group col-md-6 col-sm-6 col-xs-12\">\n" +
        "                                    <button type=\"submit\" class=\"btn btn-primary\" ng-click=\"findContact.SubmitEdit(editContactForm)\">Submit Changes </button>\n" +
        "                                    <button type=\"button\" class=\"btn btn-default\" ng-click=\"findContact.ResetEditChanges(editContactForm)\">Reset </button>\n" +
        "                                    <button type=\"button\" class=\"btn btn-default\" ng-click=\"findContact.CancelEdit(editContactForm)\">Cancel Edit </button>\n" +
        "                                </div>\n" +
        "                            </div>-->\n" +
        "\n" +
        "            </form>\n" +
        "\n" +
        "        </div>\n" +
        "        <!-- tab content end -->\n" +
        "\n" +
        "\n" +
        "    </div>\n" +
        "    <div class=\"modal-footer\">\n" +
        "        <span ng-show=\"!emailContacts.editSelected\">	\n" +
        "        <button class=\"btn btn-primary\" ng-click=\"emailContacts.DoneSelection()\">Done</button>\n" +
        "        <button class=\"btn btn-default\" ng-click=\"emailContacts.Cancel()\">Cancel</button>\n" +
        "        </span>\n" +
        "        <span ng-show=\"emailContacts.editSelected\">						\n" +
        "			<button type=\"button\" class=\"btn btn-default\" ng-click=\"emailContacts.CancelEdit(editContactForm)\">Cancel Edit</button>\n" +
        "            <button type=\"button\" class=\"btn btn-default\" ng-click=\"emailContacts.ResetEditChanges(editContactForm)\">Reset</button>\n" +
        "            <button type=\"submit\" class=\"btn btn-primary\" ng-click=\"emailContacts.SubmitEdit(editContactForm)\">Submit Changes</button>\n" +
        "		</span>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ProjectCreation/views/emailNotification.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/emailNotification.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <a class=\"collapsed pointer\" data-toggle=\"collapse\" \n" +
        "               data-target=\"#collapseEmailNotification\">Email Notification</a>\n" +
        "        </h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapseEmailNotification\" class=\"panel-collapse collapse\">\n" +
        "\n" +
        "        <div class=\"panel-body\" ng-controller=\"EmailNotificationCtrl as emailNotification\">\n" +
        "            <div class=\"checkbox\">\n" +
        "                <label>\n" +
        "                    <input type=\"checkbox\" id=\"sendEmail\" name=\"mail\" ng-change=\"emailNotification.sendNotification()\" ng-model=\"main.submitData.notification.sendEmailNotification\"><span>\n" +
        "                                Send Email Notification to Other Users\n" +
        "                            <a ng-click=\"emailNotification.ShowEmailHelp()\" title=\"The basics of email notification\" class=\"pointer\">\n" +
        "                                    <i class=\" text-blue fa fa-question-circle\"></i>\n" +
        "                                </a>\n" +
        "                            </span>\n" +
        "                </label>\n" +
        "            </div>\n" +
        "            <div class=\"form-horizontal\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"from\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">From:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <p class=\"form-control-static\">{{main.loggedUser.firstName}} {{main.loggedUser.lastName}} &lt;{{main.loggedUser.email}}&gt;\n" +
        "                        </p>\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div id=\"divEmailTo\" class=\"form-group\" field-validation=\"To\" emailfield-validation=\"To\">\n" +
        "                    <label for=\"to\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">To:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "\n" +
        "\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"to\" ng-disabled=\"!main.submitData.notification.sendEmailNotification\" ng-model=\"main.submitData.notification.emailTo\" name=\"To\" required />\n" +
        "\n" +
        "                        <a class=\"pointer\" ng-click=\"!main.submitData.notification.sendEmailNotification || emailNotification.ShowFindContact()\" ng-class=\"{disabled: !main.submitData.notification.sendEmailNotification, enabled: main.submitData.notification.sendEmailNotification}\">Find Contact</a>\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <div id=\"divEmailCC\" class=\"form-group\" emailfield-validation=\"CC\">\n" +
        "                    <label for=\"cc\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">CC:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"cc\" ng-disabled=\"!main.submitData.notification.sendEmailNotification\" ng-model=\"main.submitData.notification.emailCC\" name=\"CC\" />\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"message\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Message:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <textarea class=\"form-control\" rows=\"6\" id=\"message\" ng-disabled=\"!main.submitData.notification.sendEmailNotification\" ng-model=\"main.submitData.notification.emailBody\"></textarea>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ProjectCreation/views/findContact.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/findContact.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "    <style type=\"text/css\"></style>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"findContact.CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\">Find Contacts</h4>\n" +
        "    </div>\n" +
        "    <div class=\"modal-body\">\n" +
        "        <div class=\"tabbable tabs-below\" ng-show=\"!findContact.editSelected\">\n" +
        "            <ul class=\" nav nav-tabs\">\n" +
        "                <li ng-class=\"{active: selectedTab == 1}\"> <a class=\"pointer\" ng-click=\"findContact.FindContactClick()\">Find Contact</a> </li>\n" +
        "                <li ng-class=\"{active: selectedTab == 2}\"> <a class=\"pointer\" ng-click=\"findContact.AddContactClick()\">Add Contact</a> </li>\n" +
        "            </ul>\n" +
        "            <div role=\"tabpanel\" class=\"tab-content \" ng-show=\"selectedTab == 1\">\n" +
        "                <div id=\"divFindContact\">\n" +
        "                    <div class=\"row\">\n" +
        "                        <div class=\"col-md-6 col-sm-6 form-group \">\n" +
        "                            <input type=\"text\" class=\"form-control\" ng-model=\"findContact.searchterm\" ng-change=\"findContact.filter()\"> \n" +
        "                        </div>\n" +
        "						<div class=\"col-md-12 bottom-margin\"> Enter text to search for contacts,last name,first name,company and email address</div>\n" +
        "                    </div>\n" +
        "                    <div class=\"table-responsive\">\n" +
        "                        <table class=\"table table-condensed  table-bordered table-hover\">\n" +
        "                            <thead>\n" +
        "                                <tr>\n" +
        "                                    <th>Action</th>\n" +
        "                                    <th>First Name</th>\n" +
        "                                    <th>Last Name</th>\n" +
        "                                    <th>Company</th>\n" +
        "                                    <th>Email Address</th>\n" +
        "                                    <th>Phone #</th>\n" +
        "                                </tr>\n" +
        "                            </thead>\n" +
        "                            <tbody>\n" +
        "                                <tr ng-repeat=\"contact in findContact.filtered = (findContact.CompanyContactsArr | filter: findContact.searchterm) | filter : findContact.paginate\">\n" +
        "                                    <td><a class=\"pointer\" ng-click=\"findContact.EditContact(contact)\">Edit</a></td>\n" +
        "                                    <td><a class=\"pointer\" ng-click=\"findContact.ContactSelected(contact)\">{{contact.firstName}}</a></td>\n" +
        "                                    <td><a class=\"pointer\" ng-click=\"findContact.ContactSelected(contact)\"> {{contact.lastName}}</a></td>\n" +
        "                                    <td><a class=\"pointer\" ng-click=\"findContact.ContactSelected(contact)\"> {{contact.companyName}}</a></td>\n" +
        "                                    <td><a class=\"pointer\" ng-click=\"findContact.ContactSelected(contact)\"> {{contact.email}}</a></td>\n" +
        "                                    <td><a class=\"pointer\" ng-click=\"findContact.ContactSelected(contact)\"> {{contact.phone}}</a> </td>\n" +
        "                                </tr>\n" +
        "                            </tbody>\n" +
        "                        </table>\n" +
        "                    </div>\n" +
        "                    <pagination total-items=\"findContact.totalItems\" ng-model=\"findContact.currentPage\" max-size=\"5\" boundary-links=\"true\" items-per-page=\"findContact.numPerPage\" class=\"pagination-sm\"> </pagination>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div role=\"tabpanel\" class=\"tab-content\" ng-show=\"selectedTab == 2\">\n" +
        "                <div id=\"divAddContact\">\n" +
        "                    <form name=\"addContactForm\" novalidate>\n" +
        "                        <div class=\"container-fluid\">\n" +
        "                            <div class=\"row\">\n" +
        "                                <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                                    <div class=\"form-group required\" field-validation=\"First Name\">\n" +
        "                                        <label class=\"control-label\" for=\"exampleInputFirstName\">First Name </label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" id=\"firstName\" ng-model=\"findContact.newContact.firstName\" name=\"firstName\" placeholder=\"First Name\" required>\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group required\" field-validation=\"Last Name\">\n" +
        "                                        <label class=\"control-label\" for=\"exampleInputLastName\">Last Name </label>\n" +
        "                                        </label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" id=\"lastName\" ng-model=\"findContact.newContact.lastName\" name=\"lastName\" placeholder=\"Last Name\" required>\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label class=\"control-label\" for=\"exampleInputCompanyName\">Company Name</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"CompanyName\" placeholder=\"Company Name\" ng-model=\"findContact.newContact.companyName\">\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label class=\"control-label\" for=\"exampleInputAddress\">Address</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"Address\" placeholder=\"Address\" ng-model=\"findContact.newContact.address\">\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label class=\"control-label\" for=\"exampleInputCity\">City</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"City\" placeholder=\"City\" ng-model=\"findContact.newContact.city\">\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "\n" +
        "                                <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label class=\"control-label\" for=\"exampleInputState\">State</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"State\" placeholder=\"State\" ng-model=\"findContact.newContact.state\">\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label class=\"control-label\" for=\"exampleInputZipCode\">Zip Code</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"ZipCode\" placeholder=\"Zip Code\" ng-model=\"findContact.newContact.zipCode\">\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label class=\"control-label\" for=\"exampleInputPhone\">Phone</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"Phone\" placeholder=\"Phone\" ng-model=\"findContact.newContact.phone\">\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label class=\"control-label\" for=\"exampleInputFax\">Fax</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"Fax\" placeholder=\"Fax\" ng-model=\"findContact.newContact.fax\">\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\" field-validation=\"Email\">\n" +
        "                                        <label class=\"control-label\" for=\"exampleInputEmail\">Email</label>\n" +
        "                                        <input type=\"email\" class=\"form-control\" name=\"Email\" placeholder=\"Email\" ng-model=\"findContact.newContact.email\">\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "\n" +
        "                            <div class=\"alert\" ng-class=\"findContact.isAddContactOpSuccess ? 'alert-success' : 'alert-danger'\" ng-show=\"findContact.showAddContactOpMsg\">\n" +
        "                                <button type=\"button\" class=\"close\" ng-click=\"findContact.showAddContactOpMsg = false;\" aria-label=\"Close\">\n" +
        "                                    <span aria-hidden=\"true\">&times;</span>\n" +
        "                                </button>\n" +
        "                                {{findContact.addContactOpMsg}}\n" +
        "                            </div>\n" +
        "                            <!-- <div class=\"row\">\n" +
        "                                <div class=\"form-group col-md-6 col-sm-6 col-xs-12\">\n" +
        "                                    <button type=\"submit\" class=\"btn btn-primary\" ng-click=\"findContact.SubmitContact(addContactForm)\">Submit Changes </button>\n" +
        "                                    <button type=\"reset\" class=\"btn btn-default\" ng-click=\"findContact.Reset(addContactForm)\">Reset </button>\n" +
        "                                </div>\n" +
        "                            </div>-->\n" +
        "                        </div>\n" +
        "                    </form>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "        <!-- edit contact -->\n" +
        "        <div class=\" tabbable tabs-below\" ng-show=\"findContact.editSelected\">\n" +
        "\n" +
        "            <!-- tab layout -->\n" +
        "            <div>\n" +
        "                <ul class=\" nav nav-tabs\">\n" +
        "                    <li ng-class=\"{active: true}\"> <a class=\"pointer\">Edit Contact</a> </li>\n" +
        "                </ul>\n" +
        "            </div>\n" +
        "            <!-- tab layout end -->\n" +
        "            <!-- tab content -->\n" +
        "            <div role=\"tabpanel\" class=\"tab-content\">\n" +
        "                <div id=\"divEditContact\">\n" +
        "                    <form name=\"editContactForm\" novalidate>\n" +
        "                        <div class=\"container-fluid\">\n" +
        "                            <div class=\"row\">\n" +
        "                                <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                                    <div class=\"form-group required\" show-errors field-validation=\"First Name\">\n" +
        "                                        <label for=\"exampleInputFirstName\">First Name </label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" id=\"editfirstName\" ng-model=\"findContact.editedContact.firstName\" name=\"editfirstName\" placeholder=\"First Name\" required>\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group required\" show-errors field-validation=\"Last Name\">\n" +
        "                                        <label for=\"exampleInputLastName\">Last Name </label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" id=\"editlastName\" ng-model=\"findContact.editedContact.lastName\" name=\"editlastName\" placeholder=\"Last Name\" required>\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label for=\"exampleInputCompanyName\">Company Name</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"editCompanyName\" placeholder=\"Company Name\" ng-model=\"findContact.editedContact.companyName\">\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label for=\"exampleInputAddress\">Address</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"Address\" placeholder=\"Address\" ng-model=\"findContact.editedContact.address\">\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label for=\"exampleInputCity\">City</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"editCity\" placeholder=\"City\" ng-model=\"findContact.editedContact.city\">\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                                <div class=\"col-md-6 col-sm-6 col-xs-12\">\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label for=\"exampleInputState\">State</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"editState\" placeholder=\"State\" ng-model=\"findContact.editedContact.state\">\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label for=\"exampleInputZipCode\">Zip Code</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"editZipCode\" placeholder=\"Zip Code\" ng-model=\"findContact.editedContact.zipCode\">\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label for=\"exampleInputPhone\">Phone</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"editPhone\" placeholder=\"Phone\" ng-model=\"findContact.editedContact.phone\">\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label for=\"exampleInputFax\">Fax</label>\n" +
        "                                        <input type=\"text\" class=\"form-control\" name=\"editFax\" placeholder=\"Fax\" ng-model=\"findContact.editedContact.fax\">\n" +
        "                                    </div>\n" +
        "                                    <div class=\"form-group\" field-validation=\"Email\">\n" +
        "                                        <label for=\"exampleInputEmail\">Email</label>\n" +
        "                                        <input type=\"email\" class=\"form-control\" name=\"editEmail\" placeholder=\"Email\" ng-model=\"findContact.editedContact.email\">\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "\n" +
        "                            <div class=\"alert\" ng-class=\"findContact.isEditContactOpSuccess ? 'alert-success' : 'alert-danger'\" ng-show=\"findContact.showEditContactOpMsg\">\n" +
        "                                <button type=\"button\" class=\"close\" ng-click=\"findContact.showEditContactOpMsg = false;\" aria-label=\"Close\">\n" +
        "                                    <span aria-hidden=\"true\">&times;</span>\n" +
        "                                </button>\n" +
        "                                {{findContact.editContactOpMsg}}\n" +
        "                            </div>\n" +
        "\n" +
        "                            <!--   <div class=\"row\">\n" +
        "                                <div class=\" form-group col-md-6 col-sm-6 col-xs-12\">\n" +
        "                                    <button type=\"submit\" class=\"btn btn-primary\" ng-click=\"findContact.SubmitEdit(editContactForm)\">Submit Changes </button>\n" +
        "                                    <button type=\"button\" class=\"btn btn-default\" ng-click=\"findContact.ResetEditChanges(editContactForm)\">Reset </button>\n" +
        "                                    <button type=\"button\" class=\"btn btn-default\" ng-click=\"findContact.CancelEdit(editContactForm)\">Cancel Edit </button>\n" +
        "                                </div>\n" +
        "                            </div>-->\n" +
        "                        </div>\n" +
        "                    </form>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <!-- tab content end -->\n" +
        "\n" +
        "        </div>\n" +
        "        <!-- edit contact end -->\n" +
        "\n" +
        "    </div>\n" +
        "    <div class=\"modal-footer\">\n" +
        "        <button class=\"btn btn-default\" ng-click=\"findContact.CancelDelete()\">Close</button>\n" +
        "        <span ng-show=\"selectedTab == 2\">			\n" +
        "			<button type=\"reset\" class=\"btn btn-default\" ng-click=\"findContact.Reset(addContactForm)\">Reset</button>\n" +
        "            <button type=\"submit\" class=\"btn btn-primary\" ng-click=\"findContact.SubmitContact(addContactForm)\">Submit Changes</button>\n" +
        "		</span>\n" +
        "        <span ng-show=\"findContact.editSelected\">						\n" +
        "			<button type=\"button\" class=\"btn btn-default\" ng-click=\"findContact.CancelEdit(editContactForm)\">Cancel Edit</button>\n" +
        "            <button type=\"button\" class=\"btn btn-default\" ng-click=\"findContact.ResetEditChanges(editContactForm)\">Reset</button>\n" +
        "            <button type=\"submit\" class=\"btn btn-primary\" ng-click=\"findContact.SubmitEdit(editContactForm)\">Submit Changes</button>\n" +
        "		</span>\n" +
        "    </div>\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ProjectCreation/views/form.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/form.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "    <style>\n" +
        "\n" +
        "\n" +
        "    </style>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <div class=\"container-fluid\" id=\"singleSiteProjectDiv\" cg-busy=\"main.waitingProcessResources\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "		<div class=\"panel-body\">\n" +
        "        <h2 class=\"page-header\">New Single Site Project</h2>\n" +
        "        <div class=\"alert alert-info\"><strong>Use this page to create a new single-site project.<br>If your project contains multiple sites, you can set them up under a single portfolio using the <a href=\"#\" ui-sref=\"PortfolioCreation.ProjectInformation\" tabindex=\"-1\">New Portfolio</a>.</strong>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"alert\" ng-class=\"main.msgType\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"main.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"main.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{main.serviceResponseText}}\n" +
        "        </div>\n" +
        "\n" +
        "        <form name=\"singleSiteProjectCreationForm\" confirm-on-exit ng-attr-propertyInfoCountry=\"US\" ng-attr-Roles=\"US\" novalidate>\n" +
        "            <div class=\"panel-group\" id=\"accordion\">\n" +
        "\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/ProjectCreation/views/projectInfo.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/ProjectCreation/views/clientInfo.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/ProjectCreation/views/propertyInfo.html'\"></div>\n" +
        "                <div id=\"reportSelectionDiv\" class=\"panel panel-default\" ng-include src=\"'app/modules/ProjectCreation/views/reportSelection.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/ProjectCreation/views/additionalPropertyInfo.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/ProjectCreation/views/siteContactInfo.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/ProjectCreation/views/grantAccessToUsers.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/ProjectCreation/views/attachments.html'\"></div>\n" +
        "                <div class=\"panel panel-default\" ng-include src=\"'app/modules/ProjectCreation/views/emailNotification.html'\"></div>\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"text-center form-group\" ng-show=\"main.lastDivLoaded\">\n" +
        "                <button class=\"btn btn-md btn-default btn-link\" ng-click=\"main.cancelCreateProject()\" novalidate>Cancel and Return Home\n" +
        "                </button>\n" +
        "                <button class=\"btn btn-md btn-primary\" ng-click=\"main.createProject(singleSiteProjectCreationForm)\">Create Project</button>\n" +
        "\n" +
        "            </div>\n" +
        "        </form>\n" +
        "		</div>	\n" +
        "		</div>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ProjectCreation/views/grantAccessToUsers.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/grantAccessToUsers.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "    <style type=\"text/css\">\n" +
        "\n" +
        "\n" +
        "    </style>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <a class=\"collapsed pointer\" data-toggle=\"collapse\" \n" +
        "               data-target=\"#collapseGrantAccess\">Grant Access to Other Users</a>\n" +
        "        </h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapseGrantAccess\" class=\"panel-collapse collapse\" ng-controller=\"GrantAccessCtrl as grantAccess\">\n" +
        "        <div class=\"panel-body\">\n" +
        "\n" +
        "            <div class=\"form-horizontal\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Grant Access to:\n" +
        "                        <a ng-click=\"grantAccess.ShowAccessHelp()\" title=\"How you can control access to your reports ?\" class=\"pointer\">\n" +
        "                            <i class=\"text-blue fa fa-question-circle\"></i>\n" +
        "                        </a>\n" +
        "                    </label>\n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <div class=\"col-sm-offset-1 col-md-2 col-sm-3 col-xs-12\">\n" +
        "                        <div class=\"checkbox\">\n" +
        "                            <label>\n" +
        "                                <input type=\"checkbox\" id=\"chkOffices\" name=\"chkOffices\" checked=\"checked\" disabled=\"disabled\"><span>\n" +
        "                                Your\n" +
        "                                Organization:\n" +
        "                            </span>\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <select class=\"form-control\" id=\"drpdownOffices\" type=\"select\" name=\"drpdownOffices\" ng-model=\"(main.submitData.accessCollector['organization'] = main.submitData.accessCollector['organization'] || {}).val\" data-ng-options=\"organization as organization.name for organization in main.loadData.accessTo.organizationOptions\">\n" +
        "\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <div class=\"col-sm-offset-1 col-md-2 col-sm-3 col-xs-12\">\n" +
        "                        <div class=\"checkbox\">\n" +
        "                            <label>\n" +
        "                                <input type=\"checkbox\" id=\"chkboxTeams\" name=\"chkTeams\" ng-model=\"(main.submitData.accessCollector['client'] = main.submitData.accessCollector['client'] || {}).selected\"><span>\n" +
        "                                Your\n" +
        "                                Client:\n" +
        "                            </span>\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <select class=\"form-control\" id=\"drpdownTeams\" type=\"select\" name=\"drpdownTeams\" ng-disabled=\"!main.submitData.accessCollector['client'].selected\" ng-model=\"main.submitData.accessCollector['client'].val\" data-ng-options=\"client as client.name for client in main.loadData.accessTo.clientOptions\">\n" +
        "                            <option value=\"\">Select Client</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <div class=\"col-sm-offset-1 col-md-2 col-sm-3 col-xs-12\">\n" +
        "                        <div class=\"checkbox\">\n" +
        "                            <label>\n" +
        "                                <input type=\"checkbox\" id=\"chkboxRelatedCompanies\" name=\"chkRelatedCompanies\" ng-model=\"(main.submitData.accessCollector['third-party'] = main.submitData.accessCollector['third-party'] || {}).selected\"><span>\n" +
        "                                A Third Party:\n" +
        "                            </span>\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <select class=\"form-control\" id=\"drpdownClient\" type=\"select\" name=\"drpdownClient\" ng-disabled=\"!main.submitData.accessCollector['third-party'].selected\" ng-model=\"main.submitData.accessCollector['third-party'].val\" data-ng-options=\"option as option.name for option in main.loadData.accessTo.thirdPartyOptions\">\n" +
        "                            <option value=\"\">Select Third Party</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ProjectCreation/views/helpAccess.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/helpAccess.html",
        "<div class=\"modal-header\">\n" +
        "    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <h4 class=\"modal-title\">PARCEL - Granting Access</h4>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"modal-body \">\n" +
        "    <p>\n" +
        "     You have the option of letting other PARCEL users see the project you are creating.\n" +
        "          This can include other members of your company, as well as users from other companies you work with. The only requirement is that they have an account on PARCEL.\n" +
        "    </p>\n" +
        "    <p> In two cases, access is automatically granted to other users: </p>\n" +
        "        <ol>\n" +
        "            <li>If you are using PARCEL to task a consultant with work, they will automatically receive access to the report.</li>\n" +
        "            <li>Your company can request that some users have access to all reports created within their company.</li>\n" +
        "        </ol>\n" +
        "        If you are a consultant who prefers that your client does not have access until the project is complete, you should not grant access at this time. When the report is ready, you can use the 'Grant Access' screen to let them see your report.\n" +
        "\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"modal-footer\">\n" +
        "    <button class=\"btn btn-default\" ng-click=\"CancelDelete()\">OK</button>\n" +
        "\n" +
        "</div>\n" +
        "   \n" +
        " ");
}]);

angular.module("../app/modules/ProjectCreation/views/helpEmailConsultant.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/helpEmailConsultant.html",
        "<div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <h4 class=\"modal-title\">PARCEL - Email Notification</h4> \n" +
        "</div>\n" +
        "\n" +
        "<div class=\"modal-body \">\n" +
        "       \n" +
        "    <p>\n" +
        "        Every time you create a project on PARCEL, a confirmation email will be sent to the email address listed for your account.\n" +
        "        <p> The email will include a PDF file summarizing the information you enter on this page.</p>\n" +
        "        <p> If you want to notify other users of the project's creation, enter their email addresses below separated by commas or semicolons. Note that sending the email does not necessarily <a ng-click=\"ShowAccessHelp()\">grant them access</a> to the project.</p>\n" +
        "         You can use the 'Find Contact' link to search for other PARCEL users or to store information for frequent contacts.\n" +
        "    </p>\n" +
        "  \n" +
        "</div>\n" +
        "<div class=\"modal-footer\">\n" +
        "    <button class=\"btn btn-default\" ng-click=\"CancelDelete()\">OK</button>\n" +
        "\n" +
        "</div>");
}]);

angular.module("../app/modules/ProjectCreation/views/helpFee.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/helpFee.html",
        "<div class=\"modal-header\">\n" +
        "    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <h4 class=\"modal-title\">PARCEL - Fee Information</h4>\n" +
        "</div>\n" +
        "\n" +
        " \n" +
        "    \n" +
        "\n" +
        "        <div class=\"modal-body \">\n" +
        "          \n" +
        "          \n" +
        "            <ul>\n" +
        "                <li><p>\n" +
        "                        The 'Fee' field is an <b>optional field</b>, provided so that environmental consultants and their clients can communicate the consultant's fee via the Project Setup process.\n" +
        "                    </p>\n" +
        "          \n" +
        "                </li>\n" +
        "                <li><p>\n" +
        "                    The information entered here will appear in the Work Order PDF file that is sent along with the project setup notification. This document is also stored in the 'Project Documents' section of your Project.\n" +
        "                </p>\n" +
        "         \n" +
        "                </li>\n" +
        "            </ul>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <button class=\"btn btn-default\" ng-click=\"CancelDelete()\">OK</button>\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        " ");
}]);

angular.module("../app/modules/ProjectCreation/views/helpLatLon.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/helpLatLon.html",
        "<div class=\"modal-header\">\n" +
        "    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <h4 class=\"modal-title\">PARCEL - Latitude and Longitude</h4>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"modal-body \">      \n" +
        "    <ul>\n" +
        "        <li>\n" +
        "            <p>\n" +
        "                If you do not enter a latitude and longitude for your site, PARCEL will attempt to determine the latitude and longitude of your report using a third party service at no additional cost.\n" +
        "            </p>\n" +
        "        </li>\n" +
        "        <li>\n" +
        "            <p>\n" +
        "            Because of this service, we recommend that if you do not have reliable coordinates for your site, you should leave the latitude and longitude blank.\n" +
        "            </p>\n" +
        "        </li>\n" +
        "        <li>\n" +
        "            <p>Consultants will be able to change the latitude and longitude at any time in the General Information section of their report.\n" +
        "            </p>\n" +
        "        </li>\n" +
        "    </ul>\n" +
        "</div> \n" +
        "\n" +
        "<div class=\"modal-footer\">\n" +
        "    <button class=\"btn btn-default\" ng-click=\"CancelDelete()\">OK</button>\n" +
        "</div>\n" +
        " \n" +
        " ");
}]);

angular.module("../app/modules/ProjectCreation/views/projectDocuments.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/projectDocuments.html",
        "<div class=\"container-fluid\">\n" +
        "    <div class=\"panel panel-default\">\n" +
        "        <div class=\"panel-body\">\n" +
        "\n" +
        "\n" +
        "\n" +
        "            <h2>Project Documents </h2>\n" +
        "\n" +
        "            <!--            <div class=\"row text-center\"> <a class=\"btn-link\" href=\"\"> Upload documents</a> </div>-->\n" +
        "            <div class=\"row\">\n" +
        "                \n" +
        "                <div class=\"col-md-12\">\n" +
        "<h6>Project: Test Project</h6>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"row\">\n" +
        "                \n" +
        "                <div class=\"col-md-4\">\n" +
        "                    \n" +
        "                    <div class=\"form-group\">                        \n" +
        "                        <div>\n" +
        "                             <select ng-init=\"docType = 0\" id=\"selProjectDocuments\" ng-model=\"docType\" class=\"form-control\" data-style=\"btn-primary\" name=\"selProjectDocument\" ng-click=\"serviceResponseAlertDanger = false;fileErrorDanger = false;serviceResponseAlertSuccess = false;fileErrorSuccess = false;serviceResponseAlertDangerFileType = false;fileErrorDangerFileType = false;serviceResponseAlertDangerFileSize = false;fileErrorDangerFileSize = false;\">\n" +
        "                                <option value=\"0\">Select Document Type </option>\n" +
        "                                <option value=\"1\">Client Documents</option>\n" +
        "                                <option value=\"2\">General Documents</option>\n" +
        "                                <option value=\"3\">Invoices</option>\n" +
        "                                <option value=\"4\">Reports</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"col-sm-3\">\n" +
        "                    <div class=\"form-group\">\n" +
        "\n" +
        "                        <div class=\"btn btn-md btn-primary fileinput-button\" ng-class=\"{disabled: disabled}\">\n" +
        "                            <i class=\"fa fa-file-text-o\"></i> Attach\n" +
        "<!--                            <input id=\"fileButton\" type=\"file\" multiple ng-model=\"files\" file-change >-->\n" +
        "                            <div file-select=\"file\"></div>\n" +
        "                        \n" +
        "                        </div>\n" +
        "                        \n" +
        "<!--                        <button ng-click=\"clear()\">upload</button>-->\n" +
        "                        \n" +
        "                         <button class=\"btn btn-primary\" ng-click=\"serviceResponseAlertDanger = false;fileErrorDanger = false;serviceResponseAlertSuccess = false;fileErrorSuccess = false;serviceResponseAlertDangerFileType = false;fileErrorDangerFileType = false;serviceResponseAlertDangerFileSize = false;fileErrorDangerFileSize = false;uploadFiles();\">{{btnText}}</button>\n" +
        "                        \n" +
        "<!--                        <button class=\"btn btn-primary\" ng-click=\"serviceResponseAlertDanger = false;fileErrorDanger = false;serviceResponseAlertSuccess = false;fileErrorSuccess = false;serviceResponseAlertDangerFileType = false;fileErrorDangerFileType = false;serviceResponseAlertDangerFileSize = false;fileErrorDangerFileSize = false;uploadFiles(files);\">{{btnText}}</button>-->\n" +
        "\n" +
        "                        <span class=\"AU_uploadFilename text-primary\" ng-repeat=\"file in files\">{{file.fileName}}</span>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-md-12\">\n" +
        "                    <!--\n" +
        "                     <div ng-show=\"fileError\">\n" +
        "                            <div class=\"alert alert-danger\">{{fileErrorText}}</div>\n" +
        "                        </div>\n" +
        "-->\n" +
        "\n" +
        "\n" +
        "                    <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"serviceResponseAlertDanger || fileErrorDanger\">\n" +
        "                        <button type=\"button\" class=\"close\" ng-click=\"serviceResponseAlertDanger = false;fileErrorDanger = false;\" aria-label=\"Close\">\n" +
        "                            <span aria-hidden=\"true\">×</span>\n" +
        "                        </button>\n" +
        "                        {{fileErrorTextDanger}}\n" +
        "                    </div>\n" +
        "                    \n" +
        "                       <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"serviceResponseAlertDangerFileType || fileErrorDangerFileType\">\n" +
        "                        <button type=\"button\" class=\"close\" ng-click=\"serviceResponseAlertDangerFileType = false;fileErrorDangerFileType = false;\" aria-label=\"Close\">\n" +
        "                            <span aria-hidden=\"true\">×</span>\n" +
        "                        </button>\n" +
        "                        {{fileErrorTextDangerFileType}}\n" +
        "                    </div>\n" +
        "                    \n" +
        "                     <div class=\"alert alert-danger\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"serviceResponseAlertDangerFileSize || fileErrorDangerFileSize\">\n" +
        "                        <button type=\"button\" class=\"close\" ng-click=\"serviceResponseAlertDangerFileSize = false;fileErrorDangerFileSize = false;\" aria-label=\"Close\">\n" +
        "                            <span aria-hidden=\"true\">×</span>\n" +
        "                        </button>\n" +
        "                        {{fileErrorTextDangerFileSize}}\n" +
        "                    </div>\n" +
        "                    \n" +
        "                    \n" +
        "                       <div class=\"alert alert-success\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"serviceResponseAlertSuccess || fileErrorSuccess\">\n" +
        "                        <button type=\"button\" class=\"close\" ng-click=\"serviceResponseAlertSuccess = false;fileErrorSuccess = false;\" aria-label=\"Close\">\n" +
        "                            <span aria-hidden=\"true\">×</span>\n" +
        "                        </button>\n" +
        "                        {{fileErrorTextSuccess}}\n" +
        "                    </div>\n" +
        "                    \n" +
        "\n" +
        "                    <div class=\"bottom-margin\">\n" +
        "                        <div id=\"fileupload\">\n" +
        "\n" +
        "                            <div class=\"fileupload-buttonbar AU_uploadbox \">\n" +
        "\n" +
        "\n" +
        "\n" +
        "                                <!-- The global file processing state -->\n" +
        "                                <!--                                <span class=\"fileupload-process\"></span>-->\n" +
        "                                <!-- The global progress state -->\n" +
        "                                \n" +
        "                                    <div id=\"divClientDocuments\">\n" +
        "\n" +
        "                                        <h3>Client Documents</h3>\n" +
        "                                        <div class=\"table-responsive\">\n" +
        "                                        <table id=\"tblClientDocuments\" class=\"table table-condensed  table-bordered table-hover no-margin\">\n" +
        "                                            <thead>\n" +
        "                                                <tr>\n" +
        "                                                    <th class=\"col-sm-2\">Action</th>\n" +
        "                                                    <th>File Name</th>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                                                </tr>\n" +
        "                                            </thead>\n" +
        "                                            <tbody ng-hide=\"clientDocArr.length > 0\">\n" +
        "                                                <tr>\n" +
        "                                                    <td colspan=\"2\">\n" +
        "                                                        No Client Documents available\n" +
        "                                                    </td>\n" +
        "                                                </tr>\n" +
        "                                            </tbody>\n" +
        "                                            <tbody ng-hide=\"clientDocArr.length == 0\">\n" +
        "                                                <tr  ng-repeat=\"file in clientDocArr\">\n" +
        "\n" +
        "                                                    <td>\n" +
        "<!--                                                        <a style=\"cursor: pointer;\" ng-click=\"openDeletePopup(file.fileGUID,1)\">Remove</a>-->\n" +
        "                                                        <button class=\"btn btn-danger btn-xs\" ng-click=\"openDeletePopup(file.fileGUID,1)\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Delete\" data-trigger=\"hover\"><i class=\"glyphicon glyphicon-trash\"></i></button>\n" +
        "                                                    </td>\n" +
        "                                                    <td><a class=\"pointer\" href=\"{{file.downloadURL}}\">{{file.fileName}}</a></td>\n" +
        "\n" +
        "                                                </tr>\n" +
        "\n" +
        "                                            </tbody>\n" +
        "\n" +
        "                                        </table>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                    <div id=\"divInvoices\">\n" +
        "\n" +
        "                                        <h3>Invoices</h3>\n" +
        "                                        <div class=\"table-responsive\">\n" +
        "                                        <table id=\"tblInvoices\" class=\"table table-condensed  table-bordered table-hover no-margin\">\n" +
        "                                            <thead>\n" +
        "                                                <tr>\n" +
        "                                                    <th class=\"col-sm-2\">Action</th>\n" +
        "                                                    <th>File Name</th>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                                                </tr>\n" +
        "                                            </thead>\n" +
        "                                            <tbody ng-hide=\"invoicesArr.length > 0\">\n" +
        "                                                <tr>\n" +
        "                                                    <td colspan=\"2\">\n" +
        "                                                        No Invoice Documents available\n" +
        "                                                    </td>\n" +
        "                                                </tr>\n" +
        "											</tbody>\n" +
        "                                                <tbody ng-hide=\"invoicesArr.length == 0\">\n" +
        "\n" +
        "                                                    <tr ng-repeat=\"file in invoicesArr\">\n" +
        "\n" +
        "                                                        <td>\n" +
        "<!--                                                            <a style=\"cursor: pointer;\" ng-click=\"openDeletePopup(file.fileGUID,2)\">Remove</a>-->\n" +
        "                                                         <button class=\"btn btn-danger btn-xs\" ng-click=\"openDeletePopup(file.fileGUID,2)\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Delete\" data-trigger=\"hover\"><i class=\"glyphicon glyphicon-trash\"></i></button>\n" +
        "                                                        </td>\n" +
        "                                                        <td><a class=\"pointer\" href=\"{{file.downloadURL}}\">{{file.fileName}}</a></td>\n" +
        "\n" +
        "                                                    </tr>\n" +
        "\n" +
        "                                                </tbody>\n" +
        "\n" +
        "                                        </table>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                    <div id=\"divGeneralDocuments\">\n" +
        "\n" +
        "                                        <h3>General Documents</h3>\n" +
        "										<div class=\"table-responsive\">\n" +
        "                                        <table id=\"tblGeneralDocuments\" class=\"table table-condensed  table-bordered table-hover no-margin\">\n" +
        "                                            <thead>\n" +
        "                                                <tr>\n" +
        "                                                    <th class=\"col-sm-2\">Action</th>\n" +
        "                                                    <th>File Name</th>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                                                </tr>\n" +
        "                                            </thead>\n" +
        "                                            <tbody ng-hide=\"generalDocArr.length > 0\">\n" +
        "                                                <tr>\n" +
        "                                                    <td colspan=\"2\">\n" +
        "                                                        No General Documents available\n" +
        "                                                    </td>\n" +
        "                                                </tr>\n" +
        "                                            </tbody>\n" +
        "                                            <tbody ng-hide=\"generalDocArr.length == 0\">\n" +
        "                                                <tr ng-repeat=\"file in generalDocArr\">\n" +
        "\n" +
        "                                                    <td>\n" +
        "<!--                                                        <a style=\"cursor: pointer;\" ng-click=\"openDeletePopup(file.fileGUID,3)\">Remove</a>-->\n" +
        "                                                       \n" +
        "                                                         <button class=\"btn btn-danger btn-xs\" ng-click=\"openDeletePopup(file.fileGUID,3)\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Delete\" data-trigger=\"hover\" ><i class=\"glyphicon glyphicon-trash\"></i></button>\n" +
        "                                                    </td>\n" +
        "                                                    <td><a class=\"pointer\" href=\"{{file.downloadURL}}\">{{file.fileName}}</a></td>\n" +
        "\n" +
        "                                                </tr>\n" +
        "\n" +
        "                                            </tbody>\n" +
        "\n" +
        "                                        </table>\n" +
        "										</div>\n" +
        "                                    </div>\n" +
        "                                    <div id=\"divReports\">\n" +
        "\n" +
        "                                        <h3>Reports</h3>\n" +
        "                                        <div class=\"table-responsive\">\n" +
        "                                        <table id=\"tblReports\" class=\"table table-condensed  table-bordered table-hover no-margin\">\n" +
        "                                            <thead>\n" +
        "                                                <tr>\n" +
        "                                                    <th class=\"col-sm-2\">Action</th>\n" +
        "                                                    <th>File Name</th>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                                                </tr>\n" +
        "                                            </thead>\n" +
        "                                            <tbody ng-hide=\"reportsArr.length > 0\">\n" +
        "                                                <tr>\n" +
        "                                                    <td colspan=\"2\">\n" +
        "                                                        No Report Documents available\n" +
        "                                                    </td>\n" +
        "                                                </tr>\n" +
        "                                            </tbody>\n" +
        "                                            <tbody ng-hide=\"reportsArr.length == 0\">\n" +
        "                                                <tr ng-repeat=\"file in reportsArr\">\n" +
        "\n" +
        "                                                    <td>\n" +
        "                                                         <button class=\"btn btn-danger btn-xs\" ng-click=\"openDeletePopup(file.fileGUID,4)\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Delete\" data-trigger=\"hover\"><i class=\"glyphicon glyphicon-trash\"></i></button>\n" +
        "<!--                                                        <a style=\"cursor: pointer;\" ng-click=\"openDeletePopup(file.fileGUID,4)\">Remove</a>-->\n" +
        "                                                    </td>\n" +
        "                                                    <td><a class=\"pointer\" href=\"{{file.downloadURL}}\">{{file.fileName}}</a></td>\n" +
        "\n" +
        "                                                </tr>\n" +
        "\n" +
        "                                            </tbody>\n" +
        "\n" +
        "                                        </table>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "\n" +
        "                                </div>\n" +
        "\n" +
        "                              \n" +
        "\n" +
        "                            </div>\n" +
        "\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "        </div>    \n" +
        "</div>\n" +
        "\n" +
        "<script id=\"dllDelete.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\">Delete File</h4>\n" +
        "    </div>\n" +
        "\n" +
        "\n" +
        "    <form name=\"myFormAddTemplate1\" novalidate>\n" +
        "\n" +
        "        <div class=\"modal-body \">\n" +
        "\n" +
        "            <strong>This will delete the selected file. Are you sure you want to continue?</strong>\n" +
        "\n" +
        "        </div>\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDelete()\">Cancel</a>\n" +
        "            <a class=\"btn btn-primary\" role=\"button\" ng-click=\"deleteFile()\">Continue</a>\n" +
        "        </div>\n" +
        "    </form>\n" +
        "\n" +
        "</script>");
}]);

angular.module("../app/modules/ProjectCreation/views/projectInfo.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/projectInfo.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "\n" +
        "    <style type=\"text/css\">\n" +
        "\n" +
        "\n" +
        "    </style>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <script id=\"ProjectTips.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header \">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Tips for Naming Your Project: </h4>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"modal-body \">\n" +
        "            <ul>\n" +
        "                <li>\n" +
        "                    <P>Choose a name that will help you identify this project from the rest of your projects on PARCEL. If your company already has a project-numbering system, you should include that number in your PARCEL project name.\n" +
        "                    </P>\n" +
        "                </li>\n" +
        "                <li>\n" +
        "                    <p>Keep in mind that your list of projects will be sorted alphabetically. Beginning project names with a standard format will make them easier to find in a long list.\n" +
        "                    </p>\n" +
        "                </li>\n" +
        "                <li>\n" +
        "                    <p>In most cases, it is best to omit phrases like &quot;Phase I&quot; that will be common to a number of projects.\n" +
        "                    </p>\n" +
        "                </li>\n" +
        "                <li>\n" +
        "                    <p>Your decision here need not be final. You will be able to change the name of the project, and the project name you enter here can be different from the one you include in your report.\n" +
        "                    </p>\n" +
        "                </li>\n" +
        "            </ul>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <button class=\"btn btn-default\" ng-click=\"CancelDelete()\">OK</button>\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h3 class=\"panel-title\">\n" +
        "          \n" +
        "            <span>Project Information</span>\n" +
        "        </h3>\n" +
        "    </div>\n" +
        "    <div id=\"collapseProjInfo\" class=\"panel-collapse collapse in\">\n" +
        "        <div class=\"panel-body\" ng-controller=\"ProjectInfoCtrl as projectInfo\">\n" +
        "\n" +
        "\n" +
        "            <div class=\"form-horizontal\">\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label for=\"projectName\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Project Name:\n" +
        "                        <a class=\"pointer\" ng-click=\"ShowProjectTips()\" title=\"Tips for naming projects\"><i class=\"fa fa-question-circle\"></i></a>\n" +
        "                    </label>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Project Name\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"projectName\" ng-model=\"main.submitData.name\" name=\"projectName\" required>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "                <div ng-if=\"displayAsPerCompany(main)\">\n" +
        "\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"userQuestionnaire\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            User Questionnaire:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-9 col-md-9\">\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"userQuestionnaire\" id=\"radioadministeredByPM1\" value=\"Administered by PM\"> Administered by PM </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"userQuestionnaire\" id=\"radioadministeredByPM2\" value=\"Administered by User\"> Administered by User </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"userQuestionnaire\" id=\"radioadministeredByPM3\" value=\"NA\"> NA </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"lienSearch\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            Lien Search:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-9 col-md-9\">\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"lienSearch\" id=\"radiolienSearch1\" value=\"No\"> No </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"lienSearch\" id=\"radiolienSearch2\" value=\"Yes\"> Yes </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"chainofTitle\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            50-year chain-of-title:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-9 col-md-9\">\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"chainofTitle\" id=\"radiolienSearch1\" value=\"No\"> No </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"chainofTitle\" id=\"radiolienSearch2\" value=\"Yes\"> Yes </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"acm\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            ACM:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-9 col-md-9\">\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"acm\" id=\"acm1\" value=\"No\"> No </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"acm\" id=\"acm2\" value=\"Language Only\"> Language Only </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"acm\" id=\"acm3\" value=\"Sampling\"> Sampling </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"lbp\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            LBP:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-9 col-md-9\">\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"lbp\" id=\"lbp1\" value=\"No\"> No </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"lbp\" id=\"lbp2\" value=\"Language Only\"> Language Only </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"lbp\" id=\"lbp3\" value=\"Sampling\"> Sampling </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"mold\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            Mold:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-9 col-md-9\">\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"mold\" id=\"mold1\" value=\"No\"> No </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"mold\" id=\"mold2\" value=\"Language Only\"> Language Only </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"mold\" id=\"mold3\" value=\"Sampling\"> Sampling </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"radon\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            Radon:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-9 col-md-9\">\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"radon\" id=\"radon1\" value=\"No\"> No </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"radon\" id=\"radon2\" value=\"Language Only\"> Language Only </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"radon\" id=\"radon3\" value=\"Sampling\"> Sampling </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"lead\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            Lead in Drinking Water:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-9 col-md-9\">\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"lead\" id=\"lead1\" value=\"No\"> No </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"lead\" id=\"lead2\" value=\"Language Only\"> Language Only </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"lead\" id=\"lead3\" value=\"Sampling\"> Sampling </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"other\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            Other:\n" +
        "                        </label>\n" +
        "\n" +
        "                        <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                            <textarea class=\"form-control\" id=\"other\" ng-model=\"main.submitData.name\" name=\"other\"></textarea>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"previousReports\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            Previous Reports:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-9 col-md-9\">\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"previousReports\" id=\"previousReports1\" value=\"No\"> No </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"previousReports\" id=\"previousReports2\" value=\"Yes\"> Yes </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <!-- due dates -->\n" +
        "                    <h5>Due Dates:</h5>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"technicalReview\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            Technical Review:\n" +
        "                        </label>\n" +
        "\n" +
        "                        <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                            <div class=\"input-group\">\n" +
        "                                <input type=\"text\" id=\"technicalReview\" class=\"form-control\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"main.submitData.technicalReview\" is-open=\"open.technicalReview\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"false\" name=\"technicalReview\" show-button-bar=\"false\" ng-click=\"openCalendar($event, 'technicalReview')\" ng-focus=\"openCalendar($event, 'technicalReview')\">\n" +
        "                                <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'technicalReview')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"qualityControlReview\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            Quality Control Review (if required):\n" +
        "                        </label>\n" +
        "\n" +
        "                        <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                            <div class=\"input-group\">\n" +
        "                                <input type=\"text\" id=\"qualityControlReview\" class=\"form-control\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"main.submitData.qualityControlReview\" is-open=\"open.qualityControlReview\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"false\" name=\"qualityControlReview\" show-button-bar=\"false\" ng-click=\"openCalendar($event, 'qualityControlReview')\" ng-focus=\"openCalendar($event, 'qualityControlReview')\">\n" +
        "                                <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'qualityControlReview')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"verbal\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            Verbal (if required):\n" +
        "                        </label>\n" +
        "\n" +
        "                        <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                            <div class=\" input-group\">\n" +
        "                                <input type=\"text\" id=\"verbal\" class=\"form-control\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"main.submitData.verbal\" is-open=\"open.verbal\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"false\" name=\"verbal\" show-button-bar=\"false\" ng-click=\"openCalendar($event, 'verbal')\" ng-focus=\"openCalendar($event, 'verbal')\">\n" +
        "                                <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'verbal')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"draft\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            Draft (if required):\n" +
        "                        </label>\n" +
        "\n" +
        "                        <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                            <div class=\" input-group\">\n" +
        "                                <input type=\"text\" id=\"draft\" class=\"form-control\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"main.submitData.draft\" is-open=\"open.draft\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"false\" name=\"draft\" show-button-bar=\"false\" ng-click=\"openCalendar($event, 'draft')\" ng-focus=\"openCalendar($event, 'draft')\">\n" +
        "                                <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'draft')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"final\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            Final:\n" +
        "                        </label>\n" +
        "\n" +
        "                        <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                            <div class=\"input-group\">\n" +
        "                                <input type=\"text\" id=\"final\" class=\"form-control\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"main.submitData.final\" is-open=\"open.final\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"false\" name=\"final\" show-button-bar=\"false\" ng-click=\"openCalendar($event, 'final')\" ng-focus=\"openCalendar($event, 'final')\">\n" +
        "                                <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'final')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <!-- due dates ends -->\n" +
        "\n" +
        "                    <!-- deliverables -->\n" +
        "                    <h5>Deliverables:</h5>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"noOfCDs\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            # of CDs:\n" +
        "                        </label>\n" +
        "\n" +
        "                        <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                            <input type=\"text\" class=\"form-control\" id=\"noOfCDs\" ng-model=\"main.submitData.noOfCDs\" name=\"noOfCDs\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"boundHardcopies\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            # of Hardcopies (bound):\n" +
        "                        </label>\n" +
        "\n" +
        "                        <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                            <input type=\"text\" class=\"form-control\" id=\"boundHardcopies\" ng-model=\"main.submitData.boundHardcopies\" name=\"boundHardcopies\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"unboundHardcopies\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            # of Hardcopies (unbound):\n" +
        "                        </label>\n" +
        "\n" +
        "                        <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                            <input type=\"text\" class=\"form-control\" id=\"unboundHardcopies\" ng-model=\"main.submitData.unboundHardcopies\" name=\"unboundHardcopies\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"email\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            Email ?\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-9 col-md-9\">\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"email\" id=\"email1\" value=\"No\"> No </label>\n" +
        "                            <label class=\"radio-inline\">\n" +
        "                                <input type=\"radio\" name=\"email\" id=\"email2\" value=\"Yes\"> Yes </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"specialInstructions\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                            Special Instructions:\n" +
        "                        </label>\n" +
        "\n" +
        "                        <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                            <textarea class=\"form-control\" id=\"specialInstructions\" ng-model=\"main.submitData.specialInstructions\" name=\"specialInstructions\"></textarea>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <!-- deliverables ends -->\n" +
        "                    <h5>Note to Project Manager:</h5>\n" +
        "                    <p>Provide (if available):</p>\n" +
        "                    <p>Maps</p>\n" +
        "                    <p>Property Description</p>\n" +
        "                    <p>Scope of Work</p>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                <div ng-if=\"displayAsPerOtherCompany(main)\">\n" +
        "\n" +
        "                    <div class=\"form-group required\">\n" +
        "                        <label for=\"dateDraftDue\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "\n" +
        "                            Date Draft Due:\n" +
        "                        </label>\n" +
        "\n" +
        "                        <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Date Draft Due\">\n" +
        "                            <div class=\" input-group\">\n" +
        "                                <input type=\"text\" id=\"draftDueDate\" class=\"form-control\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"main.submitData.draftDueDate\" is-open=\"open.date1\" enable-time=\"false\" datepicker-options=\"dateOptions\" close-on-date-selection=\"true\" datepicker-append-to-body=\"false\" name=\"draftDueDate\" required show-button-bar=\"false\" ng-click=\"openCalendar($event, 'date1')\">\n" +
        "                                <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'date1')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group required\">\n" +
        "                        <label for=\"dateFinalDue\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "\n" +
        "                            Date Final Due:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Final Due Date\">\n" +
        "                            <div class=\" input-group\">\n" +
        "                                <input type=\"text\" id=\"dateFinalDue\" class=\"form-control\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"main.submitData.finalDueDate\" is-open=\"open.date2\" enable-time=\"false\" datepicker-options=\"dateOptions\" close-on-date-selection=\"true\" datepicker-append-to-body=\"false\" name=\"finalDueDate\" required show-button-bar=\"false\" ng-click=\"openCalendar($event, 'date2')\">\n" +
        "                                <span class=\"input-group-btn\">\n" +
        "                    <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'date2')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ProjectCreation/views/propertyInfo.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/propertyInfo.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "\n" +
        "    <style type=\"text/css\">\n" +
        "\n" +
        "\n" +
        "    </style>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <span data-target=\"#collapsePropInfo\">Property Information</span>\n" +
        "        </h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapsePropInfo\" class=\"panel-collapse collapse in\">\n" +
        "        <div class=\"panel-body\" ng-controller=\"PropertyInfoCtrl as propertyInfo\">\n" +
        "\n" +
        "            <div class=\"form-horizontal\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"clientPropNum\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Client Property Number:\n" +
        "                    </label>\n" +
        "\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"clientPropNum\" ng-model=\"main.submitData.property.propertyNumber\">\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label for=\"propName\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                        Property Name:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Property Name\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"propName\" ng-model=\"main.submitData.property.name\" required name=\"propName\">\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label for=\"address\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Address:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Address\">\n" +
        "\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"address\" ng-model=\"main.submitData.property.address1\" required name=\"address\">\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "\n" +
        "                    <div class=\"col-sm-offset-3 col-xs-12 col-md-4 col-sm-5\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"address\" ng-model=\"main.submitData.property.address2\" name=\"address1\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label for=\"city\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">City:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"City\">\n" +
        "\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"city\" ng-model=\"main.submitData.property.city\" required name=\"city\">\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label for=\"country\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Country:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"Country\">\n" +
        "\n" +
        "                        <!--<select class=\"form-control\" id=\"country\" type=\"select\"\n" +
        "                            name=\"Roles\" ng-model=\"main.submitData.property.country\"\n" +
        "                            data-ng-options=\"country for country in main.countries\" required name=\"country\">\n" +
        "                        <option value=\"\">Select Country</option>\n" +
        "                    </select>-->\n" +
        "                        <select class=\"form-control\" id=\"country\" type=\"select\" country-model=\"main.submitData.property.country\" country-select name=\"propertyInfoCountry\" required>\n" +
        "                            <option value=\"\">Select Country</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group required\">\n" +
        "                    <label for=\"state\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">State:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\" field-validation=\"State\">\n" +
        "\n" +
        "                        <select class=\"form-control\" id=\"state\" type=\"select\" state-model=\"main.submitData.property.state\" state-select country-model=\"main.submitData.property.country\" name=\"propertyState\" required>\n" +
        "                            <option value=\"\">Select State</option>\n" +
        "                        </select>\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"state\" ng-model=\"main.submitData.property.state\" required name=\"propertyStateIp\" state-input>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "\n" +
        "                    <label for=\"zip\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Zip:</label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input name=\"zipcode\" type=\"text\" class=\"form-control\" id=\"zip\" ng-model=\"main.submitData.property.zip\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "    </div>\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ProjectCreation/views/reportSelection.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/reportSelection.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "    <style>\n" +
        "\n" +
        "\n" +
        "    </style>\n" +
        "\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <span data-target=\"#collapseReportDiv\">Report Selection <i class=\"fa fa-asterisk requiredicon\"></i></span>\n" +
        "        </h5>\n" +
        "    </div>\n" +
        "\n" +
        "\n" +
        "    <div id=\"collapseReportDiv\" class=\"panel-collapse collapse in\">\n" +
        "        <div class=\"panel-body\" ng-controller=\"ReportSelectionCtrl as reportSelection\">\n" +
        "\n" +
        "            <div class=\"alert alert-danger\" ng-show=\"main.reportSelectionInvalid\">\n" +
        "                <span>\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"main.reportSelectionInvalid = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "                </button>\n" +
        "                You must select a Report Type.\n" +
        "                </span>\n" +
        "            </div>\n" +
        "            <div>To select multiple report types, check the box next to each desired type.</div>\n" +
        "            <div ng-repeat=\"report in main.loadData.reportTypes\" class=\"bottom-margin-xs\">\n" +
        "\n" +
        "                <div class=\"panel panel-default\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        <h4 class=\"panel-title\">\n" +
        "        					<a role=\"button\" data-toggle=\"collapse\" data-target=\"#{{report.title}}\">\n" +
        "                        		{{report.reportTypeName}} \n" +
        "							</a>\n" +
        "						</h4>\n" +
        "                    </div>\n" +
        "                    <div id=\"{{report.title}}\" class=\"panel-collapse collapse in\" aria-expanded=\"true\">\n" +
        "                        <div class=\"panel-body panel-body-sm\">\n" +
        "                            <div ng-repeat=\"template in report.templates\" ng-if=\"$even\" class=\"row\">\n" +
        "\n" +
        "                                <div class=\"col-md-6\">\n" +
        "\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <div class=\"checkbox\">\n" +
        "                                            <label>\n" +
        "                                                <input type=\"checkbox\" id=\"Report\" name=\"Report\" ng-model=\"(main.submitData.reports[template.templateID] = main.submitData.reports[template.templateID] || { templateGUID: template.templateGUID, templateVersionGUID: template.templateVersionGUID }).selected\">\n" +
        "                                                <span>{{template.name}}</span>\n" +
        "                                            </label>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                    <div class=\" form-group\" id=\"{{template.templateID}}\" ng-show=\"main.submitData.reports[template.templateID].selected\">\n" +
        "\n" +
        "\n" +
        "\n" +
        "                                        <div class=\"row\">\n" +
        "                                            <div class=\"col-md-6 col-sm-6 col-lg-6 col-xs-12\">\n" +
        "                                                <div class=\" form-group\">\n" +
        "                                                    <label for=\"fee\" class=\"control-label\">\n" +
        "                                                        Fee\n" +
        "                                                        <a ng-click=\"reportSelection.ShowFeeHelp()\" title=\"Why am I being asked to enter the fee?\" class=\"pointer\"> <i class=\" text-blue fa fa-question-circle\"></i></a>\n" +
        "                                                    </label>\n" +
        "                                                    <input type=\"text\" id=\"fee\" class=\"form-control\" ng-model=\"main.submitData.reports[template.templateID].fee\" placeholder=\"N/A\"> <span class=\"help-block\"></span>\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                            <div class=\"col-md-6 col-sm-6 col-lg-6 col-xs-12\">\n" +
        "                                                <div class=\"form-group\">\n" +
        "                                                    <label for=\"project\" class=\"control-label\">Project #: </label>\n" +
        "                                                    <input type=\"text\" class=\"form-control\" ng-model=\"main.submitData.reports[template.templateID].projectNumber\" id=\"project\" placeholder=\"N/A\" name=\"project\">\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "\n" +
        "                                        <div class=\"row\">\n" +
        "                                            <div class=\"col-md-6 col-sm-6 col-lg-6 col-xs-12\">\n" +
        "                                                <div class=\"form-group\">\n" +
        "                                                    <label for=\"po\" class=\"control-label\">PO #: </label>\n" +
        "                                                    <input type=\"text\" id=\"po\" class=\"form-control\" ng-model=\"main.submitData.reports[template.templateID].poNumber\" placeholder=\"N/A\"> <span class=\"help-block\"></span>\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                            <div class=\"col-md-6 col-sm-6 col-lg-6 col-xs-12\">\n" +
        "                                                <div class=\"form-group\">\n" +
        "                                                    <label for=\"langlib\" class=\"control-label\">\n" +
        "                                                        Language Library:\n" +
        "                                                    </label>\n" +
        "                                                    <select class=\"form-control\" id=\"langlib\" type=\"select\" name=\"langlib\" ng-model=\"main.submitData.reports[template.templateID].languageLibraryGUID\" data-ng-options=\"library.libraryGUID as library.name for library in report.libraries\">\n" +
        "                                                        <option value=\"\">Select a Language Library</option>\n" +
        "                                                    </select> <span class=\"help-block\"></span>\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "\n" +
        "                                </div>\n" +
        "\n" +
        "                                <div class=\"col-md-6\" ng-if=\"report.templates.length > ($index + 1)\" ng-init=\"siblingTemplate = report.templates[$index + 1]\">\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <div class=\"checkbox\">\n" +
        "                                            <label>\n" +
        "                                                <input type=\"checkbox\" id=\"Report\" name=\"Report\" ng-model=\"(main.submitData.reports[siblingTemplate.templateID] = main.submitData.reports[siblingTemplate.templateID] || { templateGUID: siblingTemplate.templateGUID, templateVersionGUID: siblingTemplate.templateVersionGUID  }).selected\"><span> {{siblingTemplate.name}}</span>\n" +
        "                                            </label>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                    <div class=\" form-group\" id=\"{{siblingTemplate.templateID}}\" ng-show=\"main.submitData.reports[siblingTemplate.templateID].selected\">\n" +
        "\n" +
        "\n" +
        "\n" +
        "                                        <div class=\"row\">\n" +
        "                                            <div class=\"col-md-6 col-sm-6 col-lg-6 col-xs-12\">\n" +
        "                                                <div class=\" form-group\">\n" +
        "                                                    <label for=\"fee\" class=\"control-label\">\n" +
        "                                                        Fee\n" +
        "                                                        <a ng-click=\"reportSelection.ShowFeeHelp()\" title=\"Why am I being asked to enter the fee?\" class=\"pointer\"> <i class=\" text-blue fa fa-question-circle\"></i></a>\n" +
        "                                                    </label>\n" +
        "                                                    <input type=\"text\" id=\"fee\" class=\"form-control\" ng-model=\"main.submitData.reports[siblingTemplate.templateID].fee\" placeholder=\"N/A\"> <span class=\"help-block\"></span>\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                            <div class=\"col-md-6 col-sm-6 col-lg-6 col-xs-12\">\n" +
        "                                                <div class=\"form-group\">\n" +
        "                                                    <label for=\"project\" class=\"control-label\">Project #: </label>\n" +
        "                                                    <input type=\"text\" class=\"form-control\" ng-model=\"main.submitData.reports[siblingTemplate.templateID].projectNumber\" id=\"project\" placeholder=\"N/A\" name=\"project\">\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "\n" +
        "                                        <div class=\"row\">\n" +
        "                                            <div class=\"col-md-6 col-sm-6 col-lg-6 col-xs-12\">\n" +
        "                                                <div class=\"form-group\">\n" +
        "                                                    <label for=\"po\" class=\"control-label\">PO #: </label>\n" +
        "                                                    <input type=\"text\" id=\"po\" class=\"form-control\" ng-model=\"main.submitData.reports[siblingTemplate.templateID].poNumber\" placeholder=\"N/A\"> <span class=\"help-block\"></span>\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                            <div class=\"col-md-6 col-sm-6 col-lg-6 col-xs-12\">\n" +
        "                                                <div class=\"form-group\">\n" +
        "                                                    <label for=\"langlib\" class=\"control-label\">\n" +
        "                                                        Language Library:\n" +
        "                                                    </label>\n" +
        "                                                    <select class=\"form-control\" id=\"langlib\" type=\"select\" name=\"langlib\" ng-model=\"main.submitData.reports[siblingTemplate.templateID].languageLibraryGUID\" data-ng-options=\"library.libraryGUID as library.name for library in report.libraries\">\n" +
        "                                                        <option value=\"\">Select a Language Library</option>\n" +
        "                                                    </select> <span class=\"help-block\"></span>\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "\n" +
        "\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ProjectCreation/views/siteContactInfo.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectCreation/views/siteContactInfo.html",
        "<!DOCTYPE html>\n" +
        "<html>\n" +
        "\n" +
        "<head>\n" +
        "    <meta charset=\"ISO-8859-1\">\n" +
        "    <style type=\"text/css\">\n" +
        "\n" +
        "\n" +
        "    </style>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <div class=\"panel-heading\">\n" +
        "        <h5 class=\"panel-title\">\n" +
        "            <a class=\"collapsed pointer\" data-toggle=\"collapse\" \n" +
        "               data-target=\"#collapseSiteContactInfo\">\n" +
        "                Site Contact Information\n" +
        "            </a>\n" +
        "		</h5>\n" +
        "    </div>\n" +
        "    <div id=\"collapseSiteContactInfo\" class=\"panel-collapse collapse\">\n" +
        "        <div class=\"panel-body\" ng-controller=\"SiteContactInfoCtrl as siteContactInfo\">\n" +
        "\n" +
        "            <div class=\"form-horizontal\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"contactName\" class=\"control-label col-sm-3 col-md-3 col-xs-12\">\n" +
        "                        Contact Name:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"contactName\" ng-model=\"main.submitData.siteContact.name\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"contactPhone\" class=\"control-label col-sm-3 col-md-3 col-xs-12\">\n" +
        "                        Contact Phone:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"contactPhone\" ng-model=\"main.submitData.siteContact.phone\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"contactFax\" class=\"control-label col-sm-3 col-md-3 col-xs-12\">\n" +
        "                        Contact Fax:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"contactFax\" ng-model=\"main.submitData.siteContact.fax\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\" show-errors>\n" +
        "                    <label for=\"contactEmail\" class=\"control-label col-sm-3 col-md-3 col-xs-12\">\n" +
        "                        Contact Email:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                        <input type=\"email\" class=\"form-control\" id=\"contactEmail\" name=\"siteContactEmail\" ng-model=\"main.submitData.siteContact.email\">\n" +
        "                    </div>\n" +
        "                    <!--<p ng-if=\"siteContactInfoForm.siteContactEmail.$error.pattern\">The email address is invalid</p>-->\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ProjectDashboard/views/addPropertyReport.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/addPropertyReport.html",
        "<div class=\"container-fluid\" cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "<div class=\"panel panel-default\">\n" +
        "	<div class=\"panel-body\">	\n" +
        "    <div class=\"row\">\n" +
        "        <div class=\"col-lg-12 col-md-12 col-sm-12\">\n" +
        "            <div class=\"top-margin\">\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-lg-8 col-md-8 col-sm-8\">\n" +
        "                        <h4>Adding report to the \"{{addReport.projectName}}\" portfolio.</h4>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-lg-4 col-md-4 col-sm-4 text-right\">\n" +
        "                        <button ng-if=\"addReport.ifIsFromReportWriting\" ng-click=\"addReport.gotoReportWriting()\" class=\"btn btn-md btn-default\"><i class=\"glyphicon glyphicon-arrow-left\"></i> Return to Site </button>\n" +
        "                        <button ng-click=\"addReport.gotoProjectDashboard()\" class=\"btn btn-md btn-default\"><i class=\"glyphicon glyphicon-arrow-up\"></i> Return to Project </button>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <hr>\n" +
        "            </div>\n" +
        "            \n" +
        "            \n" +
        "\n" +
        "\n" +
        "            <form class=\"form-horizontal\" name=\"addReportsForm\" novalidate>\n" +
        "                <div id=\"alertAddReportsMsgDiv\" ng-show=\"addReport.showAlert\" class=\"alert alert-dismissible\"  role=\"alert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"addReport.dismissAlert()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                {{addReport.serviceMessage}}\n" +
        "            </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"property\">\n" +
        "                        Property #:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <input type=\"text\" id=\"property\" ng-model = \"addReport.propertyNumber\" class=\"form-control\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group required\" field-validation=\"Site Name\">\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"siteName\">\n" +
        "                        Site Name:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <input type=\"text\" class=\"form-control\" ng-model=\"addReport.siteName\" id=\"siteName\" name=\"siteName\" required>\n" +
        "                    </div>\n" +
        "                   \n" +
        "                </div>\n" +
        "                <div class=\"form-group required\" field-validation=\"Address\">\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"address\">\n" +
        "                        Address:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <input type=\"text\" class=\"form-control\" ng-model=\"addReport.address\" id=\"address\" name=\"address\" required>\n" +
        "                    </div>\n" +
        "                     \n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "                <!--<country-state ng-model = \"addReport.countries\" countrylabelcss = \"control-label col-md-2 col-sm-3 col-xs-12\" statelabelcss = \"control-label col-md-2 col-sm-3 col-xs-12\" countrydivcss = \"col-xs-11 col-sm-4 col-md-3\" statedivcss = \"col-xs-11 col-sm-4 col-md-3\" controllerobject = 'addReport'></country-state>-->\n" +
        "                \n" +
        "                <div class=\"form-group required\" field-validation=\"Country\">\n" +
        "\n" +
        "                    <label for=\"country\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">Country:</label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\" field-validation=\"Country\">\n" +
        "                        \n" +
        "                        <select class=\"form-control\" id=\"country\" type=\"select\" country-model=\"addReport.country\" country-select name=\"propertyInfoCountry\" required>\n" +
        "                            <option value=\"\">Select Country</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                    \n" +
        "                </div>\n" +
        "               <div class=\"form-group required\">\n" +
        "                    <label for=\"state\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">State:</label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\" field-validation=\"State\">\n" +
        "                        <select class=\"form-control\" id=\"state\" type=\"select\" state-model=\"addReport.state\" state-select country-model=\"addReport.country\" name=\"propertyState\" required>\n" +
        "                            <option value=\"\">Select State</option>\n" +
        "                        </select>\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"state\" ng-model=\"addReport.state\" required name=\"propertyStateIp\" state-input>\n" +
        "                    </div>\n" +
        "                    \n" +
        "                </div>\n" +
        "               \n" +
        "                <div class=\"form-group\">\n" +
        "\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"county\">\n" +
        "                        County:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <input type=\"text\" class=\"form-control\" ng-model=\"addReport.county\" name=\"county\" id=\"county\">\n" +
        "                    </div>\n" +
        "\n" +
        "                    \n" +
        "                </div>\n" +
        "                <div class=\"form-group required\" field-validation=\"City\">\n" +
        "\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"city\">\n" +
        "                        City:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <input type=\"text\" class=\"form-control\" ng-model=\"addReport.city\" name=\"city\" id=\"city\" required>\n" +
        "                    </div>\n" +
        "                  \n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group required\" field-validation=\"ZIP\">\n" +
        "\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"zip\">\n" +
        "                        Province/Zip:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <input type=\"text\" class=\"form-control\" ng-model=\"addReport.zip\" name=\"zip\" id=\"zip\" required>\n" +
        "                    </div>\n" +
        "                    \n" +
        "                </div>\n" +
        "               \n" +
        "                <div class=\"form-group\">                                                             \n" +
        "                <div class=\"col-md-offset-2 col-sm-offset-3 col-xs-12 col-sm-5 col-md-5\">\n" +
        "                <button class=\"btn btn-primary\" ng-click = \"addReport.mapAddress()\">Map It</button>\n" +
        "                    <!--<span ng-if=\"addReport.invalidAddress\" class=\"text-danger\"> {{addReport.googleErrorMessage}}</span>-->\n" +
        "                </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"latitude\">\n" +
        "                        Latitude:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <input ng-disabled=\"true\"  type=\"text\" class=\"form-control\" ng-model=\"addReport.latitude\" name = \"latitude\" id=\"latitude\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"longitude\">\n" +
        "                        Longitude:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <input ng-disabled=\"true\"  type=\"text\" class=\"form-control\" id=\"longitude\" name= \"longitude\" ng-model=\"addReport.longitude\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"contact\">\n" +
        "                        Contact:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <input  type=\"text\" class=\"form-control\" ng-model=\"addReport.contact\" id=\"contact\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"phone\">\n" +
        "                        Phone:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        \n" +
        "                        <!--<div class=\"input-group\">\n" +
        "                        <div class=\"input-group-addon\">{{addReport.phoneCode}}</div>\n" +
        "                            <input type=\"text\" class=\"form-control\" ng-model=\"addReport.phone\" id=\"phone\">\n" +
        "                        </div>-->\n" +
        "                        \n" +
        "                        <input type=\"text\" name = \"phone\" ng-change=\"addReport.formatPhone()\" ng-pattern=\"/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/\" class=\"form-control\" ng-model=\"addReport.phone\" id=\"phone\">\n" +
        "                    </div>\n" +
        "                    \n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\"  for=\"fax\">\n" +
        "                        Fax:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <input type=\"text\" ng-model=\"addReport.fax\" class=\"form-control\" id=\"fax\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "              \n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"email\">\n" +
        "                        Email:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <input type=\"email\" name = \"email\" class=\"form-control\" ng-model=\"addReport.email\" id=\"email\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group required\">\n" +
        "\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                        Report Type:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\" field-validation=\"Report Type\">\n" +
        "                        <multiselect class=\"input-xlarge\" multiple=\"true\" ng-model=\"addReport.reportType\" options=\"reportType.templateName for reportType in addReport.reportTypes\" required header=\"Select Report Type\" name=\"multipleReportsType\" required></multiselect>\n" +
        "                    </div>\n" +
        "                     \n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"propertyType\">\n" +
        "                        Property Type:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <select class=\"form-control\" id=\"propertyType\" ng-model = \"addReport.propType\" ng-options = \"propertyType.propertyTypeName for propertyType in addReport.propertyTypes\">\n" +
        "                           <option value=\"\">-- Select one from list--</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"transactionType\">\n" +
        "                        Transaction Type:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <select class=\"form-control\" id=\"transactionType\" ng-model = \"addReport.transType\" ng-options = \"transactionType.transactionTypeName for transactionType in addReport.transactionTypes\">\n" +
        "                            <option value=\"\">-- Select one from list--</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                \n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"control-label col-md-2 col-sm-3 col-xs-12\" for=\"grantAccess\">\n" +
        "                        Grant Access to:\n" +
        "                    </label>\n" +
        "                    <div class=\"col-xs-11 col-sm-4 col-md-3\">\n" +
        "                        <select class=\"form-control\" id=\"grantAccess\" ng-model = \"addReport.grantAcess\" ng-options = \"grantAccess.name for grantAccess in addReport.grantAcesses\">\n" +
        "                            <option value=\"\">-- Select one from list--</option>\n" +
        "                        </select>\n" +
        "                       \n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <div class=\"col-sm-offset-2 col-sm-10\">\n" +
        "                        <button type=\"button\" ng-click=\"addReport.clearDetails()\" class=\"btn btn-md btn-default\"> Cancel</button>\n" +
        "                        <button type=\"submit\" class=\"btn btn-md btn-primary\" ng-click=\"addReport.saveReport(addReportsForm)\"> Submit</button>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </form>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "	</div>	\n" +
        "</div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ProjectDashboard/views/alert.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/alert.html",
        "<div class=\"alert alert-dismissible\" ng-class=\"alertClass\" role=\"alert\">\n" +
        "    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <strong>Warning!</strong> {{serviceMessage}}\n" +
        "\n" +
        "</div>");
}]);

angular.module("../app/modules/ProjectDashboard/views/appendixFileList.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/appendixFileList.html",
        "<div id=\"appendixContent\" >\n" +
        "<div class=\"container-fluid\" id=\"top-content\" cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "    <div class=\"row\">\n" +
        "\n" +
        "        <div class=\"col-sm-12 col-md-12 col-lg-12 col-xs-12\">\n" +
        "\n" +
        "            <div class=\"top-margin-lg\">\n" +
        "                <div id=\"alertSiteDetailsMsgDiv\" ng-show=\"appendixList.showAlert\" class=\"alert alert-dismissible alert-danger\" role=\"alert\">\n" +
        "                    <button type=\"button\" class=\"close\" ng-click=\"appendixList.dismissAlert()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                    {{appendixList.serviceMessage}}\n" +
        "                </div>\n" +
        "                <div class=\"table-responsive\">\n" +
        "                    <table class=\"table table-bordered table-condensed small\">\n" +
        "                        <thead>\n" +
        "                            <th>\n" +
        "                                Name\n" +
        "                            </th>\n" +
        "                            <th>\n" +
        "                                Uploaded By\n" +
        "                            </th>\n" +
        "                            <th>\n" +
        "                                Uploaded On\n" +
        "                            </th>\n" +
        "                            <th>\n" +
        "                                Size\n" +
        "                            </th>\n" +
        "                            <th>\n" +
        "                                Pages\n" +
        "                            </th>\n" +
        "                        </thead>\n" +
        "                        <tbody>\n" +
        "                            <tr ng-repeat=\"info in appendixList.filesArray\">\n" +
        "                                <td><a appendixobject=\"info\" appendixlist = \"appendixList\" embed-content class=\"pointer\">{{info.fileName}}</a></td>\n" +
        "                                <td>{{info.uploadedByName}}</td>\n" +
        "                                <td>{{info.uploadDateTime}}</td>\n" +
        "                                <td>{{info.filesize}}</td>\n" +
        "                                <td>{{info.pages}}</td>\n" +
        "                            </tr>\n" +
        "                        </tbody>\n" +
        "                    </table>\n" +
        "                </div>\n" +
        "                \n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "</div>\n" +
        "\n" +
        "\n" +
        "<div id=\"bottom-content\" ng-if = \"appendixList.displayDoc\"></div>\n" +
        "\n" +
        "<div id=\"content-resizer\"  ng-if = \"appendixList.displayDoc\"\n" +
        "  			resizer=\"horizontal\" \n" +
        "  			resizer-height=\"6\" \n" +
        "  			resizer-top=\"#top-content\" \n" +
        "  			resizer-bottom=\"#bottom-content\">\n" +
        "  		</div>\n" +
        "\n" +
        "\n" +
        "</div>\n" +
        "\n" +
        " \n" +
        "\n" +
        "    \n" +
        "\n" +
        "\n" +
        "");
}]);

angular.module("../app/modules/ProjectDashboard/views/createTeam.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/createTeam.html",
        "<div class=\"modal-header\">\n" +
        "    <button type=\"button\" class=\"close\"  ng-click=\"createTeam.cancelTeamCreation()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <h4 class=\"modal-title\">Create Team</h4>\n" +
        "</div>\n" +
        "\n" +
        "\n" +
        "<div class=\"modal-body\">\n" +
        "\n" +
        "    <p ng-show=\"createTeam.exception\" class=\"text-danger\">{{createTeam.serviceMessage}}</p>\n" +
        "    \n" +
        "    <div class=\"form-group required\" field-validation=\"City\">\n" +
        "    <input required type=\"text\" ng-model = \"createTeam.teamName\">\n" +
        "    </div>\n" +
        "    \n" +
        "</div>\n" +
        "\n" +
        "<div class=\"modal-footer\">\n" +
        "    <button class=\"btn btn-default\" ng-click=\"createTeam.confirm()\">Create</button>\n" +
        "    <button class=\"btn btn-danger\" ng-click=\"createTeam.cancel()\">Cancel</button>\n" +
        "</div>");
}]);

angular.module("../app/modules/ProjectDashboard/views/dashboardTOC.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/dashboardTOC.html",
        "<div class=\"container-fluid\" cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "    <div class=\"row\">\n" +
        "        <div class=\"col-lg-12 col-md-12\">\n" +
        "            <div class=\"top-margin\">\n" +
        "                <toc-display sections=\"dashboardTOC.sections\" selected-section=\"dashboardTOC.selectedSection\" section-click=\"dashboardTOC.sectionClicked(section)\">\n" +
        "                    <div>\n" +
        "                        <p class=\"text-center\"> Document Map - {{\" \" + dashboardTOC.reportTypeName}}</p>\n" +
        "\n" +
        "                        <p class=\"text-center top-margin\">Section Comments Key</p>\n" +
        "                        <div class=\"row\">\n" +
        "                            <div class=\"col-lg-4 col-sm-4 col-md-4 col-xs-4\">\n" +
        "                                <div class=\"col-lg-5 col-sm-5 col-md-5 col-xs-5\"><i class=\"glyphicon glyphicon-flag fa-lg text-danger\"></i><span> =</span></div>\n" +
        "                                <div class=\"col-lg-7 col-sm-7 col-md-7 col-xs-7\"> Senior Reviewer Comment</div>\n" +
        "                            </div>\n" +
        "                            <div class=\"col-lg-4 col-sm-4 col-md-4 col-xs-4\">\n" +
        "                                <div class=\"col-lg-5 col-sm-5 col-md-5 col-xs-5\"><i class=\"glyphicon glyphicon-flag fa-lg blueFlag\"></i><span> =</span></div>\n" +
        "                                <div class=\"col-lg-7 col-sm-7 col-md-7 col-xs-7\"> Report Writer Comment</div>\n" +
        "\n" +
        "                            </div>\n" +
        "                            <div class=\"col-lg-4 col-sm-4 col-md-4 col-xs-4\">\n" +
        "\n" +
        "                                <div class=\"col-lg-5 col-sm-5 col-md-5 col-xs-5\"><i class=\"glyphicon glyphicon-flag fa-lg \"></i><span> =</span></div>\n" +
        "                                <div class=\"col-lg-7 col-sm-7 col-md-7 col-xs-7\">General Comment</div>\n" +
        "\n" +
        "                            </div>\n" +
        "\n" +
        "                        </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                </toc-display>\n" +
        "                <h4>Appendices</h4>\n" +
        "                <ul><li ng-repeat = \"appendix in dashboardTOC.appendices\">{appendix}</li></ul>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ProjectDashboard/views/deleteReport.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/deleteReport.html",
        "<div class=\"modal-header\">\n" +
        "    <button type=\"button\" class=\"close\" ng-click=\"deleteReport.cancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <h4 class=\"modal-title\">Delete Report</h4>\n" +
        "</div>\n" +
        "\n" +
        "\n" +
        "    <div class=\"modal-body\">\n" +
        "\n" +
        "        <p ng-show=\"deleteReport.exception\" class= \"text-danger\">{{deleteReport.serviceMessage}}</p>\n" +
        "       Deleting a report will remove the report and the property information from the project. Do you want to delete this report?\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"modal-footer\">\n" +
        "        <button  class=\"btn btn-default\" ng-click=\"deleteReport.cancelDelete()\">Cancel</button>\n" +
        "        <button  class=\"btn btn-danger\" ng-click=\"deleteReport.confirmDelete()\">Delete Report</button>\n" +
        "\n" +
        "        \n" +
        "    </div>\n" +
        "");
}]);

angular.module("../app/modules/ProjectDashboard/views/findContact.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/findContact.html",
        "");
}]);

angular.module("../app/modules/ProjectDashboard/views/grantAccess.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/grantAccess.html",
        "<div class=\"container-fluid\">\n" +
        "    <div class=\"panel panel-deafult\">\n" +
        "        <div class=\"panel-body\">\n" +
        "            <h2 class=\"page-header\">Access Management</h2>\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n" +
        "                    <h4>1 Select a Project:</h4>\n" +
        "\n" +
        "                    <div class=\"alert alert-info\">\n" +
        "                        <p><i class=\"glyphicon glyphicon-question-sign\"></i> Select the Project that you will be granting access to.</p>\n" +
        "                    </div>\n" +
        "                    <form class=\"form-horizontal\">\n" +
        "\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <div class=\"col-lg-5\">\n" +
        "                                <select class=\"form-control\" ng-options=\"project.projectGUID as project.name for project in grantAccess.projects\" ng-model=\"grantAccess.selectedProject\" ng-change=\"grantAccess.selectProject()\">\n" +
        "\n" +
        "                                </select>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                        <hr>\n" +
        "\n" +
        "                        <h4>2 Select Users:</h4>\n" +
        "                        <div class=\"alert alert-info\">\n" +
        "                            <p><i class=\"glyphicon glyphicon-question-sign\"></i> Select users or groups of users by using one of the three methods below. If using Select by Company/Office or the Search tool, check the box next to displayed users and then click Add Selected. You may continue to aggregate a group of users to grant access to by repeating these steps. All users to be given access will be displayed in Step 3.\n" +
        "                            </p>\n" +
        "                        </div>\n" +
        "\n" +
        "                        <div id=\"alertSelectCompanyMsgDiv\" ng-show=\"grantAccess.showAlertForCompany\" class=\"alert alert-dismissible alert-danger\" role=\"alert\">\n" +
        "                            <button type=\"button\" class=\"close\" ng-click=\"grantAccess.dismissAlert()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                            {{grantAccess.serviceMessage}}\n" +
        "                        </div>\n" +
        "\n" +
        "\n" +
        "                        <ul id=\"myTabs\" class=\"nav nav-tabs\" role=\"tablist\">\n" +
        "                            <li ng-click=\"grantAccess.tabClicked('office')\" role=\"presentation\" class=\"active\"><a class=\"pointer\" data-target=\"#office-tab\" id=\"office-tab-tab\" role=\"tab\" data-toggle=\"tab\" aria-controls=\"office-tab\" aria-expanded=\"false\"><i class=\"fa fa-building-o fa-lg\" ></i> Select By Company & Office</a></li>\n" +
        "\n" +
        "                            <li role=\"presentation\"><a class=\"pointer\" data-target=\"#user-searching\" role=\"user-tab\" id=\"user-tab-select\" data-toggle=\"tab\" aria-controls=\"user-tab\" aria-expanded=\"true\"><i class=\"fa fa-binoculars fa-lg\"></i> Select By Searching</a></li>\n" +
        "\n" +
        "                            <li role=\"presentation\"><a class=\"pointer\" data-target=\"#team-tab\" role=\"tab\" id=\"team\" data-toggle=\"tab\" aria-controls=\"contact\" aria-expanded=\"true\"><i class=\"fa fa-users fa-lg\"></i> Select From a Preconfigured or Saved Team</a></li>\n" +
        "                        </ul>\n" +
        "\n" +
        "                        <div id=\"myTabContent\" class=\"tab-content\">\n" +
        "                            <div role=\"tabpanel\" class=\"tab-pane fade active in\" id=\"office-tab\" aria-labelledby=\"office-tab\">\n" +
        "                                <h4 class=\"border-bottom\">Select a Company & Office</h4>\n" +
        "                               \n" +
        "                                <div class=\"form-group\">\n" +
        "                                    <label for=\"SelectOffice1\" class=\"col-sm-2 control-label\">Company</label>\n" +
        "                                    <div class=\"col-sm-4\">\n" +
        "                                        <select class=\"form-control\" id=\"Company1\" ng-options=\"company.name for company in grantAccess.companies\" ng-model=\"grantAccess.selectedCompany1\" ng-change=\"grantAccess.setCascadedCompany()\">\n" +
        "                                            <option value=\"\">Select a company</option>\n" +
        "                                        </select>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                                <div class=\"form-group\">\n" +
        "                                    <label for=\"SelectOffic2\" class=\"col-sm-2 control-label\">Company</label>\n" +
        "                                    <div class=\"col-sm-4\">\n" +
        "                                        <select ng-disabled=\"!grantAccess.hasCompany\" class=\"form-control\" id=\"selectCompany2\" ng-options=\"childCompany.companyGUID as childCompany.name for childCompany in grantAccess.childCompanies\" ng-model=\"grantAccess.childCompany\" ng-change=\"grantAccess.setCascadedOffice()\">\n" +
        "                                            <option value=\"\">Select a company</option>\n" +
        "                                        </select>\n" +
        "                                        <p class=\"form-control-static\" id=\"spanCompany2\">The selected company contains no companies.</p>\n" +
        "\n" +
        "\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                                <div class=\"form-group\">\n" +
        "                                    <label for=\"SelectOffice\" class=\"col-sm-2 control-label\">Office</label>\n" +
        "                                    <div class=\"col-sm-4\">\n" +
        "                                        <select ng-disabled=\"!grantAccess.hasOffice\" class=\"form-control\" id=\"selectOffice\" ng-options=\"office.companyOfficeGUID as office.officeName for office in grantAccess.offices\" ng-model=\"grantAccess.office\" ng-change=\"grantAccess.getUsersInOffice()\">\n" +
        "                                            <option value=\"\">Select An Office</option>\n" +
        "                                        </select>\n" +
        "                                        <p class=\"form-control-static\" id=\"spanOffice\">The selected company has no office</p>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "\n" +
        "                                <div ng-if=\"grantAccess.accessToUsersOnOfficeLevel.length > 0\">\n" +
        "                                    <div class=\"row bottom-margin\">\n" +
        "                                        <div class=\"col-lg-3\" ng-repeat=\"accessToUserOnOfficeLevel in grantAccess.accessToUsersOnOfficeLevel\">\n" +
        "                                            <div class=\"checkbox\">\n" +
        "                                                <label>\n" +
        "                                                    <input type=\"checkbox\" ng-init=\"grantAccess.checkDefault('office')\" ng-model=\"grantAccess.searchedUserInOfficeCheckbox[$index]\">{{accessToUserOnOfficeLevel.firstName + \" \" }} {{accessToUserOnOfficeLevel.lastName}}\n" +
        "                                                </label>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                    <div class=\"row\">\n" +
        "                                        <div class=\"col-lg-12\">\n" +
        "\n" +
        "                                            <button class=\"btn btn-sm btn-default\" ng-click=\"grantAccess.selectAllSearchedUsers('office')\" type=\"submit\"><i class=\"glyphicon glyphicon-ok\"></i> Check All</button>\n" +
        "\n" +
        "                                            <button class=\"btn btn-sm btn-default\" ng-click=\"grantAccess.unSelectAllSearchedUsers('office')\" type=\"submit\"><i class=\"glyphicon glyphicon-remove\"></i> Uncheck All</button>\n" +
        "\n" +
        "                                            <button class=\"btn btn-sm btn-primary\" ng-click=\"grantAccess.addSelectedUsers('office')\" type=\"submit\"><i class=\"glyphicon glyphicon-plus\"></i> Add Selected</button>\n" +
        "\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                                \n" +
        "\n" +
        "\n" +
        "                            </div>\n" +
        "\n" +
        "                            <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"user-searching\" aria-labelledby=\"user-tab\">\n" +
        "                                <div class=\"\">\n" +
        "                                    <label>Search for a User :</label>\n" +
        "                                    <div class=\"input-group  col-lg-4\">\n" +
        "                                        <input type=\"text\" class=\"form-control\" ng-model=\"grantAccess.searchTerm\">\n" +
        "                                        <span class=\"input-group-btn\">\n" +
        "                                <button class=\"btn btn-default\" ng-click = \"grantAccess.searchUser()\" type=\"button\">Search</button>\n" +
        "                              </span>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                                <h4 ng-if=\"grantAccess.searchUserResults && grantAccess.searchedUsers.length > 0\" class=\"border-bottom\">Specific Users:</h4>\n" +
        "                                <div class=\"row\" ng-if=\"grantAccess.searchUserResults\">\n" +
        "                                    <div class=\"col-lg-3\" ng-repeat=\"searchedUser in grantAccess.searchedUsers\">\n" +
        "                                        <div class=\"checkbox\" id=\"searchUserId{{$index}}\">\n" +
        "                                            <label>\n" +
        "                                                <input type=\"checkbox\" ng-init=\"grantAccess.checkDefault('user')\" ng-model=\"grantAccess.searchedUserCheckbox[$index]\">{{searchedUser.firstName + \" \" }} {{searchedUser.lastName}}\n" +
        "                                            </label>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "\n" +
        "\n" +
        "                                <div class=\"alert alert-danger\" ng-if=\"!grantAccess.searchUserResults\">\n" +
        "                                   <p>No Accounts Found. Please try searching with different terms.</p> \n" +
        "                                </div>  \n" +
        "                                <div class=\"row\" ng-if=\"grantAccess.searchUserResults && grantAccess.searchedUsers.length > 0\">\n" +
        "                                    <div class=\"col-lg-12\">\n" +
        "\n" +
        "                                        <button class=\"btn btn-sm btn-default\" ng-click=\"grantAccess.selectAllSearchedUsers('user')\" type=\"submit\"><i class=\"glyphicon glyphicon-ok\"></i> Check All</button>\n" +
        "\n" +
        "                                        <button class=\"btn btn-sm btn-default\" ng-click=\"grantAccess.unSelectAllSearchedUsers('user')\" type=\"submit\"><i class=\"glyphicon glyphicon-remove\"></i> Uncheck All</button>\n" +
        "\n" +
        "                                        <button class=\"btn btn-sm btn-primary\" ng-click=\"grantAccess.addSelectedUsers('user')\" type=\"submit\"><i class=\"glyphicon glyphicon-plus\"></i> Add Selected</button>\n" +
        "\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "\n" +
        "                            </div>\n" +
        "\n" +
        "                            <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"team-tab\" aria-labelledby=\"contact-tab\">\n" +
        "                                <h4 class=\"border-bottom\">Select a Team </h4>\n" +
        "                               \n" +
        "                                <div class=\"form-group\">\n" +
        "                                    <label for=\"SelectParentCompany\" class=\"col-sm-2 control-label\">Company</label>\n" +
        "                                    <div class=\"col-sm-4\">\n" +
        "                                        <select ng-options=\"teamCompany.name for teamCompany in grantAccess.companies\" ng-model=\"grantAccess.selectedTeamCompany\" ng-change=\"grantAccess.teamCompany()\" class=\"form-control\" id=\"teamParentCompany\">\n" +
        "                                            <option value=\"\">Select a Company</option>\n" +
        "                                        </select>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                                <div class=\"form-group\">\n" +
        "                                    <label for=\"SelectChildCompany\" class=\"col-sm-2 control-label\">Company</label>\n" +
        "                                    <div class=\"col-sm-4\">\n" +
        "                                        <select ng-disabled=\"!grantAccess.hasTeamChildCompany\" class=\"form-control\"  id=\"selectTeamChildCompany\" ng-options = \"teamChildCompany.name for teamChildCompany in grantAccess.teamChildCompanies\" ng-model=\"grantAccess.selectedTeamChildCompany\">\n" +
        "                                            <option value=\"\">Select a Company</option>\n" +
        "                                        </select>\n" +
        "                                    </div>\n" +
        "                                    <p class=\"form-control-static\" id=\"spanTeamChildCompany\">The selected company contains no companies.</p>\n" +
        "                                </div>\n" +
        "                                <div class=\"form-group\">\n" +
        "                                    <label for=\"SelectAnOffice\" class=\"col-sm-2 control-label\">Saved Teams:\n" +
        "                                    </label>\n" +
        "                                    <div class=\"col-sm-4\">\n" +
        "                                        <select ng-disabled=\"!grantAccess.hasSavedTeam\" class=\"form-control\" id=\"selectSavedTeam\" ng-options=\"savedTeam.name for savedTeam in grantAccess.savedTeams\" ng-model = \"grantAccess.selectedSavedTeam\">\n" +
        "                                            <option value=\"\">Select A Saved Team</option>\n" +
        "                                        </select>\n" +
        "                                        \n" +
        "                                    </div>\n" +
        "                                    <p class=\"form-control-static\" id=\"spanSavedTeam\">The selected office has no saved team</p>\n" +
        "                                </div>\n" +
        "                                <div class=\"form-group\">\n" +
        "                                    <label for=\"PreconfiguredTeams1\" class=\"col-sm-2 control-label\">Preconfigured Teams:\n" +
        "\n" +
        "                                    </label>\n" +
        "                                    <div class=\"col-sm-4\">\n" +
        "                                        <select ng-disabled=\"!grantAccess.hasPreconfiguredTeam\" class=\"form-control\" id=\"selectPreConfiguredTeam\" ng-options = \"preconfiguredTeam.name for preconfiguredTeam in grantAccess.preconfiguredTeams\" ng-model=\"grantAccess.selectedPreconfiguredTeam\">\n" +
        "                                            <option value=\"\">Select A PreConfigured Team</option>\n" +
        "                                        </select>\n" +
        "                                    </div>\n" +
        "                                    <p class=\"form-control-static\" id=\"spanPreConfiguredTeam\">The selected office has no preconfigured team</p>\n" +
        "                                </div>\n" +
        "\n" +
        "                            </div>\n" +
        "\n" +
        "                        </div>\n" +
        "\n" +
        "                        <hr>\n" +
        "                        <h4 class=\"border-bottom\">Selected Users:</h4>    \n" +
        "                       \n" +
        "                        <p class=\"alert alert-info\"><i class=\"glyphicon glyphicon-question-sign\"></i> Those selected (check box) in the following list will be granted access to the selected reports below. You may save the group below as a Project Team for future use by clicking on the link below the table. Project Teams will be available to everyone in your company.\n" +
        "                        </p>\n" +
        "\n" +
        "                        <div ng-if=\"grantAccess.users.length > 0\">\n" +
        "\n" +
        "                            <div class=\"table-responsive\">\n" +
        "\n" +
        "                                <table class=\"table table-striped table-condensed table-hover \">\n" +
        "                                    <thead>\n" +
        "                                        <tr>\n" +
        "                                            <th></th>\n" +
        "                                            <th>Select</th>\n" +
        "                                            <th>User</th>\n" +
        "                                            <th>Company</th>\n" +
        "                                            <th>Default Level of Access</th>\n" +
        "                                            <th>Level of Access</th>\n" +
        "\n" +
        "                                        </tr>\n" +
        "                                    </thead>\n" +
        "                                    <tbody>\n" +
        "                                        <tr ng-repeat=\"user in grantAccess.users\">\n" +
        "                                            <td class=\"verticleMiddle\"><a class=\"btn btn-danger btn-xs\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click to Remove this User\"><i class=\"fa fa-trash-o fa-lg\" ng-click=\"grantAccess.removeUser($index)\"></i></a></td>\n" +
        "                                            <td>\n" +
        "                                                <div class=\"checkbox\">\n" +
        "                                                    <label>\n" +
        "                                                        <input type=\"checkbox\" ng-model=\"grantAccess.selectUsers[$index]\">{{user.firstName + \" \" }} {{user.lastName}}\n" +
        "                                                    </label>\n" +
        "                                                </div>\n" +
        "                                            </td>\n" +
        "                                            <td class=\"verticleMiddle\"></td>\n" +
        "                                            <td class=\"verticleMiddle\">{{user.companyName}}</td>\n" +
        "                                            <td class=\"verticleMiddle\">{{user.edrDefaultUserRole}}</td>\n" +
        "                                            <td>\n" +
        "                                                <select ng-options = \"role in grantAccess.roles\" class=\"form-control\">\n" +
        "                                                    <option>Select a Role</option>\n" +
        "\n" +
        "                                                </select>\n" +
        "                                            </td>\n" +
        "\n" +
        "\n" +
        "                                        </tr>\n" +
        "\n" +
        "\n" +
        "                                    </tbody>\n" +
        "                                </table>\n" +
        "\n" +
        "                            </div>\n" +
        "\n" +
        "                            <div class=\"row\">\n" +
        "                                <div class=\"col-lg-12\">\n" +
        "\n" +
        "                                    <button class=\"btn btn-sm btn-default\" type=\"submit\" ng-click=\"grantAccess.selectAllUsers()\"><i class=\"glyphicon glyphicon-ok\"></i> Check All</button>\n" +
        "\n" +
        "                                    <button class=\"btn btn-sm btn-default\" type=\"submit\" ng-click=\"grantAccess.unSelectAllUsers()\"><i class=\"glyphicon glyphicon-remove\"></i> Uncheck All</button>\n" +
        "\n" +
        "\n" +
        "                                    <button ng-click=\"grantAccess.removeAllUsers()\" class=\"btn btn-sm btn-danger\" type=\"submit\"><i class=\"glyphicon glyphicon-ban-circle\"></i> Remove All Users</button>\n" +
        "\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                            <hr>\n" +
        "                            <div class=\"row\">\n" +
        "                                <div class=\"col-lg-12\">\n" +
        "                                    <button ng-click=\"grantAccess.createNewTeam()\" class=\"btn btn-md btn-primary\" role=\"button\"><i class=\"glyphicon fa-lg glyphicon-floppy-save\"></i> Save selected as a new Project Team</button> <button role=\"button\" class=\"btn btn-md btn-success\"><i class=\"glyphicon glyphicon-refresh fa-lg\"></i> Update adbgd</button>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "\n" +
        "                        </div>\n" +
        "                        <div ng-if=\"grantAccess.users.length === 0\">You haven't selected any users yet.</div>\n" +
        "                        <hr>\n" +
        "                        <h4 class=\"border-bottom\">4 Selected Reports:</h4>\n" +
        "                        \n" +
        "\n" +
        "                        <p class=\"alert alert-info\"><i class=\"glyphicon glyphicon-question-sign\"></i> The table below lists all the reports within the given project. You can click on the green '+' to expand the window and view who already has access to the report. (In that screen you click the red 'X' next to the person's name, to revoke their access to the report.) With the desired reports selected, click on Grant Access below the table.\n" +
        "                        </p>\n" +
        "\n" +
        "                        <div id=\"alertSelectReportMsgDiv\" ng-show=\"grantAccess.showAlertForReports\" class=\"alert alert-dismissible alert-danger\" role=\"alert\">\n" +
        "                            <button type=\"button\" class=\"close\" ng-click=\"grantAccess.dismissReportAlert()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                            {{grantAccess.serviceMessageForReport}}\n" +
        "                        </div>\n" +
        "\n" +
        "                        <div class=\"table-responsive\">\n" +
        "\n" +
        "                            <table class=\"table table-striped table-condensed table-hover \">\n" +
        "                                <thead>\n" +
        "                                    <tr>\n" +
        "                                        <th></th>\n" +
        "                                        <th>Select</th>\n" +
        "                                        <th>Prop. Number</th>\n" +
        "                                        <th>Site Name</th>\n" +
        "                                        <th>Address</th>\n" +
        "                                        <th>Site Type</th>\n" +
        "                                        <th>Status</th>\n" +
        "                                    </tr>\n" +
        "                                </thead>\n" +
        "                                <tbody>\n" +
        "                                    <tr data-toggle=\"collapse\" data-target=\"#demo1\" class=\"accordion-toggle\" aria-expanded=\"true\" ng-repeat=\"report in grantAccess.reports\">\n" +
        "                                        <td class=\"verticleMiddle\">\n" +
        "                                            <button class=\"btn btn-primary btn-xs\"><i class=\"fa fa-plus fa-sm\"></i></button>\n" +
        "                                            <!--<a class=\"btn btn-xs btn-primary\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Click to view who has access to this report\"><i class=\"glyphicon glyphicon-plus\"></i></a>-->\n" +
        "                                        </td>\n" +
        "\n" +
        "                                        <td>\n" +
        "                                            <div class=\"checkbox\">\n" +
        "                                                <label>\n" +
        "                                                    <input type=\"checkbox\" ng-model=\"grantAccess.reportsCheckbox[$index]\">\n" +
        "                                                </label>\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                        <td class=\"verticleMiddle\">{{report.propertyNumber}}</td>\n" +
        "                                        <td class=\"verticleMiddle\">{{report.propertyName}}</td>\n" +
        "                                        <td class=\"verticleMiddle\">{{report.address}}</td>\n" +
        "                                        <td>{{report.reportType}}</td>\n" +
        "                                        <td>{{report.reportStatus}}</td>\n" +
        "                                    </tr> \n" +
        "                                    <tr>\n" +
        "                                    <td colspan=\"12\" class=\"hiddenRow\">\n" +
        "                                        <div class=\"accordian-body sub-table collapse in\" id=\"demo1\" aria-expanded=\"true\">\n" +
        "                                            <table class=\"table table-striped table-condensed \">\n" +
        "                                                <thead>\n" +
        "                                                    <tr>\n" +
        "                                                        <th>&nbsp;</th>\n" +
        "                                                        <th>Name</th>\n" +
        "                                                        <th>Company</th>\n" +
        "                                                        <th>Role</th>\n" +
        "                                                        <th>Email</th>\n" +
        "                                                    </tr>\n" +
        "                                                </thead>\n" +
        "                                                <tbody>\n" +
        "                                                    <tr>\n" +
        "                                                        <td><a class=\"btn btn-xs btn-danger\"><i class=\"fa fa-trash-o fa-xs\"></i></a></td>\n" +
        "                                                        <td>Dearborn. Bob</td>\n" +
        "                                                        <td>Deardorn B &amp; T</td>\n" +
        "                                                        <td>Lender Executive</td>\n" +
        "                                                        <td>bobear1@gmail.com</td>\n" +
        "                                                    </tr>\n" +
        "                                                </tbody>\n" +
        "                                            </table>\n" +
        "                                        </div>\n" +
        "                                    </td>\n" +
        "                                </tr>\n" +
        "\n" +
        "                                </tbody>\n" +
        "\n" +
        "                            </table>\n" +
        "\n" +
        "\n" +
        "                        </div>\n" +
        "\n" +
        "                        <div class=\"bottom-margin\">\n" +
        "                            \n" +
        "\n" +
        "                                <button class=\"btn btn-sm btn-default\" type=\"submit\" ng-click=\"grantAccess.selectAllReports()\"><i class=\"glyphicon glyphicon-ok\"></i> Check All</button>\n" +
        "\n" +
        "                                <button class=\"btn btn-sm btn-default\" type=\"submit\" ng-click=\"grantAccess.unSelectAllReports()\"><i class=\"glyphicon glyphicon-remove\"></i> Uncheck All</button>\n" +
        "\n" +
        "                            </div>\n" +
        "\n" +
        "\n" +
        "                            <div  class=\"bottom-margin\"> \n" +
        "                                \n" +
        "                                <button class=\"btn btn-md btn-primary\"><i class=\"fa fa-key\"></i>\n" +
        " Grant Access to reports and users selected above </button>\n" +
        "                                <button class=\"btn btn-md btn-danger\"><i class=\"glyphicon glyphicon-remove\"></i> Revoke Access to reports and users selected above</button>\n" +
        "                               \n" +
        "                            </div> \n" +
        "\n" +
        "                    </form>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "\n" +
        "<script type=\"application/javascript\">\n" +
        "    $(function() {\n" +
        "        $('[data-toggle=\"tooltip\"]').tooltip()\n" +
        "    })\n" +
        "</script>");
}]);

angular.module("../app/modules/ProjectDashboard/views/orderStatus.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/orderStatus.html",
        "<div class=\"container-fluid\" ng-controller=\"OrderStatus as orderList\" cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "    <div class=\"panel panel-default\">\n" +
        "        <div class=\"panel-body\">\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-lg-12 col-md-12 col-sm-12\">\n" +
        "                    <h2 class=\"page-header\" ng-if=\"orderList.projectOrders\">EDR Order Status for: {{orderList.projectName}}</h2>\n" +
        "                    <div id=\"alertOrderStatusMsgDiv\" ng-show=\"orderList.showAlert\" class=\"alert alert-dismissible\" role=\"alert\">\n" +
        "                        <button type=\"button\" class=\"close\" ng-click=\"orderList.showAlert = !orderList.showAlert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                        {{orderList.serviceMessage}}\n" +
        "                    </div>\n" +
        "                    <div class=\"table-responsive\">\n" +
        "                        <table id=\"orderStatusDatatable\" class=\"table table-bordered table-striped table-condensed table-hover dt-responsive\">\n" +
        "                            <thead>\n" +
        "                                <tr>\n" +
        "                                    <th class=\"orderAddress\">Address</th>\n" +
        "                                    <th class=\"orderInquiry\">Inquiry#</th>\n" +
        "                                    <th class=\"orderStatus\">Status</th>\n" +
        "                                    <th class=\"orderPackage\">Package Ordered</th>\n" +
        "                                    <th class=\"orderRadiusGeo\">Radius Map Report with GeoCheck®</th>\n" +
        "                                    <th class=\"orderRadiusMap\">Radius Map Report</th>\n" +
        "                                    <th class=\"orderSanborn\">Sanborn Map® Search/Print</th>\n" +
        "                                    <th class=\"orderCityDirectory\">City Directory Abstract</th>\n" +
        "                                    <th class=\"orderAerialPhoto\">Aerial Photo Decade Package</th>\n" +
        "                                    <th class=\"orderHistorical\">Historical Topo Map</th>\n" +
        "                                    <th class=\"orderLienSearch\">Lien Search</th>\n" +
        "                                    <th class=\"orderActions\">Actions</th>\n" +
        "                                </tr>\n" +
        "                            </thead>\n" +
        "                            <tbody>\n" +
        "                                <tr ng-repeat=\"edrOrder in orderList.edrOrderListArr\">\n" +
        "                                    <td> {{edrOrder.address}} </td>\n" +
        "                                    <td> {{edrOrder.inquiryNo}} </td>\n" +
        "                                    <td> {{edrOrder.status}} </td>\n" +
        "                                    <td>\n" +
        "                                        <i field=\"packageOrdered\" data-trigger=\"hover\" data-toggle=\"popover\" display-popover=\"{{edrOrder}}\" ng-class=\"{'fa fa-adjust fa-2x rotate-90': edrOrder.packageOrdered == 'Shipped-NoCoverage', 'fa fa-circle fa-2x blueFlag': edrOrder.packageOrdered == 'Shipped', 'fa fa-times-circle-o fa-2x text-danger': edrOrder.packageOrdered == 'NotOrdered' ||  edrOrder.packageOrdered == '', 'fa fa-circle-o fa-2x text-black': edrOrder.packageOrdered == 'InProduction'}\"></i>\n" +
        "                                    </td>\n" +
        "\n" +
        "                                    <td>\n" +
        "                                        <i field=\"radiusMapReportWithGeoCheck\" display-popover=\"{{edrOrder}}\" data-trigger=\"hover\" data-toggle=\"popover\" ng-class=\"{'fa fa-adjust fa-2x rotate-90': edrOrder.radiusMapReportWithGeocheck == 'Shipped-NoCoverage', 'fa fa-circle fa-2x blueFlag': edrOrder.radiusMapReportWithGeocheck == 'Shipped', 'fa fa-times-circle-o fa-2x text-danger': edrOrder.radiusMapReportWithGeocheck == 'NotOrdered' || edrOrder.radiusMapReportWithGeocheck == '', 'fa fa-circle-o fa-2x text-black': edrOrder.radiusMapReportWithGeocheck == 'InProduction'}\"></i>\n" +
        "                                    </td>\n" +
        "\n" +
        "                                    <td>\n" +
        "                                        <i field=\"radiusMapReport\" display-popover=\"{{edrOrder}}\" data-trigger=\"hover\" data-toggle=\"popover\" ng-class=\"{'fa fa-adjust fa-2x rotate-90': edrOrder.radiusMapReport == 'Shipped-NoCoverage', 'fa fa-circle fa-2x text-primary': edrOrder.radiusMapReport.toLowerCase() == 'SHIPPED'.toLowerCase(), 'fa fa-times-circle-o fa-2x text-danger': edrOrder.radiusMapReport == 'NotOrdered' || edrOrder.radiusMapReport == '', 'fa fa-circle-o fa-2x text-black': edrOrder.radiusMapReport == 'InProduction'}\"></i>\n" +
        "                                    </td>\n" +
        "\n" +
        "                                    <td>\n" +
        "                                        <i field=\"sanbornMap\" data-trigger=\"hover\" data-toggle=\"popover\" display-popover=\"{{edrOrder}}\" ng-class=\"{'fa fa-adjust fa-2x rotate-90': edrOrder.sanbornMap == 'Shipped-NoCoverage', 'fa fa-circle fa-2x text-primary': edrOrder.sanbornMap == 'Shipped', 'fa fa-times-circle-o fa-2x text-danger': edrOrder.sanbornMap == 'NotOrdered' || edrOrder.sanbornMap == '', 'fa fa-circle-o fa-2x text-black': edrOrder.sanbornMap == 'InProduction'}\"></i>\n" +
        "                                    </td>\n" +
        "\n" +
        "                                    <td>\n" +
        "                                        <i field=\"cityDirectoryAbstract\" display-popover=\"{{edrOrder}}\" data-trigger=\"hover\" data-toggle=\"popover\" ng-class=\"{'fa fa-adjust fa-2x rotate-90': edrOrder.cityDirectoryAbstract == 'Shipped-NoCoverage', 'fa fa-circle fa-2x blueFlag': edrOrder.cityDirectoryAbstract == 'Shipped', 'fa fa-times-circle-o fa-2x text-danger': edrOrder.cityDirectoryAbstract == 'NotOrdered' || edrOrder.cityDirectoryAbstract == '', 'fa fa-circle-o fa-2x text-black': edrOrder.cityDirectoryAbstract == 'InProduction'}\"></i>\n" +
        "                                    </td>\n" +
        "\n" +
        "                                    <td>\n" +
        "                                        <i field=\"aerialPhoto\" data-trigger=\"hover\" data-toggle=\"popover\" display-popover=\"{{edrOrder}}\" ng-class=\"{'fa fa-adjust fa-2x rotate-90': edrOrder.aerialPhotoDecadePackage == 'Shipped-NoCoverage', 'fa fa-circle fa-2x blueFlag': edrOrder.aerialPhotoDecadePackage == 'Shipped', 'fa fa-times-circle-o fa-2x text-danger': edrOrder.aerialPhotoDecadePackage == 'NotOrdered' || edrOrder.aerialPhotoDecadePackage == '', 'fa fa-circle-o fa-2x text-black': edrOrder.aerialPhotoDecadePackage == 'InProduction'}\"></i>\n" +
        "                                    </td>\n" +
        "\n" +
        "                                    <td>\n" +
        "                                        <i field=\"historicalTopoMap\" display-popover=\"{{edrOrder}}\" data-trigger=\"hover\" data-toggle=\"popover\" ng-class=\"{'fa fa-adjust fa-2x rotate-90': edrOrder.historicalTopMmap == 'Shipped-NoCoverage', 'fa fa-circle fa-2x blueFlag': edrOrder.historicalTopMmap == 'Shipped', 'fa fa-times-circle-o fa-2x text-danger': edrOrder.historicalTopMmap == 'NotOrdered' || edrOrder.historicalTopMmap == '', 'fa fa-circle-o fa-2x text-black': edrOrder.historicalTopMmap == 'InProduction'}\"></i>\n" +
        "                                    </td>\n" +
        "\n" +
        "                                    <td>\n" +
        "                                        <i field=\"lienSearch\" display-popover=\"{{edrOrder}}\" data-trigger=\"hover\" data-toggle=\"popover\" ng-class=\"{'fa fa-adjust fa-2x rotate-90': edrOrder.lienSearch == 'Shipped-NoCoverage', 'fa fa-circle fa-2x blueFlag': edrOrder.lienSearch == 'Shipped', 'fa fa-times-circle-o fa-2x text-danger': edrOrder.lienSearch == 'NotOrdered' || edrOrder.lienSearch == '', 'fa fa-circle-o fa-2x text-black': edrOrder.lienSearch == 'InProduction'}\"></i>\n" +
        "                                    </td>\n" +
        "\n" +
        "                                    <td><a class=\"pointer\" ng-click=\"orderList.showEDRStatusPage()\">Show EDR Status Page</a></td>\n" +
        "                                </tr>\n" +
        "                                <tr in-if=\"!orderList.edrOrderListArr\"><td colspan=\"13\" align=\"center\">No record available.</td></tr>\n" +
        "                            </tbody>\n" +
        "                        </table>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ProjectDashboard/views/portfolio.navigation.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/portfolio.navigation.html",
        "<style>\n" +
        "	.body-bg-gray{\n" +
        "		background-color: #ffffff !important;\n" +
        "	}\n" +
        "</style>\n" +
        "<div class=\"container-fluid rightside-section\">\n" +
        "    <div class=\"row\">\n" +
        "        <!-- Left panel Start-->\n" +
        "        <div class=\"col-md-3 col-lg-3 col-sm-3 sidebar bg-gray\">\n" +
        "\n" +
        "            <div class=\"top-margin\">\n" +
        "                <ul id=\"portfolioUlNavigation\" class=\"nav nav-pills nav-stacked-lg\">\n" +
        "                    <li active-class-portfolio=\"/Portfolio/Select\" state=\"Portfolio.Select\" ng-click=\"portfolioNavigation.redirectToSelectPortfolio($event)\" class=\"active\"><a class=\"pointer\"> Step 1: <p class=\"text-11\">Select Portfolio</p> </a></li>\n" +
        "\n" +
        "                    <li class=\"disabled\" active-class-portfolio=\"/Portfolio/Select/Reports\" state=\"Portfolio.SelectReports\" ng-click=\"portfolioNavigation.redirectToSelectReports($event)\"><a class=\"pointer\"> Step 2:<p class=\"text-11\">Select Reports</p> </a></li>\n" +
        "\n" +
        "                    <li class=\"disabled\" ng-click=\"portfolioNavigation.redirectToSelectReportsParts($event)\" state=\"Portfolio.SelectReportsParts\" active-class-portfolio=\"/Portfolio/Select/ReportsParts\"><a class=\"pointer\"> Step 3:<p class=\"text-11\">Select Report Parts</p> </a></li>\n" +
        "\n" +
        "                    <li ng-click=\"portfolioNavigation.redirectToConfirm()\" class=\"disabled\" state=\"Portfolio.Confirm\" active-class-portfolio=\"/Portfolio/Confirm\"><a class=\"pointer\"> Step 4:<p class=\"text-11\">Confirm Your Selections</p></a></li>\n" +
        "                </ul>\n" +
        "                <hr class=\"border-gray\">\n" +
        "                <div class=\"col-md-12 col-sm-12\">\n" +
        "                    <button id=\"buttonPrevious\" ng-click=\"portfolioNavigation.redirectToPreviousState()\" class=\"btn btn-primary pull-left\" type=\"submit\">Pevious</button>\n" +
        "                    <button id=\"buttonNext\" ng-click=\"portfolioNavigation.redirectToNextState()\" btn-next class=\"btn btn-primary pull-right\" type=\"submit\">Next</button>\n" +
        "                </div>\n" +
        "                <div class=\"clearfix\"></div>\n" +
        "                <hr class=\"border-gray\">\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"col-sm-offset-3 col-md-9 col-lg-9 col-sm-9\">\n" +
        "            \n" +
        "            <div ui-view=\"\"></div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ProjectDashboard/views/portfolio.steps.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/portfolio.steps.html",
        "<form class=\"form-horizontal\" name=\"portfolio.portfolioForm\">\n" +
        "    <div cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "        <button ng-click=\"portfolio.gotoProjectDashboard()\" class=\"btn btn-md btn-default pull-right\"><i class=\"glyphicon glyphicon-arrow-up\"></i> Return to Project </button>\n" +
        "        <h2 class=\"page-header\">Portfolio Download</h2>\n" +
        "        \n" +
        "    <div ng-if = \"portfolio.showError\" id=\"alertRequiredMessage\"  class=\"alert alert-dismissible alert-danger\"  role=\"alert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"portfolio.dismissAlert()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                {{portfolio.errorMessage}}\n" +
        "    </div>\n" +
        "    <div ng-if=\"portfolio.select\">\n" +
        "        \n" +
        "        \n" +
        "        <h4>Select the portfolio that you want to Download</h4>\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"filter\" class=\"col-sm-1 control-label\">Filter</label>\n" +
        "            <div class=\"col-sm-5\">\n" +
        "                <select id=\"filter\" ng-init=\"portfolio.setInitialCriteria()\" ng-change=\"portfolio.projectFilter(portfolio.searchCriteria)\" class=\"form-control\" ng-model=\"portfolio.searchCriteria\" ng-options=\"searchCriteria.value as searchCriteria.criteria for searchCriteria in portfolio.projectSearchCriteria\">\n" +
        "                    <option value=\"\">-- All Projects--</option>\n" +
        "                </select>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"form-group select2-project\">\n" +
        "            <label for=\"projectList\" class=\"col-sm-1 control-label\">Project</label>\n" +
        "            <div class=\"col-sm-5\">\n" +
        "                \n" +
        "                \n" +
        "            \n" +
        "                        <div rt-select2=\"select2Options\" provider=\"projectListProvider\" template=\"generateMarkUp\" afterevent=\"displayProject\" setvalue = \"setInitialSelectedProject\" total = \"{{projectDashboard.totalProjectCount}}\"></div>\n" +
        "\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div ng-if=\"portfolio.selectReports\">\n" +
        "        <h4>Select the reports that you want to include:</h4>\n" +
        "        <button ng-click=\"portfolio.checkReportsOnCondition('check-all')\" class=\"btn btn-default\" type=\"submit\">Check All</button>\n" +
        "        <button ng-repeat = \"status in portfolio.distinctReportStatus\"  ng-click = \"portfolio.checkReportsOnCondition(status)\" class=\"btn btn-default\" type=\"submit\">Check All {{status + \" \"}} Reports</button>\n" +
        "        <button  ng-click=\"portfolio.checkReportsOnCondition('check-final')\" class=\"btn btn-default\" type=\"submit\">Check All Final Reports</button>\n" +
        "        <button ng-click=\"portfolio.checkReportsOnCondition('check-nonfinal')\" class=\"btn btn-default\" type=\"submit\">Check All Non-Final Reports</button>\n" +
        "        <button ng-click=\"portfolio.checkReportsOnCondition('uncheck-all')\" class=\"btn btn-default\" type=\"submit\">Uncheck All</button>\n" +
        "\n" +
        "        <h4>Portfolio: Operation Calumet</h4>\n" +
        "       \n" +
        "        <div class=\"checkbox\" ng-repeat=\"report in portfolio.reports\">\n" +
        "            <label>\n" +
        "                <input type=\"checkbox\" ng-init=\"portfolio.checkPreSelectedReport()\" ng-change=\"portfolio.selectReport($index)\" ng-model=\"portfolio.sampleTemplateCheckbox[$index]\" id={{$index}}> {{report.propertyNumber + report.propertyName + '-' + report.address + ' :' + report.reportType}}\n" +
        "            </label>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div ng-if=\"portfolio.selectReportsParts\">\n" +
        "        <h4>For each type of report, select the parts you want to include:</h4>\n" +
        "\n" +
        "        <button ng-click=\"checkall1()\" class=\"btn btn-default\" type=\"submit\">Check All</button>\n" +
        "        <button ng-click=\"uncheckall1()\" class=\"btn btn-default\" type=\"submit\">Uncheck All</button>\n" +
        "\n" +
        "        <div ng-repeat=\"(parentIndex,template) in portfolio.sampleReportsParts\">\n" +
        "            <h4>Template: {{template.templateName}}</h4>\n" +
        "            <div class=\"checkbox\" ng-repeat=\"(childIndex,reportsPart) in template.reportsParts\">\n" +
        "\n" +
        "                <label>\n" +
        "                    <input type=\"checkbox\" ng-disabled=\"portfolio.disableCheckbox\" ng-init=\"portfolio.checkPreSelectedReportParts(parentIndex,childIndex)\" ng-change=\"portfolio.selectReportParts(parentIndex,childIndex)\" ng-model=\"portfolio.reportPartsModel[parentIndex + '' + childIndex]\"> {{reportsPart.name}}\n" +
        "                </label>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "    </div>\n" +
        "    </div>\n" +
        "        \n" +
        "</form>");
}]);

angular.module("../app/modules/ProjectDashboard/views/portfolioSignatureTool.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/portfolioSignatureTool.html",
        "<div class=\"container-fluid\" cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "<div class=\"panel panel-default\">\n" +
        "	<div class=\"panel-body\">\n" +
        "    <h4>Portfolio Signature Tool</h4>\n" +
        "    <div class=\"row\">\n" +
        "        <div class=\"col-md-12 col-lg-12\">\n" +
        "            <div id=\"alertMessageDiv\" ng-show=\"portfolioSignatureTool.showAlert\" class=\"alert alert-dismissible\" role=\"alert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"portfolioSignatureTool.dismissAlert()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                {{portfolioSignatureTool.serviceMessage}}\n" +
        "            </div>\n" +
        "            <button ng-click=\"portfolioSignatureTool.gotoProject()\" class=\"btn btn-default pull-right\"><span class=\"glyphicon glyphicon-arrow-up\"></span> Return to Project</button>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <div class=\"row\">\n" +
        "        <div class=\"col-md-3 col-lg-3\" ng-if=\"portfolioSignatureTool.reportTypes.length>1\">\n" +
        "            <div class=\"form-group\">\n" +
        "                <label>Report Type: </label>\n" +
        "                <select class=\"form-control\" id=\"selectReportType\" ng-options=\"reportType as reportType.reportType for reportType in  portfolioSignatureTool.reportTypes\" ng-model=\"portfolioSignatureTool.selectedReportType\" ng-change=\"portfolioSignatureTool.setReportType()\">\n" +
        "                    <option value=\"\">Select report types</option>\n" +
        "                </select>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"col-md-12 col-lg-12\">\n" +
        "            <div class=\"table-responsive\">\n" +
        "                <table class=\"table table-condensed\" ng-if=\"portfolioSignatureTool.selectedReportType.reportTypeGuid\">\n" +
        "                    <thead>\n" +
        "                        <tr>\n" +
        "                            <th class=\"site-number\">Site Number</th>\n" +
        "                            <th>Address</th>\n" +
        "                            <th class=\"site-signatues\">Signatures</th>\n" +
        "                            <th class=\"site-certifications\">Certifications</th>\n" +
        "                        </tr>\n" +
        "                    </thead>\n" +
        "                    <tbody>\n" +
        "                        <tr ng-repeat=\"(parentIndex,info) in portfolioSignatureTool.portfolioSignatureDetails | filter: {reportTypeGuid : portfolioSignatureTool.selectedReportType.reportTypeGuid}\">\n" +
        "                            <td><a class=\"pointer\">{{info.propertyNumber}}</a></td>\n" +
        "                            <td><a class=\"pointer\">{{info.propertyName}} {{info.address}}, {{info.state}}, {{info.city}} {{info.zipCode}}</a></td>\n" +
        "                            <td>\n" +
        "                                <div ng-repeat=\"(signIndex,sign) in info.signatures | filter: {signatureType : '!Certification' }\">\n" +
        "                                    <strong>{{sign.signOffType}}</strong>\n" +
        "                                    <!--statusID == 6--report is Finalize-->\n" +
        "                                    <form ng-if=\"!info.final\" class=\"form-inline\">\n" +
        "                                        <div class=\"checkbox\">\n" +
        "                                            <label>\n" +
        "                                                <input ng-model=\"sign.isChecked\" type=\"checkbox\" ng-click=\"portfolioSignatureTool.updateSignedSignature($event,sign.signOffUser)\">\n" +
        "                                            </label>\n" +
        "                                        </div>\n" +
        "                                        <div class=\"form-group\" ng-init=\"name=sign.signOffUser.userName\">\n" +
        "                                            <input type=\"text\" class=\"form-control\" ng-model=\"sign.signOffUser.userName\" ng-value=\"sign.signOffUser.userName\">\n" +
        "                                        </div>\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            -\n" +
        "                                        </div>\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            <input type=\"text\" class=\"form-control\" ng-model=\"sign.signOffUser.title\">\n" +
        "                                        </div>\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            <a class=\"pointer\" ng-show=\"portfolioSignatureTool.portfolioSignatureDetails.length > 1\" ng-click=\"portfolioSignatureTool.copyToAllSignatures(parentIndex,$index,sign)\"><span class=\"glyphicon glyphicon-arrow-down\"></span></a>\n" +
        "                                        </div>\n" +
        "                                    </form>\n" +
        "                                    <div ng-if=\"info.final\">\n" +
        "                                        {{sign.signOffUser.userName}} - {{sign.signOffUser.title}}\n" +
        "                                    </div>\n" +
        "                                    <form class=\"form-horizontal\" ng-if=\"sign.signOffType =='SEC Name'\">\n" +
        "                                        <hr>\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            <label class=\"control-label col-sm-2\"> Email:</label>\n" +
        "                                            <div class=\"col-sm-8\">\n" +
        "                                                <input type=\"text\" class=\"form-control\" ng-model=\"sign.signOffUser.email\" ng-value=\"sign.signOffUser.email\">\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            <label class=\"control-label col-sm-2\"> Phone:</label>\n" +
        "                                            <div class=\"col-sm-8\">\n" +
        "                                                <input type=\"text\" class=\"form-control\" ng-model=\"sign.signOffUser.cellPhone\" ng-value=\"sign.signOffUser.cellPhone\">\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                    </form>\n" +
        "                                    <hr>\n" +
        "                                </div>\n" +
        "                            </td>\n" +
        "                            <td>\n" +
        "                                <div ng-repeat=\"(certIndex,cert) in filtered = (info.signatures | filter: portfolioSignatureTool.getCurrentCertificate)\">\n" +
        "                                    <strong>{{cert.signOffType}}</strong>\n" +
        "                                    <ul>\n" +
        "                                        <li ng-repeat=\"signedCertificates in info.signatures | filter: {signOffType: cert.signOffType}\" ng-if=\"signedCertificates.signatureGuid && signedCertificates.signOffUser.userGUID &&  signedCertificates.signOffUser.userGUID!=portfolioSignatureTool.currentUserGUID\">\n" +
        "                                            Signed by: {{signedCertificates.signOffUser.userName}} - {{signedCertificates.signOffUser.title}}\n" +
        "                                        </li>\n" +
        "                                    </ul>\n" +
        "                                    <form class=\"form-inline\">\n" +
        "                                        <div class=\"checkbox\">\n" +
        "                                            <label>\n" +
        "                                                <input ng-disabled=\"!cert.eponly\" ng-model=\"cert.isChecked\" type=\"checkbox\" ng-click=\"portfolioSignatureTool.updateSignedCertificate($event,cert.signOffUser)\">\n" +
        "                                            </label>\n" +
        "                                        </div>\n" +
        "                                        <div class=\"form-group\" ng-init=\"name = cert.signOffUser.userName\">\n" +
        "                                            <input ng-disabled=\"!cert.eponly\" type=\"text\" class=\"form-control\" ng-model=\"cert.signOffUser.userName\" ng-value=\"cert.signOffUser.userName\">\n" +
        "                                        </div>\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            -\n" +
        "                                        </div>\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            <input ng-disabled=\"!cert.eponly\" type=\"text\" class=\"form-control\" ng-model=\"cert.signOffUser.title\">\n" +
        "                                        </div>\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            <a ng-disabled=\"!cert.eponly\" class=\"pointer\" ng-show=\"portfolioSignatureTool.portfolioSignatureDetails.length > 1\"><span ng-disabled=\"!cert.eponly\" class=\"glyphicon glyphicon-arrow-down\" ng-click=\"portfolioSignatureTool.copyToAllCertificates(parentIndex, cert)\" ></span></a>\n" +
        "                                        </div>\n" +
        "                                    </form>\n" +
        "                                    <p>{{cert.certificationText}}</p>\n" +
        "                                </div>\n" +
        "                                <div ng-show=\"filtered.length==0\" class=\"alert alert-warning\">No certifications present</div>\n" +
        "                               \n" +
        "                            </td>\n" +
        "                        </tr>\n" +
        "\n" +
        "                    </tbody>\n" +
        "                </table>\n" +
        "            </div>\n" +
        "            <div class=\"text-center\">\n" +
        "                <button ng-show=\"portfolioSignatureTool.isSubmitSignoff\" class=\"btn btn-md btn-primary\" ng-click=\"portfolioSignatureTool.submitSignatures()\">Submit Changes</button>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "	</div>\n" +
        "</div>	\n" +
        "</div>");
}]);

angular.module("../app/modules/ProjectDashboard/views/projectDashboard.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/projectDashboard.html",
        "<div class=\"container-fluid\">\n" +
        "	<div class=\"panel panel-default\">\n" +
        "	<div class=\"panel-body\">	\n" +
        "    <div class=\"row\" cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "        <div class=\"col-lg-12 col-md-12\">\n" +
        "\n" +
        "\n" +
        "            <h2 class=\"page-header\">Project Dashboard</h2>\n" +
        "\n" +
        "            <div id=\"alertMsgDiv\" ng-show=\"projectDashboard.showAlert\" class=\"alert alert-dismissible\" ng-class=\"projectDashboard.alertClass\" role=\"alert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"projectDashboard.dismissAlert()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                {{projectDashboard.serviceMessage}}\n" +
        "            </div>\n" +
        "            <form class=\"form-horizontal\" name=\"projectDashboardForm\" novalidate>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"col-sm-2 col-md-2 col-lg-2 col-xs-12 control-label\">Project:</label>\n" +
        "                    <!--<div ng-hide=\"projectDashboard.selectProjectMode\" class=\"col-sm-4 col-md-4 col-lg-4 col-xs-12\">\n" +
        "                        <p class=\"form-control-static\">{{projectDashboard.projectName}} </p><a class=\"pointer\"><span class=\"glyphicon glyphicon-pencil\" ng-click=\"projectDashboard.selectProject()\"></span></a>\n" +
        "                    </div>-->\n" +
        "                    <div class=\"col-sm-3 col-md-3 col-lg-3 col-xs-12\">\n" +
        "                        <div rt-select2=\"select2Options\" provider=\"projectListProvider\" template=\"generateMarkUp\" afterevent=\"displayProject\" minimuminput=0 total=\"{{projectDashboard.totalProjectCount}}\"></div>\n" +
        "                    </div>\n" +
        "                    <div ng-show=\"projectDashboard.selectProjectMode\">\n" +
        "                        <button class=\"btn btn-default\" ng-click=\"projectDashboard.cancelProjectSelection()\"> <span class=\"glyphicon glyphicon-remove text-danger\"></span></button>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <h4>Edit Project Information <a ng-if = \"projectDashboard.displayIfRecords == true\" class=\"pointer\" ng-click=\"projectDashboard.editProject(selectedProject)\"> <span class=\"glyphicon glyphicon-pencil\"></span></a></h4>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"col-sm-2 col-md-2 col-lg-2 col-xs-12 control-label\" for=\"projectName\">Project Name:</label>\n" +
        "                    <div class=\"col-sm-4 col-md-4 col-lg-4 col-xs-12\">\n" +
        "                        <p class=\"form-control-static\" ng-hide=\"projectDashboard.editMode\">{{projectDashboard.projectName}}</p>\n" +
        "                        <input class=\"form-control\" id=\"projectName\" type=\"text\" ng-show=\"projectDashboard.editMode\" ng-model=\"projectDashboard.projectName\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\" show-errors>\n" +
        "                    <label class=\"col-sm-2 col-md-2 col-lg-2 col-xs-12 control-label\" for=\"draftReportdue\">Draft Report Due:</label>\n" +
        "                    <div class=\"col-sm-4 col-md-4 col-lg-4 col-xs-12\">\n" +
        "                        <p class=\"form-control-static\" ng-hide=\"projectDashboard.editMode\">{{projectDashboard.draftReportDue}}</p>\n" +
        "                        <div class=\"input-group\" ng-show=\"projectDashboard.editMode\">\n" +
        "                            <input type=\"text\" id=\"draftReportdue\" class=\"form-control\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"projectDashboard.draftReportDue\" is-open=\"projectDashboard.open.date1\" enable-time=\"false\" datepicker-options=\"projectDashboard.dateOptions\" date-disabled=\"projectDashboard.disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"false\" name=\"draftReportDue\" required show-button-bar=\"false\" ng-click=\"projectDashboard.openCalendar($event, 'date1')\" ng-focus=\"projectDashboard.openCalendarOnFocus($event, 'date1','date2')\" required>\n" +
        "                            <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default\" ng-click=\"projectDashboard.openCalendar($event, 'date1')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\" show-errors>\n" +
        "                    <label class=\"col-sm-2 col-md-2 col-lg-2 col-xs-12 control-label\" for=\"projectReportdue\">Project Report Due:</label>\n" +
        "                    <div class=\"col-sm-4 col-md-4 col-lg-4 col-xs-12\">\n" +
        "                        <p class=\"form-control-static\" ng-hide=\"projectDashboard.editMode\">{{projectDashboard.projectReportDue}}</p>\n" +
        "                        <div class=\" input-group\" ng-show=\"projectDashboard.editMode\">\n" +
        "                            <input type=\"text\" id=\"projectReportdue\" class=\"form-control\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"projectDashboard.projectReportDue\" is-open=\"projectDashboard.open.date2\" enable-time=\"false\" datepicker-options=\"projectDashboard.dateOptions\" date-disabled=\"projectDashboard.disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"false\" name=\"projectReportDue\" required show-button-bar=\"false\" ng-click=\"projectDashboard.openCalendar($event, 'date2')\" ng-focus=\"projectDashboard.openCalendarOnFocus($event, 'date2','date1')\" required>\n" +
        "                            <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default\" ng-click=\"projectDashboard.openCalendar($event, 'date2')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"col-sm-2 col-md-2 col-lg-2 col-xs-12 control-label\"># Reports Final/Total : </label>\n" +
        "                    <div class=\"col-sm-4 col-md-4 col-lg-4 col-xs-12\">\n" +
        "                        <p class=\"form-control-static\" ng-model=\"projectDashboard.reports\">{{projectDashboard.reportsFinalTotal}}</p>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\" ng-show=\"projectDashboard.editMode\">\n" +
        "                    <div class=\"col-md-10 col-lg-10 col-sm-offset-2\">\n" +
        "                        <button class=\"btn btn-default\" ng-click=\"projectDashboard.cancelProjectEdit()\">Cancel</button>\n" +
        "                        <button class=\"btn btn-primary\" ng-click=\"projectDashboard.saveProjectDetails(projectDashboardForm)\">Submit Changes</button>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </form>\n" +
        "            <div ng-if=\"projectDashboard.displayIfRecords == true\">\n" +
        "                <p><a class=\"dashBoardLinks pointer\" ng-click=\"projectDashboard.addReport()\">Add Report(s) to this Project</a></p>\n" +
        "\n" +
        "                <p><a class=\"dashBoardLinks pointer\" ng-click=\"projectDashboard.generateProjectDashboardPdf()\">Generate Project Dashboard as PDF</a></p>\n" +
        "\n" +
        "                <p><a class=\"dashBoardLinks pointer\" target=\"_blank\" ng-click=\"projectDashboard.showProjectMap()\" href=\"{{projectDashboard.projectMapUrl}}\">View Project Map<span class=\"glyphicon glyphicon-map-marker\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"View a map of all the sites in the project\"></span></a></p>\n" +
        "\n" +
        "                <p><a class=\"dashBoardLinks pointer\" target=\"_blank\" href=\"{{projectDashboard.orderStatusUrl}}\" ng-click=\"projectDashboard.orderStatus()\">VIEW DATABASE ORDER STATUS</a></p>\n" +
        "                \n" +
        "                <!--<p><a class=\"dashBoardLinks pointer\">Grant Access</a></p>-->\n" +
        "\n" +
        "                <p><a class=\"dashBoardLinks pointer\" target=\"_blank\" href=\"{{projectDashboard.grantAccessUrl}}\"  ng-click=\"projectDashboard.grantAccess()\">Grant Access</a></p>\n" +
        "\n" +
        "\n" +
        "                <p><a class=\"dashBoardLinks pointer\" href=\"{{projectDashboard.portfolioDownloadUrl}}\" ng-click=\"projectDashboard.portfolioDownload()\">Download Portfolio Deliverable</a></p>\n" +
        "\n" +
        "                <p><a target=\"_blank\" ng-click=\"projectDashboard.portfolioSignTool()\" href=\"{{projectDashboard.portfolioSignToolUrl}}\" class=\"dashBoardLinks pointer\" ng-click=\"showPortfolioTool()\">Portfolio Signoff Tool</a></p>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "            <div  id=\"reportsDiv\" ng-repeat=\"(tableIndex,reportType) in projectDashboard.reportTypes\">\n" +
        "                <hr>\n" +
        "                <h3>{{reportType.reportType}}</h3>\n" +
        "                <div id=\"alertReportOperationsMsgDiv\" ng-show=\"projectDashboard.showReportsAlert\" class=\"alert alert-dismissible alert-danger\" role=\"alert\">\n" +
        "                    <button type=\"button\" class=\"close\" ng-click=\"projectDashboard.dismissReportsAlert()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                    {{projectDashboard.serviceReportsMessage}}\n" +
        "                </div>\n" +
        "                <span ng-repeat=\"link in reportType.additionalLinks\"> <button type=\"button\" class=\"btn btn-link\">{{link.linkLabel}} </button> </span>\n" +
        "\n" +
        "                <div class=\"table-responsive\">\n" +
        "                    <table id=\"{{ 'dataTable-' + $index }}\" class=\"table table-bordered table-condensed table-hover table-striped small\">\n" +
        "                        <thead>\n" +
        "                            <tr>\n" +
        "                                <th class=\"rotate-90 reportRedirection no-wrap\">\n" +
        "                                    <div><span>Go To Report</span></div>\n" +
        "                                </th>\n" +
        "                                <th class=\"rotate-90 email\">\n" +
        "                                    <div><span>Email Notice</span></div>\n" +
        "                                </th>\n" +
        "                                <th class=\"rotate-90 reportDeletion no-wrap\">\n" +
        "                                    <div><span>Delete Report</span></div>\n" +
        "                                </th>\n" +
        "                                <th>\n" +
        "                                    <a class=\"pointer\">Client Prop.#</a>\n" +
        "                                </th>\n" +
        "                                <th>\n" +
        "                                    <a class=\"pointer\">Site Information</a>\n" +
        "                                </th>\n" +
        "                                <th>\n" +
        "                                    <a class=\"pointer\">Site Assessor</a>\n" +
        "                                </th>\n" +
        "                                <th class=\"rotate-90 bg-gray reportType\" ng-repeat=\"appendice in reportType.columns | filter : {type : 'APPENDIX'}\">\n" +
        "                                    <div><span class=\"pointer\">{{appendice.label}} </span></div>\n" +
        "                                </th>\n" +
        "\n" +
        "                                <th>\n" +
        "                                    % complete\n" +
        "                                </th>\n" +
        "\n" +
        "                                <th id=\"reviewComments\" class=\"rotate-90 bg-gray reviewComments comments\">\n" +
        "                                    <div><span>Senior Review Comments</span></div>\n" +
        "                                </th>\n" +
        "                                <th class=\"rotate-90 bg-gray reportStatus\">\n" +
        "                                    <div><span>Report Status</span></div>\n" +
        "                                </th>\n" +
        "                                <th id=\"signature\" class=\"rotate-90 bg-gray signature\" ng-repeat=\"signature in reportType.columns | filter : {type : 'SIGNATURE'}\">\n" +
        "                                    <div><span>Signed By {{\" \" + signature.label}}</span></div>\n" +
        "                                </th>\n" +
        "                                <th id=\"taskStatus\" class=\"rotate-90 taskStatus \" ng-repeat=\"task in reportType.columns | filter : {type : 'MANUAL STATUS TRACKING'}\">\n" +
        "                                    <div>\n" +
        "                                        <div class=\"head-checkbox\">\n" +
        "\n" +
        "                                            <input type=\"checkbox\" ng-model=\"projectDashboard.taskStatus[tableIndex + '' +  $index]\" ng-change=\"projectDashboard.checkUncheckAllTasks(projectDashboard.taskStatus[tableIndex + '' +  $index],tableIndex,$index,reportType.reportTypeGuid)\">\n" +
        "                                        </div><span class=\"checkbox-txt\"> {{task.label}}</span></div>\n" +
        "                                </th>\n" +
        "                            </tr>\n" +
        "                        </thead>\n" +
        "                        <tbody>\n" +
        "                            <tr ng-repeat=\"(reportIndex,data) in projectDashboard.reportTypeData  | filter :\n" +
        "                                   {reportTypeGuid : reportType.reportTypeGuid}\">\n" +
        "                                <td>\n" +
        "                                    <a  data-toggle=\"tooltip\" data-placement = \"right\" title = \"Go To Report\" ng-click=\"projectDashboard.redirectToReports(data.reportGuid)\" class=\"pointer\"><span class=\"glyphicon glyphicon-search\"></span></a>\n" +
        "                                </td>\n" +
        "                                <td>\n" +
        "                                    <a data-toggle=\"tooltip\" data-placement = \"right\" data-trigger=\"hover\" title = \"Email Notice\" class=\"pointer\" target=\"_blank\" href=\"{{projectDashboard.sendEmailUrl}}\" ng-click=\"projectDashboard.sendEmail()\"><span class=\"glyphicon glyphicon-envelope\"></span></a>\n" +
        "                                </td>\n" +
        "                                <td>\n" +
        "                                    <a data-toggle=\"tooltip\" data-placement = \"right\" title = \"Delete Report\" ng-click=\"projectDashboard.deleteReport(data.reportGuid)\" class=\"pointer\"><span class=\"glyphicon glyphicon-trash text-danger\"></span></a>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                                </td>\n" +
        "                                <td>{{data.propertyNumber}}</td>\n" +
        "                                <td class=\"no-wrap\"><a data-toggle=\"tooltip\" data-placement = \"right\" title = \"View Site/Contact Info\" class=\"pointer\" ng-click=\"projectDashboard.showSiteDetails(data)\">{{data.address}}, {{data.city}} {{data.state}}</a></td>\n" +
        "                                <td>{{data.siteAssessor}}</td>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                                <td ng-repeat=\"(appendiceIndexCount,appendice) in data.appendixFileCounts\"><a ng-click=\"projectDashboard.getAppendix(data.reportGuid,appendice.sectionGuid,appendice.count)\" data-toggle=\"tooltip\" tooltip-placement=\"right\"  set-appendix-tooltip=\"{{appendiceIndexCount}}\" appendixcount = \"{{appendice.count}}\" ng-class=\"projectDashboard.addPointerClass(appendice)\">{{appendice.count}}</a></td>\n" +
        "\n" +
        "                                <td>\n" +
        "                                    <div class=\"progress nomargin\">\n" +
        "                                        <div class=\"progress-bar min-width-progressbar\" role=\"progressbar\" aria-valuenow=\"60\" aria-valuemin=\"0\" aria-valuemax=\"100\" ng-style=\"{width: {{data.completion}} + '%'}\">\n" +
        "                                            {{data.completion}}%\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                </td>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                                <td><span ng-click=\"projectDashboard.showCommentsInTOC(data)\" id=\"reportComment\" ng-hide=\"data.commentStatus === 'NONE'\" data-toggle=\"tooltip\" tooltip-placement=\"right\" data=\"data\" set-flag class=\"\n" +
        "glyphicon glyphicon-flag fa-lg  pointer\"></span></td>\n" +
        "\n" +
        "                                <td><a class=\"pointer\" ng-click=\"projectDashboard.changeReportStatus(data.reportGuid,data.reportTypeGuid,data.reportStatus,data.reportStatusGuid)\">{{data.reportStatus}}</a></td>\n" +
        "\n" +
        "                                <td ng-repeat=\"signature in data.signatures\">\n" +
        "                                    <input ng-if=\"projectDashboard.showCheckBox(signature,reportType)\" ng-model=\"projectDashboard.isSigned[tableIndex + '' +  $index + '' + reportIndex]\" type=\"checkbox\" ng-init=\"projectDashboard.initSignature(signature,tableIndex,$index,reportIndex)\" ng-change=\"projectDashboard.updateSignature(data.reportGuid,signature,tableIndex,$index)\" data-toggle=\"tooltip\" tooltip-placement=\"right\"   set-signature-tooltip=\"{{signature}}\">\n" +
        "                                </td>\n" +
        "\n" +
        "                                <td ng-repeat=\"task in data.tasks\">\n" +
        "                                    <input type=\"checkbox\" ng-model=\"task.status\" ng-init=\"task.status\" ng-change=\"projectDashboard.updateTaskStatus($event,data.reportGuid,data.projectGuid,task.taskGuid,task.status,task.labelMappingGuid)\">\n" +
        "                                </td>\n" +
        "\n" +
        "                            </tr>\n" +
        "                        </tbody>\n" +
        "                    </table>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "    </div>\n" +
        "	</div>	\n" +
        "	</div>\n" +
        "</div>\n" +
        "");
}]);

angular.module("../app/modules/ProjectDashboard/views/projectMap.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/projectMap.html",
        "<div class=\"container-fluid\">\n" +
        "<div class=\"panel panel-default\">\n" +
        "	<div class=\"panel-body\">\n" +
        "    <h2 class=\"page-header\">MAP OF SITES</h2>\n" +
        "    <div class=\"row\">\n" +
        "        <div class=\"col-md-5 col-sm-5 col-lg-5\">\n" +
        "            <div id=\"mapCanvas\" class=\"map-height\"></div>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"col-md-offset-2 col-md-5 col-sm-5 col-lg-5\">\n" +
        "            <h4>PARCEL Project: Laurel Portfolio</h4>\n" +
        "            <div class=\"row bottom-margin-sm\" ng-repeat=\"address in projectMap.addresses\">\n" +
        "                <div class=\"col-md-1 col-sm-1 col-lg-1\"><span class=\"badge\">{{$index + 1}}</span></div>\n" +
        "                <div class=\"col-md-11 col-sm-11 col-lg-11\">\n" +
        "                    <a class=\"pointer\" ng-click=\"projectMap.showFullAddress[$index]  = !projectMap.showFullAddress[$index]\">\n" +
        "                        {{address.propertyNumber + \" : \" }} {{address.address}}</a>\n" +
        "                    <div ng-show=\"projectMap.showFullAddress[$index]\">\n" +
        "                        <div>{{address.siteName}}</div>\n" +
        "                        <div>{{address.city}}</div>\n" +
        "                        <div>{{address.state}}</div>\n" +
        "                        <div>{{address.zipCode}} </div>\n" +
        "                        <br>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "	</div>\n" +
        "</div>	\n" +
        "</div>");
}]);

angular.module("../app/modules/ProjectDashboard/views/reportSignOff.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/reportSignOff.html",
        "<div class=\"modal-header\">\n" +
        "    <button type=\"button\" class=\"close\" ng-click=\"reportSignOff.close()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "\n" +
        "</div>\n" +
        "\n" +
        "\n" +
        "<form class=\"form-horizontal\" name=\"reportSignOffForm\" novalidate>\n" +
        "    <div class=\"modal-body\">\n" +
        "        <h4>Sign Off -  {{reportSignOff.signOffType}}</h4>\n" +
        "        <p ng-show=\"reportSignOff.showAlert\" class=\"text-danger\">{{reportSignOff.serviceMessage}}</p>\n" +
        "        <div class=\"form-group\">\n" +
        "            <div class=\"col-sm-offset-1 col-sm-11\">\n" +
        "                <div ng-if=\"!reportSignOff.alreadySigned\" class=\"radio\" show-errors>\n" +
        "                    <label>\n" +
        "                        <input type=\"radio\" value=\"1\" ng-model=\"reportSignOff.sign\" name=\"sign\" id=\"sign\" required>Sign\n" +
        "                    </label>\n" +
        "                </div>\n" +
        "                <div ng-if=\"reportSignOff.alreadySigned\">\n" +
        "                    <label class=\"radio-inline\">\n" +
        "                        <input type=\"radio\" value=\"2\" ng-model=\"reportSignOff.updateSignatures\" name=\"updateSignatures\" id=\"unsign\" ng-required=\"reportSignOff.updateSignatures == '2'\">Unsign\n" +
        "                    </label>\n" +
        "\n" +
        "                    <label class=\"radio-inline\">\n" +
        "                        <input type=\"radio\" value=\"3\" ng-model=\"reportSignOff.updateSignatures\" name=\"updateSignatures\" id=\"override\" ng-required=\"reportSignOff.updateSignatures == '3'\">Over-ride\n" +
        "                    </label>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"form-group required\" show-errors>\n" +
        "            <label for=\"signOffType\" class=\"col-sm-4 control-label\">{{reportSignOff.signOffType}}:</label>\n" +
        "            <div class=\"col-sm-6\">\n" +
        "\n" +
        "                <input id=\"signOffType\" type=\"text\" class=\"form-control\" ng-model=\"reportSignOff.name\" name=\"signerName\" required ng-disabled=\"reportSignOff.updateSignatures == '2' \">\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"title\" class=\"col-sm-4 control-label\">Title:</label>\n" +
        "            <div class=\"col-sm-6\">\n" +
        "                <input id=\"title\" name=\"title\" ng-model=\"reportSignOff.title\" type=\"text\" class=\"form-control\" ng-disabled=\"reportSignOff.updateSignatures == '2' \">\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"modal-footer\">\n" +
        "\n" +
        "        <button class=\"btn btn-default btn-sm\" type=\"submit\" ng-click=\"reportSignOff.closeAndUpdate(reportSignOffForm)\">Close And Update Dashboard</button>\n" +
        "        <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"reportSignOff.close()\">Close Window</button>\n" +
        "    </div>\n" +
        "</form>");
}]);

angular.module("../app/modules/ProjectDashboard/views/reportStatus.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/reportStatus.html",
        "<div class=\"modal-header\">\n" +
        "    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"reportStatus.close()()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <h4 class=\"modal-title\">Report Status</h4>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"modal-body \">\n" +
        "\n" +
        "    <p ng-show=\"reportStatus.exception\" class= \"text-danger\">{{reportStatus.serviceMessage}}</p>\n" +
        "    <label class=\"control-label\">{{reportStatus.statusInLongForm}}</label>\n" +
        "\n" +
        "    <button class=\"btn btn-default btn-sm\" ng-hide=\"reportStatus.onFirstStep\" ng-click=\"reportStatus.previousStep()\">\n" +
        "        <span class=\"glyphicon glyphicon-minus-sign\"></span>\n" +
        "    </button>\n" +
        "    <button class=\"btn btn-default btn-sm\" ng-hide=\"reportStatus.onLastStep\" ng-click=\"reportStatus.nextStep()\">\n" +
        "        <span class=\"glyphicon glyphicon-plus-sign\"></span>\n" +
        "    </button>\n" +
        "    <a class=\"pointer\" ng-click = \"reportStatus.finalizeUnfinalizeStatus()\">{{reportStatus.finalizeOrUnfinalize}}</a>\n" +
        "\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"modal-footer\">\n" +
        "    <button class=\"btn btn-default btn-sm\" ng-click=\"reportStatus.closeAndUpdate()\">Close And Update Dashboard</button>\n" +
        "    <button class=\"btn btn-default btn-sm\" ng-click=\"reportStatus.close()\">Close Window</button>\n" +
        "</div>");
}]);

angular.module("../app/modules/ProjectDashboard/views/sendEmail.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/sendEmail.html",
        "<div class=\"container-fluid\">\n" +
        "<div class=\"panel panel-default\">\n" +
        "	<div class=\"panel-body\">\n" +
        "    <div class=\"row\">\n" +
        "\n" +
        "        <div class=\"col-lg-12 col-md-12\" cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "            <h2 class=\"page-header\">Send Email</h2>\n" +
        "            <div id=\"alertEmailMsgDiv\" ng-show=\"sendEmail.showAlert\" class=\"alert alert-dismissible\"  role=\"alert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"sendEmail.dismissAlert()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                {{sendEmail.serviceMessage}}\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <div class=\"col-sm-offset-2 col-sm-10\">\n" +
        "                    <p>To and From field must be filled in.</p>\n" +
        "                   \n" +
        "                    <p> Proper email address formating is as follows:</p>\n" +
        "                    <p> name1@domain1.com,name2@domain2.com</p>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <form name=\"myFormAddTemplate\" class=\"form-horizontal\" novalidate>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"col-sm-2 control-label\">From:</label>\n" +
        "                    <div class=\"col-sm-4\">\n" +
        "                        <p class=\"form-control-static\" ng-bind=\"sendEmail.fromUserEmail\"></p>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group toEmailDiv\">\n" +
        "                    <label class=\"col-sm-2 control-label\" for=\"to\">To:\n" +
        "                        <p> <a class=\"pointer\" ng-click = \"sendEmail.findContact()\">Find a Contact</a></p>\n" +
        "                    </label>\n" +
        "\n" +
        "                    <div class=\"col-sm-4\">\n" +
        "                       \n" +
        "                        <input type=\"text\" class=\"form-control\" name=\"mailTo\" value=\"\" data-role=\"tagsinput\"/>\n" +
        "                       \n" +
        "                        \n" +
        "    \n" +
        "                    </div>\n" +
        "                    <span class=\"requiredToField text-danger\">The message must have at least one recipient.</span>\n" +
        "                </div>\n" +
        "                \n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"col-sm-2 control-label\" for=\"cc\">CC:</label>\n" +
        "                    <div class=\"col-sm-4\">\n" +
        "                        \n" +
        "                        <input type=\"text\" class=\"form-control\" name=\"mailCC\" value=\"\" data-role=\"tagsinput\"/>\n" +
        "\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                \n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"col-sm-2 control-label\" for=\"subject\">Subject:</label>\n" +
        "                    <div class=\"col-sm-4\">\n" +
        "                        <input class=\"form-control\" id=\"subject\" type=\"text\" ng-model=\"sendEmail.subject\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <div class=\"col-sm-offset-2 col-sm-4\">\n" +
        "                        Select items for attachment by clicking on the corresponding box.\n" +
        "                        <div class=\"checkbox\">\n" +
        "                            <label>\n" +
        "                                <input type=\"checkbox\" ng-model=\"sendEmail.executiveSummary\">Executive Summary\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                        <div class=\"checkbox\">\n" +
        "                            <label>\n" +
        "                                <input type=\"checkbox\" ng-model=\"email.detailReport\">Detail Report\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"col-sm-2 control-label\" for=\"comments\">Comments:</label>\n" +
        "                    <div class=\"col-sm-4\">\n" +
        "                        <textarea class=\"form-control\" id=\"comments\" ng-model=\"sendEmail.comments\"></textarea>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <div  class=\"col-sm-offset-2 col-sm-10\">\n" +
        "                        <button type=\"button\"  class=\"btn btn-primary\" ng-click=\"sendEmail.submit(myFormAddTemplate)\">Send Email </button>\n" +
        "                        <button type=\"button\" class=\"btn btn-default\" ng-click=\"sendEmail.cancelDelete()\">Cancel</button>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </form>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "	</div>\n" +
        "</div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ProjectDashboard/views/siteDetails.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ProjectDashboard/views/siteDetails.html",
        "<div class=\"modal-header\">\n" +
        "    <button type=\"button\" class=\"close\" ng-click=\"siteDetails.closeSiteDetails()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <h4 class=\"modal-title\">Site Information</h4>\n" +
        "</div>\n" +
        "\n" +
        "<form name=\"siteDetailsForm\" class=\"form-horizontal\" novalidate>\n" +
        "    <div class=\"modal-body\">\n" +
        "        <div class=\"text-right bottom-margin-sm\">\n" +
        "            <button class=\"btn btn-primary\" ng-show=\"siteDetails.defaultView\" ng-click=\"siteDetails.defaultView = !siteDetails.defaultView ; siteDetails.editSiteDetails()\">Edit</button>\n" +
        "        </div>\n" +
        "        <div id=\"alertSiteDetailsMsgDiv\" ng-show=\"siteDetails.showAlert\" class=\"alert alert-dismissible\"  role=\"alert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"siteDetails.dismissAlert()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                {{siteDetails.serviceMessage}}\n" +
        "            </div>\n" +
        "        <div ng-hide=\"viewField\">\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"clientPropertynumber\" class=\"col-sm-4 control-label\">Client Property Number:</label>\n" +
        "                <div class=\"col-sm-6\">\n" +
        "                    <p ng-show=\"siteDetails.defaultView\" class=\"form-control-static\">{{siteDetails.propertyNumber}}</p>\n" +
        "                    <input id=\"clientPropertynumber\" ng-show=\"!siteDetails.defaultView\" type=\"text\" class=\"form-control\" ng-model=\"siteDetails.propertyNumber\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"propertyName\" class=\"col-sm-4 control-label\">Property Name:</label>\n" +
        "                <div class=\"col-sm-6\">\n" +
        "                    <p ng-show=\"siteDetails.defaultView\" class=\"form-control-static\">{{siteDetails.propertyName}}</p>\n" +
        "                    <input ng-show=\"!siteDetails.defaultView\" type=\"text\" class=\"form-control\" id=\"propertyName\" ng-model=\"siteDetails.propertyName\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label for=\"siteAddress\" class=\"col-sm-4 control-label\">Address:</label>\n" +
        "                <div class=\"col-sm-6\" field-validation=\"Address\">\n" +
        "                    <p ng-show=\"siteDetails.defaultView\" class=\"form-control-static\">{{siteDetails.address}}</p>\n" +
        "                    <input ng-show=\"!siteDetails.defaultView\" type=\"text\" class=\"form-control\" id=\"siteAddress\" ng-model=\"siteDetails.address\" name=\"Address\" required>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label for=\"siteCountry\" class=\"col-sm-4 control-label\">Country:</label>\n" +
        "                <div class=\"col-sm-6\" field-validation=\"Country\">\n" +
        "                    <p ng-show=\"siteDetails.defaultView\" class=\"form-control-static\">{{siteDetails.country}}</p>\n" +
        "                    <!--<input ng-show=\"!siteDetails.defaultView\" type=\"text\" class=\"form-control\" id=\"siteCountry\" ng-model=\"siteDetails.country\">-->\n" +
        "                    <select ng-show=\"!siteDetails.defaultView\"\n" +
        "                            ng-model=\"siteDetails.selectedCountry\" ng-change = \"siteDetails.editCountry()\"\n" +
        "                            ng-options=\"country as country.name for country in siteDetails.countries\n" +
        "                            track by country.code\" name=\"Country\" required\n" +
        "                            class=\"form-control\"><option value=\"\">Select Country</option></select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label for=\"siteState\" class=\"col-sm-4 control-label\">State:</label>\n" +
        "                <div class=\"col-sm-6\" field-validation=\"State\" id=\"divState\">\n" +
        "                    <p ng-show=\"siteDetails.defaultView\" class=\"form-control-static\">{{siteDetails.state}}</p>\n" +
        "                    <!--<input ng-show=\"!siteDetails.defaultView\" type=\"text\" class=\"form-control\" id=\"siteState\" ng-model=\"siteDetails.state\">-->\n" +
        "                    <select ng-show=\"!siteDetails.defaultView && siteDetails.selectedCountry.isStateProvDataAvailable\" ng-model = \"siteDetails.selectedState\" ng-required=\"!(siteDetails.selectedStateText || siteDetails.selectedState)\" name=\"siteState\"\n" +
        "                           ng-options=\"state as state.name for state in siteDetails.states\" class=\"form-control\">\n" +
        "                        <option value=\"\">Select a state...</option>\n" +
        "                    </select>\n" +
        "                    <input ng-show=\"!siteDetails.defaultView && !siteDetails.selectedCountry.isStateProvDataAvailable\" type=\"text\" ng-model = \"siteDetails.selectedStateText\" class=\"form-control\" ng-required=\"!(siteDetails.selectedStateText || siteDetails.selectedState)\" name=\"siteState\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"siteCity\" class=\"col-sm-4 control-label\">County:</label>\n" +
        "                <div class=\"col-sm-6\">\n" +
        "                    <p ng-show=\"siteDetails.defaultView\" class=\"form-control-static\">{{siteDetails.county}}</p>\n" +
        "                    <input ng-show=\"!siteDetails.defaultView\" type=\"text\" class=\"form-control\" id=\"siteCounty\" ng-model=\"siteDetails.county\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group required\">\n" +
        "                <label for=\"siteCity\" class=\"col-sm-4 control-label\">City:</label>\n" +
        "                <div class=\"col-sm-6\" field-validation=\"City\">\n" +
        "                    <p ng-show=\"siteDetails.defaultView\" class=\"form-control-static\">{{siteDetails.city}}</p>\n" +
        "                    <input ng-show=\"!siteDetails.defaultView\" type=\"text\" class=\"form-control\" id=\"siteCity\" ng-model=\"siteDetails.city\" name=\"City\" required>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            \n" +
        "            <div class=\"form-group required\">\n" +
        "                <label for=\"siteZipcode\" class=\"col-sm-4 control-label\">Zip:</label>\n" +
        "                <div class=\"col-sm-6\" field-validation=\"Zip\">\n" +
        "                    <p ng-show=\"siteDetails.defaultView\" class=\"form-control-static\">{{siteDetails.zipCode}}</p>\n" +
        "                    <input ng-show=\"!siteDetails.defaultView\" type=\"text\" class=\"form-control\" id=\"siteZipcode\" ng-model=\"siteDetails.zipCode\" name=\"Zip\" required>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"siteContactname\" class=\"col-sm-4 control-label\">Contact Name:</label>\n" +
        "                <div class=\"col-sm-6\">\n" +
        "                    <p ng-show=\"siteDetails.defaultView\" class=\"form-control-static\">{{siteDetails.contactName}}</p>\n" +
        "                    <input ng-show=\"!siteDetails.defaultView\" type=\"text\" class=\"form-control\" id=\"siteContactname\" ng-model=\"siteDetails.contactName\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"sitePhone\" class=\"col-sm-4 control-label\">Phone:</label>\n" +
        "                <div class=\"col-sm-6\" field-validation=\"Phone Number\">\n" +
        "                    <p ng-show=\"siteDetails.defaultView\" class=\"form-control-static\">{{siteDetails.phone}}</p>\n" +
        "                    <input ng-show=\"!siteDetails.defaultView\" type=\"text\" name = \"phone\" ng-change=\"siteDetails.formatPhone()\" ng-pattern=\"/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/\" class=\"form-control\" ng-model=\"siteDetails.phone\" id=\"phone\" custom=\"phoneNumber\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"siteFax\" class=\"col-sm-4 control-label\">Fax:</label>\n" +
        "                <div class=\"col-sm-6\">\n" +
        "                    <p ng-show=\"siteDetails.defaultView\" class=\"form-control-static\">{{siteDetails.fax}}</p>\n" +
        "                    <input ng-show=\"!siteDetails.defaultView\" type=\"text\" class=\"form-control\" id=\"siteFax\" ng-model=\"siteDetails.fax\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"siteEmail\" class=\"col-sm-4 control-label\">Email:</label>\n" +
        "                <div class=\"col-sm-6\" field-validation=\"Email\">\n" +
        "                    <p ng-show=\"siteDetails.defaultView\" class=\"form-control-static\">{{siteDetails.email}}</p>\n" +
        "                    <input ng-show=\"!siteDetails.defaultView\" type=\"email\" class=\"form-control\" id=\"siteEmail\" ng-model=\"siteDetails.email\" name=\"Email\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"modal-footer\">\n" +
        "        <button ng-show=\"siteDetails.defaultView\" class=\"btn btn-default\" ng-click=\"siteDetails.closeSiteDetails()\">Close</button>\n" +
        "        <button ng-show=\"!siteDetails.defaultView\" class=\"btn btn-default\" ng-mousedown=\"siteDetails.cancelChanges()\">Cancel</button>\n" +
        "        <button ng-show=\"!siteDetails.defaultView\" class=\"btn btn-primary\" ng-click=\"siteDetails.submitChanges(siteDetailsForm)\">Submit Changes</button>\n" +
        "    </div>\n" +
        "</form>");
}]);

angular.module("../app/modules/ReportAuthoring/views/AddADAChecklist.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/AddADAChecklist.html",
        "<div class=\"container-fluid\">\n" +
        "    <div class=\"row\">\n" +
        "        <div class=\"col-lg-12 col-md-12 col-sm-12\">\n" +
        "            <h2 class=\"page-header\">Abbreviated Accessibility Checklist</h2>\n" +
        "            <div class=\"table-responsive\">\n" +
        "            <table class=\"table table-bordered table-condensed\">\n" +
        "                \n" +
        "                <tbody>\n" +
        "                     <tr class=\"bg-info appendix-checklist\">\n" +
        "                        <td></th>\n" +
        "                        <td class=\"text-center\">Building History</td>\n" +
        "                        <td class=\"text-center\">Yes</td>\n" +
        "                        <td class=\"text-center\">No</td>\n" +
        "                        <td class=\"text-center\">N/A</td>\n" +
        "                        <td class=\"text-center col-sm-4\">Comments</td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>1.</td>\n" +
        "                        <td>Has an ADA survey previously been completed on the property?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory1\" id=\"buildingHistory1\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory1\" id=\"buildingHistory2\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory1\" id=\"buildingHistory3\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>2.</td>\n" +
        "                        <td>Have any ADA improvements been made to the property?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory2\" id=\"buildingHistory4\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory2\" id=\"buildingHistory5\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory2\" id=\"buildingHistory6\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>3.</td>\n" +
        "                        <td>Does a Transition Plan / Barrier Removal Plan exist for the property?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory3\" id=\"buildingHistory7\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory3\" id=\"buildingHistory8\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory3\" id=\"buildingHistory9\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>4.</td>\n" +
        "                        <td>Has building ownership or management received any ADA-related complaints that have not been resolved?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory4\" id=\"buildingHistory10\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory4\" id=\"buildingHistory11\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory4\" id=\"buildingHistory12\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>5.</td>\n" +
        "                        <td>Is any litigation pending related to ADA issues?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory5\" id=\"buildingHistory13\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory5\" id=\"buildingHistory14\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"buildingHistory5\" id=\"buildingHistory15\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                   \n" +
        "                        <tr class=\"bg-info appendix-checklist\">\n" +
        "                            <td></td>\n" +
        "                            <td class=\"text-center\">Parking</th>\n" +
        "                            <td class=\"text-center\">Yes</td>\n" +
        "                            <td class=\"text-center\">No</td>\n" +
        "                            <td class=\"text-center\">N/A</td>\n" +
        "                            <td class=\"text-center\">Comments</td>\n" +
        "                        </tr>\n" +
        "                    \n" +
        "                    <tr>\n" +
        "                        <td>1.</td>\n" +
        "                        <td>Are there sufficient accessible parking spaces with respect to the total number of reported spaces?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking1\" id=\"parking1\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking1\" id=\"parking2\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking1\" id=\"parking3\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>2.</td>\n" +
        "                        <td>Are there sufficient van-accessible parking spaces available (96\" wide/ 96\" aisle for van)?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking2\" id=\"parking4\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking2\" id=\"parking5\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking2\" id=\"parking6\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>3.</td>\n" +
        "                        <td>Are accessible spaces marked with the International Symbol of Accessibility? Are there signs reading \"Van Accessible\" at van spaces?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking3\" id=\"parking7\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking3\" id=\"parking8\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking3\" id=\"parking9\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>4.</td>\n" +
        "                        <td>Is there at least one accessible route provided within the boundary of the site from public transportation stops, accessible parking spaces, passenger loading zones, if provided, and public streets and sidewalks?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking4\" id=\"parking10\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking4\" id=\"parking11\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking4\" id=\"parking12\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>5.</td>\n" +
        "                        <td>Do curbs on the accessible route have depressed, ramped curb cuts at drives, paths, and drop-offs?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking5\" id=\"parking13\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking5\" id=\"parking14\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking5\" id=\"parking15\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>6.</td>\n" +
        "                        <td>If required does signage exist directing you to accessible parking and an accessible building entrance?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking6\" id=\"parking16\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking6\" id=\"parking17\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"parking6\" id=\"parking18\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                   <tr class=\"bg-info appendix-checklist\">\n" +
        "                            <td></td>\n" +
        "                            <td class=\"text-center\">Ramps</td>\n" +
        "                            <td class=\"text-center\">Yes</td>\n" +
        "                            <td class=\"text-center\">No</td>\n" +
        "                            <td class=\"text-center\">N/A</td>\n" +
        "                            <td class=\"text-center\">Comments</td>\n" +
        "                        </tr>\n" +
        "                    \n" +
        "                    <tr>\n" +
        "                        <td>1.</td>\n" +
        "                        <td>Do all ramps along accessible path of travel appear to meet slope requirements? (1:12 or less)</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"Ramps1\" id=\"Ramps1\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"Ramps1\" id=\"Ramps2\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"Ramps1\" id=\"Ramps3\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>2.</td>\n" +
        "                        <td>Are ramps that appear longer than 6 ft complete with railings on both sides?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"Ramps2\" id=\"Ramps4\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"Ramps2\" id=\"Ramps5\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"Ramps2\" id=\"Ramps6\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>3.</td>\n" +
        "                        <td>Does the width between railings appear to be at least 36 inches?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"Ramps3\" id=\"Ramps7\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"Ramps3\" id=\"Ramps8\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"Ramps3\" id=\"Ramps9\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>4.</td>\n" +
        "                        <td>Is there a level landing for approximately every 30 ft horizontal length of ramp, at the top and at the bottom of ramps and switchbacks?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"Ramps4\" id=\"Ramps10\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"Ramps4\" id=\"Ramps11\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"Ramps4\" id=\"Ramps12\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                   <tr class=\"bg-info appendix-checklist\">\n" +
        "                            <td></td>\n" +
        "                            <td class=\"text-center\">Entrances/Exits</td>\n" +
        "                            <td class=\"text-center\">Yes</td>\n" +
        "                            <td class=\"text-center\">No</td>\n" +
        "                            <td class=\"text-center\">N/A</td>\n" +
        "                            <td class=\"text-center\">Comments</td>\n" +
        "                        </tr>\n" +
        "                     \n" +
        "                    <tr>\n" +
        "                        <td>1.</td>\n" +
        "                        <td>Do all required accessible entrance doorways appear at least 32 inches wide and not a revolving door?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"entrances1\" id=\"entrances1\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"entrances1\" id=\"entrances2\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"entrances1\" id=\"entrances3\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>2.</td>\n" +
        "                        <td>If the main entrance is inaccessible, are there alternate accessible entrances?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"entrances2\" id=\"entrances4\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"entrances2\" id=\"entrances5\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"entrances2\" id=\"entrances6\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>3.</td>\n" +
        "                        <td>Is the door hardware easy to operate (lever/push type hardware, no twisting required and not higher than approximately 48 inches above the floor)?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"entrances3\" id=\"entrances7\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"entrances3\" id=\"entrances8\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"entrances3\" id=\"entrances9\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                     <tr class=\"bg-info appendix-checklist\">\n" +
        "                            <td></td>\n" +
        "                            <td class=\"text-center\">Paths of Travel</td>\n" +
        "                            <td class=\"text-center\">Yes</td>\n" +
        "                            <td class=\"text-center\">No</td>\n" +
        "                            <td class=\"text-center\">N/A</td>\n" +
        "                            <td class=\"text-center\">Comments</td>\n" +
        "                        </tr>\n" +
        "                  \n" +
        "                    <tr>\n" +
        "                        <td>1.</td>\n" +
        "                        <td>Are all paths of travel free of obstruction and wide enough for a wheelchair (appear at least 36 inches wide)?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pathsofTravel1\" id=\"pathsofTravel1\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pathsofTravel1\" id=\"pathsofTravel2\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pathsofTravel1\" id=\"pathsofTravel3\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>2.</td>\n" +
        "                        <td>Are wheelchair-accessible facilities (toilet rooms, exits, etc.) identified with signage?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pathsofTravel2\" id=\"pathsofTravel4\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pathsofTravel2\" id=\"pathsofTravel5\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pathsofTravel2\" id=\"pathsofTravel6\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>3.</td>\n" +
        "                        <td>Is there a path of travel that does not require the use of stairs?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pathsofTravel3\" id=\"pathsofTravel7\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pathsofTravel3\" id=\"pathsofTravel8\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pathsofTravel3\" id=\"pathsofTravel9\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                   <tr class=\"bg-info appendix-checklist\">\n" +
        "                            <td></td>\n" +
        "                            <td class=\"text-center\">Elevators</td>\n" +
        "                            <td class=\"text-center\">Yes</td>\n" +
        "                            <td class=\"text-center\">No</td>\n" +
        "                            <td class=\"text-center\">N/A</td>\n" +
        "                            <td class=\"text-center\">Comments</td>\n" +
        "                        </tr>\n" +
        "                    \n" +
        "                    <tr>\n" +
        "                        <td>1.</td>\n" +
        "                        <td>Do the call buttons have visual and audible signals to indicate when a call is registered and answered when car arrives?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators1\" id=\"elevators1\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators1\" id=\"elevators2\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators1\" id=\"elevators3\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>2.</td>\n" +
        "                        <td>Are there visual and audible signals inside cars indicating floor change?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators2\" id=\"elevators4\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators2\" id=\"elevators5\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators2\" id=\"elevators6\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>3.</td>\n" +
        "                        <td>Are there standard raised and Braille marking on both jambs of each hoist way entrance as well as all cab/call buttons?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators3\" id=\"elevators7\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators3\" id=\"elevators8\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators3\" id=\"elevators9\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>4.</td>\n" +
        "                        <td>Do elevator doors have a reopening device that will stop and reopen a car door if an object or a person obstructs the door?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators4\" id=\"elevators10\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators4\" id=\"elevators11\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators4\" id=\"elevators12\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>5.</td>\n" +
        "                        <td>Are elevator controls low enough to be reached from a wheelchair (appears to be between 15 and 48 inches)?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators5\" id=\"elevators13\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators5\" id=\"elevators14\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators5\" id=\"elevators15\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>6.</td>\n" +
        "                        <td>If a two-way emergency communication system is provided within the elevator cab, is it usable without voice communication?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators6\" id=\"elevators16\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators6\" id=\"elevators17\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"elevators6\" id=\"elevators18\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                      <tr class=\"bg-info appendix-checklist\">\n" +
        "                            <td></td>\n" +
        "                            <td class=\"text-center\">Toilet Rooms</td>\n" +
        "                            <td class=\"text-center\">Yes</td>\n" +
        "                            <td class=\"text-center\">No</td>\n" +
        "                            <td class=\"text-center\">N/A</td>\n" +
        "                            <td class=\"text-center\">Comments</td>\n" +
        "                        </tr>\n" +
        "                  \n" +
        "                    <tr>\n" +
        "                        <td>1.</td>\n" +
        "                        <td>Are common area public restrooms located on an accessible route?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms1\" id=\"toiletRooms1\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms1\" id=\"toiletRooms2\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms1\" id=\"toiletRooms3\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>2.</td>\n" +
        "                        <td>Are pull handles push/pull or lever type?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms2\" id=\"toiletRooms4\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms2\" id=\"toiletRooms5\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms2\" id=\"toiletRooms6\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>3.</td>\n" +
        "                        <td>Are there audible and visual fire alarm devices in the toilet rooms?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms3\" id=\"toiletRooms7\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms3\" id=\"toiletRooms8\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms3\" id=\"toiletRooms9\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>4.</td>\n" +
        "                        <td>Are toilet room access doors wheelchair-accessible (appear to be at least 32 inches wide)?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms4\" id=\"toiletRooms10\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms4\" id=\"toiletRooms11\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms4\" id=\"toiletRooms12\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>5.</td>\n" +
        "                        <td>Are public restrooms large enough to accommodate a wheelchair turnaround (appear to have 60\" turning diameter)?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms5\" id=\"toiletRooms13\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms5\" id=\"toiletRooms14\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms5\" id=\"toiletRooms15\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>6.</td>\n" +
        "                        <td>In unisex toilet rooms, are there safety alarms with pull cords?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms6\" id=\"toiletRooms16\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms6\" id=\"toiletRooms17\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms6\" id=\"toiletRooms18\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>7.</td>\n" +
        "                        <td>Are toilet stall doors wheelchair accessible (appear to be at least 32\" wide)?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms7\" id=\"toiletRooms19\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms7\" id=\"toiletRooms20\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms7\" id=\"toiletRooms21\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>8.</td>\n" +
        "                        <td>Are grab bars provided in toilet stalls?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms8\" id=\"toiletRooms22\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms8\" id=\"toiletRooms23\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms8\" id=\"toiletRooms24\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>9.</td>\n" +
        "                        <td>Are sinks provided with clearance for a wheelchair to roll under (appear to have 29\" clearance)?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms9\" id=\"toiletRooms25\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms9\" id=\"toiletRooms26\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms9\" id=\"toiletRooms27\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>10.</td>\n" +
        "                        <td>Are sink handles operable with one hand without grasping, pinching or twisting?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms10\" id=\"toiletRooms28\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms10\" id=\"toiletRooms29\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms10\" id=\"toiletRooms30\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>11.</td>\n" +
        "                        <td>Are exposed pipes under sink sufficiently insulated against contact?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms11\" id=\"toiletRooms31\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms11\" id=\"toiletRooms32\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"toiletRooms11\" id=\"toiletRooms33\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                     <tr class=\"bg-info appendix-checklist\">\n" +
        "                            <td></td>\n" +
        "                            <td class=\"text-center\">Guest Rooms</td>\n" +
        "                            <td class=\"text-center\">Yes</td>\n" +
        "                            <td class=\"text-center\">No</td>\n" +
        "                            <td class=\"text-center\">N/A</td>\n" +
        "                            <td class=\"text-center\">Comments</td>\n" +
        "                        </tr>\n" +
        "                  \n" +
        "                    <tr>\n" +
        "                        <td>1.</td>\n" +
        "                        <td>How many total accessible sleeping rooms does the property management report to have? Provide specific number in comment field. Are there sufficient reported accessible sleeping rooms with respect to the total number of reported guestrooms?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"guestRooms1\" id=\"guestRooms1\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"guestRooms1\" id=\"guestRooms2\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"guestRooms1\" id=\"guestRooms3\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>2.</td>\n" +
        "                        <td>How many of the accessible sleeping rooms per property management have roll-in showers? Provide specific number in comment field. Are there sufficient reported accessible rooms with roll-in showers with respect to the total number of reported accessible guestrooms?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"guestRooms2\" id=\"guestRooms4\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"guestRooms2\" id=\"guestRooms5\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"guestRooms2\" id=\"guestRooms6\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>3.</td>\n" +
        "                        <td>How many assistive listening kits and/or rooms with communication features are available per property management? Provide specific number in comment field. Are there sufficient reported assistive listening devices with respect to the total number of rooms?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"guestRooms3\" id=\"guestRooms7\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"guestRooms3\" id=\"guestRooms8\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"guestRooms3\" id=\"guestRooms9\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                     <tr class=\"bg-info appendix-checklist\">\n" +
        "                            <td></td>\n" +
        "                            <td class=\"text-center\">Pools</td>\n" +
        "                            <td class=\"text-center\">Yes</td>\n" +
        "                            <td class=\"text-center\">No</td>\n" +
        "                            <td class=\"text-center\">N/A</td>\n" +
        "                            <td class=\"text-center\">Comments</td>\n" +
        "                        </tr>\n" +
        "                    \n" +
        "                    <tr>\n" +
        "                        <td>1.</td>\n" +
        "                        <td>Are public access pools provided? If the answer is no, please disregard this section.</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pools1\" id=\"pools1\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pools1\" id=\"pools2\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pools1\" id=\"pools3\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>2.</td>\n" +
        "                        <td>How many accessible access points are provided to each pool/spa? Provide number in comment field.</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pools2\" id=\"pools4\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pools2\" id=\"pools5\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"pools2\" id=\"pools6\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                     <tr class=\"bg-info appendix-checklist\">\n" +
        "                            <td></td>\n" +
        "                            <td class=\"text-center\">Play Area</td>\n" +
        "                            <td class=\"text-center\">Yes</td>\n" +
        "                            <td class=\"text-center\">No</td>\n" +
        "                            <td class=\"text-center\">N/A</td>\n" +
        "                            <td class=\"text-center\">Comments</td>\n" +
        "                        </tr>\n" +
        "                    \n" +
        "                    <tr>\n" +
        "                        <td>1.</td>\n" +
        "                        <td>Has the play area been reviewed for accessibility? All public playgrounds are subject to ADAAG standards.</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"playArea1\" id=\"playArea1\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"playArea1\" id=\"playArea2\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"playArea1\" id=\"playArea3\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                   <tr class=\"bg-info appendix-checklist\">\n" +
        "                            <td></th>\n" +
        "                            <td class=\"text-center\">Exercise Equipment</td>\n" +
        "                            <td class=\"text-center\">Yes</td>\n" +
        "                            <td class=\"text-center\">No</td>\n" +
        "                            <td class=\"text-center\">N/A</td>\n" +
        "                            <td class=\"text-center\">Comments</td>\n" +
        "                        </tr>\n" +
        "                  \n" +
        "                    <tr>\n" +
        "                        <td>1.</td>\n" +
        "                        <td>Does there appear to be adequate clear floor space around the machines/equipment (30\" by 48\" minimum)?</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"exerciseEquipment1\" id=\"exerciseEquipment1\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"exerciseEquipment1\" id=\"exerciseEquipment2\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <div class=\"radio\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"radio\" name=\"exerciseEquipment1\" id=\"exerciseEquipment3\" value=\"\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" class=\"form-control\" placeholder=\"\">\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                </tbody>\n" +
        "            </table>\n" +
        "            </div>\n" +
        "            <div class=\"text-center\">\n" +
        "                <button type=\"submit\" class=\"btn btn-default\" ng-click=\"appendixTool.cancel()\">Cancel</button>\n" +
        "                <button type=\"submit\" class=\"btn btn-primary\">Save and Put File in Appendix</button>\n" +
        "                <button type=\"submit\" class=\"btn btn-primary\" ng-click=\"appendixTool.save()\">Save Changes</button>\n" +
        "            </div>           \n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportAuthoring/views/AddCommunicationRecord.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/AddCommunicationRecord.html",
        "<div class=\"modal-header\">\n" +
        "    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"appendixTool.cancel()\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "    <h4 class=\"modal-title\" id=\"myModalLabel\">Add Communication Record</h4>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"modal-body\">\n" +
        "    <div class=\"form-horizontal\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"name\" class=\"col-sm-2 control-label\">Name:</label>\n" +
        "            <div class=\"col-sm-8\">\n" +
        "                <input type=\"text\" class=\"form-control\" id=\"name\" ng-model=\"appendixTool.data.name\">\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"affiliation\" class=\"col-sm-2 control-label\">Affiliation:</label>\n" +
        "            <div class=\"col-sm-4\">\n" +
        "                <select class=\"form-control\" id=\"affiliation\" ng-model=\"appendixTool.data.affiliation\">\n" +
        "                    <option></option>\n" +
        "                    <option>Owner</option>\n" +
        "                    <option>Site Manager</option>\n" +
        "                    <option>Client</option>\n" +
        "                    <option>Occupant</option>\n" +
        "                    <option>Other</option>\n" +
        "                </select>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"telephone\" class=\"col-sm-2 control-label\">Telephone#:</label>\n" +
        "            <div class=\"col-sm-8\">\n" +
        "                <input type=\"text\" class=\"form-control\" id=\"telephone\" ng-model=\"appendixTool.data.telephone\">\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"conversationdate\" class=\"col-sm-2 control-label\">Conversation Date:</label>\n" +
        "            <div class=\"col-sm-4\">\n" +
        "                <div class=\"input-group\">\n" +
        "                    <input type=\"text\" class=\"form-control\" id=\"conversationdate\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"appendixTool.data.conversationDate\" is-open=\"appendixTool.open.conversationDate\" enable-time=\"false\" datepicker-options=\"appendixTool.dateOptions\" date-disabled=\"appendixTool.disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"false\" name=\"conversationDate\" ng-click=\"appendixTool.openCalendar($event, 'conversationDate')\" show-button-bar=\"false\">\n" +
        "                    <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default\" ng-click=\"appendixTool.openCalendar($event, 'conversationDate')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"re\" class=\"col-sm-2 control-label\">RE:</label>\n" +
        "            <div class=\"col-sm-8\">\n" +
        "                <input type=\"text\" class=\"form-control\" id=\"re\" ng-model=\"appendixTool.data.re\">\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"comments\" class=\"col-sm-2 control-label\">Comments:</label>\n" +
        "            <div class=\"col-sm-8\">\n" +
        "                <textarea class=\"form-control\" rows=\"4\" id=\"comments\" ng-model=\"appendixTool.data.comments\"></textarea>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"modal-footer\">\n" +
        "    <button type=\"submit\" class=\"btn btn-md btn-default\" ng-click=\"appendixTool.cancel()\">Cancel</button>\n" +
        "    <button type=\"submit\" class=\"btn btn-md btn-primary\">Save Record</button>\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportAuthoring/views/CKEditor.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/CKEditor.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <script id=\"UploadSpreadsheet.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header dividerline\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"Cancel()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Upload Spreadsheet: </h4>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "        <form name=\"myFormUploadSpreadsheet\" novalidate>\n" +
        "\n" +
        "            <div class=\"panel-body \">\n" +
        "\n" +
        "\n" +
        "                <span class=\"btn btn-md btn-success fileinput-button\" ng-class=\"{disabled: disabled}\">\n" +
        "                    <i class=\"fa fa-file-text-o\"></i> Attach <input id=\"file-3\"\n" +
        "                                                                    type=\"file\" data-file-input=\"files\"\n" +
        "                                                                    ngf-select ngf-change=\"upload($files)\" ngf-multiple=\"true\" />\n" +
        "                </span>\n" +
        "                <button type=\"button\" class=\"btn btn-md btn-primary start\">\n" +
        "                    <span class=\"glyphicon glyphicon-upload\"></span> Upload\n" +
        "                </button>\n" +
        "                <span class=\"AU_uploadFilename text-primary\" ng-repeat=\"file in files\">{{file.name}}</span>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "            <div class=\"modal-footer top_margin\">\n" +
        "                <button class=\"btn btn-primary\" ng-click=\"Cancel()\">Cancel</button>\n" +
        "\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "    <form class=\"form-horizontal\">\n" +
        "\n" +
        "        <!--<div data-ng-controller=\"CKEditorCtrl\">\n" +
        "\n" +
        "            <h3>CKEditor 4.2:</h3>\n" +
        "            <div ng-repeat=\"editor in ckEditors\">\n" +
        "                <div data-ng-model=\"editor.value\" contenteditable=\"true\" data-ck-editor class=\"testing-div\"></div>\n" +
        "                <br />\n" +
        "\n" +
        "\n" +
        "                <div data-ng-model=\"editor.value2\" contenteditable=\"true\" data-ck-editor class=\"testing-div\"></div>\n" +
        "            </div>\n" +
        "\n" +
        "        </div>-->\n" +
        "        <div class=\"container-fluid   margin-top-header\" ng-controller=\"CKEditorCtrl as ck\">\n" +
        "\n" +
        "            <div class=\"row\">\n" +
        "                <div id=\"toc\" class=\"col-md-4 col-lg-4 col-sm-3 margin-padding-0 well \">\n" +
        "                    <!--<ul class=\"nav nav-pills nav-stacked top-margin\" style=\"margin-left:10px;\">                       \n" +
        "                        <div role=\"tabpanel\" class=\"tab-pane fade active in\">\n" +
        "                            <div class=\"btn-group\" role=\"group\">\n" +
        "                                <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"ck.switchViewMode()\">{{ck.otherViewModeMsg}}</button>\n" +
        "                                <button type=\"button\" class=\"btn btn-default btn-sm\">Edit All Tables</button>\n" +
        "                            </div>\n" +
        "                            <label type=\"button\" class=\"btn btn-default btn-sm pull-right\">5.1.3</label>\n" +
        "                        </div>\n" +
        "\n" +
        "                        <li ng-repeat=\"section in ck.toc.Sections\">\n" +
        "                            <a class=\"toc-section\" ng-class=\"{'current-section': ck.obj.selectedSection == section.SectionID}\" style=\"cursor: pointer;\" ng-click=\"ck.sectionClicked(section)\">{{section.contentValues.index}}  {{section.contentValues.section1Title}}</a>                                                       \n" +
        "                        </li>\n" +
        "                    </ul>-->\n" +
        "                    <div class=\"top-margin\">\n" +
        "                        <toc-display sections=\"ck.toc.sections\" selected-section=\"ck.selectedSection\" section-click=\"ck.sectionClicked(section)\">\n" +
        "                            <div role=\"tabpanel\" class=\"tab-pane fade active in\">\n" +
        "                                <div class=\"btn-group\" role=\"group\">\n" +
        "                                    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"ck.switchViewMode()\">{{ck.otherViewModeMsg}}</button>\n" +
        "                                    <button type=\"button\" class=\"btn btn-default btn-sm\">Edit All Tables</button>\n" +
        "                                </div>\n" +
        "                                <label type=\"button\" class=\"btn btn-default btn-sm pull-right\">5.1.3</label>\n" +
        "                            </div>\n" +
        "                        </toc-display>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div id=\"rightContent\" class=\"col-md-8 col-lg-8 col-sm-9\" scrollable-top-container>\n" +
        "\n" +
        "                    <div ng-repeat=\"sec in ck.resp.Sections\" handle-when-scroll-at-top=\"ck.sectionClicked({{sec}},true)\" scroll-top-offset=\"300\" skip-handle-scroll-top-condition=\"!ck.showAllSections\">\n" +
        "                        <div add-html id=\"section_{{sec.SectionID}}\" resp=\"sec\" obj=\"ck.obj\" narrative-section-history=\"ck.getHistoryForSections()\" ng-show=\"ck.getHistoryForSections(sec)\">\n" +
        "\n" +
        "                        </div>\n" +
        "\n" +
        "\n" +
        "                    </div>\n" +
        "                    <!-- section=\"ck.selectedSection\" <div add-html id=\"tobeReplaceDiv\" resp=\"ck.resp\" >\n" +
        "\n" +
        "                </div>-->\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "    </form>\n" +
        "\n" +
        "    <script>\n" +
        "        CKEDITOR.disableAutoInline = true;\n" +
        "\n" +
        "    </script>\n" +
        "</body>\n" +
        "\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ReportAuthoring/views/FindReplace.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/FindReplace.html",
        "<div class=\"row\" ng-init=\"ck.showMainButtions=true\" ng-show=\"ck.showMainButtions\">\n" +
        "                        <div class=\"col-sm-12\">\n" +
        "                            <div class=\"btn-group\">\n" +
        "                                <button id=\"find-replace-in-section\" type=\"button\" ng-click=\"ck.showMainButtions=false;ck.viewMode('single');\" class=\"btn btn-default btn-sm\">In Section</button>\n" +
        "                                <button id=\"find-replace-in-full-report\" type=\"button\" ng-click=\"ck.showMainButtions=false;ck.viewMode('all')\" class=\"btn btn-default btn-sm\">In Full Report</button> \n" +
        "                                                                                                \n" +
        "                            </div>\n" +
        "                            <button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-show=\"ck.selectedSection.sectionNumber\">{{ck.selectedSection.sectionNumber}}</button>\n" +
        "                            \n" +
        "                            \n" +
        "                        </div>\n" +
        "\n" +
        "                    </div>\n" +
        "<div class=\"row\" ng-show=\"ck.showMainButtions\">\n" +
        "    <div class=\"col-sm-12\"><div class=\"alert alert-info alert-dismissible top-margin-xs\" role=\"alert\">\n" +
        "  <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "  To run a find and replace on your report, select one of the options above. If checking the full report, you will be prompted to go into All Sections Mode. To do this manually, the button is on the ToC tab.\n" +
        "</div></div>\n" +
        "</div>\n" +
        "\n" +
        "                    <div ng-show=\"!ck.showMainButtions\">\n" +
        "                        <div class=\"row\">\n" +
        "                            <div class=\"col-sm-8\">\n" +
        "                                <div class=\"btn-group\">\n" +
        "                                    <button type=\"button\" id=\"find-replace-save\" class=\"btn btn-default btn-sm\" ng-click=\"ck.saveReplacedText();\" >Save Changes</button>\n" +
        "                                    <button type=\"button\" id=\"find-replace-close\" class=\"btn btn-default btn-sm\" ng-click=\"ck.clearOnFindReplace();ck.showMainButtions=true;\">Close</button>\n" +
        "                                    <button type=\"button\" id=\"find-and-replace-paused\" class=\"btn btn-primary btn-sm edr-pause-resume\" ng-click=\"ck.resumeFindReplace();\" >Find / Replace Paused, click to Resume</button>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                            <div class=\"col-sm-4\">\n" +
        "                                <button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-show=\"ck.selectedSection.sectionNumber\">{{ck.selectedSection.sectionNumber}}</button>\n" +
        "                   \n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                        <div class=\"top-margin\">\n" +
        "                            \n" +
        "                            <div class=\"form-group\" ng-init=\"ck._roFindReplacePause=false\" ng-show=\"ck._roFindReplacePause\" >\n" +
        "                            <input type=\"button\" class=\"btn btn-primary input-xlarge\" value=\"Find / Replace Paused, click to Resume\">\n" +
        "                            </div>\n" +
        "                            \n" +
        "                            <div class=\"form-group\">\n" +
        "                                <label for=\"findWhat\">FIND WHAT</label>\n" +
        "                                <input type=\"text\" ng-model=\"ck.findWhat\" class=\"form-control\" id=\"find_what\" ng-blur=\"ck.clearOldFindReplace()\">\n" +
        "                            </div>\n" +
        "                            <div class=\"form-group\">\n" +
        "                                <label for=\"replaceWith\">REPLACE WITH</label>\n" +
        "                                <input type=\"text\" ng-model=\"ck.replaceWith\" class=\"form-control\" id=\"replace_with\">\n" +
        "                            </div>\n" +
        "                            <div class=\"border-bottom-lg\">\n" +
        "                                <button id=\"btn_find_next\" class=\"btn btn-primary btn-xs\" ng-click=\"ck.findNext()\">Find Next</button>           \n" +
        "                                <button class=\"btn btn-primary btn-xs\" id=\"btn_replace_and_find_next\" ng-click=\"ck.ReplaceFindNext();\" ng-disabled=\"true\">Replace</button>\n" +
        "                                <button id=\"btn_replace_all\" class=\"btn btn-primary btn-xs\" ng-click=\"ck.replaceAll()\">Replace All</button>\n" +
        "                            </div>\n" +
        "                            <div class=\"form-group\">\n" +
        "                                <strong>OPTIONS</strong>\n" +
        "                                <div class=\"checkbox\">\n" +
        "                                    <label>\n" +
        "                                        <input ng-model=\"ck.matchCase\" type=\"checkbox\" id=\"match_case\">Match case</label>\n" +
        "                                </div>\n" +
        "                                <div class=\"checkbox\">\n" +
        "                                    <label>\n" +
        "                                        <input type=\"checkbox\" id=\"find_whole_words_only\" ng-model=\"ck.findWholeWordsOnly\">Find whole words only</label>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>");
}]);

angular.module("../app/modules/ReportAuthoring/views/TINYEditor.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/TINYEditor.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        "\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <script id=\"UploadSpreadsheet.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header dividerline\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"Cancel()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Upload Spreadsheet: </h4>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "        <form name=\"myFormUploadSpreadsheet\" novalidate>\n" +
        "\n" +
        "            <div class=\"panel-body \">\n" +
        "\n" +
        "\n" +
        "                <span class=\"btn btn-md btn-success fileinput-button\" ng-class=\"{disabled: disabled}\">\n" +
        "                    <i class=\"fa fa-file-text-o\"></i> Attach <input id=\"file-3\"\n" +
        "                                                                    type=\"file\" data-file-input=\"files\"\n" +
        "                                                                    ngf-select ngf-change=\"upload($files)\" ngf-multiple=\"true\" />\n" +
        "                </span>\n" +
        "                <button type=\"button\" class=\"btn btn-md btn-primary start\">\n" +
        "                    <span class=\"glyphicon glyphicon-upload\"></span> Upload\n" +
        "                </button>\n" +
        "                <span class=\"AU_uploadFilename text-primary\" ng-repeat=\"file in files\">{{file.name}}</span>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "            <div class=\"modal-footer top_margin\">\n" +
        "                <button class=\"btn btn-primary\" ng-click=\"Cancel()\">Cancel</button>\n" +
        "\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "    <form class=\"form-horizontal\">\n" +
        "\n" +
        "        <div class=\"container-fluid   margin-top-header\" ng-controller=\"TINYEditorCtrl as tiny\">\n" +
        "\n" +
        "            <div class=\"row\">\n" +
        "\n" +
        "\n" +
        "                <div id=\"toc\" class=\"col-md-3 col-lg-3 col-sm-3 margin-padding-0 well panel-left\">\n" +
        "                    <ul ng-repeat=\"section in tiny.resp[0].Sections\" class=\"nav nav-pills nav-stacked top-margin\" style=\"margin-left:10px;\">\n" +
        "                        <a style=\"cursor: pointer;\" ng-click=\"tiny.obj.selectedSection = section.contentValues.section1Title\">{{section.contentValues.index}}  {{section.contentValues.section1Title}}</a>\n" +
        "                    </ul>\n" +
        "                </div>\n" +
        "\n" +
        "                <div id=\"rightContent\" class=\"col-md-9 col-lg-9 col-sm-9 panel-right \">\n" +
        "                    <div ng-repeat=\"sec in tiny.resp[0].Sections\">\n" +
        "                        <div add-tiny resp=\"sec\" obj=\"tiny.obj\">\n" +
        "\n" +
        "                        </div>\n" +
        "\n" +
        "\n" +
        "                    </div>\n" +
        "                    <!--<div add-html id=\"tobeReplaceDiv\" resp=\"ck.resp\" >\n" +
        "\n" +
        "                </div>-->\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "        </div>\n" +
        "    </form>\n" +
        "\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/ReportAuthoring/views/VariableReplacer.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/VariableReplacer.html",
        "<div ng-controller=\"CKEditorCtrl as ck\">\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"CancelVariableReplacer()\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\" id=\"myModalLabel\">Variable Replacer</h4>\n" +
        "    </div>\n" +
        "    <div class=\"modal-body\">\n" +
        "        <div class=\"table-responsive\">\n" +
        "            <table class=\"table table-striped table-condensed\">\n" +
        "                <thead>\n" +
        "                    <tr>\n" +
        "                        <th>Include?</th>\n" +
        "                        <th>Variable</th>\n" +
        "                        <th>Replace With</th>\n" +
        "                        <th>Sections</th>\n" +
        "                    </tr>\n" +
        "                </thead>\n" +
        "                <tbody>\n" +
        "                    <tr ng-repeat=\"input in VRContents\">\n" +
        "\n" +
        "                        <td>\n" +
        "                            <div class=\"checkbox\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"checkbox\" ng-model=\"input.isKeywordExist\">\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </td>\n" +
        "                        <td>{<span ng-bind=\"input.keywordname\"></span>}</td>\n" +
        "                        <td>\n" +
        "                            <input type=\"text\" ng-model=\"input.keywordvalue\" class=\"form-control\">\n" +
        "                        </td>\n" +
        "\n" +
        "                        <td>\n" +
        "                            <!--<table>\n" +
        "                                <tr ng-repeat=\"sectionItem in input.sections.sectionData.contentValues\">\n" +
        "                                    <td> \n" +
        "    <a id=\"popoverOption_{{sectionItem.number}}\"  href=\"#\" data-content=\"{{sectionItem.ckEditData}}\" data-popover=\"true\" data-html=true>{{ input.sectionNumber }} {{input.sectionTitle }} </a>\n" +
        "                                    </td>\n" +
        "                                </tr>\n" +
        "                            </table>-->\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                </tbody>\n" +
        "            </table>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <div class=\"modal-footer\">\n" +
        "        <button type=\"button\" class=\"btn btn-primary\" ng-model=\"selectedAll\" ng-click=\"selectAll()\">Check All</button>\n" +
        "        <button type=\"button\" class=\"btn btn-primary\" ng-click=\"clearAll()\">Uncheck All</button>\n" +
        "        <button type=\"button\" class=\"btn btn-primary\" ng-click=\"ReplaceVariables();\">Submit Changes</button>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportAuthoring/views/appendices.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/appendices.html",
        "<div ng-controller=\"AppendicesController as appendices\" cg-busy=\"appendices.waitingProcessResources\">\n" +
        "\n" +
        "    <div class=\"container-fluid\">\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-md-4 nopadding\">\n" +
        "				<ul class=\" nav nav-tabs nav-tabs-sm report-write-tab\" >\n" +
        "        <li id=\"li_toc_appendices\" role=\"presentation\" class=\"active\" ng-click=\"ck.openLeftPanel();ck.closeAlertHeight();\"><a class=\"pointer\" ng-click=\"appendices.reportAuthoringWriteSelected = 'Appendices';appendices.removeLocalStorage();\" aria-controls=\"toc\" role=\"tab\" data-toggle=\"tab\" aria-expanded=\"true\">Appendices</a></li>\n" +
        "        <li id=\"li_comments_appendices\" role=\"presentation\" ng-click=\"ck.openLeftPanel();ck.closeAlertHeight();\"><a class=\"pointer\" ng-click=\"appendices.reportAuthoringWriteSelected = 'Comments';appendices.getReportComments();appendices.removeLocalStorage();\" aria-controls=\"comments\" role=\"tab\" data-toggle=\"tab\">Comments</a></li>\n" +
        "    </ul>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "        <div class=\"row\">\n" +
        "            <div id=\"leftContent\" ng-switch on=\"appendices.reportAuthoringWriteSelected\">\n" +
        "                <!-- appendices div -->\n" +
        "                <div ng-switch-when=\"Appendices\" id=\"toc\" class=\"col-md-4 leftContent nopadding\">\n" +
        "\n" +
        "                    <div role=\"tabpanel\" class=\"tab-pane fade active in\">\n" +
        "                        <!-- legends div -->\n" +
        "						<div class=\"topHeaderHeight\">\n" +
        "                        <div class=\"alert alert-info nomargin \">\n" +
        "                            <div class=\"table-responsive\">\n" +
        "                                <table class=\"table table-condensed small nomargin\">\n" +
        "                                    <tbody>\n" +
        "                                        <tr>\n" +
        "                                            <td><strong>Legend:</strong></td>\n" +
        "                                            <td><span class=\"lpdf\"><i class=\"fa fa-file-pdf-o fa-lg\"></i> PDF</span></td>\n" +
        "                                            <td><span class=\"ldoc\"><i class=\"fa fa-file-word-o fa-lg\"></i> Word</span></td>\n" +
        "                                            <td><span class=\"lhtm\"><i class=\"fa fa-file-code-o fa-lg\"></i> HTML</span></td>\n" +
        "                                            <td><span class=\"lppt\"><i class=\"fa fa-file-powerpoint-o fa-lg\"></i> Powerpoint</span></td>\n" +
        "                                            <!-- <td><span class=\"ldbf\"><span class=\"full\">DBF&nbsp;File</span></span></td>  -->\n" +
        "                                        </tr>\n" +
        "                                        <tr>\n" +
        "                                            <td>&nbsp;</td>\n" +
        "                                            <td><span class=\"lunk\"><i class=\"fa fa-file-o fa-lg\"></i> Unknown</span></td>\n" +
        "                                            <td><span class=\"ltxt\"><i class=\"fa fa-file-text-o fa-lg\"></i> Text</span></td>\n" +
        "                                            <td><span class=\"lxls\"><i class=\"fa fa-file-excel-o fa-lg\"></i> Excel</span></td>\n" +
        "                                            <td><span class=\"ljpg\"><i class=\"fa fa-file-image-o fa-lg\"></i> Image</span></td>\n" +
        "                                        </tr>\n" +
        "                                    </tbody>\n" +
        "                                </table>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "							</div>\n" +
        "                        <!-- legends div ends -->\n" +
        "                        <!-- appendices section -->\n" +
        "                        <div class=\"contentbodyHeight scrollDiv\">\n" +
        "                            <ul class=\"nav nav-pills nav-stacked\">\n" +
        "                                <li ng-repeat=\"section in appendices.reportAppendices.sections\" ng-class=\"{'active': appendices.reportAppendices.selectedSection.sectionID == section.sectionID}\">\n" +
        "                                    <a class=\"toc-section pointer\" ng-class=\"{'current-section': appendices.reportAppendices.selectedSection.sectionID == section.sectionID}\" ng-click=\"appendices.sectionClick(section)\">{{section.sectionNumber}}: {{section.sectionName}}</a>\n" +
        "                                </li>\n" +
        "                                <li ng-class=\"{'active': appendices.reportAppendices.allSectionView}\"><a class=\"toc-section pointer\" ng-class=\"{'current-section': appendices.reportAppendices.allSectionView}\" ng-click=\"appendices.allSectionViewClick()\">All Appendices</a></li>\n" +
        "								\n" +
        "								<li ><a class=\"toc-section pointer\"  ng-click=\"appendices.openEDRDrawingTool()\"> Launch EDR Drawing Tools</a></li>\n" +
        "                            </ul>\n" +
        "                        </div>\n" +
        "                        <!-- appendices section ends -->\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <!-- appendices div ends-->\n" +
        "\n" +
        "                <!-- comments div -->\n" +
        "                <div ng-switch-when=\"Comments\" id=\"comments\" class=\"col-md-4 leftContent nopadding\" cg-busy=\"appendices.waitingCommentsResources\">\n" +
        "					<div class=\"topHeaderHeight\">\n" +
        "                    <div class=\"row\">\n" +
        "                        <div class=\"col-sm-8\">\n" +
        "                            <div class=\"form-group\">\n" +
        "                                <select class=\"form-control\" ng-model=\"appendices.selSection_Comments\" ng-change=\"appendices.newComm = false;appendices.commentsErrorStatus=false;appendices.sectionChanged()\">\n" +
        "                                    <option value=\"0\">Current Section</option>\n" +
        "                                    <option value=\"1\">Current Section Unaddressed Comments</option>\n" +
        "                                    <option value=\"2\">All Sections</option>\n" +
        "                                    <option value=\"3\">All Sections Unaddressed Comments</option>\n" +
        "                                </select>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                        <div class=\"col-sm-4 text-right\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default btn-sm\" ng-show=\"appendices.selectedSection.sectionNumber\">{{appendices.selectedSection.sectionNumber}}</button>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"row\">\n" +
        "                        <div class=\"col-sm-12\">\n" +
        "                            <div class=\"btn-group bottom-margin comments-section-btn\">\n" +
        "                                <div ng-show=\"appendices.checkComments\" id=\"divSelAll_write\" class=\"btn-group\" data-toggle=\"buttons\" ng-click=\"appendices.selectedAll = !appendices.selectedAll; appendices.checkAll();\">\n" +
        "                                    <label id=\"lblSelAll\" class=\"btn btn-default btn-sm\">\n" +
        "                                        <input id=\"selAll\" class=\"btn\" type=\"checkbox\" ng-model=\"appendices.selectedAll\" />{{appendices.selectAllText}}\n" +
        "                                    </label>\n" +
        "                                </div>\n" +
        "\n" +
        "                                <button ng-show=\"appendices.checkComments\" class=\"btn btn-sm btn-default\" ng-click=\"appendices.openDeletePopup();\" ng-disabled=\"!appendices.selectedAll;!appendices.IsCommentChecked;\"><span class=\"glyphicon glyphicon-trash\"></span></button>\n" +
        "  <button class=\"btn btn-sm btn-default\" ng-show=\"commentsArr.length > 0\" title=\"Open all addressed comments\" data-toggle=\"tooltip\" data-placement=\"top\" data-container=\"body\" data-trigger=\"hover\" ng-click=\"appendices.OpenAll()\"><i class=\"fa fa-lg fa-plus\"></i> </button>\n" +
        "                            <button class=\"btn btn-sm btn-default\" ng-show=\"commentsArr.length > 0\" title=\"Close all addressed comments\" data-toggle=\"tooltip\" data-placement=\"top\" data-container=\"body\" data-trigger=\"hover\" ng-click=\"appendices.CloseAll()\"><i class=\"fa fa-lg fa-minus\"></i> </button>\n" +
        "                           \n" +
        "                                \n" +
        "<!--\n" +
        "                                <button class=\"btn btn-sm btn-default\" ng-show=\"appendices.checkComments\" tooltip=\"Close All\" ng-click=\"appendices.CloseAll()\"><i class=\"fa fa-lg fa-plus\"></i> </button>\n" +
        "                                <button class=\"btn btn-sm btn-default\" ng-show=\"appendices.checkComments\" tooltip=\"Open All\" ng-click=\"appendices.OpenAll()\"><i class=\"fa fa-lg fa-minus\"></i> </button>\n" +
        "-->\n" +
        "\n" +
        "                                <button class=\"btn btn-sm btn-default\" ng-click=\"appendices.newComm = true;appendices.newCommentVal='';appendices.commentsErrorStatus=false;appendices.saveNewCommBtn=false;ck.closeAlertHeight();\">Add New</button>\n" +
        "                                   <button class=\"btn btn-sm btn-default\" title=\"Refresh Comments\" data-toggle=\"tooltip\" data-placement=\"top\" data-container=\"body\" data-trigger=\"hover\" ng-click=\"appendices.refreshComments()\"><i class=\"glyphicon glyphicon-refresh\"></i> </button>\n" +
        "<!--                                <button title=\"Refresh Comments\" data-toggle=\"tooltip\" data-placement=\"top\" class=\"btn btn-sm btn-default\" data-trigger=\"hover\" ng-click=\"appendices.refreshComments();appendices.newComm = false;appendices.commentsErrorStatus=false;\"><span class=\"glyphicon glyphicon-refresh\"></span></button>-->\n" +
        "\n" +
        "                             \n" +
        "\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"alert alert-info nomargin\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"appendices.serviceResponseAlert && appendices.checkComments\">\n" +
        "                        <button type=\"button\" class=\"close\" ng-click=\"appendices.serviceResponseAlert = false; ck.closeAlertHeight();\" aria-label=\"Close\">\n" +
        "                            <span aria-hidden=\"true\">&times;</span>\n" +
        "                        </button>\n" +
        "                      Use the select to toggle comment visibility. Click on user names to view comments or use the buttons to show/hide all. Green comments have not been addressed.\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div ng-show=\"appendices.newComm\" class=\"top-margin\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <textarea id=\"addComments\" class=\"form-control resize-vertical\" rows=\"6\" placeholder=\"Enter New Comments for section {{appendices.selectedSection.sectionNumber}}\" ng-model=\"appendices.newCommentVal\"></textarea>\n" +
        "                        </div>\n" +
        "\n" +
        "                        <button class=\"btn btn-default btn-sm\" ng-click=\"appendices.newComm = false;appendices.commentsErrorStatus=false; ck.closeAlertHeight();\">Cancel</button>\n" +
        "                        <button class=\"btn btn-primary btn-sm\" ng-click=\"appendices.saveNewComments();ck.closeAlertHeight();\" ng-disabled=\"appendices.saveNewCommBtn\">Save</button>\n" +
        "                    </div>\n" +
        "				</div>\n" +
        "                    <div class=\"scrollDiv contentbodyHeight\">\n" +
        "\n" +
        "                        <div ng-show=\"appendices.commentsErrorStatus\" class=\"alert alert-danger top-margin-xs\" role=\"alert\" ng-class=\"danger\">\n" +
        "                            {{appendices.commentsErrorText}}\n" +
        "                        </div>\n" +
        "                        <div ng-repeat=\"secVal in commentsArr track by $index\">\n" +
        "\n" +
        "                            <div ng-show=\"(secVal.comments.length > 0)?true:false\"> \n" +
        "                                  \n" +
        "                                        <div class=\"bottom-margin-xs border-bottom-xs\">\n" +
        "                                            <strong>{{secVal.sectionNumber}} {{secVal.sectionName}}</strong>\n" +
        "                                        </div> \n" +
        "                                <div ng-class=\"{'false': 'bg-green-comments','true': 'bg-gray-comments'}[comm.addressed]\" ng-repeat=\"comm in secVal.comments\">\n" +
        "                                    <div class=\"bottom-margin-xs\">\n" +
        "                                        <input type=\"checkbox\" ng-model=\"comm.Selected\" ng-change=\"appendices.commentCheck()\">\n" +
        "                                       <a class=\"pointer decoration-n\">\n" +
        "                                        <span id=\"{{comm.Id}}-plus-comment-span\" ng-click=\"ck.setIconComment('collapse in',comm.Id)\" class=\"ng-hide\">\n" +
        "                                          <i id=\"{{comm.Id}}-plus-comment\"  class=\"fa fa-lg fa-plus-square-o ng-hide\"> </i> BY {{comm.commentedBy.toUpperCase()}}\n" +
        "                                        </span>\n" +
        "                                          <span id=\"{{comm.Id}}-minus-comment-span\" ng-click=\"ck.setIconComment('collapse',comm.Id)\">\n" +
        "                                         <i id=\"{{comm.Id}}-minus-comment\"  class=\"fa fa-lg fa-minus-square-o\"></i> BY {{comm.commentedBy.toUpperCase()}}\n" +
        "                                        </span>\n" +
        "                                      \n" +
        "                                       \n" +
        "                                    </a> \n" +
        "                                        \n" +
        "                                        \n" +
        "                                        <span class=\"pull-right\">{{comm.date}} </span>\n" +
        "                                        <div id=\"{{comm.Id}}-comment\">\n" +
        "                                            <span class=\"span_Carriage\" ng-hide=\"comm.commentEditState\">{{comm.commentVal}}</span>\n" +
        "                                        </div>\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            <textarea id=\"editComments\" class=\"form-control resize-vertical\" rows=\"6\" placeholder=\"Enter Comments\" ng-show=\"comm.commentEditState\" ng-model=\"comm.commentVal\"></textarea>\n" +
        "                                            <textarea id=\"editComments\" class=\"form-control resize-vertical\" rows=\"6\" placeholder=\"Address the comment\" ng-show=\"comm.addressState\" ng-model=\"comm.addressComment\"></textarea>\n" +
        "                                        </div>\n" +
        "\n" +
        "                                        <div>\n" +
        "                                            <button ng-hide=\"comm.addressed || comm.addressState || comm.commentEditState\" class=\"btn btn-primary btn-sm\" ng-click=\"comm.addressState = true;comm.addressComment='';\">Address</button>\n" +
        "                                            <button class=\"btn btn-primary btn-sm\" ng-hide=\"comm.addressed || comm.addressState || comm.commentEditState\" ng-click=\"comm.commentEditState = true;\">Edit</button>\n" +
        "\n" +
        "                                            <button class=\"btn btn-default btn-sm\" ng-show=\"comm.commentEditState || comm.addressState\" ng-click=\"comm.commentEditState = false;comm.addressState = false\">Cancel</button>\n" +
        "                                            <button class=\"btn btn-primary btn-sm\" ng-show=\"comm.commentEditState || comm.addressState\" ng-click=\"appendices.editAddressComment(comm)\">Save</button>\n" +
        "\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                    <div ng-show=\"comm.addressed\">\n" +
        "\n" +
        "                                         <a class=\"pointer decoration-n addressed-by\">\n" +
        "                                          <span id=\"{{comm.Id}}-plus-address-span\" ng-click=\"ck.setIconAddress('collapse in',comm.Id)\" class=\"ng-hide\">\n" +
        "                                               <i id=\"{{comm.Id}}-plus-address\"  class=\"fa fa-lg fa-plus-square-o ng-hide\"></i> ADDRESSED BY {{comm.addressedBy.toUpperCase()}}\n" +
        "                                        </span>\n" +
        "                                         <span id=\"{{comm.Id}}-minus-address-span\" ng-click=\"ck.setIconAddress('collapse',comm.Id)\">\n" +
        "                                               <i id=\"{{comm.Id}}-minus-address\"  class=\"fa fa-lg fa-minus-square-o\"></i> ADDRESSED BY {{comm.addressedBy.toUpperCase()}}\n" +
        "                                        </span>\n" +
        "                                      \n" +
        "                                    </a>\n" +
        "                                        <span class=\"pull-right\">{{comm.addressedDate}}</span>\n" +
        "                                        <div id=\"{{comm.Id}}-address\">\n" +
        "                                            <span class=\"addressed-by-text span_Carriage\">{{comm.addressedVal}}</span>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                                <hr>\n" +
        "                            </div>\n" +
        "\n" +
        "\n" +
        "                        </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <!-- comments div ends -->\n" +
        "  <left-panel-slide-toggle></left-panel-slide-toggle>\n" +
        "            </div>\n" +
        "          \n" +
        "            <div id=\"rightContent\" class=\"col-md-8\">\n" +
        "				<div class=\"alert alert-info\">\n" +
        "					Note: Files must be less than 25MB per upload. Only PDF files will be included in the final deliverable. Files highlighted in green are included in the final deliverable.\n" +
        "					</div> 				\n" +
        "                <div cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\" ng-repeat=\"section in appendices.reportAppendices.sections\" ng-show=\"appendices.reportAppendices.allSectionView || appendices.reportAppendices.selectedSection.sectionID == section.sectionID\">\n" +
        "                    <!-- header -->										\n" +
        "					\n" +
        "                    <h3 class=\"border-bottom\">APPENDIX {{section.sectionNumber}}: {{section.sectionName}}</h3>\n" +
        "                    <!-- header ends -->\n" +
        "					<!-- Instruction -->\n" +
        "					<div add-html id=\"section_{{section.sectionID}}\" resp=\"section\" obj=\"appendices.obj\">\n" +
        "					</div>\n" +
        "					<!-- Instruction ends -->\n" +
        "                    <!-- appendix tools -->\n" +
        "                    <div>\n" +
        "                        <div ng-repeat=\"tool in section.appendixTools\">\n" +
        "                            <a class=\"pointer\" ng-click=\"appendices.toolClicked(tool, section)\">{{tool.label}}</a>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <!-- appendix tools ends -->\n" +
        "\n" +
        "                    <!-- upload section -->\n" +
        "\n" +
        "                    <div class=\"table-responsive\">\n" +
        "                        <table class=\"table\" nv-file-drop=\"\" uploader=\"section.uploader\">\n" +
        "                            <thead>\n" +
        "                                <tr>\n" +
        "                                    <th>Name</th>\n" +
        "                                    <th ng-show=\"section.uploader.isHTML5\">Size</th>\n" +
        "                                    <th ng-show=\"section.uploader.isHTML5\">Progress</th>\n" +
        "                                    <th>Status</th>\n" +
        "                                    <th>Actions</th>\n" +
        "                                </tr>\n" +
        "                            </thead>\n" +
        "                            <tbody>\n" +
        "                                <tr ng-repeat=\"item in section.uploader.queue\" class=\"ng-scope\">\n" +
        "                                    <td><strong class=\"ng-binding\">{{ item.file.name }}</strong></td>\n" +
        "                                    <td ng-show=\"section.uploader.isHTML5\" nowrap=\"\" class=\"ng-binding\">{{ item.file.size/1024/1024|number:2 }} MB</td>\n" +
        "                                    <td ng-show=\"section.uploader.isHTML5\">\n" +
        "                                        <div class=\"progress\">\n" +
        "                                            <div class=\"progress-bar\" role=\"progressbar\" ng-style=\"{ 'width': item.progress + '%' }\"></div>\n" +
        "                                        </div>\n" +
        "                                    </td>\n" +
        "                                    <td class=\"text-center\">\n" +
        "                                        <span ng-show=\"item.isSuccess\" style=\"display: none;\"><i class=\"glyphicon glyphicon-ok\"></i></span>\n" +
        "                                        <span ng-show=\"item.isCancel\" style=\"display: none;\"><i class=\"glyphicon glyphicon-ban-circle\"></i></span>\n" +
        "                                        <span ng-show=\"item.isError\" style=\"display: none;\"><i class=\"glyphicon glyphicon-remove\"></i></span>\n" +
        "                                    </td>\n" +
        "                                    <td nowrap=\"\">\n" +
        "                                        <button type=\"button\" class=\"btn btn-success btn-xs\" ng-click=\"item.upload()\" ng-disabled=\"item.isReady || item.isUploading || item.isSuccess\">\n" +
        "                                            <span class=\"glyphicon glyphicon-upload\"></span> Upload\n" +
        "                                        </button>\n" +
        "                                        <button type=\"button\" class=\"btn btn-warning btn-xs\" ng-click=\"item.cancel()\" ng-disabled=\"!item.isUploading\" disabled=\"disabled\">\n" +
        "                                            <span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel\n" +
        "                                        </button>\n" +
        "                                        <button type=\"button\" class=\"btn btn-danger btn-xs\" ng-click=\"item.remove()\">\n" +
        "                                            <span class=\"glyphicon glyphicon-trash\"></span> Remove\n" +
        "                                        </button>\n" +
        "                                    </td>\n" +
        "                                </tr>\n" +
        "                            </tbody>\n" +
        "                        </table>\n" +
        "                        <div ng-if=\"!section.uploader.queue || !section.uploader.queue.length\" nv-file-drop=\"\"  uploader=\"section.uploader\" class=\"col-md-12 upload-file-container panel panel-default label-center\">\n" +
        "                            <span>Drag files here.</span>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"bottom-margin-sm\">\n" +
        "                        <!--	<input type=\"file\" nv-file-select uploader=\"section.uploader\" multiple/>\n" +
        "							-->\n" +
        "                        <button ng-click=\"appendices.responseAlert = false\" class=\"btn btn-md btn-success fileinput-button\" ng-class=\"{disabled: disabled}\"><i class=\"fa fa-file-text-o\"></i> {{section.hasPhotos == true? 'ADD PHOTOS' : 'ADD FILE'}} \n" +
        "                            <input type=\"file\" multiple=\"multiple\" id=\"file-3\" data-file-input=\"files\" ngf-select=\"\" nv-file-select uploader=\"section.uploader\">\n" +
        "                        </button>\n" +
        "                    </div>\n" +
        "					\n" +
        "					 <div class=\"alert\" ng-class=\"appendices.statusClass\" role=\"alert\" id=\"ResponseAlertDiv\" ng-show=\"appendices.responseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"appendices.responseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{appendices.statusText}}\n" +
        "        </div>\n" +
        "					\n" +
        "                    <div ng-show=\"section.uploader.queue.length > 0\">\n" +
        "\n" +
        "                        Queue progress:\n" +
        "                        <div class=\"progress\">\n" +
        "                            <div class=\"progress-bar\" role=\"progressbar\" ng-style=\"{ 'width': section.uploader.progress + '%' }\"></div>\n" +
        "                        </div>\n" +
        "                        <div class=\"bottom-margin\">\n" +
        "                            <button type=\"button\" class=\"btn btn-primary btn-md\" ng-click=\"section.uploader.uploadAll()\" ng-disabled=\"!section.uploader.getNotUploadedItems().length\">\n" +
        "                                <span class=\"glyphicon glyphicon-upload\"></span> Upload all\n" +
        "                            </button>\n" +
        "                            <button type=\"button\" class=\"btn btn-default btn-md\" ng-click=\"section.uploader.cancelAll()\" ng-disabled=\"!section.uploader.isUploading\" disabled=\"disabled\">\n" +
        "                                <span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel all\n" +
        "                            </button>\n" +
        "                            <button type=\"button\" class=\"btn btn-danger btn-md\" ng-click=\"section.uploader.clearQueue()\" ng-disabled=\"!section.uploader.queue.length\">\n" +
        "                                <span class=\"glyphicon glyphicon-trash\"></span> Remove all\n" +
        "                            </button>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <!-- upload section ends -->\n" +
        "\n" +
        "                    <!-- photos -->\n" +
        "                    <div ng-if=\"section.hasPhotos\">\n" +
        "                        <div photo-log section=\"section\" report-id=\"appendices.reportID\"></div>\n" +
        "                    </div>\n" +
        "                    <!-- photos ends -->\n" +
        "					<div ng-if=\"section.hasPhotos\" >\n" +
        "					<h4 class=\"border-bottom\">Other Uploaded Files</h4>\n" +
        "					</div>\n" +
        "                    <!-- files div -->\n" +
        "                    <div ng-show=\"section.files.length > 0\" class=\"table-responsive\">\n" +
        "                        <table  class=\"table table-condensed table-bordered table-hover \">\n" +
        "                            <thead>\n" +
        "                                <tr>\n" +
        "									\n" +
        "                                    <th>Filename</th>\n" +
        "                                    <th>Pages</th>\n" +
        "                                    <th>Size</th>\n" +
        "                                    <th>Upload Date</th>\n" +
        "                                    <th>Actions</th>\n" +
        "                                </tr>\n" +
        "                            </thead>\n" +
        "                            <tbody ui-sortable=\"appendices.sortableOptions\" ng-model=\"section.files\">\n" +
        "                                <tr ng-repeat=\"file in section.files\" class=\"{{file.fileType == 'pdf' && 'success' || ''}}\">\n" +
        "									\n" +
        "                                    <td>\n" +
        "                                       <span ng-if=\"file.fileType == 'pdf'\"><i class=\"fa fa-file-pdf-o fa-lg\"></i></span>\n" +
        "									<span ng-if=\"file.fileType == 'docx'\"><i class=\"fa fa-file-word-o fa-lg\"></i></span>\n" +
        "									<span ng-if=\"file.fileType == 'html'\"><i class=\"fa fa-file-code-o fa-lg\"></i></span>\n" +
        "									<span ng-if=\"file.fileType == 'pptx'\"><i class=\"fa fa-file-powerpoint-o fa-lg\"></i></span>\n" +
        "									<span ng-if=\"file.fileType == 'undefined'\"><i class=\"fa fa-file-o fa-lg\"></i></span>\n" +
        "									<span ng-if=\"file.fileType == 'txt'\"><i class=\"fa fa-file-text-o fa-lg\"></i></span>\n" +
        "									<span ng-if=\"file.fileType == 'xlsx'\"><i class=\"fa fa-file-excel-o fa-lg\"></i></span>\n" +
        "									<span ng-if=\"file.fileType == 'img'\"><i class=\"fa fa-file-image-o fa-lg\"></i></span> \n" +
        "										<a href=\"{{file.downloadURL}}\">{{file.fileName}}</a>\n" +
        "                                    </td>\n" +
        "                                    <td>{{file.pages}}</td>\n" +
        "                                    <td>{{!file.fileSize ? '' : file.fileSize > (1024 * 1024) ? (file.fileSize/1024/1024|number:2) + ' MB' : file.fileSize > 1024 ? (file.fileSize/1024|number:2) + ' KB' : file.fileSize + ' Bytes'}}</td><!-- {{file.uploadDateTime | date : \"dd-mm-yyyy H:mm:ss\" : 'UTC'}} -->\n" +
        "                                    <td>{{file.uploadDateTime}}</td>\n" +
        "                                    <td>\n" +
        "\n" +
        "                                        <div class=\"text-center\">\n" +
        "                                            <a class=\"btn btn-xs btn-default\" tooltip=\"Delete\" ng-click=\"appendices.deleteFile(file, section)\"><span class=\"glyphicon glyphicon-remove-circle\"> </span></a>\n" +
        "                                            <a class=\"btn  btn-xs btn-default\" tooltip=\"Move Up\" ng-click=\"appendices.moveUpFile($index, section)\"><span class=\"glyphicon glyphicon-chevron-up\"> </span></a>\n" +
        "                                            <a class=\"btn  btn-xs btn-default\" tooltip=\"Move Down\" ng-click=\"appendices.moveDownFile($index, section)\"><span class=\"glyphicon glyphicon-chevron-down\"> </span></a>\n" +
        "                                            <a class=\"btn  btn-xs btn-default\" tooltip=\"Edit\" ng-click=\"appendices.editFileDetails(file, section)\"><span class=\"glyphicon glyphicon-pencil\"> </span></a>\n" +
        "                                        </div>\n" +
        "\n" +
        "                                    </td>\n" +
        "                                </tr>\n" +
        "\n" +
        "                                <!-- files aggregation -->\n" +
        "                                <tr class=\"unsortable\">\n" +
        "									\n" +
        "                                    <td>\n" +
        "                                        Total of {{section.files && section.files.length ? section.files.length > 1 ? section.files.length + ' documents' : section.files.length + ' document' : 0 + ' documents'}}\n" +
        "                                    </td>\n" +
        "                                    <td>\n" +
        "                                        {{section.files.sum('pages')}}\n" +
        "                                    </td>\n" +
        "                                    <td>{{!section.totalFileSize ? '' : section.totalFileSize > (1024 * 1024) ? (section.totalFileSize/1024/1024|number:2) + ' MB' : section.totalFileSize > 1024 ? (section.totalFileSize/1024|number:2) + ' KB' : section.totalFileSize + ' Bytes'}}</td>\n" +
        "                                </tr>\n" +
        "                                <!-- files aggregation ends -->\n" +
        "                                <tr></tr>\n" +
        "                            </tbody>\n" +
        "                        </table>\n" +
        "                    </div>\n" +
        "					<div ng-show=\"section.files.length == 0\">\n" +
        "						<span>No Files have been uploaded to this appendix</span>\n" +
        "					</div>\n" +
        "                    <!-- files div ends -->\n" +
        "                </div>				\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "</div>\n" +
        "\n" +
        "\n" +
        "<script id=\"DeleteAppendixFile.html\" type=\"text/ng-template\">\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"cancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\">Delete Appendix File </h4>\n" +
        "    </div>\n" +
        "\n" +
        "    <form name=\"myFormAddTemplate\" novalidate>\n" +
        "\n" +
        "        <div class=\"modal-body \">\n" +
        "            <p><strong> You are about to delete \"{{toDelete.file.fileName}}\" Appendix File from Section: {{toDelete.section.sectionName}}. Are you sure you want to delete it?</strong></p>\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <a class=\"btn btn-primary\" role=\"button\" ng-click=\"deleteAppendixFile()\">Yes, Delete it </a>\n" +
        "            <a class=\"btn btn-default\" role=\"button\" ng-click=\"cancelDelete()\">No</a>\n" +
        "        </div>\n" +
        "    </form>\n" +
        "</script>\n" +
        "\n" +
        "<script id=\"UpdateAppendixFile.html\" type=\"text/ng-template\">\n" +
        "    <div class=\"modal-header \">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"cancelUpdate()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\">Update Appendix File </h4>\n" +
        "    </div>\n" +
        "    <form name=\"myFormAddTemplate\" novalidate cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "\n" +
        "        <div class=\"modal-body\">\n" +
        "            <form>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"filename\">Name:</label>\n" +
        "                    <div class=\"input-group col-md-6 col-lg-6 col-xs-12\">\n" +
        "                        <input id=\"filename\" class=\"form-control\" type=\"text\" placeholder=\"Enter a new name\" ng-model=\"toUpdate.file.fileName\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"Section\">Section:</label>\n" +
        "                    <div class=\"input-group col-md-6 col-lg-6 col-xs-12\">\n" +
        "                        <select class=\"form-control\" id=\"Section\" ng-options=\"section.sectionGUID as section.sectionName for section in toUpdate.sections\" ng-model=\"toUpdate.file.sectionGUID\"></select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "				\n" +
        "				\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"Included\">Included:</label>\n" +
        "                    <div class=\"input-group col-md-6 col-lg-6 col-xs-12\">\n" +
        "                        <input type=\"checkbox\" id=\"Included\" ng-model=\"toUpdate.file.isIncluded\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </form>\n" +
        "\n" +
        "        </div>\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"cancelUpdate()\">Cancel</button>\n" +
        "            <button type=\"button\" class=\"btn btn-primary\" ng-click=\"updateAppendixFile()\">Continue</button>\n" +
        "        </div>\n" +
        "    </form>\n" +
        "</script>\n" +
        "\n" +
        "<script id=\"appendixTool.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "    <div class=\"modal-header\">\n" +
        "        <h3>{{appendixTool.tool.label}}</h3>\n" +
        "    </div>\n" +
        "    <div class=\"modal-body\">\n" +
        "        <div id=\"appendixToolDiv\" ng-include=\"appendixTool.getTrustedUrl(appendixTool.tool.url)\" insert-submit-success-callback></div>\n" +
        "    </div>\n" +
        "\n" +
        "</script>\n" +
        "<script id=\"dllDeleteAll.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\">Delete Comments</h4>\n" +
        "    </div>\n" +
        "\n" +
        "\n" +
        "    <form name=\"myFormAddTemplate1\" novalidate>\n" +
        "\n" +
        "        <div class=\"modal-body \">\n" +
        "\n" +
        "            <strong>This will delete the selected comments. Are you sure you want to continue?</strong>\n" +
        "\n" +
        "        </div>\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDelete()\">Cancel</a>\n" +
        "            <a class=\"btn btn-primary\" role=\"button\" ng-click=\"deleteComments()\">Continue</a>\n" +
        "        </div>\n" +
        "    </form>\n" +
        "\n" +
        "</script>\n" +
        "\n" +
        "<script id=\"SelectDrawingToolOrders.html\" type=\"text/ng-template\">\n" +
        "  <div class=\"modal-header\">\n" +
        "								<button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"cancelToDrawingTool()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "								<h4 class=\"modal-title\" id=\"myModalLabel\">Select Drawing Tools Order:</h4>\n" +
        "							</div>\n" +
        "    <form name=\"myFormAddTemplate\" novalidate cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "\n" +
        "       <div class=\"modal-body\">\n" +
        "								<div class=\"table-responsive\">\n" +
        "									<table class=\"table table-striped table-condensed\">\n" +
        "										<thead>\n" +
        "											<tr>\n" +
        "												<th></th>\n" +
        "												<th>Order</th>\n" +
        "												<th>Date</th>\n" +
        "												<th>Status</th>\n" +
        "												<th>Desciption</th>\n" +
        "											</tr>\n" +
        "										</thead>\n" +
        "										<tbody>\n" +
        "											<tr ng-repeat=\"order in drawingToolOrders\">\n" +
        "											<td>\n" +
        "											<div class=\"radio\">\n" +
        "											<label>\n" +
        "												<input type=\"radio\" name=\"optionsRadios\" id=\"optionsRadios{{$index}}\" ng-model=\"drawingToolOrders.selectedEdrPropertyGuid\" value=\"{{order.edrPropertyGuid}}\">\n" +
        "											</label>\n" +
        "											</div>\n" +
        "												</td>\n" +
        "												<td>{{order.orderNumber}}</td>\n" +
        "												<!--td>{{order.creationDate | date: 'yyyy-MM-dd'}}</td-->\n" +
        "												<td class=\"site-number\">{{order.creationDate | date: 'MMM dd yyyy'}}</td>\n" +
        "												<td>{{order.status}}</td>\n" +
        "												<td>{{order.description}}</td>\n" +
        "											</tr>\n" +
        "											\n" +
        "											\n" +
        "										</tbody>\n" +
        "									</table>\n" +
        "								</div>\n" +
        "		   <div>\n" +
        "            <!--div ng-class=\"drawingToolOrders.StatusClass\">{{drawingToolOrders.StatusText}}</div-->\n" +
        "			   \n" +
        "			   <div class=\"alert\" ng-class=\"drawingToolOrders.StatusClass\" role=\"alert\" id=\"ResponseAlertDiv\" ng-show=\"drawingToolOrders.ResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"drawingToolOrders.ResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{drawingToolOrders.StatusText}}\n" +
        "        </div>\n" +
        "			   \n" +
        "        </div>\n" +
        "							</div>\n" +
        "	\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"cancelToDrawingTool()\">Cancel</button>\n" +
        "            <button type=\"button\" class=\"btn btn-primary\" ng-click=\"continueToDrawingTool()\">Continue</button>\n" +
        "        </div>\n" +
        "    </form>\n" +
        "</script>\n" +
        "");
}]);

angular.module("../app/modules/ReportAuthoring/views/assemble.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/assemble.html",
        "<div ng-controller=\"AssembleController as assemble\">\n" +
        "	\n" +
        "	<div class=\"container-fluid\">\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-md-4 nopadding\">\n" +
        "				<ul class=\"nav nav-tabs nav-tabs-sm report-write-tab\" ng-init=\"reportTypeSelected = 'prevGeneratedReports';\">\n" +
        "                    <li role=\"presentation\" ng-click=\"assemble.openLeftPanel()\" class=\"active\"><a class=\"pointer tabfont\" ng-click=\"reportTypeSelected = 'prevGeneratedReports';setTooltipClass();\" aria-controls=\"prevGenerated\" role=\"tab\" data-toggle=\"tab\">Previously Generated Reports</a></li>\n" +
        "                    <li role=\"presentation\" ng-click=\"assemble.openLeftPanel()\"><a class=\"pointer tabfont\" ng-click=\"reportTypeSelected = 'prevEmailedReports';setTooltipClass();\" aria-controls=\"prevEmailed\" role=\"tab\" data-toggle=\"tab\">Previously E-mailed Reports</a></li>\n" +
        "\n" +
        "    </ul>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "    <div class=\"row\">\n" +
        "  \n" +
        "            <div id=\"leftContent\" class=\"nopadding\" ng-switch on=\"reportTypeSelected\">\n" +
        "                <div ng-switch-when=\"prevGeneratedReports\" class=\"leftContent nopadding col-md-4\" id=\"prevGenerated\">\n" +
        "                    <div class=\"alert alert-info\">\n" +
        "                        This list displays previously downloaded deliverables.\n" +
        "                        <br> Click the Download button to view the report.</div>\n" +
        "                    <!--                            <div class=\"alert alert-info\">No previously generated deliverables</div>-->\n" +
        "                    <div class=\"scrollDivleft\">\n" +
        "                        <table class=\"table table-striped\">\n" +
        "                            <tbody>\n" +
        "                                <tr>\n" +
        "                                    <td>\n" +
        "                                        By Prateek Sanadhya (EDR Applications Development Group)\n" +
        "                                        <br> on 11/17/2015 06:42:12 AM EST </td>\n" +
        "                                    <td>\n" +
        "                                        <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Download\"><span class=\"glyphicon glyphicon-download-alt\"></span></button>\n" +
        "                                    </td>\n" +
        "                                </tr>\n" +
        "                                <tr>\n" +
        "                                    <td>\n" +
        "                                        By Prateek Sanadhya (EDR Applications Development Group)\n" +
        "                                        <br> on 11/17/2015 06:42:12 AM EST </td>\n" +
        "                                    <td>\n" +
        "                                        <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Download\"><span class=\"glyphicon glyphicon-download-alt\"></span></button>\n" +
        "                                    </td>\n" +
        "                                </tr>\n" +
        "                                <tr>\n" +
        "                                    <td>\n" +
        "                                        By Prateek Sanadhya (EDR Applications Development Group)\n" +
        "                                        <br> on 11/17/2015 06:42:12 AM EST </td>\n" +
        "                                    <td>\n" +
        "                                        <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Download\"><span class=\"glyphicon glyphicon-download-alt\"></span></button>\n" +
        "                                    </td>\n" +
        "                                </tr>\n" +
        "                                <tr>\n" +
        "                                    <td>\n" +
        "                                        By Prateek Sanadhya (EDR Applications Development Group)\n" +
        "                                        <br> on 11/17/2015 06:42:12 AM EST </td>\n" +
        "                                    <td>\n" +
        "\n" +
        "                                        <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Download\"><span class=\"glyphicon glyphicon-download-alt\"></span></button>\n" +
        "                                    </td>\n" +
        "                                </tr>\n" +
        "                            </tbody>\n" +
        "                        </table>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <div ng-switch-when=\"prevEmailedReports\" class=\"leftContent nopadding col-md-4\"  id=\"prevEmailed\">\n" +
        "                    <div class=\"alert alert-info\">\n" +
        "                        This list displays emailed deliverables. Click the Disable button to disable a link.</div>\n" +
        "                    <!--                            <div class=\"alert alert-info\">No email links have been sent for this report</div>-->\n" +
        "                    <div class=\"scrollDivleft\">\n" +
        "                        <table class=\"table table-striped\">\n" +
        "                            <tbody>\n" +
        "                                <tr>\n" +
        "                                    <td>\n" +
        "                                        Sent to: <i>mewers@edrnet.com</i>\n" +
        "                                        <br> by Mike Ewers on 09/09/2015 06:54:53 PM ET\n" +
        "                                        <br><strong>Expires:</strong> on 11/17/2015 06:42:12 AM EST </td>\n" +
        "                                    <td>\n" +
        "                                        <button type=\"button\" class=\"btn btn-danger\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Disable\"><span class=\"glyphicon glyphicon-ban-circle\"></span></button>\n" +
        "                                    </td>\n" +
        "                                </tr>\n" +
        "                                <tr>\n" +
        "                                    <td>\n" +
        "                                        Sent to: <i>mewers@edrnet.com</i>\n" +
        "                                        <br> by Mike Ewers on 09/09/2015 06:54:53 PM ET\n" +
        "                                        <br><strong>Expires:</strong> on 11/17/2015 06:42:12 AM EST </td>\n" +
        "                                    <td>\n" +
        "                                        <button type=\"button\" class=\"btn btn-danger\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Disable\"><span class=\"glyphicon glyphicon-ban-circle\"></span></button>\n" +
        "                                    </td>\n" +
        "                                </tr>\n" +
        "                                <tr>\n" +
        "                                    <td>\n" +
        "                                        Sent to: <i>mewers@edrnet.com</i>\n" +
        "                                        <br> by Mike Ewers on 09/09/2015 06:54:53 PM ET\n" +
        "                                        <br><strong>Expires:</strong> on 11/17/2015 06:42:12 AM EST </td>\n" +
        "                                    <td>\n" +
        "                                        <button type=\"button\" class=\"btn btn-danger\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Disable\"><span class=\"glyphicon glyphicon-ban-circle\"></span></button>\n" +
        "                                    </td>\n" +
        "                                </tr>\n" +
        "                                <tr>\n" +
        "                                    <td>\n" +
        "                                        Sent to: <i>mewers@edrnet.com</i>\n" +
        "                                        <br> by Mike Ewers on 09/09/2015 06:54:53 PM ET\n" +
        "                                        <br><strong>Expires:</strong> on 11/17/2015 06:42:12 AM EST </td>\n" +
        "                                    <td>\n" +
        "                                        <button type=\"button\" class=\"btn btn-danger\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Disable\"><span class=\"glyphicon glyphicon-ban-circle\"></span></button>\n" +
        "                                    </td>\n" +
        "                                </tr>\n" +
        "                            </tbody>\n" +
        "                        </table>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "				<left-panel-slide-toggle></left-panel-slide-toggle>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "        <div id=\"rightContent\" class=\"col-md-8\">\n" +
        "            <div id=\"downloadPDFMsgDiv\" ng-show=\"assemble.downloadMsg\" class=\"alert alert-danger\" role=\"alert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"assemble.dismissAlertMsg()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                {{assemble.downloadMsg}}\n" +
        "            </div>\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-md-12 col-lg-12 col-sm-12 col-xs-12\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <div class=\"pull-left\">\n" +
        "                            <div data-toggle=\"buttons\" ng-click=\"assemble.selectedAll = !assemble.selectedAll; assemble.checkAll();\">\n" +
        "                                <label class=\"btn btn-default btn-sm\">\n" +
        "                                    <input id=\"selAll\" class=\"btn\" type=\"checkbox\" ng-model=\"assemble.selectedAll\" />Select All\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "\n" +
        "                        <div class=\" pull-right\">\n" +
        "                            <button type=\"submit\" class=\"btn btn-md btn-primary\" ng-click=\"assemble.dowloadPDF()\">Download PDF</button>\n" +
        "                            <button type=\"submit\" class=\"btn btn-md btn-primary\" ng-click=\"openEmailLinkToClientPopup()\">Email Link to Client</button>\n" +
        "                        </div>\n" +
        "                        <div class=\"clearfix\"></div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"scrollDiv\">\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-8 col-xs-12\">\n" +
        "                        <div class=\"checkbox\">\n" +
        "                            <label for=\"transmittalCheck\">\n" +
        "                                <input type=\"checkbox\" id=\"transmittalCheck\" ng-model=\"assemble.transmittalCheck\"> Transmittal Letter\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-md-4 col-xs-12 text-right\">\n" +
        "                        <button data-placement=\"bottom\" data-toggle=\"tooltip\" title=\"View\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span></button>\n" +
        "                        <button data-placement=\"bottom\" data-toggle=\"tooltip\" title=\"Edit\" class=\"btn btn-primary btn-sm\" ng-click=\"openEditTransmittalLetterPopup()\"><span class=\"glyphicon glyphicon-edit\"></span></button>\n" +
        "                        <button data-placement=\"bottom\" data-toggle=\"tooltip\" title=\"Upload\" class=\"btn btn-primary btn-sm\" ng-click=\"openUpload('Transmittal Letter')\"><span class=\"glyphicon glyphicon-upload\"></span></button>\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "               <div class=\"border-bottom\"></div>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-8 col-xs-12\">\n" +
        "                        <div class=\"checkbox\">\n" +
        "                            <label for=\"coverPageCheck\">\n" +
        "                                <input type=\"checkbox\" id=\"coverPageCheck\" ng-model=\"assemble.coverPageCheck\"> Cover Page\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-md-4 col-xs-12 text-right\">\n" +
        "                        <button data-placement=\"bottom\" data-toggle=\"tooltip\" title=\"View\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span></button>\n" +
        "                        <button data-placement=\"bottom\" data-toggle=\"tooltip\" title=\"Edit\" class=\"btn btn-primary btn-sm\" ng-click=\"openEditCoverPagePopup()\"><span class=\"glyphicon glyphicon-edit\"></span></button>\n" +
        "                        <button data-placement=\"bottom\" data-toggle=\"tooltip\" title=\"Upload\" class=\"btn btn-primary btn-sm\" ng-click=\"openUpload('Cover Page')\"><span class=\"glyphicon glyphicon-upload\"></span></button>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"border-bottom\"></div>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-8 col-xs-12\">\n" +
        "                        <div class=\"checkbox\">\n" +
        "                            <label for=\"execContentsCheck\">\n" +
        "                                <input type=\"checkbox\" id=\"execContentsCheck\" disabled=\"disabled\" checked> Table of Contents\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-md-4 col-xs-12 text-right\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "				<div class=\"border-bottom\"></div>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-8 col-xs-12\">\n" +
        "                        <div class=\"checkbox\">\n" +
        "                            <label for=\"execSummaryCheck\">\n" +
        "                                <input type=\"checkbox\" id=\"execSummaryCheck\" ng-model=\"assemble.execSummaryCheck\"> Executive Summary & Detailed Report\n" +
        "\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-md-4 col-xs-12 text-right\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"border-bottom\"></div>\n" +
        "\n" +
        "                <div class=\"table-responsive\">\n" +
        "                    <table class=\"table table-condensend table-bordered table-striped\">\n" +
        "                        <tbody>\n" +
        "                            <tr>\n" +
        "                                <th>Appendices</th>\n" +
        "                                <th># of Files</th>\n" +
        "                                <th># of Pages</th>\n" +
        "                                <th>Total Size</th>\n" +
        "                            </tr>\n" +
        "                            <tr>\n" +
        "                                <td>\n" +
        "                                    <div class=\"checkbox\">\n" +
        "                                        <label for=\"figureCheck\">\n" +
        "                                            <input type=\"checkbox\" id=\"figureCheck\" ng-model=\"assemble.figureCheck\" />A: Figures\n" +
        "                                        </label>\n" +
        "                                    </div>\n" +
        "                                </td>\n" +
        "                                <td colspan=\"3\" class=\"tableVerticaleMiddle\">\n" +
        "                                    No documents listed.\n" +
        "                                </td>\n" +
        "                            </tr>\n" +
        "\n" +
        "                            <tr>\n" +
        "                                <td>\n" +
        "                                    <div class=\"checkbox \">\n" +
        "                                        <label for=\"photographCheck\">\n" +
        "                                            <input type=\"checkbox\" id=\"photographCheck\" ng-model=\"assemble.photographCheck\" ng-change=\"assemble.photographChecked()\" />B: Photographs\n" +
        "                                        </label>\n" +
        "                                    </div>\n" +
        "                                    <div class=\"radio \">\n" +
        "                                        <label for=\"isPhotographChecked\">\n" +
        "                                            <input type=\"radio\" name=\"radio\" id=\"isPhotographChecked\" ng-model=\"assemble.isPhotographChecked\" value=\"portrait\" ng-change=\"assemble.photographCheckChange()\">Portrait</label>\n" +
        "                                    </div>\n" +
        "                                    <div class=\"radio\">\n" +
        "                                        <label for=\"isPhotographChecked\">\n" +
        "                                            <input type=\"radio\" name=\"radio\" id=\"isPhotographChecked\" ng-model=\"assemble.isPhotographChecked\" value=\"landscape\" ng-change=\"assemble.photographCheckChange()\">Landscape</label>\n" +
        "                                    </div>\n" +
        "                                </td>\n" +
        "                                <td class=\"tableVerticaleMiddle\">\n" +
        "                                    1\n" +
        "                                </td>\n" +
        "                                <td class=\"tableVerticaleMiddle\">\n" +
        "                                    1/1\n" +
        "                                </td>\n" +
        "                                <td class=\"tableVerticaleMiddle\">\n" +
        "                                    21.73 KB\n" +
        "\n" +
        "                                </td>\n" +
        "                            </tr>\n" +
        "\n" +
        "                            <tr>\n" +
        "                                <td>\n" +
        "                                    <div class=\"checkbox \">\n" +
        "                                        <label for=\"historyResearchCheck\">\n" +
        "                                            <input type=\"checkbox\" id=\"historyResearchCheck\" ng-model=\"assemble.historyResearchCheck\" />C: Historical Research\n" +
        "                                        </label>\n" +
        "                                    </div>\n" +
        "                                </td>\n" +
        "                                <td colspan=\"3\" class=\"tableVerticaleMiddle\">\n" +
        "                                    No documents listed.\n" +
        "                                </td>\n" +
        "                            </tr>\n" +
        "\n" +
        "                            <tr>\n" +
        "                                <td>\n" +
        "                                    <div class=\"checkbox \">\n" +
        "                                        <label for=\"regulatoryRecordsCheck\">\n" +
        "                                            <input type=\"checkbox\" id=\"regulatoryRecordsCheck\" ng-model=\"assemble.regulatoryRecordsCheck\" />D: Regulatory Records\n" +
        "                                        </label>\n" +
        "                                    </div>\n" +
        "                                </td>\n" +
        "                                <td colspan=\"3\" class=\"tableVerticaleMiddle\">\n" +
        "                                    No documents listed.\n" +
        "                                </td>\n" +
        "                            </tr>\n" +
        "\n" +
        "                            <tr>\n" +
        "                                <td>\n" +
        "                                    <div class=\"checkbox \">\n" +
        "                                        <label for=\"qualificationCheck\">\n" +
        "                                            <input type=\"checkbox\" id=\"qualificationCheck\" ng-model=\"assemble.qualificationCheck\" />E: Qualifications\n" +
        "                                        </label>\n" +
        "                                    </div>\n" +
        "                                </td>\n" +
        "                                <td colspan=\"3\" class=\"tableVerticaleMiddle\">\n" +
        "                                    No documents listed.\n" +
        "                                </td>\n" +
        "                            </tr>\n" +
        "\n" +
        "                            <tr>\n" +
        "                                <td>\n" +
        "                                    <div class=\"checkbox \">\n" +
        "                                        <label for=\"additionalDocumentationCheck\">\n" +
        "                                            <input type=\"checkbox\" id=\"additionalDocumentationCheck\" ng-model=\"assemble.additionalDocumentationCheck\" />F: Additional Documentation\n" +
        "                                        </label>\n" +
        "                                    </div>\n" +
        "                                </td>\n" +
        "                                <td colspan=\"3\" class=\"tableVerticaleMiddle\">\n" +
        "                                    No documents listed.\n" +
        "                                </td>\n" +
        "                            </tr>\n" +
        "\n" +
        "                        </tbody>\n" +
        "                    </table>\n" +
        "                </div>\n" +
        "\n" +
        "                <hr>\n" +
        "                <div class=\"alert alert-info\">\n" +
        "                    <div class=\"checkbox\">\n" +
        "                        <label>\n" +
        "                            <input type=\"checkbox\" />Reorder lettering of checked appendices. <a ng-click=\"openWhatsThis()\">What's This?</a>\n" +
        "                        </label>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        " </div>\n" +
        "<script id=\"orderEmailLinkToClient.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"Cancel()\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\" id=\"myModalLabel\">Email Deliverable Link</h4>\n" +
        "    </div>\n" +
        "    <form name=\"formOrderEmailLinkToClient\" novalidate>\n" +
        "        <div class=\"modal-body\">\n" +
        "            <!--                    <div class=\"alert alert-info\">Separate multiple email addresses with a ',' or ';'</div>-->\n" +
        "            <div class=\"form-horizontal\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"to\" class=\"col-sm-2 control-label\">To:\n" +
        "                    </label>\n" +
        "\n" +
        "                    <div class=\"col-sm-10\">\n" +
        "                        <textarea class=\"form-control\" id=\"to\" rows=\"3\"></textarea>\n" +
        "                        <div class=\"text-right\">\n" +
        "                            <button type=\"button\" class=\"btn btn-link btn-xs\"> find a contact</button>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"from\" class=\"col-sm-2 control-label\">From:</label>\n" +
        "                    <div class=\"col-sm-10\">\n" +
        "                        <p class=\"form-control-static\">email@example.com</p>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"subject\" class=\"col-sm-2 control-label\">Subject:</label>\n" +
        "                    <div class=\"col-sm-10\">\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"subject\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"message\" class=\"col-sm-2 control-label\">Message:</label>\n" +
        "                    <div class=\"col-sm-10\">\n" +
        "                        <textarea class=\"form-control\" id=\"message\" rows=\"6\"></textarea>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <div class=\"col-sm-offset-2 col-sm-10\">\n" +
        "                        <div class=\"checkbox\">\n" +
        "                            <label for=\"sendEmailAddress\">\n" +
        "                                <input type=\"checkbox\" id=\"sendEmailAddress\" > Send a copy of this email to your email address\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <hr>\n" +
        "\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"panel-group\" id=\"accordion\">\n" +
        "                <div class=\"panel panel-default\" id=\"panel1\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        <h4 class=\"panel-title\">\n" +
        "        <a data-toggle=\"collapse\" data-target=\"#instructions\" class=\"pointer collapsed\">Instructions to Recipient:</a>\n" +
        "      </h4>\n" +
        "                    </div>\n" +
        "                    <div id=\"instructions\" class=\"panel-collapse collapse\">\n" +
        "                        <div class=\"panel-body\">\n" +
        "                            <p><strong>\n" +
        "This text will be automatically appended to the bottom of your message-- do not copy it into your message.\n" +
        "                               </strong></p>\n" +
        "                            <p>\n" +
        "                                1. Open this link in your web browser: [LINK WILL BE INSERTED HERE]</p>\n" +
        "                            <p>2. The ensuing web page will prompt you for your password. Enter this password: [PASSWORD WILL BE INSERTED HERE]\n" +
        "                            </p>\n" +
        "                            <p>3. Click the 'Download Report' button.</p>\n" +
        "                            <p>4. When prompted, save the file to your computer.</p>\n" +
        "\n" +
        "\n" +
        "                            <p>\n" +
        "                                This link will expire on 12/15/15 at 04:16:43 AM EST\n" +
        "                                <br> If you have any technical difficulties accessing the report, please contact PARCEL Support by calling 866-475-1272 or emailing parcelsupport@edrnet.com.\n" +
        "                            </p>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <button type=\"button\" class=\"btn btn-md btn-default\" data-dismiss=\"modal\" ng-click=\"Cancel()\">Cancel</button>\n" +
        "            <button class=\"btn btn-md btn-primary\" type=\"button\">Send Email</button>\n" +
        "\n" +
        "        </div>\n" +
        "    </form>\n" +
        " \n" +
        "</script>\n" +
        "\n" +
        "<script id=\"whatsThis.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"Cancel()\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\" id=\"myModalLabel\">Reorder lettering of checked appendices</h4>\n" +
        "    </div>\n" +
        "    <form name=\"formWhatsThis\" novalidate>\n" +
        "        <div class=\"modal-body\"> \n" +
        "              \n" +
        "             <p>   This checkbox allows you to control the lettering/numbering of your appendices when all appendices are not included in the deliverable.</p>\n" +
        "                   <p>When it is checked, appendix letters will be adjusted so that all letters are in consecutive order.</p>\n" +
        "                   <p>In other words, if you check appendices A and C, Appendix 'C' will be re-lettered as Appendix 'B' in the generated PDF report.</p>\n" +
        "                   <p>The reordered appendices will use your template's naming convention. For example, if the appendices in your template have been numbered 11.1, 11.2, 11.3, etc, that convention will be used when reordering.</p>\n" +
        "                   <p><strong>Users should be careful that any references to appendix letters in the body of their report match after the lettering is adjusted.</strong></p>\n" +
        "            \n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"Cancel()\">OK</button>\n" +
        "\n" +
        "\n" +
        "        </div>\n" +
        "    </form>\n" +
        "\n" +
        "\n" +
        "\n" +
        "</script>\n" +
        "\n" +
        "<script id=\"editTransmittalLetter.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"Cancel()\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\" id=\"myModalLabel\">Edit Transmittal Letter</h4>\n" +
        "    </div>\n" +
        "    <form name=\"formEditTransmittalLetter\" novalidate>\n" +
        "        <div class=\"modal-body\">\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-md-6 col-lg-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <div class=\"checkbox\">\n" +
        "                            <label class=\"control-label\" for=\"date\">\n" +
        "                             <input id=\"date\" type=\"checkbox\"> Date\n" +
        "                            </label>\n" +
        "                          </div> \n" +
        "                        <div class=\"input-group\">\n" +
        "                            <input type=\"text\" class=\"form-control\" datetime-picker=\"dd MMM yyyy\" ng-model=\"transmittalDate\" is-open=\"open.transmittalDate\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"false\" name=\"transmittalDate\" ng-click=\"openCalendar($event, 'transmittalDate')\">\n" +
        "                            <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-md btn-default\" ng-click=\"openCalendar($event, 'transmittalDate')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                        </div>\n" +
        "                      \n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"col-md-6 col-lg-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <div class=\"checkbox\">\n" +
        "                            <label class=\"control-label\" for=\"to\">\n" +
        "                             <input id=\"date\" type=\"checkbox\"> To\n" +
        "                            </label>\n" +
        "                          </div>  \n" +
        "                        <textarea class=\"form-control\" rows=\"5\"></textarea>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-md-6 col-lg-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"salutation\">Salutation</label>\n" +
        "                        <textarea class=\"form-control\" id=\"salutation\" rows=\"5\"></textarea>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"col-md-6 col-lg-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"body\">Body</label>\n" +
        "                        <textarea class=\"form-control\" id=\"body\" rows=\"5\"></textarea>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-4\">\n" +
        "                        <label for=\"closing\">Closing&nbsp;&nbsp;\n" +
        "\n" +
        "                            <a class=\"pointer\" data-placement=\"bottom\" data-toggle=\"tooltip\" title=\"Sign Digitally\"><span class=\"glyphicon glyphicon-pencil\"></span></a>\n" +
        "\n" +
        "                        </label>\n" +
        "                        <textarea class=\"form-control\" id=\"closing\" rows=\"5\"></textarea>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-md-4\">\n" +
        "                          <div class=\"checkbox\">\n" +
        "                            <label class=\"control-label\" for=\"signature1\">\n" +
        "                             <input type=\"checkbox\"> Signature 1\n" +
        "                                <a class=\"pointer\" data-placement=\"bottom\" data-toggle=\"tooltip\" title=\"Sign Digitally\"><span class=\"glyphicon glyphicon-pencil\"></span></a>\n" +
        "                            </label>\n" +
        "                          </div> \n" +
        "                         \n" +
        "                        <textarea class=\"form-control\" id=\"signature1\" rows=\"5\"></textarea>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-md-4\">\n" +
        "                        <label for=\"signature2\">\n" +
        "                            <input type=\"checkbox\"> Signature 2 &nbsp;&nbsp;<a class=\"pointer\" data-placement=\"bottom\" data-toggle=\"tooltip\" title=\"Sign Digitally\"><span class=\"glyphicon glyphicon-pencil\"></span></a></label>\n" +
        "                        <textarea class=\"form-control\" id=\"signature2\" rows=\"5\"></textarea>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "        </div>\n" +
        " \n" +
        "        <div class=\"modal-footer\">\n" +
        "            <button type=\"button\" class=\"btn btn-md btn-default\" data-dismiss=\"modal\" ng-click=\"Cancel()\">Cancel</button>\n" +
        "            <button class=\"btn btn-md btn-primary\" type=\"button\">Save</button>\n" +
        "\n" +
        "\n" +
        "        </div>\n" +
        "    </form>\n" +
        "\n" +
        "    <script>\n" +
        "        $('[data-toggle=\"tooltip\"]').tooltip();\n" +
        "    </script>\n" +
        "\n" +
        "</script>\n" +
        "\n" +
        "<script id=\"editCoverPage.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"Cancel()\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\" id=\"myModalLabel\">Edit Cover Page</h4>\n" +
        "    </div>\n" +
        "    <form name=\"formWhatsThis\" novalidate>\n" +
        "        <div class=\"modal-body\">\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-md-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"reporttitle\">Report Title</label>\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"reporttitle\">\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <input type=\"text\" class=\"form-control\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"col-md-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"siteaddress\">Site Address</label>\n" +
        "                        <textarea class=\"form-control\" id=\"siteaddress\" rows=\"3\"></textarea>\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <div class=\"row\">\n" +
        "                            <div class=\"col-md-6\">\n" +
        "                                <label for=\"city\">City</label>\n" +
        "                                <input type=\"text\" id=\"city\" class=\"form-control\">\n" +
        "                            </div>\n" +
        "                            <div class=\"col-md-3\">\n" +
        "                                <label for=\"state\">State</label>\n" +
        "                                <input type=\"text\" id=\"state\" class=\"form-control\">\n" +
        "                            </div>\n" +
        "                            <div class=\"col-md-3\">\n" +
        "                                <label for=\"zip\">Zip</label>\n" +
        "                                <input type=\"text\" id=\"zip\" class=\"form-control\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <hr>\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-md-6 col-lg-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"preparedfor\">Prepared for</label>\n" +
        "                        <textarea class=\"form-control\" rows=\"1\" id=\"preparedFor\"></textarea>\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"address\">Address</label>\n" +
        "                        <textarea class=\"form-control\" rows=\"3\" id=\"address\"></textarea>\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <div class=\"row\">\n" +
        "                            <div class=\"col-md-6\">\n" +
        "                                <label for=\"city_1\">City</label>\n" +
        "                                <input type=\"text\" id=\"city_1\" class=\"form-control\">\n" +
        "                            </div>\n" +
        "                            <div class=\"col-md-3\">\n" +
        "                                <label for=\"state_1\">State</label>\n" +
        "                                <input type=\"text\" id=\"state_1\" class=\"form-control\">\n" +
        "                            </div>\n" +
        "                            <div class=\"col-md-3\">\n" +
        "                                <label for=\"zip_1\">Zip</label>\n" +
        "                                <input type=\"text\" id=\"zip_1\" class=\"form-control\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"col-md-6 col-lg-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"preparedby\">Prepared by</label>\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"preparedby\">\n" +
        "\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"address1\">Address</label>\n" +
        "                        <textarea class=\"form-control\" id=\"address1\" rows=\"3\"></textarea>\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <div class=\"row\">\n" +
        "                            <div class=\"col-md-6\">\n" +
        "                                <label for=\"city_2\">City</label>\n" +
        "                                <input type=\"text\" id=\"city_2\" class=\"form-control\">\n" +
        "                            </div>\n" +
        "                            <div class=\"col-md-3\">\n" +
        "                                <label for=\"state_2\">State</label>\n" +
        "                                <input type=\"text\" id=\"state_2\" class=\"form-control\">\n" +
        "                            </div>\n" +
        "                            <div class=\"col-md-3\">\n" +
        "                                <label for=\"zip_2\">Zip</label>\n" +
        "                                <input type=\"text\" id=\"zip_2\" class=\"form-control\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <hr>\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-md-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"jobnumber\">Job Number</label>\n" +
        "                        <input type=\"text\" class=\"form-control\" id=\"jobnumber\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"col-md-6\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"reportdate\">Report Date</label>\n" +
        "                        <div class=\"input-group\">\n" +
        "                            <input type=\"text\" class=\"form-control\" datetime-picker=\"dd MMM yyyy\" ng-model=\"coverReportDate\" is-open=\"open.coverReportDate\" enable-time=\"false\" datepicker-options=\"dateOptions\" date-disabled=\"disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"false\" name=\"coverReportDate\" ng-click=\"openCalendar($event, 'coverReportDate')\">\n" +
        "                            <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default\" ng-click=\"openCalendar($event, 'coverReportDate')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "            </div> \n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"Cancel()\">Cancel</button>\n" +
        "            <button class=\"btn btn-primary\" type=\"submit\">Save</button>\n" +
        "\n" +
        "        </div>\n" +
        " \n" +
        "    </form>\n" +
        "</script>\n" +
        "<script id=\"upload.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"Cancel()\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\" id=\"myModalLabel\">Upload {{uploadLetter}}</h4>\n" +
        "    </div>\n" +
        "    <form name=\"formUploadTransmittalLetter\" novalidate>\n" +
        "        <div class=\"modal-body\">\n" +
        "\n" +
        "            <p>\n" +
        "                {{uploadLetter}} must be in PDF format.\n" +
        "            </p>\n" +
        "            <div ng-show=\"assemble.uploadError != '' && assemble.uploadError != undefined && assemble.uploadError != null\">\n" +
        "                <div class=\"alert alert-danger\">{{assemble.uploadError}}</div>\n" +
        "            </div>\n" +
        "           \n" +
        "                <div class=\"form-group\">\n" +
        "                    <button class=\"btn btn-md btn-success fileinput-button\" ng-class=\"{disabled: disabled}\" ng-click=\"assemble.uploadError = ''\"><i class=\"fa fa-file-text-o\"></i> Attach\n" +
        "                        <input id=\"file-3\" type=\"file\" data-file-input=\"files\" ngf-select ngf-change=\"upload($files)\" ngf-multiple=\"true\">\n" +
        "                    </button>\n" +
        "                    <button type=\"button\" class=\"btn btn-md btn-primary start\" ng-click=\"Upload()\">\n" +
        "                        <span class=\"glyphicon glyphicon-upload\"></span> Upload\n" +
        "                    </button>\n" +
        "                    <span class=\"AU_uploadFilename text-primary\" ng-repeat=\"file in files\"> {{file.name}}</span>\n" +
        "                </div>\n" +
        "                <!-- The global file processing state -->\n" +
        "                <span class=\"fileupload-process\"></span>\n" +
        " \n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"Cancel()\">Cancel</button>\n" +
        "\n" +
        "\n" +
        "        </div>\n" +
        "    </form> \n" +
        "</script>");
}]);

angular.module("../app/modules/ReportAuthoring/views/edrPortfolioOrder.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/edrPortfolioOrder.html",
        "<div class=\"container-fluid\">\n" +
        "    <div class=\"panel panel-default\">\n" +
        "        <div class=\"panel-body\">\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-lg-12 col-md-12\">\n" +
        "                    <h2 class=\"page-header\">EDR Portfolio Order</h2>\n" +
        "                    <h4>Project Name: {{portfolioOrderController.portfolioData.reports.projectName}}</h4>\n" +
        "                    <form class=\"form-horizontal\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"name\" class=\"col-sm-2 control-label\">Name:</label>\n" +
        "                            <div class=\"col-sm-4\">\n" +
        "                                <input type=\"text\" class=\"form-control\" id=\"name\" ng-model=\"portfolioOrderController.user.name\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"email\" class=\"col-sm-2 control-label\">Email:</label>\n" +
        "                            <div class=\"col-sm-4\">\n" +
        "                                <input type=\"text\" class=\"form-control\" id=\"email\" ng-model=\"portfolioOrderController.user.email\">\n" +
        "                                <div class=\"checkbox\">\n" +
        "                                    <label>\n" +
        "                                        <input type=\"checkbox\" ng-model=\"portfolioOrderController.deliveryType\">Do not send PDF's via email\n" +
        "                                    </label>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"phone\" class=\"col-sm-2 control-label\">Phone:</label>\n" +
        "                            <div class=\"col-sm-4\">\n" +
        "                                <input type=\"text\" class=\"form-control\" id=\"phone\" ng-model=\"portfolioOrderController.user.phone\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </form>\n" +
        "\n" +
        "                    <div ng-if=\"!portfolioOrderController.portfolioData.reports\" class=\"alert alert-danger\" role=\"alert\">\n" +
        "                        <span>Property is not available here to place order on EDR.</span>\n" +
        "                    </div>\n" +
        "                    <div ng-if=\"portfolioOrderController.portfolioData.reports\">\n" +
        "                        <button type=\"submit\" class=\"btn btn-default\" ng-click=\"portfolioOrderController.checkAll();\">Check All</button>\n" +
        "                        <button type=\"submit\" class=\"btn btn-default\" ng-click=\"portfolioOrderController.uncheckAll();\">Uncheck All</button>\n" +
        "                        <div class=\"pull-right\">\n" +
        "                            <button type=\"submit\" class=\"btn btn-default\" ng-click=\"portfolioOrderController.createPortfolioOrders();\">Continue Order</button>\n" +
        "                        </div>\n" +
        "                        <hr>\n" +
        "                        <div class=\"alert\" role=\"alert\" ng-class=\"portfolioOrderController.userMsgAlertClass\" ng-show=\"portfolioOrderController.userMsg\">\n" +
        "                            <button type=\"button\" class=\"close\" ng-click=\"portfolioOrderController.userMsg = false;\" aria-label=\"Close\">\n" +
        "                                <span aria-hidden=\"true\">&times;</span>\n" +
        "                            </button>\n" +
        "                            <span ng-bind-html=\"portfolioOrderController.userMsg\"></span>                            \n" +
        "                        </div>\n" +
        "                        <form class=\"form-inline\">\n" +
        "                            <div class=\"table-responsive\" ng-repeat=\"report in portfolioOrderController.portfolioData.reports\">\n" +
        "                                <table class=\"table table-condensed table-bordered\">\n" +
        "                                    <tr>\n" +
        "                                        <td rowspan=\"3\" class=\"text-center\">\n" +
        "                                            <h3>{{$index + 1}}</h3>\n" +
        "                                            <div class=\"checkbox\">\n" +
        "                                                <label>\n" +
        "                                                    <input type=\"checkbox\" ng-model=\"report.selected\">\n" +
        "                                                </label>\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                        <!--<td>\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label>Status:</label>\n" +
        "                                                <p class=\"form-control-static\"><span class=\"glyphicon glyphicon-ok\"></span></p>\n" +
        "                                            </div>\n" +
        "                                        </td>-->\n" +
        "                                        <td>\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label>Prop#:</label>\n" +
        "                                                <p class=\"form-control-static\">{{report.property.propertyNumber}}</p>\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                        <td>\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label>Addr:</label>\n" +
        "                                                <p class=\"form-control-static\">\n" +
        "                                                    <span ng-if=\"report.property.propertyName.length\">{{report.property.propertyName}}, </span>\n" +
        "                                                    <span ng-if=\"report.property.address1.length\">{{report.property.address1}}, </span>\n" +
        "                                                    <span ng-if=\"report.property.address2.length\">{{report.property.address2}}, </span>\n" +
        "                                                    <span ng-if=\"report.property.city.length\">{{report.property.city}}, </span>\n" +
        "                                                    <span ng-if=\"report.property.state.length\">{{report.property.state}}</span>\n" +
        "                                                </p>\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                        <td>\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label>Lat:</label>\n" +
        "                                                <p class=\"form-control-static\">{{report.property.latitude}}</p>\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                        <td>\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label>Long:</label>\n" +
        "                                                <p class=\"form-control-static\">{{report.property.longitude}}</p>\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                        <td>\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label>Conf:</label>\n" +
        "                                                <p class=\"form-control-static\"><span class=\"glyphicon glyphicon-globe pointer\" ng-click=\"portfolioOrderController.mapClick(report.property);\" tooltip=\"Confirm location: Manually adjust latitude and longitude with a map.\" tooltip-placement=\"left\"></span></p>\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                    </tr>\n" +
        "                                    <tr>\n" +
        "                                        <td>\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"po{{$index}}\" class=\"control-label\">PO#:</label>\n" +
        "                                                <input type=\"text\" class=\"form-control\" id=\"po{{$index}}\" ng-model=\"report.poNumber\">\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                        <td>\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"proj{{$index}}\" class=\"control-label\">Proj#:</label>\n" +
        "                                                <input type=\"text\" class=\"form-control\" id=\"proj{{$index}}\" ng-model=\"report.projectNumber\">\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                        <td>\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"pkg{{$index}}\" class=\"control-label\">Pkg:</label>\n" +
        "                                                <select class=\"form-control\" id=\"pkg{{$index}}\" ng-model=\"report.portfolioProductCode\">\n" +
        "                                                    <option value=\"\">-- Select --</option>\n" +
        "                                                    <option ng-repeat=\"package in portfolioOrderController.edrPackages\" value=\"package.portfolioProductCode\">{{package.name}}</option>\n" +
        "                                                </select>\n" +
        "                                                <span class=\"glyphicon glyphicon-arrow-down pointer\" tooltip=\"Copy this value into rest of columns\" ng-click=\"portfolioOrderController.copyToOthers('portfolioProductCode', report.portfolioProductCode);\"></span>\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                        <td>\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"field\" class=\"control-label\">Field Chk:</label>\n" +
        "                                                <div class=\"checkbox\">\n" +
        "                                                    <label>\n" +
        "                                                        <input type=\"checkbox\" ng-model=\"report.fieldChk\">\n" +
        "                                                    </label>\n" +
        "                                                </div>\n" +
        "                                                <span class=\"glyphicon glyphicon-arrow-down pointer\" tooltip=\"Copy this value into rest of columns\" ng-click=\"portfolioOrderController.copyToOthers('fieldChk', report.fieldChk);\"></span>\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                        <td colspan=\"2\">\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"searchDist{{$index}}\" class=\"control-label\">Srch Dist:</label>\n" +
        "                                                <select class=\"form-control\" id=\"searchDist{{$index}}\" ng-model=\"report.searchDistanceSetID\">\n" +
        "                                                    <option value=\"\">-- Select --</option>\n" +
        "                                                    <option ng-repeat=\"distance in portfolioOrderController.searchDistances\" value=\"{{distance.id}}\">{{distance.name}}</option>\n" +
        "                                                </select>\n" +
        "                                                <span class=\"glyphicon glyphicon-arrow-down pointer\" tooltip=\"Copy this value into rest of columns\" tooltip-placement=\"left\" ng-click=\"portfolioOrderController.copyToOthers('searchDistanceSetID', report.searchDistanceSetID);\"></span>\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                    </tr>\n" +
        "                                    <tr>\n" +
        "                                        <td colspan=\"2\">\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"emailNotification{{$index}}\">Email Notifactions To:</label>\n" +
        "                                                <textarea class=\"form-control\" rows=\"3\" id=\"emailNotification{{$index}}\" ng-model=\"report.emailNotificationsTo\" field-validation=\"Email\"></textarea>\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                        <td colspan=\"4\">\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"siteComments{{$index}}\" class=\"control-label\">Site Comments:</label>\n" +
        "                                                <textarea class=\"form-control\" rows=\"3\" id=\"siteComments{{$index}}\" ng-model=\"report.siteComments\"></textarea>\n" +
        "                                            </div>\n" +
        "                                        </td>\n" +
        "                                    </tr>\n" +
        "                                </table>\n" +
        "                            </div>\n" +
        "                        </form>\n" +
        "                        <div class=\"pull-right\">\n" +
        "                            <button type=\"submit\" class=\"btn btn-default\" ng-click=\"portfolioOrderController.createPortfolioOrders();\">Continue Order</button>\n" +
        "                        </div>\n" +
        "                        <div ng-include src=\"'app/modules/ReportAuthoring/views/orderDBReport.html'\" data-onload=\"portfolioOrderController.openEdrCredentialsModal();\"></div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "\n" +
        "<script id=\"map.html\" type=\"text/ng-template\">\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\" id=\"myLargeModalLabel\">Parcel Site Locator</h4>\n" +
        "    </div>\n" +
        "\n" +
        "    <form name=\"myFormAddTemplate1\" class=\"form-horizontal\" novalidate>\n" +
        "        <div class=\"modal-body\">\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"address\" class=\"col-sm-4 control-label align-left\">Address</label>\n" +
        "                        <div class=\"col-sm-8\">\n" +
        "                            <input type=\"text\" class=\"form-control\" id=\"address\" name=\"address\" ng-model=\"geocodeObj.address\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"city\" class=\"col-sm-4 control-label\">City:</label>\n" +
        "                        <div class=\"col-sm-8\">\n" +
        "                            <input type=\"text\" id=\"city\" class=\"form-control\" name=\"city\" ng-model=\"geocodeObj.city\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"state\" class=\"col-sm-4 control-label\">State:</label>\n" +
        "                        <div class=\"col-sm-8\">\n" +
        "                            <input type=\"text\" class=\"form-control\" id=\"state\" ng-model=\"geocodeObj.state\" name=\"State\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"zip\" class=\"col-sm-4 control-label\">Zip/Postal Code:</label>\n" +
        "                        <div class=\"col-sm-8\" field-validation=\"Zip/Postal Code\">\n" +
        "                            <input type=\"text\" class=\"form-control\" id=\"zip\" name=\"zip\" ng-model=\"geocodeObj.zipCode\" required>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label class=\"col-sm-4 control-label\"></label>\n" +
        "                        <div class=\"col-sm-3\">\n" +
        "                            <button class=\"btn btn-primary\" ng-click=\"geocodeClick()\">REGEOCODE LOCATION</button>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"Latitude\" class=\"col-sm-4 control-label\">Latitude:</label>\n" +
        "                        <div class=\"col-sm-8\">\n" +
        "                            <input type=\"text\" id=\"Latitude\" class=\"form-control\" name=\"latitude\" ng-model=\"geocodeObj.latitude\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"longitude\" class=\"col-sm-4 control-label\">Longitude:</label>\n" +
        "                        <div class=\"col-sm-8\">\n" +
        "                            <input type=\"text\" id=\"longitude\" class=\"form-control\" name=\"longitude\" ng-model=\"geocodeObj.longitude\">\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"longitude\" class=\"col-sm-4 control-label\">Match Quality:</label>\n" +
        "                        <div class=\"col-sm-8\">\n" +
        "                            <p class=\"form-control-static\">EDR</p>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\n" +
        "                    <!-- google map -->\n" +
        "                    <div class=\"col-md-12 col-lg-12 \">\n" +
        "                        <div map-Google mapDraggable=\"true\" mapZoom=\"10\" ng-model=\"geocodeObj\" class=\"google-map\"></div>\n" +
        "                        <i>You can drag map marker to locate your office.</i>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <a class=\"btn btn-default btn-sm\" role=\"button\" ng-click=\"CancelDelete()\">Cancel</a>\n" +
        "            <button type=\"button\" class=\"btn btn-primary btn-sm\" data-dismiss=\"modal\">refresh map</button>\n" +
        "            <button type=\"button\" class=\"btn btn-primary btn-sm\" ng-click=\"saveValues()\">Save latitude/longitude</button>\n" +
        "        </div>\n" +
        "    </form>\n" +
        "</script>");
}]);

angular.module("../app/modules/ReportAuthoring/views/generalInformationForTOC.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/generalInformationForTOC.html",
        "<div cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">           \n" +
        "            <h3 class=\"border-bottom\">General Information</h3>\n" +
        "            <div class=\"alert\" role=\"alert\" ng-class=\"generalInformationForm.userMsgAlertClass\" ng-show=\"generalInformationForm.userMsg\">\n" +
        "                <span ng-bind-html=\"generalInformationForm.userMsg\"></span>\n" +
        "            </div>\n" +
        "            <form>\n" +
        "                <div ng-if=\"generalInformationForm.data.generalInformation.isOrderDatabase == 'true'\">\n" +
        "                    <div class=\"dropdown\">\n" +
        "                        <button class=\"btn btn-default dropdown-toggle\" type=\"button\" id=\"orderdatabase\" aria-haspopup=\"true\" aria-expanded=\"true\">Order Database Reports <span class=\"caret\"></span></button>\n" +
        "                        <ul class=\"dropdown-menu\" aria-labelledby=\"orderdatabase\">\n" +
        "                            <li><a href=\"\" ng-click=\"generalInformationForm.openEdrCredentialsModal('singleSite');\">Single-Site Project Order</a></li>\n" +
        "                            <li><a target=\"_blank\" ui-sref=\"edrPortfolioOrder(generalInformationForm.portfolioOrderParamObj)\">Place Portfolio Order</a></li>\n" +
        "                        </ul>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <h4>EDR Order Status for: {{generalInformationForm.projectName}}</h4>\n" +
        "                    <div class=\"row\" ng-include src=\"'app/modules/ProjectDashboard/views/orderStatus.html'\"></div>\n" +
        "                </div>\n" +
        "                <div class=\"row\" ng-show=\"generalInformationForm.data.generalInformation.instructions.html\">\n" +
        "                    <div class=\"col-lg-12\">\n" +
        "                        <div class=\"panel-group top-margin\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n" +
        "                            <div class=\"panel panel-warning\">\n" +
        "                                <div class=\"panel-heading\" role=\"tab\" id=\"headingOne\">\n" +
        "                                    <h4 class=\"panel-title\">\n" +
        "                                <a role=\"button\" data-toggle=\"collapse\" data-parent=\"#accordion\" data-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" class=\"\">Instructions :</a>\n" +
        "                            </h4>\n" +
        "                                </div>\n" +
        "                                <div id=\"collapseOne\" class=\"panel-collapse collapse in\" role=\"tabpanel\" aria-labelledby=\"headingOne\" aria-expanded=\"true\">\n" +
        "                                    <div class=\"panel-body\">\n" +
        "                                        <div>\n" +
        "                                            <span ng-bind-html=\"generalInformationForm.instruction\"></span>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-12 col-xs-12\">\n" +
        "                        <div ng-repeat=\"onLeftDataField in generalInformationForm.orderedDataFields = (generalInformationForm.data.generalInformation.dataFields | orderBy: 'orderIndex')\">\n" +
        "                            <div ng-if=\"$even\" general-info-data-field info-field=\"onLeftDataField\" company-offices=\"generalInformationForm.offices\"></div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-12 col-xs-12\">\n" +
        "                        <div ng-repeat=\"onLeftDataField in generalInformationForm.orderedDataFields\">\n" +
        "                            <div ng-if=\"$odd\" general-info-data-field info-field=\"onLeftDataField\" company-offices=\"generalInformationForm.offices\"></div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </form>          \n" +
        "</div>\n" +
        "<div ng-include src=\"'app/modules/ReportAuthoring/views/orderDBReport.html'\"></div>");
}]);

angular.module("../app/modules/ReportAuthoring/views/generalInformationForm.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/generalInformationForm.html",
        "<div class=\"container-fluid\" cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "    <div class=\"panel panel-default\">\n" +
        "        <div class=\"panel-body\">\n" +
        "            <h2 class=\"page-header\">General Information</h2>\n" +
        "            <div class=\"alert\" role=\"alert\" ng-class=\"generalInformationForm.userMsgAlertClass\" ng-show=\"generalInformationForm.userMsg\">\n" +
        "                <span ng-bind-html=\"generalInformationForm.userMsg\"></span>\n" +
        "            </div>\n" +
        "            <form>\n" +
        "                <div ng-if=\"generalInformationForm.data.generalInformation.isOrderDatabase == 'true'\">\n" +
        "                    <div class=\"dropdown\">\n" +
        "                        <button class=\"btn btn-default dropdown-toggle\" type=\"button\" id=\"orderdatabase\" aria-haspopup=\"true\" aria-expanded=\"true\">Order Database Reports <span class=\"caret\"></span></button>\n" +
        "                        <ul class=\"dropdown-menu\" aria-labelledby=\"orderdatabase\">\n" +
        "                            <li><a href=\"\" ng-click=\"generalInformationForm.openEdrCredentialsModal('singleSite');\">Single-Site Project Order</a></li>\n" +
        "                            <li><a target=\"_blank\" ui-sref=\"edrPortfolioOrder(generalInformationForm.portfolioOrderParamObj)\">Place Portfolio Order</a></li>\n" +
        "                        </ul>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <h4>EDR Order Status for: {{generalInformationForm.projectName}}</h4>\n" +
        "                    <div class=\"row\" ng-include src=\"'app/modules/ProjectDashboard/views/orderStatus.html'\"></div>\n" +
        "                </div>\n" +
        "                <div class=\"row\" ng-show=\"generalInformationForm.data.generalInformation.instructions.html\">\n" +
        "                    <div class=\"col-lg-12\">\n" +
        "                        <div class=\"panel-group top-margin\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n" +
        "                            <div class=\"panel panel-warning\">\n" +
        "                                <div class=\"panel-heading\" role=\"tab\" id=\"headingOne\">\n" +
        "                                    <h4 class=\"panel-title\">\n" +
        "                                <a role=\"button\" data-toggle=\"collapse\" data-parent=\"#accordion\" data-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" class=\"\">Instructions :</a>\n" +
        "                            </h4>\n" +
        "                                </div>\n" +
        "                                <div id=\"collapseOne\" class=\"panel-collapse collapse in\" role=\"tabpanel\" aria-labelledby=\"headingOne\" aria-expanded=\"true\">\n" +
        "                                    <div class=\"panel-body\">\n" +
        "                                        <div>\n" +
        "                                            <span ng-bind-html=\"generalInformationForm.instruction\"></span>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-6 col-xs-12\">\n" +
        "                        <div ng-repeat=\"onLeftDataField in generalInformationForm.orderedDataFields = (generalInformationForm.data.generalInformation.dataFields | orderBy: 'orderIndex')\">\n" +
        "                            <div ng-if=\"$even\" general-info-data-field info-field=\"onLeftDataField\" company-offices=\"generalInformationForm.offices\"></div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-md-6 col-xs-12\">\n" +
        "                        <div ng-repeat=\"onLeftDataField in generalInformationForm.orderedDataFields\">\n" +
        "                            <div ng-if=\"$odd\" general-info-data-field info-field=\"onLeftDataField\" company-offices=\"generalInformationForm.offices\"></div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </form>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "<div ng-include src=\"'app/modules/ReportAuthoring/views/orderDBReport.html'\"></div>");
}]);

angular.module("../app/modules/ReportAuthoring/views/history.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/history.html",
        "this is history html");
}]);

angular.module("../app/modules/ReportAuthoring/views/includeExclude.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/includeExclude.html",
        "<div class=\"btn-group pull-right\">\n" +
        "      <button type=\"button\" class=\"btn btn-default disabled\">Include in Report:</button>\n" +
        "      <button type=\"button\" title=\"Click to change status\" data-toggle=\"tooltip\" data-placement=\"top\" class=\"btn\" ng-class=\"{'btn-success': isIncludeFlag, 'btn-danger': !isIncludeFlag }\" ng-click=\"includeClick($event)\">{{isIncludedText}}</button>\n" +
        "    </div>");
}]);

angular.module("../app/modules/ReportAuthoring/views/llpQuestionnaire.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/llpQuestionnaire.html",
        "<div class=\"container-fluid\">\n" +
        "    <div class=\"row\">\n" +
        "        <div class=\"col-lg-12 col-md-12 col-sm-12\">\n" +
        "\n" +
        "            <h4 class=\"text-center\">USER QUESTIONNAIRE</h4>\n" +
        "\n" +
        "            <p>\n" +
        "                For Landowner Liability Protections (LLPs) offered by the Small Business Liability Relief and Brownfields Revitalization Act of 2001 (the \"Brownfields Amendments\"), the user must provide the following information (if available) to the environmental professional. As per the Brownfields Amendments, failure to provide this information could result in a determination that \"all appropriate inquiry\" is not complete.\n" +
        "            </p>\n" +
        "\n" +
        "            <div class=\"form-horizontal\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"respondentname\" class=\"col-sm-3 control-label\">Respondent Name:</label>\n" +
        "                    <div class=\"col-sm-5\">\n" +
        "                        <input id=\"respondentname\" type=\"text\" class=\"form-control\" ng-model=\"appendixTool.data.respondentName\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"date\" class=\"col-sm-3 control-label\">Date:</label>\n" +
        "                    <div class=\"col-sm-3 col-lg-2 col-md-2\">\n" +
        "                        <div class=\"input-group\">\n" +
        "                            <input type=\"text\" class=\"form-control\" id=\"date\" datetime-picker=\"MM/dd/yyyy\" ng-model=\"appendixTool.data.date\" is-open=\"appendixTool.open.date\" enable-time=\"false\" datepicker-options=\"appendixTool.dateOptions\" date-disabled=\"appendixTool.disabled(date, mode)\" close-on-date-selection=\"true\" datepicker-append-to-body=\"true\" name=\"draftDueDate\" ng-click=\"appendixTool.openCalendar($event, 'date')\" show-button-bar=\"false\" required>\n" +
        "                            <span class=\"input-group-btn\">\n" +
        "                            <button type=\"button\" class=\"btn btn-default\" ng-click=\"appendixTool.openCalendar($event, 'date')\"><i class=\"fa fa-calendar\"></i></button>\n" +
        "                        </span>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"col-sm-3 control-label\">Address:</label>\n" +
        "                    <div class=\"col-sm-5\">\n" +
        "                        <p class=\"form-control-static\">{{appendixTool.data.address}}</p>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div>\n" +
        "\n" +
        "                <div class=\"panel panel-default\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        <h4 class=\"panel-title\">1. Environmental Cleanup Liens</h4>\n" +
        "                    </div>\n" +
        "                    <div class=\"panel-body\">\n" +
        "                        <p>Are you aware of any environmental cleanup liens against the property that are filed or recorded under federal, tribal, state or local law?</p>\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.environmentalCleanupLiens\" value=\"1\" name=\"environmentalCleanupLiens\"> Yes\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.environmentalCleanupLiens\" value=\"0\" name=\"environmentalCleanupLiens\"> No\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"panel panel-default\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        <h4 class=\"panel-title\">2. Activity and Land Use Limitations</h4>\n" +
        "                    </div>\n" +
        "                    <div class=\"panel-body\">\n" +
        "                        <p>Are you aware of any AULs, such as engineering controls, land use restrictions or institutional controls that are in place at the site and/or have been filed or recorded in a registry under federal, tribal, state or local law?</p>\n" +
        "\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.activityandLandUseLimitations\" value=\"1\" name=\"activityandLandUseLimitations\"> Yes\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.activityandLandUseLimitations\" value=\"0\" name=\"activityandLandUseLimitations\"> No\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"panel panel-default\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        <h4 class=\"panel-title\">3. Specialized Knowledge or Experience</h4>\n" +
        "                    </div>\n" +
        "                    <div class=\"panel-body\">\n" +
        "                        <p>Do you have any specialized knowledge or experiences related to the property, nearby properties, or are you involved in the same line of business as the current or former occupants of the property or an adjoining property so that you would have specialized knowledge of the chemicals and processes used by this type of business?</p>\n" +
        "\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.specializedKnowledge\" value=\"1\" name=\"specializedKnowledge\"> Yes\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.specializedKnowledge\" value=\"0\" name=\"specializedKnowledge\"> No\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"panel panel-default\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        <h4 class=\"panel-title\">4. Purchase Price vs. Fair Market Value</h4>\n" +
        "                    </div>\n" +
        "                    <div class=\"panel-body\">\n" +
        "                        <p>Does the purchase price being paid for this property reasonably reflect the fair market value of the property?</p>\n" +
        "\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.priceVsMarketValue\" value=\"1\" name=\"priceVsMarketValue\"> Yes\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.priceVsMarketValue\" value=\"0\" name=\"priceVsMarketValue\"> No\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"panel panel-default\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        <h4 class=\"panel-title\">5. Commonly Known or Reasonably Ascertainable Information</h4>\n" +
        "                    </div>\n" +
        "                    <div class=\"panel-body\">\n" +
        "                        <p>Are you aware of commonly known or reasonably ascertainable information about the property that would help the environmental professional to identify conditions indicative of releases or threatened releases?</p>\n" +
        "\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.commonInfo\" value=\"1\" name=\"commonInfo\"> Yes\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.commonInfo\" value=\"0\" name=\"commonInfo\"> No\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"panel panel-default\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        5a. Do you know the past uses of the property?\n" +
        "                    </div>\n" +
        "                    <div class=\"panel-body\">\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.pastUse\" value=\"1\" name=\"pastUse\"> Yes\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.pastUse\" value=\"0\" name=\"pastUse\"> No\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"panel panel-default\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        5b. Do you know of specific chemicals that are present or were once were present at the property?\n" +
        "                    </div>\n" +
        "                    <div class=\"panel-body\">\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.chemicals\" value=\"1\" name=\"chemicals\"> Yes\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.chemicals\" value=\"0\" name=\"chemicals\"> No\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"panel panel-default\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        5c. Do you know of spills or other chemical releases that have taken place at the property?\n" +
        "                    </div>\n" +
        "                    <div class=\"panel-body\">\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.spills\" value=\"1\" name=\"spills\"> Yes\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.spills\" value=\"0\" name=\"spills\"> No\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"panel panel-default\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        5d. Do you know of any environmental cleanups that have taken place at the property?\n" +
        "                    </div>\n" +
        "                    <div class=\"panel-body\">\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.cleanups\" value=\"1\" name=\"cleanups\"> Yes\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.cleanups\" value=\"0\" name=\"cleanups\"> No\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                <div class=\"panel panel-default\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        <h4 class=\"panel-title\">6. Obviousness of the Presence or Likely Presence of Contamination</h4>\n" +
        "                    </div>\n" +
        "                    <div class=\"panel-body\">\n" +
        "                        <p>As the user of this ESA, based on your knowledge and experience related to the property are there any obvious indicators that point to the presence or likely presence of contamination at the property?</p>\n" +
        "\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.presenceOfContamination\" value=\"1\" name=\"presenceOfContamination\"> Yes\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                        <div class=\"radio\">\n" +
        "                            <label>\n" +
        "                                <input type=\"radio\" ng-model=\"appendixTool.data.presenceOfContamination\" value=\"0\" name=\"presenceOfContamination\"> No\n" +
        "                            </label>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"text-center\">\n" +
        "                <button type=\"button\" class=\"btn btn-md btn-default\" ng-click=\"appendixTool.cancel()\">Cancel </button>\n" +
        "                <button type=\"button\" class=\"btn btn-md btn-primary\" ng-click=\"appendixTool.submitPut()\">Save and Put file in Appendix </button>\n" +
        "                <button name=\"submitBtn\" type=\"submit\" class=\"btn btn-md btn-primary\" ng-click=\"appendixTool.submit($event)\">Save Changes </button>\n" +
        "            </div>\n" +
        "\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "<hr>");
}]);

angular.module("../app/modules/ReportAuthoring/views/manageCoverContacts.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/manageCoverContacts.html",
        "<div class=\"modal-header\">\n" +
        "    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"coverContact.CancelDelete()\"><span aria-hidden=\"true\">×</span></button>\n" +
        "    <h4 class=\"modal-title\" id=\"myLargeModalLabel\">Manage Cover Contacts</h4>\n" +
        "</div>\n" +
        "<form name=\"frmManageCoverContacts\" class=\"form-horizontal\" novalidate>\n" +
        "    <div class=\"modal-body\">\n" +
        "        <p><strong> Additional contacts for 20800 West Maple Road cover page</strong></p>\n" +
        "        <p>Note: Information printed on cover is based upon cover design. All fields listed here may not print.</p>\n" +
        "        <p>Note: The first contact printed on the cover is the Client from General Information.</p>\n" +
        "        <hr>\n" +
        "        <div ng-show=\"coverContact.errorMsg != '' && coverContact.errorMsg != null && coverContact.errorMsg != undefined\" class=\"alert alert-danger\" role=\"alert\" ng-class=\"danger\">\n" +
        "            <span>{{coverContact.errorMsg}}</span>\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"coverContact.errorMsg = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "        </div>\n" +
        "        \n" +
        "        <div ng-show=\"coverContact.successMsg != '' && coverContact.successMsg != null && coverContact.successMsg != undefined\" class=\"alert alert-success\" role=\"alert\" ng-class=\"success\">\n" +
        "            <span>{{coverContact.successMsg}}</span>\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"coverContact.successMsg = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "        </div>\n" +
        "        <div class=\"form-group required\">\n" +
        "            <label for=\"ClientCompany\" class=\"col-sm-3 col-md-3 col-lg-3 col-xs-12 control-label\">Client Company: </label>\n" +
        "            <div class=\"col-sm-8 col-md-8 col-lg-8 col-xs-12\" field-validation=\"Client Company\">\n" +
        "                <input type=\"text\" class=\"form-control\" id=\"ClientCompany\" ng-model=\"coverContact.clientCompany\" name=\"ClientCompany\" required>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        \n" +
        "        <div class=\"form-group required\">\n" +
        "            <label for=\"ClientContact\" class=\"col-sm-3 col-md-3 col-lg-3 col-xs-12 control-label\">Client Contact:</label>\n" +
        "            <div class=\"col-sm-8 col-md-8 col-lg-8 col-xs-12\" field-validation=\"Client Contact\">\n" +
        "                <input type=\"text\" class=\"form-control\" id=\"ClientContact\" ng-model=\"coverContact.clientContact\" name=\"ClientContact\" required>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        \n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"ClientAddress\" class=\"col-sm-3 col-md-3 col-lg-3 col-xs-12 control-label\">Client Address: </label>\n" +
        "            <div class=\"col-sm-8 col-md-8 col-lg-8 col-xs-12\">\n" +
        "                <input type=\"text\" class=\"form-control\" id=\"ClientAddress\" ng-model=\"coverContact.clientAddress\">\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        \n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"City\" class=\"col-sm-3 col-md-3 col-lg-3 col-xs-12 control-label\">Client City, State, Zip: </label>\n" +
        "            <div class=\"col-sm-3 col-md-3 col-lg-3 col-xs-12\">\n" +
        "                <input type=\"text\" class=\"form-control\" id=\"City\" ng-model=\"coverContact.clientCity\">\n" +
        "            </div>\n" +
        "            <div class=\"col-sm-3 col-md-3 col-lg-3 col-xs-12\">\n" +
        "                <input type=\"text\" class=\"form-control\" id=\"State\" ng-model=\"coverContact.clientState\">\n" +
        "            </div>\n" +
        "            <div class=\"col-sm-2 col-md-2 col-lg-2 col-xs-12\">\n" +
        "                <input type=\"text\" class=\"form-control\" id=\"Zip\" ng-model=\"coverContact.clientZip\">\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"ClientPhone\" class=\"col-sm-3 col-md-3 col-lg-3 col-xs-12 control-label\">Client Phone: </label>\n" +
        "            <div class=\"col-sm-8 col-md-8 col-lg-8 col-xs-12\">\n" +
        "                <input type=\"text\" class=\"form-control\" id=\"ClientPhone\" ng-model=\"coverContact.clientPhone\">\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"ClientFax\" class=\"col-sm-3 col-md-3 col-lg-3 col-xs-12 control-label\">Client Fax: </label>\n" +
        "            <div class=\"col-sm-8 col-md-8 col-lg-8 col-xs-12\">\n" +
        "                <input type=\"text\" class=\"form-control\" id=\"ClientFax\" ng-model=\"coverContact.clientFax\">\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"ClientEmail\" class=\"col-sm-3 col-md-3 col-lg-3 col-xs-12 control-label\">Client Email: </label>\n" +
        "            <div class=\"col-sm-8 col-md-8 col-lg-8 col-xs-12\" field-validation=\"Client Email\">\n" +
        "                <input type=\"email\" class=\"form-control\" id=\"ClientEmail\" name=\"ClientEmail\" ng-model=\"coverContact.clientEmail\">\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"form-group\">\n" +
        "            <div class=\"col-sm-8 col-md-8 col-lg-8 col-xs-12 col-sm-offset-3\">\n" +
        "                <button type=\"button\" class=\"btn btn-default\" ng-click=\"coverContact.addContact(frmManageCoverContacts)\" ng-show=\"!coverContact.isEditContact\"><span class=\"glyphicon glyphicon-plus\"></span>Add New Contact</button>\n" +
        "\n" +
        "                <button type=\"button\" class=\"btn btn-primary\" ng-show=\"coverContact.isEditContact\" ng-click=\"coverContact.updateContact(frmManageCoverContacts)\">Save</button>\n" +
        "\n" +
        "                <button type=\"button\" class=\"btn btn-default\" ng-show=\"coverContact.isEditContact\" ng-click=\"coverContact.isEditContact = false;coverContact.cancelEdit()\">Cancel</button>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"table-responsive\">\n" +
        "            <table class=\"table table-bordered\" ng-show=\"coverContact.contactsArr.length > 0\">\n" +
        "                <thead>\n" +
        "                    <tr>\n" +
        "                        <th ng-hide=\"true\">guid</th>\n" +
        "                        <th>Position</th>\n" +
        "                        <th>Client Company </th>\n" +
        "                        <th>Contact</th>\n" +
        "                        <th>Address</th>\n" +
        "                        <th>Client City</th>\n" +
        "                        <th>State</th>\n" +
        "                        <th>Zip</th>\n" +
        "                        <th>Phone</th>\n" +
        "                        <th>Fax</th>\n" +
        "                        <th>Email</th>\n" +
        "                        <th>Action</th>\n" +
        "                    </tr>\n" +
        "                </thead>\n" +
        "                <tbody>\n" +
        "                    <tr ng-repeat=\"contact in coverContact.contactsArr\">\n" +
        "                        <td>\n" +
        "                            <a class=\"btn btn-primary\" tooltip=\"Move Up\" ng-click=\"coverContact.moveUp($index)\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a>\n" +
        "                            <a class=\"btn btn-primary\" tooltip=\"Move Down\" ng-click=\"coverContact.moveDown($index)\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a>\n" +
        "                        </td>\n" +
        "                        <td>{{contact.clientCompany}}</td>\n" +
        "                        <td>{{contact.clientContact}}</td>\n" +
        "                        <td>{{contact.clientAddress}}</td>\n" +
        "                        <td>{{contact.clientCity}}</td>\n" +
        "                        <td>{{contact.clientState}}</td>\n" +
        "                        <td>{{contact.clientZip}}</td>\n" +
        "                        <td>{{contact.clientPhone}}</td>\n" +
        "                        <td>{{contact.clientFax}}</td>\n" +
        "                        <td>{{contact.clientEmail}}</td>\n" +
        "                        <td>\n" +
        "                            <a class=\"btn btn-primary\" tooltip=\"Edit\" ng-click=\"coverContact.isEditContact = true;coverContact.editCoverContact(contact)\"><span class=\"glyphicon glyphicon-pencil\"></span></a>\n" +
        "                            <a class=\"btn btn-danger\" tooltip=\"Delete\" ng-click=\"coverContact.deleteCoverContact(contact.contactGUID)\"><span class=\"glyphicon glyphicon-remove\"></span></a>\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                </tbody>\n" +
        "            </table>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</form>\n" +
        "\n" +
        "<div class=\"modal-footer\">\n" +
        "    <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"coverContact.CancelDelete()\">Close</button>\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportAuthoring/views/orderDBReport.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/orderDBReport.html",
        "<script id=\"orderDBReport.html\" type=\"text/ng-template\">\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button ng-if=\"OrderDbReportsCtrl.invokedFrom == 'SingleSiteOrder'\" type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"OrderDbReportsCtrl.closeModal()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <button ng-if=\"OrderDbReportsCtrl.invokedFrom == 'portfolioOrder'\" type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"OrderDbReportsCtrl.closeWindow()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\" id=\"myLargeModalLabel\">Order Database Reports</h4>\n" +
        "    </div>\n" +
        "\n" +
        "    <form name=\"edrCredentialModal\" class=\"form-horizontal\" novalidate>\n" +
        "        <div class=\"modal-body\">\n" +
        "            <div class=\"alert\" role=\"alert\" ng-class=\"OrderDbReportsCtrl.userMsgAlertClass\" ng-show=\"OrderDbReportsCtrl.userMsg\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"OrderDbReportsCtrl.userMsg = false;\" aria-label=\"Close\">\n" +
        "                    <span aria-hidden=\"true\">&times;</span>\n" +
        "                </button>\n" +
        "                <span ng-bind-html=\"OrderDbReportsCtrl.userMsg\"></span>                \n" +
        "            </div>\n" +
        "            <div ng-if=\"OrderDbReportsCtrl.invokedFrom == 'SingleSiteOrder'\">\n" +
        "                <h5><strong>Property Information</strong></h5>                \n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"col-sm-2 control-label\">Address:</label>\n" +
        "                    <div class=\"col-sm-10\">\n" +
        "                        <p class=\"form-control-static\">{{OrderDbReportsCtrl.order.address}} {{OrderDbReportsCtrl.order.cityStateZip}}</p>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"col-sm-2 control-label\">Latitude:</label>\n" +
        "                    <div class=\"col-sm-10\">\n" +
        "                        <p class=\"form-control-static\" ng-bind=\"OrderDbReportsCtrl.order.latitude\"></p>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label class=\"col-sm-2 control-label\">Longitude:</label>\n" +
        "                    <div class=\"col-sm-10\">\n" +
        "                        <p class=\"form-control-static\" ng-bind=\"OrderDbReportsCtrl.order.longitude\"></p>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <hr>\n" +
        "            </div>\n" +
        "            \n" +
        "            <strong>Send Email Notification when reports are delivered to PARCEL?</strong>\n" +
        "\n" +
        "            <div class=\"radio\">\n" +
        "                <label>\n" +
        "                    <input type=\"radio\" name=\"optionsRadios\" id=\"optionsRadios1\" value=\"option1\" checked> Yes\n" +
        "                </label>\n" +
        "\n" +
        "                <label>\n" +
        "                    <input type=\"radio\" name=\"optionsRadios\" id=\"optionsRadios1\" value=\"option1\" checked> No\n" +
        "                </label>\n" +
        "            </div>\n" +
        "            <hr>\n" +
        "            <div class=\"form-group\">\n" +
        "                <label class=\"control-label col-sm-4\" for=\"sendNotificationsTo\">Send Notifications To:</label>\n" +
        "                <div class=\"col-sm-8\">\n" +
        "                    <input type=\"text\" class=\"form-control\" id=\"sendNotificationsTo\" ng-model=\"OrderDbReportsCtrl.order.emailNotification\" aria-describedby=\"helpBlock2\">\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-lg-4 text-center\">\n" +
        "                    <strong>Data Provider:</strong>\n" +
        "                    <div class=\"text-center\"><img src=\"images/EDR_blue70.png\"></div>\n" +
        "                </div>\n" +
        "                <div class=\"col-lg-8\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"account\" class=\"col-sm-3 control-label\">Account#:</label>\n" +
        "                        <div class=\"col-sm-9\" field-validation=\"Account#\">\n" +
        "                            <input type=\"text\" class=\"form-control\" ng-model=\"OrderDbReportsCtrl.order.accountNo\" id=\"account\" name=\"accountNo\" required>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"password\" class=\"col-sm-3 control-label\">Password:</label>\n" +
        "                        <div class=\"col-sm-9\" field-validation=\"Password\">\n" +
        "                            <input type=\"password\" class=\"form-control\" ng-model=\"OrderDbReportsCtrl.order.password\" id=\"password\" name=\"edrPassword\" required>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <div class=\"col-sm-offset-3 col-sm-9\">\n" +
        "                            <div class=\"checkbox\">\n" +
        "                                <label>\n" +
        "                                    <input type=\"checkbox\" />Store My Account Information</label>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <button ng-if=\"OrderDbReportsCtrl.invokedFrom == 'SingleSiteOrder'\" class=\"btn btn-primary btn-sm\" data-dismiss=\"modal\" ng-click=\"OrderDbReportsCtrl.singleSiteOrder(edrCredentialModal);\">Place Single-Site Project Order</button>\n" +
        "            <a ng-if=\"OrderDbReportsCtrl.invokedFrom == 'portfolioOrder'\" ng-click=\"OrderDbReportsCtrl.closeWindow();\" class=\"btn btn-default btn-sm\" data-dismiss=\"modal\">Cancel</a>\n" +
        "            <button ng-if=\"OrderDbReportsCtrl.invokedFrom == 'portfolioOrder'\" class=\"btn btn-primary btn-sm\" data-dismiss=\"modal\" ng-click=\"OrderDbReportsCtrl.portfolioOrder(edrCredentialModal);\">Continue to place EDR Portfolio Order</button>\n" +
        "            <a ng-if=\"OrderDbReportsCtrl.invokedFrom == 'SingleSiteOrder'\" class=\"btn btn-default btn-sm\" role=\"button\" ng-click=\"OrderDbReportsCtrl.closeModal()\">Cancel</a>\n" +
        "        </div>\n" +
        "    </form>\n" +
        "</script>");
}]);

angular.module("../app/modules/ReportAuthoring/views/reportWrite.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/reportWrite.html",
        "<div ng-controller=\"CKEditorCtrl as ck\" cg-busy=\"ck.waitingProcessResources\">\n" +
        "    <div class=\"container-fluid\">\n" +
        "        <div class=\"row\">\n" +
        "            <div class=\"col-md-4 nopadding\">\n" +
        "                <ul class=\" nav nav-tabs nav-tabs-sm report-write-tab\">\n" +
        "                    <li id=\"li_toc\" class=\"active\" ng-click=\"ck.openLeftPanel()\"><a class=\"pointer\" ng-click=\" reportAuthoringWriteSelected = 'ToC';ck.tocTabClicked();ck.removeLocalStorage();\" aria-controls=\"toc\" role=\"tab\" data-toggle=\"tab\" aria-expanded=\"true\">ToC</a></li>\n" +
        "                    <li ng-click=\"ck.openLeftPanel()\"><a class=\"pointer\" ng-click=\" reportAuthoringWriteSelected = 'Library';ck.selectedLibraryChanged();ck.removeLocalStorage();\" aria-controls=\"library\" role=\"tab\" data-toggle=\"tab\">Library</a></li>\n" +
        "                    <li id=\"li_comments\" ng-click=\"ck.openLeftPanel()\"><a class=\"pointer\" ng-click=\"reportAuthoringWriteSelected = 'Comments';ck.getReportComments();ck.removeLocalStorage(); ck.closeAlertHeight();\" aria-controls=\"comments\" role=\"tab\" data-toggle=\"tab\">Comments</a></li>\n" +
        "                    <li ng-click=\"ck.openLeftPanel()\"><a class=\"pointer\" ng-click=\"reportAuthoringWriteSelected = 'History';ck.getHistoryForSections();ck.removeLocalStorage(); \" aria-controls=\"history\" role=\"tab\" data-toggle=\"tab\">History</a></li>\n" +
        "                    <li ng-click=\"ck.openLeftPanel()\"><a class=\"pointer\" ng-click=\"reportAuthoringWriteSelected = 'Spellcheck'; ck.removeLocalStorage();\" aria-controls=\"spellcheck\" role=\"tab\" data-toggle=\"tab\">Spellcheck</a></li>\n" +
        "                    <li ng-click=\"ck.openLeftPanel();\"><a class=\"pointer\" ng-click=\"reportAuthoringWriteSelected = 'Find/Replace';ck.removeLocalStorage(); \" aria-controls=\"findreplace\" role=\"tab\" data-toggle=\"tab\">Find / Replace</a></li>\n" +
        "                </ul>\n" +
        "            </div>\n" +
        "            <div class=\"col-md-8\">\n" +
        "                <span class=\"pull-left\">\n" +
        "                    <div class=\"top-margin-xs text-primary\"><span ng-if=\"ck.selectedSection.sectionNumber\">{{ck.selectedSection.sectionNumber}} -</span> {{ck.selectedSection.sectionName}}</div>\n" +
        "            </span>\n" +
        "\n" +
        "            <span class=\"pull-right toolsButton\">\n" +
        "                <div class=\"btn-group\">\n" +
        "                    <button type=\"button\" class=\"btn btn-sm btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Change text to black&nbsp;<span class=\"caret\"></span></button>\n" +
        "            <ul class=\"dropdown-menu pull-right\" aria-labelledby=\"blackAll\" id=\"blackAllDrop-contents\">\n" +
        "                <li><a id=\"dropdown1-blackall\" class=\"pointer\" ng-click=\"ck.blackAllCurrentSummary()\" aria-controls=\"dropdown1\">This section</a></li>\n" +
        "                <li><a ng-click=\"ck.blackAllSummaries()\" class=\"pointer\" id=\"dropdown2-blackall\" aria-controls=\"dropdown2\">All sections</a></li>\n" +
        "            </ul>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"btn-group\">\n" +
        "            <button type=\"button\" class=\"btn btn-sm btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n" +
        "                <i class=\"fa fa-floppy-o fa-lg\"></i>&nbsp;Save All&nbsp;<span class=\"caret\"></span>\n" +
        "            </button>\n" +
        "            <ul class=\"dropdown-menu pull-right\" aria-labelledby=\"blackAll\" id=\"saveAllDrop-contents\">\n" +
        "                <li><a id=\"dropdown1-saveall\" class=\"pointer\" ng-click=\"ck.saveAll('CURRENT_SECTION');\" aria-controls=\"dropdown1\">Tables in this section</a></li>\n" +
        "                <li><a id=\"dropdown2-saveall\" class=\"pointer\" ng-click=\"ck.saveAll('ALL_SECTIONS');\" aria-controls=\"dropdown2\">Tables in all sections</a></li>\n" +
        "                <!--<li><a id=\"dropdown1-saveall\" class=\"pointer\" ng-click=\"ck.blackAllCurrentSummary()\" aria-controls=\"dropdown1\">These Summaries &amp; Tables<span class=\"text-muted\">&nbsp;[ Summaries in this section which have changes &amp; tables in this section in 'edit mode' ]</span></a></li>\n" +
        "                        <li><a id=\"dropdown2-saveall\" class=\"pointer\" ng-click=\"ck.blackAllCurrentSummary()\" aria-controls=\"dropdown2\">All Summaries<span class=\"text-muted\">&nbsp;[ Summaries in any sections which have changes ]</span></a></li>\n" +
        "                        <li><a id=\"dropdown3-saveall\" class=\"pointer\" ng-click=\"ck.blackAllCurrentSummary()\" aria-controls=\"dropdown3\">All Tables<span class=\"text-muted\">&nbsp;[ Tables which are in 'edit mode' ]</span></a></li>\n" +
        "                        <li><a id=\"dropdown4-saveall\" class=\"pointer\" ng-click=\"ck.blackAllCurrentSummary()\" aria-controls=\"dropdown4\">All Summaries &amp; Tables<span class=\"text-muted\">&nbsp;[ Summaries which have changes &amp; tables in 'edit mode' ]</span></a></li>-->\n" +
        "            </ul>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"btn-group\">\n" +
        "            <button type=\"button\" ng-click=\"ck.gotoNextSection()\" ng-disabled=\"ck.nextDisabled\" class=\"btn btn-default btn-sm\"><span class=\"glyphicon glyphicon-arrow-down\"></span></button>\n" +
        "            <button type=\"button\" ng-click=\"ck.gotoPrevSection()\" ng-disabled=\"ck.prevDisabled\" class=\"btn btn-default btn-sm\"><span class=\"glyphicon glyphicon-arrow-up\"></span></button>\n" +
        "        </div>\n" +
        "        </span>\n" +
        "    </div>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "\n" +
        "    <div id=\"leftContent\" ng-switch on=\"reportAuthoringWriteSelected\">\n" +
        "\n" +
        "        <div ng-switch-when=\"ToC\" id=\"toc\" class=\"col-md-4 leftContent nopadding\">\n" +
        "\n" +
        "            <div role=\"tabpanel\" class=\"tab-pane left-panel-btn fade active in topHeaderHeight\">\n" +
        "                <div class=\"btn-group\" role=\"group\">\n" +
        "                    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"ck.switchViewMode()\">{{ck.otherViewModeMsg}}</button>\n" +
        "                    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"ck.editAllTables(true)\">Edit All Tables</button>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "                <button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-show=\"ck.selectedSection.sectionNumber\">{{ck.selectedSection.sectionNumber}}</button>\n" +
        "\n" +
        "                <div class=\"clearfix\"></div>\n" +
        "            </div>\n" +
        "            <div class=\"scrollDiv contentbodyHeight\">\n" +
        "                <toc-display sections=\"ck.toc.sections\" selected-section=\"ck.selectedSection\" section-click=\"ck.sectionClicked(section)\" flag-click=\"ck.flagClicked(section)\">\n" +
        "\n" +
        "                </toc-display>\n" +
        "            </div>\n" +
        "\n" +
        "        </div>\n" +
        "        <!-- toc div ends-->\n" +
        "\n" +
        "        <!-- library div -->\n" +
        "        <div ng-switch-when=\"Library\" id=\"library\" class=\"col-md-4 leftContent nopadding\" cg-busy=\"ck.waitingLibraryResources\">\n" +
        "            <div class=\"left-panel-btn topHeaderHeight\">\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-sm-7\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control ng-pristine ng-valid\" ng-options=\"library.libraryGUID as library.name for library in ck.libraries\" ng-model=\"ck.selectedLibraryID\" ng-change=\"ck.selectedLibraryChanged()\">\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-sm-5\">\n" +
        "                        <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"ck.getLibraries()\"><span class=\"glyphicon glyphicon-refresh\"></span></button>\n" +
        "                        <button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-show=\"ck.selectedSection.sectionNumber\">{{ck.selectedSection.sectionNumber}}</button>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div ng-hide=\"ck.getLibraryInstructionFlag();\" class=\"alert alert-info top-margin\">\n" +
        "                    <a class=\"close\" ng-click=\"ck.closeAlertHeight();ck.setLibraryInstructionFlag();\" data-dismiss=\"alert\" ng-init=\"ck.languageHelp = true;\" ng-show=\"ck.languageHelp\" ng-click=\"ck.languageHelp = false;\">×</a> To add language to your report, click on the option. To multi-select, hold the CTRL key. After making a selection, click into the narrative area where you would like the language placed.\n" +
        "\n" +
        "                </div>\n" +
        "                <div ng-init=\"ck.showLanguageMsg=false\" ng-show=\"ck.showLanguageMsg\" class=\"alert alert-info top-margin\">\n" +
        "                    No languages recorded for this section.\n" +
        "                </div>\n" +
        "                <!--          <div class='text_here'>\n" +
        "    <span class='ellipsis_text'>\n" +
        "        TEXT djfkjdsjfd  dskfjklsdfj  jkdjlskd f dklfjsdlkfj kljflksd flsd kjflksdf klsjf lsdf sdjfskdjfsd fsdf sdlkjfsdlkfj s flksdjflsd fs fjlksdfldsk fsdjflkds fldskj\n" +
        "    </span>\n" +
        "</div>-->\n" +
        "            </div>\n" +
        "            <div class=\"contentbodyHeight scrollDiv\">\n" +
        "                <div ng-repeat=\"language in ck.languages\" ng-class=\"{'instructions-language': language.category == 'Instructions', 'sample-language': language.category == 'Sample' && !language.isAddedOnProjectStartup, 'language-included-in-project-setup': (language.category == 'Options' || language.category == 'Sample') && language.isAddedOnProjectStartup, 'language-option-to-insert': language.category == 'Options' && !language.isAddedOnProjectStartup}\" class=\"panel panel-default\">\n" +
        "\n" +
        "                    <!--  <div ng-repeat=\"language in ck.languages\" ng-class=\"{'instructions-language': language.category == 'Instructions', 'sample-language': language.category == 'Sample', 'language-included-in-project-setup': language.category == 'Options' && language.isAddedOnProjectStartup, 'language-option-to-insert': language.category == 'Options' && !language.isAddedOnProjectStartup}\" class=\"panel panel-default\">-->\n" +
        "\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        <strong>{{language.keyword}}</strong>\n" +
        "                        <button class=\"btn btn-default btn-xs pull-right\" ng-click=\"language.isFullView = !language.isFullView;\"><i class=\"fa\" ng-class=\"language.isFullView ? 'fa-chevron-up' : 'fa-chevron-down'\"></i></button>\n" +
        "                    </div>\n" +
        "\n" +
        "\n" +
        "                    <div mouse-click-copy=\"toCopyLibrary\" one-click-copy-condition=\"{{language.category != 'Instructions'}}\" class=\"default-pointer\">\n" +
        "                        <div id=\"toCopyLibrary\" class=\"panel-body\" ng-class=\"{'language-area-maximized':language.isFullView,'language-area-default':!language.isFullView,'cursor-alias':language.category != 'Instructions'}\" ng-bind-html=\"ck.renderHtml(language.text)\" ng-class=\"language.isFullView ? 'language-area-maximized' : 'language-area-default'\"></div>\n" +
        "                        <div id=\"divHeightChild{{$index}}\" ng-show=\"ck.showDots(language.isFullView) && ck.getFlag($index)\" class=\"ellipses text-right\">...</div>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <!-- library div ends -->\n" +
        "        <!-- comments div -->\n" +
        "        <div ng-switch-when=\"Comments\" id=\"comments\" class=\"col-md-4 leftContent nopadding\" cg-busy=\"ck.waitingCommentsResources\">\n" +
        "            <div class=\"topHeaderHeight\">\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-sm-8\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"ck.selSection_Comments\" ng-change=\"ck.newComm = false;ck.commentsErrorStatus=false;ck.sectionChanged();\">\n" +
        "\n" +
        "                                <option value=\"0\">Current Section</option>\n" +
        "                                <option value=\"1\">Current Section Unaddressed Comments</option>\n" +
        "                                <option value=\"2\">All Sections</option>\n" +
        "                                <option value=\"3\">All Sections Unaddressed Comments</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-sm-4 text-right\">\n" +
        "                        <button type=\"button\" class=\"btn btn-default btn-sm\" ng-show=\"ck.selectedSection.sectionNumber\">{{ck.selectedSection.sectionNumber}}</button>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-sm-12\">\n" +
        "                        <div class=\"btn-group bottom-margin comments-section-btn\">\n" +
        "\n" +
        "                            <div ng-show=\"ck.checkComments\" id=\"divSelAll_write\" class=\"btn-group\" data-toggle=\"buttons\" ng-click=\"ck.selectedAll = !ck.selectedAll; ck.checkAll();\">\n" +
        "\n" +
        "                                <label id=\"lblSelAll\" class=\"btn btn-default btn-sm\">\n" +
        "                                    <input id=\"selAll\" class=\"btn\" type=\"checkbox\" ng-model=\"ck.selectedAll\" />{{ck.selectAllText}}\n" +
        "                                </label>\n" +
        "                            </div>\n" +
        "\n" +
        "\n" +
        "                            <button ng-show=\"ck.checkComments\" class=\"btn btn-sm btn-default\" ng-click=\"ck.openDeletePopup();\" ng-disabled=\"!ck.selectedAll;!ck.IsCommentChecked\"><span class=\"glyphicon glyphicon-trash\"></span></button>\n" +
        "                            <button class=\"btn btn-sm btn-default\" ng-show=\"ck.checkComments\" title=\"Open all addressed comments\" data-toggle=\"tooltip\" data-placement=\"top\" data-container=\"body\" data-trigger=\"hover\" ng-click=\"ck.OpenAll()\"><i class=\"fa fa-lg fa-plus\"></i> </button>\n" +
        "                            <button class=\"btn btn-sm btn-default\" ng-show=\"ck.checkComments\" title=\"Close all addressed comments\" data-toggle=\"tooltip\" data-placement=\"top\" data-container=\"body\" data-trigger=\"hover\" ng-click=\"ck.CloseAll()\"><i class=\"fa fa-lg fa-minus\"></i> </button>\n" +
        "\n" +
        "                            <button class=\"btn btn-sm btn-default\" ng-click=\"ck.newComm = true;ck.newCommentVal='';ck.commentsErrorStatus=false;ck.saveNewCommBtn=false; ck.closeAlertHeight();\">Add New</button>\n" +
        "                            <button class=\"btn btn-sm btn-default\" title=\"Refresh Comments\" data-toggle=\"tooltip\" data-placement=\"top\" data-container=\"body\" data-trigger=\"hover\" ng-click=\"ck.refreshComments();ck.newComm = false;ck.commentsErrorStatus=false;\"><i class=\"glyphicon glyphicon-refresh\"></i> </button>\n" +
        "                        </div>\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"alert alert-info nomargin\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"ck.serviceResponseAlert && ck.checkComments\">\n" +
        "\n" +
        "                    <button type=\"button\" class=\"close\" ng-click=\"ck.serviceResponseAlert = false;ck.closeAlertHeight();\" aria-label=\"Close\">\n" +
        "                        <span aria-hidden=\"true\">&times;</span>\n" +
        "                    </button>\n" +
        "                    Use the select to toggle comment visibility. Click on user names to view comments or use the buttons to show/hide all. Green comments have not been addressed.\n" +
        "                </div>\n" +
        "                <div ng-show=\"ck.newComm\" class=\"top-margin\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <textarea id=\"addComments\" class=\"form-control resize-vertical\" rows=\"6\" placeholder=\"Enter New Comments for section {{ck.selectedSection.sectionNumber}}\" ng-model=\"ck.newCommentVal\"></textarea>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <button class=\"btn btn-default btn-sm\" ng-click=\"ck.newComm = false;ck.commentsErrorStatus=false;ck.closeAlertHeight();\">Cancel</button>\n" +
        "                    <button class=\"btn btn-primary btn-sm\" ng-click=\"ck.saveNewComments();ck.closeAlertHeight();\" ng-disabled=\"ck.saveNewCommBtn\">Save</button>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "            <div class=\"contentbodyHeight scrollDiv\">\n" +
        "\n" +
        "                <div ng-show=\"ck.commentsErrorStatus\" class=\"alert alert-danger top-margin-xs\" role=\"alert\" ng-class=\"danger\">\n" +
        "                    {{ck.commentsErrorText}}\n" +
        "                </div>\n" +
        "                <div ng-repeat=\"secVal in commentsArr track by $index\">\n" +
        "\n" +
        "                    <div ng-show=\"(secVal.comments.length > 0)?true:false\">\n" +
        "\n" +
        "                        <div class=\"bottom-margin-xs border-bottom-xs\">\n" +
        "                            <strong>{{secVal.sectionNumber}} {{secVal.sectionName}}</strong>\n" +
        "                        </div>\n" +
        "\n" +
        "                        <div ng-class=\"{'false': 'bg-green-comments','true': 'bg-gray-comments'}[comm.addressed]\" ng-repeat=\"comm in secVal.comments\">\n" +
        "                            <div class=\"bottom-margin-xs\">\n" +
        "                                <input type=\"checkbox\" ng-model=\"comm.Selected\" ng-change=\"ck.commentCheck()\">\n" +
        "                                <a class=\"pointer decoration-n\">\n" +
        "                                    <span id=\"{{comm.Id}}-plus-comment-span\" ng-click=\"ck.setIconComment('collapse in',comm.Id)\" class=\"ng-hide\">\n" +
        "                                          <i id=\"{{comm.Id}}-plus-comment\"  class=\"fa fa-lg fa-plus-square-o ng-hide\"> </i> BY {{comm.commentedBy.toUpperCase()}}\n" +
        "                                        </span>\n" +
        "                                    <span id=\"{{comm.Id}}-minus-comment-span\" ng-click=\"ck.setIconComment('collapse',comm.Id)\">\n" +
        "                                         <i id=\"{{comm.Id}}-minus-comment\"  class=\"fa fa-lg fa-minus-square-o\"></i> BY {{comm.commentedBy.toUpperCase()}}\n" +
        "                                        </span>\n" +
        "\n" +
        "\n" +
        "                                </a>\n" +
        "\n" +
        "\n" +
        "                                <span class=\"pull-right\">{{comm.date}} </span>\n" +
        "\n" +
        "                                <div id=\"{{comm.Id}}-comment\">\n" +
        "\n" +
        "                                    <span class=\"span_Carriage\" ng-hide=\"comm.commentEditState\">{{comm.commentVal}}</span>\n" +
        "                                </div>\n" +
        "                                <div class=\"form-group\">\n" +
        "                                    <textarea id=\"editComments\" class=\"form-control resize-vertical\" rows=\"6\" placeholder=\"Enter Comments\" ng-show=\"comm.commentEditState\" ng-model=\"comm.EditCommentVal\"></textarea>\n" +
        "                                    <textarea id=\"editComments\" class=\"form-control resize-vertical\" rows=\"6\" placeholder=\"Address the comment\" ng-show=\"comm.addressState\" ng-model=\"comm.addressComment\"></textarea>\n" +
        "                                </div>\n" +
        "\n" +
        "                                <div>\n" +
        "                                    <button ng-hide=\"comm.addressed || comm.addressState || comm.commentEditState\" class=\"btn btn-primary btn-sm\" ng-click=\"comm.addressState = true;comm.addressComment='';\">Address</button>\n" +
        "                                    <button class=\"btn btn-primary btn-sm\" ng-hide=\"comm.addressed || comm.addressState || comm.commentEditState\" ng-click=\"comm.commentEditState = true;ck.editComment(comm);\">Edit</button>\n" +
        "\n" +
        "                                    <button class=\"btn btn-default btn-sm\" ng-show=\"comm.commentEditState || comm.addressState\" ng-click=\"comm.commentEditState = false;comm.addressState = false;ck.Cancel(comm.commentVal);\">Cancel</button>\n" +
        "                                    <button class=\"btn btn-primary btn-sm\" ng-show=\"comm.commentEditState || comm.addressState\" ng-click=\"ck.editAddressComment(comm)\">Save</button>\n" +
        "\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                            <div ng-show=\"comm.addressed\">\n" +
        "\n" +
        "                                <a class=\"pointer decoration-n addressed-by\">\n" +
        "                                    <span id=\"{{comm.Id}}-plus-address-span\" ng-click=\"ck.setIconAddress('collapse in',comm.Id)\" class=\"ng-hide\">\n" +
        "                                               <i id=\"{{comm.Id}}-plus-address\"  class=\"fa fa-lg fa-plus-square-o ng-hide\"></i> ADDRESSED BY {{comm.addressedBy.toUpperCase()}}\n" +
        "                                        </span>\n" +
        "                                    <span id=\"{{comm.Id}}-minus-address-span\" ng-click=\"ck.setIconAddress('collapse',comm.Id)\">\n" +
        "                                               <i id=\"{{comm.Id}}-minus-address\"  class=\"fa fa-lg fa-minus-square-o\"></i> ADDRESSED BY {{comm.addressedBy.toUpperCase()}}\n" +
        "                                        </span>\n" +
        "\n" +
        "                                </a>\n" +
        "                                <span class=\"pull-right\">{{comm.addressedDate}}</span>\n" +
        "                                <div id=\"{{comm.Id}}-address\">\n" +
        "                                    <span class=\"addressed-by-text span_Carriage\">{{comm.addressedVal}}</span>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                        <hr>\n" +
        "                    </div>\n" +
        "\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <!-- comments div ends -->\n" +
        "\n" +
        "        <!-- history div -->\n" +
        "\n" +
        "        <div ng-switch-when=\"History\" id=\"history\" class=\"col-md-4 leftContent nopadding\" cg-busy=\"ck.waitingHistoryResources\">\n" +
        "            <div class=\"topHeaderHeight\">\n" +
        "\n" +
        "                <button class=\"btn btn-sm btn-default\" ng-click=\"ck.getHistoryForSections()\"><span class=\"glyphicon glyphicon-refresh\"></span></button>\n" +
        "                <button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-show=\"ck.selectedSection.sectionNumber\">{{ck.selectedSection.sectionNumber}}</button>\n" +
        "                <div class=\"clearfix\"></div>\n" +
        "                <div ng-hide=\"ck.getHistoryInstructionFlag();\" class=\"alert alert-info top-margin-xs\">\n" +
        "                    <a class=\"close\" ng-click=\"ck.closeAlertHeight();ck.setHistoryInstructionFlag();\" data-dismiss=\"alert\">×</a> To replace the text in your report with a history entry, click on the entry. After making a selection, click into the narrative area where you would like the entry placed.\n" +
        "                </div>\n" +
        "                <div ng-init=\"ck.showHistoryMsg=false\" ng-show=\"ck.showHistoryMsg\" class=\"alert alert-info\">\n" +
        "                    No history recorded for this section.\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"contentbodyHeight scrollDiv\">\n" +
        "\n" +
        "\n" +
        "                <!-- <div  add-html id=\"sectionTest\" resp=\"testMerge\" obj=\"ck.obj\" >\n" +
        "                                \n" +
        "                                </div>-->\n" +
        "\n" +
        "                <div ng-repeat=\"historyObj in historyArr\">\n" +
        "                    <div class=\"panel-group\" ng-repeat=\"(key,value) in historyObj.section.sectionData.contentValues.ckEditData\">\n" +
        "                        <div>\n" +
        "                            <div class=\"panel panel-default\">\n" +
        "\n" +
        "                                <div class=\"panel-heading\">\n" +
        "                                    <label>{{historyObj.createdBy.firstName}} &nbsp; {{historyObj.createdBy.lastName}}</label>\n" +
        "\n" +
        "                                    <button class=\"btn btn-default btn-xs pull-right\" ng-click=\"language.isFullView = !language.isFullView;\"><i class=\"fa\" ng-class=\"language.isFullView ? 'fa-chevron-up' : 'fa-chevron-down'\"></i></button>\n" +
        "                                    <label class=\"pull-right\">{{historyObj.createDate}}&nbsp;</label>\n" +
        "                                </div>\n" +
        "\n" +
        "\n" +
        "                                <div mouse-click-copy=\"toCopyHistory\" one-click-copy-condition=\"true\">\n" +
        "                                    <div id=\"toCopyHistory\" class=\"panel-body cursor-alias\" id=\"sectionTest_{{$index}}\" ng-bind-html=\"ck.renderHtml(value)\" ng-class=\"language.isFullView ? 'language-area-maximized' : 'language-area-default'\">\n" +
        "\n" +
        "\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                <!---    \n" +
        "                  \n" +
        "                        <div class=\"panel-group\" id=\"accordion\" ng-repeat=\"historyObj in historyArr\">\n" +
        "                           <div ng-repeat=\"(key,value) in historyObj.section.sectionData.contentValues.ckEditData\">\n" +
        "                            <div class=\"panel panel-default\">\n" +
        "                                <div class=\"panel-heading\">\n" +
        "                                    <a class=\"pointer collapsed\" data-toggle=\"collapse\" data-parent=\"#accordion\" data-target=\"#{{$parent.$index}}{{key}}\"></a>\n" +
        "                                    <label>{{historyObj.createdBy.firstName}} &nbsp; {{historyObj.createdBy.lastName}}</label>\n" +
        "                                    <label class=\"pull-right\">{{historyObj.createDate}}&nbsp;</label>\n" +
        "                                </div>\n" +
        "                             \n" +
        "                                <div id=\"{{$parent.$index}}{{key}}\" class=\"panel-collapse collapse\" mouse-click-copy=\"toCopyHistory\" one-click-copy-condition=\"true\">\n" +
        "                                    <div  id=\"toCopyHistory\" class=\"panel-body\">\n" +
        "                                        <div  id=\"sectionTest_{{$index}}\" ng-bind-html=\"ck.renderHtml(value)\">\n" +
        "{{key}}\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div> -->\n" +
        "            </div>\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "        <!-- history div ends -->\n" +
        "\n" +
        "\n" +
        "\n" +
        "        <!-- Spellcheck div -->\n" +
        "        <div ng-switch-when=\"Spellcheck\" id=\"spellcheck\" class=\"col-md-4 leftContent nopadding\" ng-controller=\"spellCheckController\">\n" +
        "            <div class=\"row\" ng-show=\"!IsShowspellcheck\">\n" +
        "                <div class=\"col-sm-8\">\n" +
        "                    <div class=\"btn-group\">\n" +
        "                        <button id=\"spellcheckinsection\" type=\"button\" class=\"btn btn-default btn-sm spellcheck-in-section\" ng-click=\"spellcheckinsectionclick()\">In Section</button>\n" +
        "                        <button type=\"button\" class=\"btn btn-default btn-sm spellcheck-in-full-report\" ng-click=\"spellcheckinAllSectionclick()\">In Full Report</button>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"col-sm-4 text-right\">\n" +
        "                    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-show=\"ck.selectedSection.sectionNumber\">{{ck.selectedSection.sectionNumber}}</button>\n" +
        "                </div>\n" +
        "                <div class=\"col-sm-12\">\n" +
        "                    <div class=\"alert alert-info alert-dismissible top-margin-xs\" role=\"alert\">\n" +
        "                        <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                        To run spellcheck on your report, select one of the options above. If checking the full report, you will be prompted to go into All Sections Mode. To do this manually, the button is on the ToC tab.\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"row\" ng-show=\"IsShowspellcheck\">\n" +
        "                <div class=\"col-sm-12\">\n" +
        "\n" +
        "                    <button id=\"spellcheck-save\" type=\"button\" class=\"btn btn-primary btn-sm\" ng-click=\"spellcheckSave()\">Save</button>\n" +
        "                    <button id=\"spellcheck-close\" type=\"button\" class=\"btn btn-primary btn-sm\" ng-click=\"spellcheckClose()\">close</button>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"row\" ng-show=\"IsShowspellcheck\">\n" +
        "                <div class=\"col-sm-12\">\n" +
        "                    <div style=\"display: block;\" class=\"pull-left spellcheck-paused\">\n" +
        "                        <input class=\"btn btn-primary input-xlarge\" ng-click=\"spellResume()\" value=\"Spellcheck Paused, click to Resume\" type=\"button\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div id=\"spellcheckCont\" ng-show=\"IsShowspellcheck\" class=\"row-fluid\" style=\"position: relative;\">\n" +
        "\n" +
        "\n" +
        "\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-sm-12\">\n" +
        "                        <div class=\"top-margin-sm\">\n" +
        "                            <button id=\"spellcheckSectionInfo\" type=\"button\" class=\"btn btn-default btn-sm full-width\" disabled><span ng-if=\"ck.selectedSection.sectionNumber\">{{ck.selectedSection.sectionNumber}} -</span> {{ck.selectedSection.sectionName}}</button>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"top-margin-sm\">\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"errorFound\" style=\"display:none;\">Error Found</label>\n" +
        "                        <input id=\"spellcheckTypo\" name=\"spellcheckTypo\" type=\"text\" class=\"form-control\">\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"bottom-margin-lg\">\n" +
        "                        <button id=\"btn_ignore\" ng-click=\"ignorClick()\" class=\"btn btn-primary btn-xs\">Ignore</button>\n" +
        "                        <button id=\"btn_ignore_all\" class=\"btn btn-primary btn-xs\" ng-click=\"spellIgnoreAll()\">Ignore All</button>\n" +
        "                        <button class=\"btn btn-primary btn-xs\">Add to My Dictionary</button>\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"replaceWith\">Replace With</label>\n" +
        "                        <input type=\"text\" ng-model=\"spellcheckReplaceWith\" class=\"form-control\" id=\"spellcheckReplaceWith\" name=\"spellcheckReplaceWith\">\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"suggestions\">Suggestions</label>\n" +
        "\n" +
        "                        <select class=\"form-control\" multiple=\"\" onclick=\"setSpellcheckSuggestions()\" style=\"visibility: visible;\" id=\"spellcheckSuggestions\" class=\"form-control\"></select>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <button id=\"btn_replace_sp\" class=\"btn btn-primary btn-xs\" ng-click=\"replaceWordClick()\">Replace</button>\n" +
        "                    <button class=\"btn btn-primary btn-xs\" ng-click=\"spellReplaceAll()\">Replace All</button>\n" +
        "\n" +
        "                </div>\n" +
        "                <div class=\"spellcheckoverlay \" style=\"position: absolute; top: 0; left: 0; opacity: .5; background-color: #C0C0C0;\">\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"spellcheckstatuscont\" style=\"position: absolute; max-width: 250px;\">\n" +
        "                    <span class=\"label label-important  label-info\">Initializing</span>\n" +
        "\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <!-- Spellcheck div ends -->\n" +
        "\n" +
        "        <!-- find/replace div -->\n" +
        "        <div ng-switch-when=\"Find/Replace\" id=\"findreplace\" class=\"col-md-4 leftContent nopadding\">\n" +
        "            <div ng-include=\"'app/modules/ReportAuthoring/views/FindReplace.html'\"></div>\n" +
        "        </div>\n" +
        "        <!-- find/replace div ends -->\n" +
        "        <left-panel-slide-toggle></left-panel-slide-toggle>\n" +
        "    </div>\n" +
        "\n" +
        "    <!--<span id=\"section-toggle\" ng-click=\"ck.toggleLeftPanel()\" class=\"hidden-sm hidden-xs fa fa-step-backward btn btn-sm btn-primary\"></span>-->\n" +
        "\n" +
        "\n" +
        "    <div id=\"rightContent\" class=\"col-md-8\" scrollable-top-container>\n" +
        "        <form id=\"rigthSectionForm\" name=\"rigthSectionForm\">\n" +
        "            <div ng-repeat=\"sec in ck.resp.sections\" id=\"divsection_{{sec.sectionID}}\" class=\"divsection\" handle-when-scroll-at-top=\"ck.sectionClicked(sec, '' ,true)\" scroll-top-offset=\"300\" skip-handle-scroll-top-condition=\"!ck.showAllSections\" ng-switch on=\"sec.isGeneralInfo\">\n" +
        "                <div ng-switch-when=\"false\" add-html id=\"section_{{sec.sectionID}}\" resp=\"sec\" flag=\"reportAuthoringWriteSelected\" all-section-mode=\"ck.showAllSections\" is-ck-dirty=\"ck.isCkDirty\" obj=\"ck.obj\" ng-show=\"ck.sectionVisible(sec)\" get-section-history=\"ck.getHistoryForSections()\">\n" +
        "                    <div last-updated-by sec-data=\"sec\"></div>\n" +
        "                </div>\n" +
        "                <div ng-switch-when=\"true\" ng-controller='generalInformationFormController as generalInformationForm' ng-show=\"ck.isGISelected\" id=\"section_{{sec.sectionID}}\" render-generalinformation></div>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "    </div>\n" +
        "</div>\n" +
        "\n" +
        "\n" +
        "<script>\n" +
        "    CKEDITOR.disableAutoInline = true;\n" +
        "\n" +
        "</script>\n" +
        "\n" +
        "</div>\n" +
        "</div>\n" +
        "<script id=\"dllDeleteAll.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "    <div class=\"modal-header\">\n" +
        "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "        <h4 class=\"modal-title\">Delete Comments</h4>\n" +
        "    </div>\n" +
        "\n" +
        "\n" +
        "    <form name=\"myFormAddTemplate1\" novalidate>\n" +
        "\n" +
        "        <div class=\"modal-body \">\n" +
        "\n" +
        "            <strong>This will delete the selected comments. Are you sure you want to continue?</strong>\n" +
        "\n" +
        "        </div>\n" +
        "        <div class=\"modal-footer\">\n" +
        "            <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDelete()\">Cancel</a>\n" +
        "            <a class=\"btn btn-primary\" role=\"button\" ng-click=\"deleteComments()\">Continue</a>\n" +
        "        </div>\n" +
        "    </form>\n" +
        "\n" +
        "</script>\n" +
        "\n" +
        "<div class=\"modal fade\" id=\"spellCheck_InvalidWordModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\">\n" +
        "    <div class=\"modal-dialog\" role=\"document\">\n" +
        "        <div class=\"modal-content\">\n" +
        "            <div class=\"modal-header\">\n" +
        "                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                <h4 class=\"modal-title\" id=\"myModalLabel\">Invalid word</h4>\n" +
        "            </div>\n" +
        "            <div class=\"modal-body\">\n" +
        "\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <button type=\"button\" id=\"InvalidWordCancel\" class=\"btn btn-default\" data-dismiss=\"modal\">Cancel</button>\n" +
        "                <button type=\"button\" id=\"InvalidWordReplace\" class=\"btn btn-primary\">Replace</button>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "");
}]);

angular.module("../app/modules/ReportAuthoring/views/setup.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/setup.html",
        "<div ng-controller=\"SetupController\">\n" +
        "    <div class=\"bottom-margin-sm text-right\">\n" +
        "        <span ng-if=\"isDbOrder\" class=\"dropdown\">\n" +
        "            <button class=\"btn btn-sm btn-default dropdown-toggle\" type=\"button\" id=\"orderdatabase\" aria-haspopup=\"true\" aria-expanded=\"true\">Order Database Reports <span class=\"caret\"></span></button>\n" +
        "            <ul class=\"dropdown-menu\" aria-labelledby=\"orderdatabase\">\n" +
        "                <li><a href=\"\" ng-click=\"openEdrCredentialsModal('singleSite');\">Single-Site Project Order</a></li>\n" +
        "                <li><a target=\"_blank\" ui-sref=\"edrPortfolioOrder(portfolioOrderParamObj)\">Place Portfolio Order</a></li>\n" +
        "            </ul>\n" +
        "        </span>\n" +
        "        <a id=\"btnViewEditGeneralInfo\" class=\"btn btn-sm btn-primary\" href=\"{{GI_href}}\" title=\"View General Info\" user-action=\"general Information\" target=\"_blank\">View / Edit General Information</a>\n" +
        "    </div>\n" +
        "    \n" +
        "    <div class=\"panel panel-default\">\n" +
        "        <div class=\"panel-heading\">\n" +
        "            <h3 class=\"panel-title\">Order Summary</h3>\n" +
        "        </div>\n" +
        "        <div class=\"panel-body\"></div>\n" +
        "        <div class=\"row\" ng-include src=\"'app/modules/ProjectDashboard/views/orderStatus.html'\"></div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"panel panel-default\">\n" +
        "        <div class=\"panel-heading\">\n" +
        "            <h3 class=\"panel-title\">Setup Items</h3>\n" +
        "        </div>\n" +
        "        <div class=\"panel-body\">\n" +
        "            <div id=\"alertMessageDiv\">\n" +
        "                <div ng-show=\"showMessageSetup || setupItemUpdateStatus\" class=\"alert\" ng-class=\"setupItemUpdateClass\" role=\"alert\">\n" +
        "                    <button type=\"button\" class=\"close\" ng-click=\"showMessageSetup = false;setupItemUpdateStatus=false;\" aria-label=\"Close\">\n" +
        "                        <span aria-hidden=\"true\">×</span>\n" +
        "                    </button>\n" +
        "                    {{setupItemUpdateText}}\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"table-responsive\">\n" +
        "            <table class=\"table table-condensed table-bordered\">\n" +
        "                <thead>\n" +
        "                    <tr>\n" +
        "                        <th>Items</th>\n" +
        "                        <th>Edit</th>\n" +
        "                        <th>View / Edit Details</th>\n" +
        "                    </tr>\n" +
        "                </thead>\n" +
        "                <tbody>\n" +
        "                    <tr>\n" +
        "                        <td>\n" +
        "                            <strong><span>Trasmittal Letter Output Setup</span></strong>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <a href=\"#\" ng-click=\"standardItemDanger='';standardItemSuccess='';clearMessages_Setup();\" editable-select=\"setupBoard.selTransmittalLetter\" e-ng-options=\"trans.value as trans.text for trans in transmittalArr\" onbeforesave=\"saveDefaultItem($data,'setupBoard.selTransmittalLetter')\">{{showTransmittalLetter()}}</a>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                        \n" +
        "                            <a ng-show=\"setupBoard.selTransmittalLetter\" ui-sref=\"transmittalLetterSetup\" target=\"_blank\" class=\"pointer\"> {{ showTransmittalLetter() }}</a>\n" +
        "                            \n" +
        "                            <span ng-hide=\"setupBoard.selTransmittalLetter != null && setupBoard.selTransmittalLetter != '' && setupBoard.selTransmittalLetter != undefined\">Not Set</span>\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>\n" +
        "                            <strong><span>Report Cover</span></strong>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <a href=\"#\" ng-click=\"standardItemDanger='';standardItemSuccess='';clearMessages_Setup();\" editable-select=\"setupBoard.selReportCover\" e-ng-options=\"report.value as report.text for report in reportCoverArr\" onbeforesave=\"saveDefaultItem($data,'setupBoard.selReportCover')\">{{showReportCover()}}</a>\n" +
        "                        </td>\n" +
        "                        <td> {{showReportCover()}}</td>\n" +
        "                    </tr>\n" +
        "\n" +
        "                    <tr>\n" +
        "                        <td>\n" +
        "                            <strong><span>Table of Contents Output Setup</span></strong>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <a href=\"#\" ng-click=\"standardItemDanger='';standardItemSuccess='';clearMessages_Setup();\" editable-select=\"setupBoard.selTOC\" e-ng-options=\"toc.value as toc.text for toc in tocArr\" onbeforesave=\"saveDefaultItem($data,'setupBoard.selTOC')\">{{ showTOC() }}</a>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <a ng-show=\"setupBoard.selTOC\" ui-sref=\"tocSetup\" target=\"_blank\" class=\"pointer\">    {{ showTOC() }}</a>\n" +
        "                               <span ng-hide=\"setupBoard.selTOC != null && setupBoard.selTOC != '' && setupBoard.selTOC != undefined\">Not Set</span>\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>\n" +
        "                            <strong><span>Report Output Setup</span></strong>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <a href=\"#\" ng-click=\"standardItemDanger='';standardItemSuccess='';clearMessages_Setup();\" editable-select=\"setupBoard.selReportOutputSetup\" e-ng-options=\"report.value as report.text for report in reportOutputSetupArr\" onbeforesave=\"saveDefaultItem($data,'setupBoard.selReportOutputSetup')\">{{showReportStructure()}}</a>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <a ng-show=\"setupBoard.selReportOutputSetup\" ui-sref=\"reportSetup\" target=\"_blank\" class=\"pointer\">{{showReportStructure()}}</a>\n" +
        "                            \n" +
        "                             <span ng-hide=\"setupBoard.selReportOutputSetup != null && setupBoard.selReportOutputSetup != '' && setupBoard.selReportOutputSetup != undefined\">Not Set</span>\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                </tbody>\n" +
        "            </table>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"panel panel-default \">\n" +
        "        <div class=\"panel-heading\">\n" +
        "            <h3 class=\"panel-title\">Standard Items</h3></div>\n" +
        "        <div class=\"panel-body\">\n" +
        "            <div id=\"alertMessageDiv\">\n" +
        "                <div ng-show=\"showMessage && standardItemSuccess != ''\">\n" +
        "                    <span><strong>{{standardItemName}}</strong></span>\n" +
        "                </div>\n" +
        "                <div ng-show=\"showMessage && standardItemSuccess != ''\" class=\"alert alert-info alert-dismissible\" role=\"alert\">\n" +
        "                    <button type=\"button\" class=\"close\" ng-click=\"showMessage = false;\" aria-label=\"Close\">\n" +
        "                        <span aria-hidden=\"true\">×</span>\n" +
        "                    </button>\n" +
        "                    {{standardItemSuccess}}\n" +
        "                </div>\n" +
        "\n" +
        "                <div ng-show=\"showMessage && standardItemDanger != ''\" class=\"alert alert-danger\">\n" +
        "                    {{standardItemDanger}}\n" +
        "                </div>\n" +
        "\n" +
        "                <div ng-show=\"showMessageStandard || standardItemUpdateStatus\" class=\"alert\" ng-class=\"standardItemUpdateClass\" role=\"alert\">\n" +
        "                    <button type=\"button\" class=\"close\" ng-click=\"showMessageStandard = false;standardItemUpdateStatus=false;\" aria-label=\"Close\">\n" +
        "                        <span aria-hidden=\"true\">×</span>\n" +
        "                    </button>\n" +
        "                    {{standardItemUpdateText}}\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"table-responsive\">\n" +
        "            <table id=\"standardItem\" class=\"table table-condensed table-bordered\">\n" +
        "                <thead>\n" +
        "                    <tr>\n" +
        "                        <th width=\"22%\">\n" +
        "                            Items\n" +
        "                        </th>\n" +
        "                        <th width=\"50%\">\n" +
        "                            Edit\n" +
        "                        </th>\n" +
        "                        <th width=\"38%\">\n" +
        "                            Update With Latest Version\n" +
        "                        </th>\n" +
        "                    </tr>\n" +
        "                </thead>\n" +
        "                <tbody>\n" +
        "                    <tr>\n" +
        "                        <td>\n" +
        "                            <strong><span>Tasked Company</span></strong>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <a ng-click=\"standardItemClick('taskedCompany');clearMessages_Standard();\" href=\"#\" editable-select=\"standardBoard.selTaskedCompany\" e-ng-options=\"taskedCompany.value as taskedCompany.text for taskedCompany in taskedCompanyArr\" onbeforesave=\"saveDefaultItem($data,'standardBoard.selTaskedCompany')\">{{showTaskedCompany()}}</a>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">Updated with latest version</td>\n" +
        "                    </tr>\n" +
        "                    <tr>\n" +
        "                        <td>\n" +
        "                            <strong><span>Report Template</span></strong>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <a ng-click=\"standardItemClick('reportTemplate');clearMessages_Standard();\" href=\"#\" editable-select=\"standardBoard.selReportTemplate\" e-ng-options=\"reportTemplate.value as reportTemplate.text for reportTemplate in reportTemplateArr\" onbeforesave=\"saveDefaultItem($data,'standardBoard.selReportTemplate')\">{{showReportTemplate()}}</a>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <button id=\"btnStandardItem_ReportTemplate_Update\" user-action=\"Report Template update with latest version\" class=\"btn btn-success\" ng-click=\"updateVersion(standardBoard.selReportTemplate,0)\">Update</button>\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "\n" +
        "                    <tr>\n" +
        "                        <td>\n" +
        "                            <strong><span>Default Language Library</span></strong>\n" +
        "                        </td>\n" +
        "                        <td>\n" +
        "                            <a ng-click=\"standardItemClick('defaultLanguageLibrary');clearMessages_Standard();\" href=\"#\" editable-select=\"standardBoard.selDLL\" e-ng-options=\"dll.value as dll.text for dll in dllArr\" onbeforesave=\"saveDefaultItem($data,'standardBoard.selDLL')\">{{showDLL()}}</a>\n" +
        "                        </td>\n" +
        "                        <td class=\"text-center\">\n" +
        "<!--                            <button id=\"btnStandardItem_DLL_Update\" user-action=\"Default Language Library update with latest version\" class=\"btn btn-success\" ng-click=\"updateVersion(standardBoard.selDLL,1)\">Update</button>-->\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                    <tr ng-click=\"standardItemClick('prepolulatedTableData');\">\n" +
        "                        <td>\n" +
        "                            <strong><span>Prepopulated Table Data</span></strong>\n" +
        "                        </td>\n" +
        "                        <td>  {{prePopulatedDataText}}</td>\n" +
        "                        <td class=\"text-center\">\n" +
        "                            <button id=\"btnStandardItem_PrepopulatedTableData_Update\" user-action=\"Prepopulated Table Data update with latest version\" class=\"btn btn-success\" ng-click=\"updateVersion($data,2)\">Update</button>\n" +
        "                        </td>\n" +
        "                    </tr>\n" +
        "                </tbody>\n" +
        "            </table>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "<div ng-include src=\"'app/modules/ReportAuthoring/views/orderDBReport.html'\"></div>");
}]);

angular.module("../app/modules/ReportAuthoring/views/sign.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/sign.html",
        "<div class=\"container-fluid\">\n" +
        "    <div class=\"row\" ng-controller=\"SignController as sign\" cg-busy=\"{promise:promise,templateUrl:templateUrl,message:message,backdrop:backdrop,delay:delay,minDuration:minDuration}\">\n" +
        "        <div id=\"leftContent\">\n" +
        "            <!-- comments div -->\n" +
        "            <div id=\"comments\" cg-busy=\"sign.waitingCommentsResources\" class=\"col-md-4 leftContent nopadding\">\n" +
        "				<div class=\"topHeaderHeight\">\n" +
        "                <div class=\"row\">\n" +
        "\n" +
        "                    <!--                         <button type=\"button\" class=\"btn btn-default btn-sm\" ng-show=\"sign.selectedSection.sectionNumber\">{{sign.selectedSection.sectionNumber}}</button>-->\n" +
        "                </div>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-sm-12\">\n" +
        "                        <div class=\"btn-group bottom-margin comments-section-btn\">\n" +
        "\n" +
        "                            <button class=\"btn btn-sm btn-default\" ng-show=\"commentsArr.length > 0\" title=\"Open all unaddressed comments\" data-toggle=\"tooltip\" data-placement=\"top\" data-container=\"body\" data-trigger=\"hover\" ng-click=\"sign.OpenAll()\"><i class=\"fa fa-lg fa-plus\"></i> </button>\n" +
        "                            <button class=\"btn btn-sm btn-default\" ng-show=\"commentsArr.length > 0\" title=\"Close all unaddressed comments\" data-toggle=\"tooltip\" data-placement=\"top\" data-container=\"body\" data-trigger=\"hover\" ng-click=\"sign.CloseAll()\"><i class=\"fa fa-lg fa-minus\"></i> </button>\n" +
        "                              <button class=\"btn btn-sm btn-default\" title=\"Refresh Comments\" data-toggle=\"tooltip\" data-placement=\"top\" data-container=\"body\" data-trigger=\"hover\" ng-click=\"sign.refreshComments()\"><i class=\"glyphicon glyphicon-refresh\"></i> </button>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"alert alert-info nomargin\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"sign.serviceResponseAlert && commentsArr.length > 0\">\n" +
        "                    <button type=\"button\" class=\"close\" ng-click=\"sign.serviceResponseAlert = false; ck.closeAlertHeight();\" aria-label=\"Close\">\n" +
        "                        <span aria-hidden=\"true\">&times;</span>\n" +
        "                    </button>\n" +
        "                    Use the select to toggle comment visibility. Click on user names to view comments or use the buttons to show/hide all. Green comments have not been addressed.\n" +
        "                </div>\n" +
        "				</div>\n" +
        "                <div class=\"scrollDiv contentbodyHeight\">\n" +
        "\n" +
        "                    <div ng-show=\"sign.commentsErrorStatus\" class=\"alert alert-danger\" role=\"alert\" ng-class=\"danger\">\n" +
        "                        {{sign.commentsErrorText}}\n" +
        "                    </div>\n" +
        "                    <div ng-repeat=\"secVal in commentsArr track by $index\">\n" +
        "\n" +
        "                        <div ng-show=\"(secVal.comments.length > 0)?true:false\">\n" +
        " \n" +
        "                                    <div class=\"bottom-margin-xs border-bottom-xs\">\n" +
        "                                        <strong>{{secVal.sectionNumber}} {{secVal.sectionName}} </strong>\n" +
        "                                    </div>\n" +
        "                           \n" +
        "                            <div ng-class=\"{'false': 'bg-green-comments','true': 'bg-gray-comments'}[comm.addressed]\" ng-repeat=\"comm in secVal.comments\">\n" +
        "                                <div class=\"bottom-margin-xs\">\n" +
        "\n" +
        "                                   <a class=\"pointer decoration-n\">\n" +
        "                                        <span id=\"{{comm.Id}}-plus-comment-span\" ng-click=\"ck.setIconComment('collapse in',comm.Id)\" class=\"ng-hide\">\n" +
        "                                          <i id=\"{{comm.Id}}-plus-comment\"  class=\"fa fa-lg fa-plus-square-o ng-hide\"> </i> BY {{comm.commentedBy.toUpperCase()}}\n" +
        "                                        </span>\n" +
        "                                          <span id=\"{{comm.Id}}-minus-comment-span\" ng-click=\"ck.setIconComment('collapse',comm.Id)\">\n" +
        "                                         <i id=\"{{comm.Id}}-minus-comment\"  class=\"fa fa-lg fa-minus-square-o\"></i> BY {{comm.commentedBy.toUpperCase()}}\n" +
        "                                        </span>\n" +
        "                                      \n" +
        "                                       \n" +
        "                                    </a> \n" +
        "                                    <span class=\"pull-right\">{{comm.date}} </span>\n" +
        "                                    <div id=\"{{comm.Id}}-comment\">\n" +
        "                                        <span class=\"span_Carriage\" ng-hide=\"comm.addressState == true || comm.commentEditState\">{{comm.commentVal}}</span>\n" +
        "                                    </div>\n" +
        "\n" +
        "                                </div>\n" +
        "                                <button class=\"btn btn-primary btn-sm\" ng-click=\"sign.addressComments(secVal.sectionGUID,comm.Id)\">Address</button>\n" +
        "                            </div>\n" +
        "\n" +
        "                            <hr>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <!-- comments div ends -->\n" +
        "			<left-panel-slide-toggle></left-panel-slide-toggle>\n" +
        "        </div>\n" +
        "        \n" +
        "        <div id=\"rightContent\" class=\"col-md-8 scrollDiv\">\n" +
        "            <div id=\"signaturesMsgDiv\" ng-show=\"sign.showSignaturesAlert\" class=\"alert alert-dismissible\" role=\"alert\">\n" +
        "                <button type=\"button\" class=\"close\" ng-click=\"sign.dismissSignatureAlert()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                {{sign.signatureServiceMsg}}\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"panel-group\" id=\"accordion\">\n" +
        "                <div class=\"panel panel-default\" ng-repeat=\"(parentIndex,signoff) in sign.signatures\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        <h4 class=\"panel-title\">\n" +
        "					<a role=\"button\" data-toggle=\"collapse\" data-parent=\"#accordion\" data-target=\"#collapse{{parentIndex}}\" aria-expanded=\"true\" aria-controls=\"collapse{{parentIndex}}\">\n" +
        "					 {{signoff.signOffType}}\n" +
        "					</a>\n" +
        "					  \n" +
        "				  </h4>\n" +
        "                    </div>\n" +
        "                    <div id=\"collapse{{parentIndex}}\" class=\"panel-collapse collapse in\" ng-class={in:$first}>\n" +
        "                        <div class=\"panel-body\">\n" +
        "                            <div class=\"text-right bottom-margin\">\n" +
        "                                <a ng-show=\"!signoff.editmode\" class=\"btn btn-md btn-primary\" tooltip-placement=\"bottom\" tooltip=\"Edit\" type=\"submit\" ng-click=\"signoff.editmode = true; sign.edit(signoff,parentIndex)\"><span class=\"glyphicon glyphicon-pencil\"> </span></a>\n" +
        "                                <button id=\"btnSiteAssessor\" ng-show=\"signoff.editmode\" type=\"submit\" class=\"btn btn-sm btn-primary\" ng-click=\"sign.submitSignaturesSignOff(parentIndex,signoff)\">Save</button>\n" +
        "                                <button ng-show=\"signoff.editmode\" class=\"btn btn-sm btn-default\" ng-click=\"signoff.editmode = false;sign.cancelEdit(parentIndex)\">Cancel</button>\n" +
        "                            </div>\n" +
        "\n" +
        "                            <div class=\"form-horizontal\">\n" +
        "\n" +
        "                                <!--section signatures before edit-->\n" +
        "                                <div ng-show=\"!signoff.editmode\">\n" +
        "                                    <!--header for different signoffs-->\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label for=\"{{signoff.signOffType}}\" class=\"col-sm-2 control-label\">{{signoff.signOffType}}:</label>\n" +
        "                                        <div class=\"col-sm-4\">\n" +
        "                                            <p class=\"form-control-static\"><span ng-if=\"!signoff.signedForUser.userGUID && !signoff.signedOnBehalfOfUser.userGUID \">{{signoff.signOffUser.userName}}</span>\n" +
        "                                                <span ng-if=\"signoff.signedOnBehalfOfUser.userGUID\">{{signoff.signOffUser.userName}} <i>On Behalf Of</i> {{signoff.signedOnBehalfOfUser.userName}}</span>\n" +
        "                                                <span ng-if=\"signoff.signedForUser.userGUID\">   {{signoff.signedForUser.userName}} (Signed by: {{signoff.signOffUser.userName}})</span>\n" +
        "                                            </p>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                    <!--sec name signoff div-->\n" +
        "                                    <div ng-show=\"signoff.signOffType=='SEC Name'\">\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            <label for=\"email\" class=\"col-sm-2 control-label\">Email:</label>\n" +
        "                                            <div class=\"col-sm-4\">\n" +
        "                                                <p class=\"form-control-static\">{{signoff.signOffUser.email}}</p>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                        <div class=\"form-group\">\n" +
        "                                            <label for=\"phone\" class=\"col-sm-2 control-label\">Phone:</label>\n" +
        "                                            <div class=\"col-sm-4\">\n" +
        "                                                <p class=\"form-control-static\">{{signoff.signOffUser.phone}}</p>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                    <!--signoff detail befor edit-->\n" +
        "                                    <div class=\"form-group\">\n" +
        "                                        <label class=\"col-sm-2 control-label\">Signed off:</label>\n" +
        "                                        <div class=\"col-sm-4\">\n" +
        "                                            <p class=\"form-control-static\">\n" +
        "                                                <span class=\"form-control-static\" ng-if=\"!signoff.signatureGuid\">Not Signed</span>\n" +
        "                                                <span class=\"glyphicon glyphicon-ok text-success\" ng-if=\"signoff.signatureGuid\"></span>\n" +
        "                                            </p>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "\n" +
        "                                </div>\n" +
        "                                <!--End section signatures before edit-->\n" +
        "\n" +
        "                                <!--start section signatures after edit-->\n" +
        "\n" +
        "                                <div ng-if=\"signoff.editmode\">\n" +
        "                                    <div id=\"signOffMsgDiv{{parentIndex}}\" ng-show=\"sign.showAlert[parentIndex]\" class=\"alert alert-dismissible\" role=\"alert\">\n" +
        "                                        <button type=\"button\" class=\"close\" ng-click=\"sign.dismissAlert(parentIndex)\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                                        {{sign.serviceMessage[parentIndex]}}\n" +
        "                                    </div>\n" +
        "                                    <div ng-if=\"!signoff.signOffUser.signatureFileCoreFileGUID\" class=\"alert alert-warning\">\n" +
        "                                        <p>You do not have a signature uploaded! Click <a href=\"\">here</a> to manage your account.</p>\n" +
        "                                    </div>\n" +
        "\n" +
        "                                    <div class=\"row\">\n" +
        "                                        <!--SEC div-->\n" +
        "                                        <div class=\"col-lg-6 col-md-6\">\n" +
        "                                            <div class=\"form-group\" ng-if=\"signoff.signOffType=='SEC Name'\">\n" +
        "                                                <div class=\"col-sm-8 col-xs-12 col-sm-offset-4\">\n" +
        "                                                    <select class=\"form-control\" ng-options=\"user as user.userName for user in sign.usersArray track by user.userGUID\" id=\"SECUsers\" name=\"users\" ng-model=\"sign.secUser[parentIndex]\" ng-change=\"sign.selectSecUser(parentIndex,user,signoff)\">\n" +
        "                                                        <option value=\"\">Select a user...</option>\n" +
        "                                                    </select>\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                            <!--common name div-->\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"{{signoff.signOffType}}Name\" class=\"col-sm-4 control-label\">{{signoff.signOffType}}:</label>\n" +
        "                                                <div class=\"col-sm-8 col-xs-12\">\n" +
        "                                                    <input type=\"text\" class=\"form-control\" id=\"{{signoff.signOffType}}Name\" ng-model=\"signoff.signOffUser.userName\">\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                        <!--common title div-->\n" +
        "                                        <div class=\"col-lg-6 col-md-6\">\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"{{signoff.signOffType}}Title\" class=\"col-sm-4 control-label\">Title:</label>\n" +
        "                                                <div class=\"col-sm-8 col-xs-12\">\n" +
        "                                                    <input type=\"text\" class=\"form-control\" id=\"{{signoff.signOffType}}Title\" ng-model=\"signoff.signOffUser.title\">\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "\n" +
        "                                    <!--Email and Phone fields for SEC User-->\n" +
        "                                    <div class=\"row\" ng-if=\"signoff.signOffType=='SEC Name'\">\n" +
        "                                        <div class=\"col-lg-6 col-md-6\">\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"userEmail\" class=\"col-sm-4 control-label\">Email:</label>\n" +
        "                                                <div class=\"col-sm-8 col-xs-12\">\n" +
        "                                                    <input type=\"text\" class=\"form-control\" id=\"userEmail\" ng-model=\"signoff.signOffUser.email\">\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                        <div class=\"col-lg-6 col-md-6\">\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"userPhone\" class=\"col-sm-4 control-label\">Phone:</label>\n" +
        "                                                <div class=\"col-sm-8 col-xs-12\">\n" +
        "                                                    <input type=\"text\" class=\"form-control\" id=\"userPhone\" ng-model=\"signoff.signOffUser.phone\">\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "\n" +
        "                                    <!-- section signOnBehalf -->\n" +
        "                                    <div class=\"row signOnBehalf\" ng-show=\"sign.isSignOnBehalfChecked(parentIndex,signoff)\">\n" +
        "                                        <div class=\"col-lg-6 col-md-6\">\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"{{signoff.signOffType}}UsersOnBehalf\" class=\"col-sm-4 control-label\">On behalf of:</label>\n" +
        "                                                <div class=\"col-sm-8 col-xs-12\">\n" +
        "                                                    <select class=\"form-control\" id=\"{{signoff.signOffType}}UsersOnBehalf\" ng-options=\"user as user.userName for user in sign.usersArray track by user.userGUID\" name=\"usersOnBehalf\" ng-change=\"sign.selectSignOnBehalfUser(parentIndex,user,signoff)\" ng-model=\"sign.signOnBehalfUser[parentIndex]\">\n" +
        "                                                        <option value=\"\">Select a user...</option>\n" +
        "                                                    </select>\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                        <div class=\"col-lg-6 col-md-6\">\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"{{signoff.signOffType}}SignOnBehalfName\" class=\"col-sm-4 control-label\">Name:</label>\n" +
        "                                                <div class=\"col-sm-8 col-xs-12\">\n" +
        "                                                    <input type=\"text\" class=\"form-control\" id=\"{{signoff.signOffType}}SignOnBehalfName\" ng-model=\"signoff.signedOnBehalfOfUser.userName\">\n" +
        "                                                </div>\n" +
        "\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                    <div class=\"row signOnBehalf\" ng-show=\"sign.isSignOnBehalfChecked(parentIndex,signoff)\">\n" +
        "                                        <div class=\"col-lg-6 col-md-6\">\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"{{signoff.signOffType}}SignOnBehalfTitle\" class=\"col-sm-4 control-label\">Title:</label>\n" +
        "                                                <div class=\"col-sm-8 col-xs-12\">\n" +
        "                                                    <input type=\"text\" class=\"form-control\" id=\"{{signoff.signOffType}}SignOnBehalfTitle\" ng-model=\"signoff.signedOnBehalfOfUser.title\">\n" +
        "                                                </div>\n" +
        "\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                    <!--signOnBehalf section end-->\n" +
        "\n" +
        "                                    <!--Sign for section -->\n" +
        "                                    <div class=\"row signFor\" ng-show=\"sign.isSignForChecked(parentIndex,signoff)\">\n" +
        "                                        <div class=\"col-lg-6 col-md-6\">\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label for=\"{{signoff.signOffType}}SignForUsers\" class=\"col-sm-4 control-label\">Sign For:</label>\n" +
        "                                                <div class=\"col-sm-8 col-xs-12\">\n" +
        "                                                    <select class=\"form-control\" id=\"{{signoff.signOffType}}SignForUsers\" ng-options=\"user as user.userName for user in sign.usersArray | filter: {allowAdminsToSign: true} track by user.userGUID\" name=\"signForUsers\" ng-change=\"sign.selectSignForUser(parentIndex,user,signoff)\" ng-model=\"sign.signForUser[parentIndex]\">\n" +
        "                                                        <option value=\"\">Select a user...</option>\n" +
        "                                                    </select>\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                    <!--signFor section end-->\n" +
        "                                    <div class=\"row\" ng-if=\"sign.checkForSecName(signoff)\">\n" +
        "                                        <div class=\"col-sm-12\">\n" +
        "                                            <div class=\"form-group\">\n" +
        "                                                <label class=\"col-sm-2 control-label\">Signed off:</label>\n" +
        "                                                <div class=\"col-sm-9\">\n" +
        "\n" +
        "                                                    <div>\n" +
        "                                                        <div class=\"radio\" ng-if=\"signoff.signatureGuid\">\n" +
        "                                                            <label>\n" +
        "                                                                <input type=\"radio\" id=\"unSign\" name=\"{{parentIndex}}\" ng-model=\"signoff.showSignVal\" value=\"unSign{{parentIndex}}\" ng-click=\"sign.unSignEvent(parentIndex,signoff)\"> UnSign\n" +
        "                                                            </label>\n" +
        "                                                        </div>\n" +
        "\n" +
        "\n" +
        "                                                        <div class=\"radio\">\n" +
        "                                                            <label>\n" +
        "                                                                <input type=\"radio\" ng-init=\"sign.changeSignText(signoff,parentIndex)\" id=\"signOrOverride\" name=\"{{parentIndex}}\" ng-model=\"signoff.showSignVal\" value=\"sign{{parentIndex}}\" ng-click=\"sign.signOrOverRideEvent(parentIndex,signoff)\"> {{sign.signText[parentIndex]}}\n" +
        "                                                            </label>\n" +
        "                                                        </div>\n" +
        "                                                        <div class=\"radio\">\n" +
        "                                                            <label>\n" +
        "                                                                <input type=\"radio\" id=\"signOnBehalfOrOverride\" ng-init=\"sign.changeSignOnBehalfText(signoff,parentIndex)\" name=\"{{parentIndex}}\" ng-model=\"signoff.showSignVal\" value=\"signOnBehalf{{parentIndex}}\" ng-click=\"sign.signOnBehalOrOverRideEvent(parentIndex,signoff)\"> {{sign.signOnBehalfText[parentIndex]}}\n" +
        "                                                            </label>\n" +
        "                                                        </div>\n" +
        "                                                        <div class=\"radio\" ng-if=\"signoff.showSignFor\">\n" +
        "                                                            <label>\n" +
        "                                                                <input type=\"radio\" id=\"signForVal\" ng-init=\"sign.changeSignForText(signoff,parentIndex)\" name=\"{{parentIndex}}\" ng-model=\"signoff.showSignVal\" value=\"signFor{{parentIndex}}\" ng-click=\"sign.signForOrOverRideEvent(parentIndex,signoff)\"> {{sign.signForText[parentIndex]}}\n" +
        "                                                            </label>\n" +
        "                                                        </div>\n" +
        "                                                    </div>\n" +
        "\n" +
        "\n" +
        "                                                    <div class=\"checkbox\">\n" +
        "                                                        <label>\n" +
        "                                                            <input type=\"checkbox\" ng-model=\"signoff.digitalSignatureInPrintedReport\">Wet Sign (no digital signature in printed report)\n" +
        "                                                        </label>\n" +
        "                                                    </div>\n" +
        "                                                    <div class=\"checkbox\">\n" +
        "                                                        <label>\n" +
        "                                                            <input type=\"checkbox\" ng-model=\"signoff.showInPrintedReport\">Show In PDF (show signature in printed report)\n" +
        "                                                        </label>\n" +
        "                                                    </div>\n" +
        "\n" +
        "\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                </div>\n" +
        "\n" +
        "                                <!--end section signatures after edit-->\n" +
        "\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <!--Certication panel starts new-->\n" +
        "                <div class=\"panel panel-default\" ng-if=\"sign.certifications.length\">\n" +
        "                    <div class=\"panel-heading\">\n" +
        "                        <h4 class=\"panel-title\">\n" +
        "					<a role=\"button\" data-toggle=\"collapse\" data-parent=\"#accordion\" data-target=\"#collapse{{sign.signatures.length}}\" aria-expanded=\"true\" aria-controls=\"collapse{{sign.signatures.length}}\">\n" +
        "					 Certifications\n" +
        "					</a>\n" +
        "				  </h4>\n" +
        "                    </div>\n" +
        "                    <div id=\"collapse{{sign.signatures.length}}\" class=\"panel-collapse collapse in\">\n" +
        "                        <div class=\"panel-body\">\n" +
        "                            <!-- certification  button  -->\n" +
        "                            <div class=\"text-right  bottom-margin\">\n" +
        "                                <a class=\"btn btn-md btn-primary\" ng-show=\"!sign.certicationEditMode\" tooltip=\"Edit\" tooltip-placement=\"bottom\" type=\"submit\" ng-click=\"sign.certicationEditMode = true; sign.editCertification()\"><span class=\"glyphicon glyphicon-pencil\"> </span></a>\n" +
        "                                <button id=\"btnSiteAssessor\" ng-show=\"sign.certicationEditMode\" type=\"submit\" class=\"btn btn-sm btn-primary\" ng-click=\"sign.saveCertification()\">Save</button>\n" +
        "                                <button ng-show=\"sign.certicationEditMode\" type=\"submit\" class=\"btn btn-sm btn-default\" ng-click=\"sign.cancelCertificationEdit(sign.signatures.length)\">Cancel</button>\n" +
        "                            </div>\n" +
        "                            <!-- certification body -->\n" +
        "                            <div ng-repeat=\"(certificationIndex,certification) in sign.certifications\">\n" +
        "                                <strong ng-if=\"!sign.certicationEditMode\">{{certification.signOffType}}</strong>\n" +
        "                                <div ng-if=\"!sign.certicationEditMode\" class=\"well\">\n" +
        "                                    <span ng-if=\"!certification.signedForUser.userGUID && certification.signatureGuid\"><strong>Signed By: </strong> {{sign.certifiedBy[certificationIndex]}}</span>\n" +
        "                                    <span ng-if=\"certification.signedForUser.userGUID\"><strong>Signed By: </strong>{{sign.certifiedForBy[certificationIndex]}}</span>\n" +
        "                                    <span ng-if=\"!certification.signatureGuid\">Not Signed</span>\n" +
        "                                    <p>{{certification.certificationText}}</p>\n" +
        "                                </div>\n" +
        "                                <div ng-if=\"sign.certicationEditMode\">\n" +
        "                                    <div ng-if=\"!certification.eponly\">\n" +
        "                                        You cannot sign here because you are not listed as an Environmental Professional in <a href=\"\">Your Account</a>.\n" +
        "                                    </div>\n" +
        "                                    <div ng-if=\"certification.eponly\">\n" +
        "                                        <div id=\"certificationMsgDiv\" ng-show=\"sign.showCertAlert\" class=\"alert alert-dismissible\" role=\"alert\">\n" +
        "                                        <button type=\"button\" class=\"close\" ng-click=\"sign.dismissAlert()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "                                        {{sign.certificationServiceMsg}}\n" +
        "                                    </div>\n" +
        "\n" +
        "                                    <div class=\"form-horizontal\">\n" +
        "                                        <div class=\"row\">\n" +
        "                                            <div class=\"col-lg-6 col-md-6\">\n" +
        "                                                <div class=\"form-group\">\n" +
        "                                                    <label class=\"col-sm-4 control-label\" for=\"{{certification.signOffType}}Name\">{{certification.signOffType}}:</label>\n" +
        "                                                    <div class=\"col-sm-8 col-xs-12\">\n" +
        "                                                        <input type=\"text\" class=\"form-control\" id=\"{{certification.signOffType}}Name\" ng-model=\"certification.signOffUser.userName\">\n" +
        "                                                    </div>\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                            <div class=\"col-lg-6 col-md-6\">\n" +
        "                                                <div class=\"form-group\">\n" +
        "                                                    <label for=\"{{certification.signOffType}}SignTitle\" class=\"col-sm-4 control-label\">Title:</label>\n" +
        "                                                    <div class=\"col-sm-8 col-xs-12\">\n" +
        "                                                        <input type=\"text\" class=\"form-control\" id=\"{{certification.signOffType}}SignTitle\" ng-model=\"certification.signOffUser.title\">\n" +
        "                                                    </div>\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                        <div class=\"row\" ng-show=\"sign.isCertificationForChecked(certificationIndex, certification)\">\n" +
        "                                            <div class=\"col-lg-6 col-md-6\">\n" +
        "                                                <div class=\"form-group\">\n" +
        "                                                    <label for=\"{{certification.signOffType}}CertificationsForUsers\" class=\"col-sm-4 control-label\">Sign For:</label>\n" +
        "                                                    <div class=\"col-sm-8 col-xs-12\">\n" +
        "                                                        <select class=\"form-control\" id=\"{{certification.signOffType}}CertificationsForUsers\" ng-options=\"user as user.userName for user in sign.usersArray | filter: {allowAdminsToSign: true} track by user.userGUID\" name=\"signForUsers\" ng-change=\"sign.selectCertificationForUser(certificationIndex,user,certification)\" ng-model=\"sign.certificationForUser[certificationIndex]\">\n" +
        "                                                            <option value=\"\">Select a user...</option>\n" +
        "                                                        </select>\n" +
        "                                                    </div>\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                        <div class=\"row\">\n" +
        "                                            <div class=\"col-sm-12\">\n" +
        "                                                <div class=\"form-group\">\n" +
        "                                                    <label class=\"control-label col-sm-2\">Signed off:</label>\n" +
        "                                                    <div class=\"col-sm-8 col-xs-12\">\n" +
        "                                                        <div class=\"checkbox\" ng-if=\"!certification.showSignFor\">\n" +
        "                                                            <label>\n" +
        "                                                                <input type=\"checkbox\" ng-model=\"certification.isCertified\" ng-change=\"sign.checkUncheckCertification(certification.isCertified,certification)\">Sign\n" +
        "                                                            </label>\n" +
        "                                                        </div>\n" +
        "                                                        <div ng-if=\"certification.showSignFor\">\n" +
        "\n" +
        "                                                            <div class=\"radio\" ng-if=\"certification.signatureGuid\">\n" +
        "                                                                <label>\n" +
        "                                                                    <input type=\"radio\" id=\"unSignCert\" name=\"{{certificationIndex}}\" ng-model=\"certification.showCertificationVal\" value=\"unsign{{certificationIndex}}\" ng-click=\"sign.unSignCertificationEvent(certificationIndex,certification)\"> UnSign\n" +
        "                                                                </label>\n" +
        "                                                            </div>\n" +
        "\n" +
        "                                                            <div class=\"radio\">\n" +
        "                                                                <label>\n" +
        "                                                                    <input type=\"radio\" ng-init=\"sign.changeCertText(certification,certificationIndex)\" id=\"signOrOverrideCerttification\" name=\"{{certificationIndex}}\" ng-model=\"certification.showCertificationVal\" value=\"sign{{certificationIndex}}\" ng-click=\"sign.signOrOverRideCertificationEvent(certificationIndex,certification)\"> {{sign.certText[certificationIndex]}}\n" +
        "                                                                </label>\n" +
        "                                                            </div>\n" +
        "\n" +
        "                                                            <div class=\"radio\">\n" +
        "                                                                <label>\n" +
        "                                                                    <input type=\"radio\" id=\"certForVal\" ng-init=\"sign.changeCertForText(certification,certificationIndex)\" name=\"{{certificationIndex}}\" ng-model=\"certification.showCertificationVal\" value=\"signFor{{certificationIndex}}\" ng-click=\"sign.certificationForOrOverRideEvent(certificationIndex,certification)\"> {{sign.certForText[certificationIndex]}}\n" +
        "                                                                </label>\n" +
        "                                                            </div>\n" +
        "                                                        </div>\n" +
        "\n" +
        "                                                        <!--<div class=\"checkbox\">\n" +
        "                                                    <label>\n" +
        "                                                        <input type=\"checkbox\" ng-init=\"sign.changeCertForText(certificationIndex,certification)\" ng-model=\"certification.isCertificationFor\" ng-change=\"sign.checkUncheckCertificationForUser(certification.isCertificationFor,certification, certificationIndex)\">{{sign.certText[certificationIndex]}}\n" +
        "                                                    </label>\n" +
        "                                                </div>-->\n" +
        "                                                        <div class=\"checkbox\">\n" +
        "                                                            <label>\n" +
        "                                                                <input type=\"checkbox\" ng-model=\"certification.digitalSignatureInPrintedReport\">Wet Sign (no digital signature in printed report)\n" +
        "                                                            </label>\n" +
        "                                                        </div>\n" +
        "                                                        <textarea ng-model=\"certification.certificationText\" rows=\"6\" cols=\"70\" id=\"County\" class=\"form-control\"></textarea>\n" +
        "                                                    </div>\n" +
        "                                                </div>\n" +
        "                                            </div>\n" +
        "                                        </div>\n" +
        "                                    </div>\n" +
        "                                    </div>\n" +
        "                                    \n" +
        "                                    \n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "            <!--Certication panel starts-->\n" +
        "\n" +
        "\n" +
        "        </div>\n" +
        "\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportAuthoring/views/simplifiedReport.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/simplifiedReport.html",
        "<div class=\"container-fluid\" ng-controller=\"CKEditorCtrl as ck\">\n" +
        "    <div class=\"ReportwriteHead top-margin\">\n" +
        "        <div class=\"row\">\n" +
        "            <div class=\"col-md-7 col-lg-7 col-xs-12\">\n" +
        "                <span ng-bind-html=\"projectDashLink\"></span>\n" +
        "                <h4><ins ng-bind-html=\"giLink\"></ins></h4>\n" +
        "            </div>\n" +
        "            <div class=\"col-md-5 col-lg-5 col-xs-12 top-margin-xs text-right\">\n" +
        "                <div class=\"btn-group\">\n" +
        "                    <button class=\"btn btn-default disabled\" type=\"button\">{{ck.reportPhase}}</button>\n" +
        "                    <button class=\"btn btn-danger\" type=\"button\"><i class=\"glyphicon glyphicon-minus\"></i></button>\n" +
        "                    <button class=\"btn btn-success\" type=\"button\"><i class=\"glyphicon glyphicon-plus\"></i></button>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"row\">\n" +
        "            <div class=\"col-md-12 col-lg-12\">\n" +
        "                <ul class=\"nav nav-tabs bottom-margin-none\">\n" +
        "                    <li ui-sref-active=\"active\">\n" +
        "                        <a class=\"pointer\" ui-sref=\".Setup\">Setup</a>\n" +
        "                    </li>\n" +
        "                    <li ui-sref-active=\"active\">\n" +
        "                        <a class=\"pointer\" ui-sref=\".Write\">Write</a>\n" +
        "                    </li>\n" +
        "                    <li ui-sref-active=\"active\">\n" +
        "                        <a class=\"pointer\" ui-sref=\".Appendices\">Appendices</a>\n" +
        "                    </li>\n" +
        "                    <li ui-sref-active=\"active\">\n" +
        "                        <a class=\"pointer\" ui-sref=\".Sign\">Sign</a>\n" +
        "                    </li>\n" +
        "                    <li ui-sref-active=\"active\">\n" +
        "                        <a class=\"pointer\" ui-sref=\".Assemble\">Assemble</a>\n" +
        "                    </li>\n" +
        "                    <li>\n" +
        "                        <div id=\"lastUpdatedDetails\" class=\"top-margin-sm\"></div>\n" +
        "                    </li>\n" +
        "                    <li class=\"pull-right\">\n" +
        "                        <div class=\"form-inline\">\n" +
        "                            <span ng-controller=\"ReportOutputPDFConvertController as pdfconvertctrl\">\n" +
        "								<button type=\"button\" class=\"btn btn-sm btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n" +
        "									<i class=\"glyphicon glyphicon-book\"></i> Quick View <span class=\"caret\"></span>\n" +
        "                            </button>\n" +
        "                            <ul class=\"dropdown-menu\" aria-labelledby=\"myTabDrop1\" id=\"myTabDrop1-contents\">\n" +
        "                                <li><a ng-click=\"pdfconvertctrl.GeneratePDF('ExecutiveSummary');\" class=\"pointer\" id=\"dropdown1-tab\">Executive Summary</a></li>\n" +
        "                                <li><a ng-click=\"pdfconvertctrl.GeneratePDF('DetailReport');\" class=\"pointer\" id=\"dropdown2-tab\">Detail Report</a></li>\n" +
        "                                <li><a ng-click=\"pdfconvertctrl.GeneratePDF('DetailReportWithComments');\" class=\"pointer\" id=\"dropdown3-tab\">Detail Report with Comments</a></li>\n" +
        "                            </ul>\n" +
        "                            </span>\n" +
        "                            <span class=\"dropdown\">\n" +
        "								<button type=\"button\" class=\"btn btn-sm btn-default dropdown-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\">\n" +
        "									<i class=\"glyphicon glyphicon-wrench\"></i> Tools <span class=\"caret\"></span>\n" +
        "                            </button>\n" +
        "\n" +
        "                            <ul ng-controller=\"SimplifiedReportController\" class=\"dropdown-menu tools-dropdown\" aria-labelledby=\"myTabDrop1\" id=\"myTabDrop1-contents\">\n" +
        "                                <li class=\"disabled\"><a disabled href=\"\">PARCEL Writer</a></li>\n" +
        "                                <li ng-click=\"openVariableReplacer()\"><a>Variable Replacer</a></li>\n" +
        "                                <li class=\"disabled\"><a>Compare</a></li>\n" +
        "                                <li><a>Grant Access</a></li>\n" +
        "                                <li class=\"disabled\"><a>Kickoff Report</a></li>\n" +
        "                                <li class=\"disabled\"><a>Import</a></li>\n" +
        "                                <li class=\"disabled\"><a>PARCEL Intel</a></li>\n" +
        "                                <li class=\"pointer\"><a ng-click=\"addProjectReportRedirect()\">Add Report(s) to this Project</a></li>\n" +
        "                                <li class=\"disabled\"><a>Related Links</a></li>\n" +
        "                                <li class=\"pointer\"><a ng-click=\"projectDocumentRedirect()\">Project Documents</a></li>\n" +
        "                                <li class=\"disabled\"><a>Administrative Tools</a></li>\n" +
        "                            </ul>\n" +
        "                            </span>\n" +
        "                            <div class=\"form-group\" ng-controller=\"SimplifiedReportController\">\n" +
        "                                <div id=\"refactorSelect2\" class=\"custom-select2\" rt-select2=\"select2Options\" provider=\"reportsProvider\" template=\"reportsSearchGenerateMarkup\" afterevent=\"displayReports\" minimuminput=0></div>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </li>\n" +
        "                </ul>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <div class=\"RW-headerButton\" ng-click=\"ck.toggleReportwriteHead()\">\n" +
        "        <span class=\"btn btn-xs btn-primary hideRwHeader\"><i class=\"fa fa-chevron-up pointer\"></i>&nbsp;Hide&nbsp;<i class=\"fa fa-chevron-up pointer\"></i></span>\n" +
        "        <span class=\"btn btn-xs btn-primary showRwHeader\" style=\"display:none\"><i class=\"fa fa-chevron-down pointer\"></i>&nbsp;Show &nbsp;<i class=\"fa fa-chevron-down pointer\"></i></span>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"row\">\n" +
        "        <div class=\"col-md-12 col-lg-12\">\n" +
        "            <div role=\"tabpanel\" class=\"tab-content panel bottom-margin-xs\">\n" +
        "                <div class=\"panel-body\">\n" +
        "                    <div ui-view=\"\"></div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "");
}]);

angular.module("../app/modules/ReportAuthoring/views/tagWithDashes.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/tagWithDashes.html",
        "<div class=\"alert alert-warning summary-area-maximized\">\n" +
        "    <button class=\"btn btn-default btn-xs summary-area-btn pull-right\" ng-click=\"expandCollapseTag($event)\">\n" +
        "        <i class=\"fa fa-minus\"></i>\n" +
        "    </button>\n" +
        "    <div ng-bind-html=\"tagData\"></div>\n" +
        "  <!-- <p>{{tagData}}</p>-->\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportAuthoring/views/tinyMCE.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/tinyMCE.html",
        "<!doctype html>\n" +
        "<html>\n" +
        "<head>\n" +
        "  \n" +
        "\n" +
        "</head>\n" +
        "<body>\n" +
        "    <div id=\"container\" ng-controller=\"tinyMCECtrl as tn\">\n" +
        "        <form name=\"form\" novalidate>\n" +
        "           <!-- NOTE: TinyMCE textareas must have id's -->\n" +
        "            <div>\n" +
        "                <textarea data-ui-tinymce id=\"tinymce\" ng-model=\"tn.tinyDefText\"></textarea>\n" +
        "                \n" +
        "            </div>\n" +
        "          \n" +
        "\n" +
        "\n" +
        "        </form>\n" +
        "    </div>\n" +
        "</body>\n" +
        "</html>\n" +
        "");
}]);

angular.module("../app/modules/ReportAuthoring/views/viewMap.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportAuthoring/views/viewMap.html",
        "<div class=\"modal-header\">\n" +
        "    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"viewMap.CancelDelete()\"><span aria-hidden=\"true\">×</span></button>\n" +
        "    <h4 class=\"modal-title\" id=\"myLargeModalLabel\">View Map</h4>\n" +
        "</div>\n" +
        "<div class=\"modal-body\">\n" +
        "    <div google-map ng-model=\"viewMap.searchLocation\" class=\"modal-viewMap\">\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportOutput/views/reportOutput.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportOutput/views/reportOutput.html",
        "<!-- controller: reportOutputController as reportOutput -->\n" +
        "<div>\n" +
        "    <div ng-repeat=\"section in reportOutput.sections\">\n" +
        "    </div>\n" +
        "    <div class=\"\">\n" +
        "        <div ng-repeat=\"sec in reportOutput.sections\" replace-data=\"sec\">\n" +
        "            <div class='boxCK'>\n" +
        "                <span class='editCK'>edit</span>\n" +
        "                <div ck-editor remove-ck-plugin=\"saveReportWritingCkData\" class='textCK' editor-height=\"700\" editor-full-page=\"true\">\n" +
        "                    <div add-html id=\"section_{{sec.sectionID}}\" resp=\"sec\" obj=\"ck.obj\">\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportOutput/views/reportOutputSetup.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportOutput/views/reportOutputSetup.html",
        "<!-- controller: ReportOutputSetupController as reportOutputSetup -->\n" +
        "<div>\n" +
        "    <div class=\"container-fluid   margin-top-header\">\n" +
        "        <div class=\"row\">\n" +
        "\n" +
        "            <div>\n" +
        "                <h2>Layouts</h2>\n" +
        "            </div>\n" +
        "\n" +
        "            <!-- left content -->\n" +
        "            <div id=\"leftContent\" class=\"col-md-4 col-lg-4 col-sm-3 margin-padding-0 well\">\n" +
        "                <div class=\"top-margin\">\n" +
        "                    <ul class=\"nav nav-pills nav-stacked\">\n" +
        "                        <li>\n" +
        "                            <a class=\"toc-section\" ng-click=\"reportOutputSetup.layoutClicked('global')\" ng-class=\"{'current-section': reportOutputSetup.selectedLayout == 'global'}\">Global Settings</a>\n" +
        "                        </li>\n" +
        "                        <li>\n" +
        "                            <a class=\"toc-section\" ng-click=\"reportOutputSetup.layoutClicked('cover')\" ng-class=\"{'current-section': reportOutputSetup.selectedLayout == 'cover'}\">Cover Page</a>\n" +
        "                        </li>\n" +
        "                        <li>\n" +
        "                            <a class=\"toc-section\" ng-click=\"reportOutputSetup.layoutClicked('header')\" ng-class=\"{'current-section': reportOutputSetup.selectedLayout == 'header'}\">Header</a>\n" +
        "                        </li>\n" +
        "                        <li>\n" +
        "                            <a class=\"toc-section\" ng-click=\"reportOutputSetup.layoutClicked('footer')\" ng-class=\"{'current-section': reportOutputSetup.selectedLayout == 'footer'}\">Footer</a>\n" +
        "                        </li>\n" +
        "                        <li>\n" +
        "                            <a class=\"toc-section\" ng-click=\"reportOutputSetup.layoutClicked('generalInformation')\" ng-class=\"{'current-section': reportOutputSetup.selectedLayout == 'generalInformation'}\">General Information</a>\n" +
        "                        </li>\n" +
        "                        <li>\n" +
        "                            <a class=\"toc-section\" ng-click=\"reportOutputSetup.layoutClicked('transmittalLetter')\" ng-class=\"{'current-section': reportOutputSetup.selectedLayout == 'transmittalLetter'}\">Transmittal Letter</a>\n" +
        "                        </li>\n" +
        "                    </ul>\n" +
        "                    <div class=\"top-margin\">\n" +
        "                        <ul class=\"nav nav-pills nav-stacked\">\n" +
        "                            <li>\n" +
        "                                <a class=\"toc-section\">Section Overrides</a>\n" +
        "                            </li>\n" +
        "                        </ul>\n" +
        "                        <toc-display sections=\"reportOutputSetup.toc.sections\" selected-section=\"reportOutputSetup.selectedSection\" section-click=\"reportOutputSetup.sectionClicked(section)\">\n" +
        "\n" +
        "                        </toc-display>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <!-- left content ends -->\n" +
        "\n" +
        "            <!-- right content -->\n" +
        "            <div class=\"col-md-8 col-lg-8 col-sm-9\">\n" +
        "                <div class=\"panel-body\" ng-show=\"reportOutputSetup.selectedLayout == 'global'\">\n" +
        "                    <div id=\"globalLayout\" class=\"boxCK\">\n" +
        "                        <span class='editCK'>edit</span>\n" +
        "                        <div ck-editor remove-ck-plugin=\"saveReportWritingCkData\" class=\"textCK\" editor-full-page=\"true\" editor-height=\"700\" ng-model=\"reportOutputSetup.globalSt\">\n" +
        "                            <div id=\"section-title\" name=\"section-narrative\" contenteditable=\"true\" style=\"cursor: pointer; background:#eee;border:1px solid #ccc;padding:5px 10px; margin-botton:10px;\">\n" +
        "                                <div>\n" +
        "                                    <span id=\"data-placeholder\">Section Title</span>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                            <div id=\"section-sub-title\" name=\"section-narrative\" contenteditable=\"true\" style=\"cursor: pointer; background:#eee;border:1px solid #ccc;padding:5px 10px; margin-botton:10px;\">\n" +
        "                                <div>\n" +
        "                                    <span id=\"data-placeholder\">Sub-Section Title</span>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                            <div id=\"section-sub-sub-title\" name=\"section-narrative\" contenteditable=\"true\" style=\"cursor: pointer; background:#eee;border:1px solid #ccc;padding:5px 10px; margin-botton:10px;\">\n" +
        "                                <div>\n" +
        "                                    <span id=\"data-placeholder\">Sub-Sub-Section Title</span>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                            <br>\n" +
        "                            <div id=\"section-narrative\" name=\"section-narrative\" contenteditable=\"true\" style=\"cursor: pointer; background:#eee;border:1px solid #ccc;padding:5px 10px; margin-botton:10px;\">\n" +
        "                                <div>\n" +
        "                                    <span id=\"data-placeholder\">Narrative</span>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                            <br>\n" +
        "                            <div id=\"section-photos\" name=\"section-photos\" contenteditable=\"true\" style=\"cursor: pointer; background:#eee;border:1px solid #ccc;padding:5px 10px; margin-botton:10px;\">\n" +
        "                                <div>\n" +
        "                                    <span id=\"data-placeholder\">Photos</span>\n" +
        "                                </div>\n" +
        "                            </div>\n" +
        "                            <br>\n" +
        "                            <div id=\"section-table\">\n" +
        "                                <table>\n" +
        "                                    <thead>\n" +
        "                                        <th>Table Column</th>\n" +
        "                                    </thead>\n" +
        "                                    <tbody>\n" +
        "                                        <tr>\n" +
        "                                            <td>Table Data</td>\n" +
        "                                        </tr>\n" +
        "                                    </tbody>\n" +
        "                                </table>\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "\n" +
        "                        <input type=\"button\" class=\"btn btn-success top-margin\" value=\"Preview\" ng-click=\"reportOutputSetup.saveSetup()\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"panel-body\" ng-show=\"reportOutputSetup.selectedLayout == 'cover'\">\n" +
        "                    <div id=\"globalLayout\" class='boxCK'>\n" +
        "                        <span class='editCK'>edit</span>\n" +
        "                        <div ck-editor remove-ck-plugin=\"saveReportWritingCkData\" class=\"textCK\" editor-full-page=\"true\" editor-height=\"700\" ng-model=\"reportOutputSetup.coverPageStyling\">\n" +
        "                            <div id=\"cover-page-styling\">\n" +
        "                                <img width=\"624\" height=\"670\" src=\"app/modules/ReportOutput/utilities/cover%20page%20sample.jpg\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"panel-body\" ng-show=\"reportOutputSetup.selectedLayout == 'header'\">\n" +
        "                    <div id=\"globalLayout\" class='boxCK'>\n" +
        "                        <span class='editCK'>edit</span>\n" +
        "                        <div ck-editor remove-ck-plugin=\"saveReportWritingCkData\" class=\"textCK\" editor-full-page=\"true\" editor-height=\"700\" ng-model=\"reportOutputSetup.headerStyling\">\n" +
        "                            <div id=\"header-styling\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"panel-body\" ng-show=\"reportOutputSetup.selectedLayout == 'footer'\">\n" +
        "                    <div id=\"globalLayout\" class='boxCK'>\n" +
        "                        <span class='editCK'>edit</span>\n" +
        "                        <div ck-editor remove-ck-plugin=\"saveReportWritingCkData\" class=\"textCK\" editor-full-page=\"true\" editor-height=\"700\" ng-model=\"reportOutputSetup.footerStyling\">\n" +
        "                            <div id=\"footer-styling\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"panel-body\" ng-show=\"reportOutputSetup.selectedLayout == 'generalInformation'\">\n" +
        "                    <div id=\"globalLayout\" class='boxCK'>\n" +
        "                        <span class='editCK'>edit</span>\n" +
        "                        <div ck-editor remove-ck-plugin=\"saveReportWritingCkData\" class=\"textCK\" editor-full-page=\"true\" editor-height=\"700\" ng-model=\"reportOutputSetup.generalInformationStyling\">\n" +
        "                            <div id=\"general-information-styling\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"panel-body\" ng-show=\"reportOutputSetup.selectedLayout == 'transmittalLetter'\">\n" +
        "                    <div id=\"globalLayout\" class='boxCK'>\n" +
        "                        <span class='editCK'>edit</span>\n" +
        "                        <div ck-editor remove-ck-plugin=\"saveReportWritingCkData\" class=\"textCK\" editor-full-page=\"true\" editor-height=\"700\" ng-model=\"reportOutputSetup.transmittalLetterStyling\">\n" +
        "                            <div id=\"transmittal-letter-styling\">\n" +
        "                            </div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div id=\"reportSectionData\" ng-repeat=\"sec in reportOutputSetup.resp.sections\">\n" +
        "                    <div add-html id=\"section_{{sec.sectionID}}\" resp=\"sec\" obj=\"ck.obj\" ng-show=\"reportOutputSetup.sectionVisible(sec)\">\n" +
        "\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <!-- right content ends -->\n" +
        "\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportSetup/views/GlobalPageSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportSetup/views/GlobalPageSettings.html",
        "<h4 class=\"border-bottom\">\n" +
        "        Global Page Settings:\n" +
        "    </h4>\n" +
        "\n" +
        "\n" +
        "<div class=\"row \">\n" +
        "\n" +
        "	<div class=\"col-md-4 col-lg-4 col-sm-4 col-xs-12\">\n" +
        "\n" +
        "		<div class=\"form-group\">\n" +
        "			<label for=\"leftMargin\" class=\"control-label\">Left Margin (in inches):</label>\n" +
        "			<select class=\"form-control\" ng-model=\"reportSetup.cssData['global']['margin-left']\" id=\"leftMargin\">\n" +
        "				<option value=\"0.25in\">0.25</option>\n" +
        "				<option value=\"0.5in\">0.5</option>\n" +
        "				<option value=\"0.75in\">0.75</option>\n" +
        "				<option value=\"1in\">1</option>\n" +
        "				<option value=\"1.25in\">1.25</option>\n" +
        "				<option value=\"1.5in\">1.5</option>\n" +
        "				<option value=\"1.75in\">1.75</option>\n" +
        "				<option value=\"2in\">2</option>\n" +
        "\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "		<div class=\"form-group\">\n" +
        "			<label for=\"rightMargin\" class=\"control-label\">Right Margin (in inches):</label>\n" +
        "			<select id=\"rightMargin\" class=\"form-control\" ng-model=\"reportSetup.cssData['global']['margin-right']\">\n" +
        "				<option value=\"0.25in\">0.25</option>\n" +
        "				<option value=\"0.5in\">0.5</option>\n" +
        "				<option value=\"0.75in\">0.75</option>\n" +
        "				<option value=\"1in\">1</option>\n" +
        "				<option value=\"1.25in\">1.25</option>\n" +
        "				<option value=\"1.5in\">1.5</option>\n" +
        "				<option value=\"1.75in\">1.75</option>\n" +
        "				<option value=\"2in\">2</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "		<div class=\"form-group \">\n" +
        "			<label for=\"pageBreak\" class=\"control-label\">Page Break b/w sections:</label>\n" +
        "			<select id=\"pageBreak\" class=\"form-control\" ng-model=\"reportSetup.jsonData['global']['pageBreakBtwSections']\">\n" +
        "				<option>Yes</option>\n" +
        "				<option>No</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "		<div class=\"form-group\">\n" +
        "			<label for=\"draftLocation\" class=\"control-label\">Draft Location:</label>\n" +
        "			<select id=\"draftLocation\" class=\"form-control\" ng-model=\"reportSetup.jsonData['global']['draftLocation']\">\n" +
        "				<option value=\"NONE\">None</option>\n" +
        "				<option value=\"TOPLEFT\">Top Left</option>\n" +
        "				<option value=\"TOPCENTER\">Top Center</option>\n" +
        "				<option value=\"TOPRIGHT\" selected=\"\">Top Right</option>\n" +
        "				<option value=\"BOTTOMLEFT\">Bottom Left</option>\n" +
        "				<option value=\"BOTTOMCENTER\">Bottom Center</option>\n" +
        "				<option value=\"BOTTOMRIGHT\">Bottom Right</option>\n" +
        "				<option value=\"MIDDLEOFPAGE\">Middle of Page</option>\n" +
        "				<option value=\"CUSTOM\">Custom-Defined</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "		<div class=\"form-group \">\n" +
        "			<label for=\"draftType\" class=\"control-label\">Draft Type:</label>\n" +
        "			<select id=\"draftType\" class=\"form-control\" ng-model=\"reportSetup.jsonData['global']['draftType']\">\n" +
        "				<option value=\"1\">Grey Block</option>\n" +
        "				<option value=\"2\" selected=\"\">Red Text</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "\n" +
        "	<div class=\"col-md-4 col-lg-4 col-sm-4 col-xs-12\">\n" +
        "\n" +
        "		<div class=\"form-group\">\n" +
        "			<label for=\"repeatParentHeaders\" class=\"control-label\"> Repeat Parent Headers:</label>\n" +
        "			<select id=\"repeatParentHeaders\" class=\"form-control\" ng-model=\"reportSetup.jsonData['global']['repeatParentHeaders']\">\n" +
        "				<option>Yes</option>\n" +
        "				<option>No</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "		<div class=\"form-group\">\n" +
        "			<label for=\"repeatHeaders\" class=\"control-label\"> Repeat Headers:</label>\n" +
        "			<select id=\"repeatHeaders\" class=\"form-control\" ng-model=\"reportSetup.jsonData['global']['repeatHeaders']\">\n" +
        "				<option>Yes</option>\n" +
        "				<option>No</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "		<div class=\"form-group\">\n" +
        "			<label for=\"sectionNumberTabSpace\" class=\"control-label\"> Section Number Tab Space:</label>\n" +
        "			<select id=\"sectionNumberTabSpace\" class=\"form-control\" ng-model=\"reportSetup.jsonData['global']['sectionNoTabSpace']\">\n" +
        "				<option>Yes</option>\n" +
        "				<option>No</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "		<div class=\"form-group \">\n" +
        "			<label for=\"sectionNumberTabSpaceDistance\" class=\"control-label\">Section Number Tab Space Distance:</label>\n" +
        "			<select id=\"sectionNumberTabSpaceDistance\" class=\"form-control\" ng-model=\"reportSetup.jsonData['global']['sectionNoTabSpaceDistance']\">\n" +
        "				<option>Default</option>\n" +
        "				<option>2</option>\n" +
        "				<option>3</option>\n" +
        "				<option>4</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "		<div class=\"form-group\">\n" +
        "			<label for=\"indentSectionHeader\" class=\"control-label\"> Indent Section Header:</label>\n" +
        "			<select id=\"indentSectionHeader\" class=\"form-control\" ng-model=\"reportSetup.jsonData['global']['indentSectionHeader']\">\n" +
        "				<option>Yes</option>\n" +
        "				<option>No</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "	</div>\n" +
        "\n" +
        "	<div class=\"col-md-4 col-lg-4 col-sm-4 col-xs-12 Global-Page-t-m\">\n" +
        "\n" +
        "		<div class=\"form-group\">\n" +
        "			<label for=\"photosPerPage\" class=\"control-label\"> Photos Per Page:</label>\n" +
        "			<select id=\"photosPerPage\" class=\"form-control\" ng-model=\"reportSetup.jsonData['global']['photosPerPage']\">\n" +
        "				<option>2</option>\n" +
        "				<option>4</option>\n" +
        "				<option>6</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "		<div class=\"form-group \">\n" +
        "			<label for=\"photoCaptionAlign\" class=\"control-label\"> Photo Caption Align:</label>\n" +
        "			<select id=\"photoCaptionAlign\" class=\"form-control\" ng-model=\"reportSetup.cssData['global-img-caption']['text-align']\">\n" +
        "				<option value=\"left\">Left</option>\n" +
        "				<option value=\"center\" selected=\"\">Center</option>\n" +
        "				<option value=\"right\">Right</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "		<div class=\"form-group\">\n" +
        "			<label for=\"autonumberCaptions\" class=\"control-label\"> Autonumber Captions:</label>\n" +
        "			<select id=\"autonumberCaptions\" class=\"form-control\" ng-model=\"reportSetup.jsonData['global']['autoNoCaptions']\">\n" +
        "				<option>Yes</option>\n" +
        "				<option>No</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "	</div>\n" +
        "\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportSetup/views/PCASpecificSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportSetup/views/PCASpecificSettings.html",
        "<h4 class=\"border-bottom\">\n" +
        "    PCA Specific Settings:\n" +
        "</h4>\n" +
        "<div class=\"row\">\n" +
        "	<div class=\"col-md-4 col-lg-4 col-sm-4 col-xs-12\">\n" +
        "\n" +
        "		<div class=\"form-group\" title=\"Include the recommendations in the printed PDF report\">\n" +
        "			<label for=\"pcarecommendations\" class=\"control-label\">Print PCA Recommendations:</label>\n" +
        "			<select id=\"pcarecommendations\" class=\"form-control\" ng-model=\"reportSetup.jsonData['pca']['printRecommendations']\">\n" +
        "				<option value=\"0\">No</option>\n" +
        "				<option value=\"1\">Yes</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "		<div class=\"form-group\" title=\"The color of the cost table header\">\n" +
        "			<label for=\"costtableheadercolor\" class=\"control-label\">Cost Table Header Color:</label>\n" +
        "			<input id=\"costtableheadercolor\" name=\"costtableheadercolor\" colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"reportSetup.cssData['pca-cost-table-header']['color']\">\n" +
        "		</div>\n" +
        "\n" +
        "	</div>\n" +
        "\n" +
        "	<div class=\"col-md-4 col-lg-4 col-sm-4 col-xs-12\">\n" +
        "\n" +
        "		<div class=\"form-group\" title=\"Print the Description, Assessment & Recommendation below the header, rather than to the right of it\">\n" +
        "			<label for=\"darbelowheading\" class=\"control-label\">D/A/R Below Heading:</label>\n" +
        "			<select id=\"darbelowheading\" class=\"form-control\" ng-model=\"reportSetup.jsonData['pca']['darBelowHeading']\">\n" +
        "				<option value=\"0\">No</option>\n" +
        "				<option value=\"1\">Yes</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "		<div class=\"form-group\" title=\"The color of the cost table header Text\">\n" +
        "			<label for=\"costtableheadertextcolor\" class=\"control-label\">Cost Table Header Text Color:</label>\n" +
        "			<input id=\"costtableheadertextcolor\" name=\"costtableheadertextcolor\" colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"reportSetup.cssData['pca-cost-table-header-text']['color']\">\n" +
        "		</div>\n" +
        "\n" +
        "	</div>\n" +
        "\n" +
        "	<div class=\"col-md-4 col-lg-4 col-sm-4 col-xs-12\">\n" +
        "\n" +
        "		<div class=\"form-group\" title=\"Print a horizontal line after system description sections\">\n" +
        "			<label for=\"printsepratorline\" class=\"control-label\">Print Separator Line:</label>\n" +
        "			<select id=\"printsepratorline\" class=\"form-control\" ng-model=\"reportSetup.jsonData['pca']['printSeparatorLine']\">\n" +
        "				<option>Yes</option>\n" +
        "				<option>No</option>\n" +
        "\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "	</div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportSetup/views/PageFooterSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportSetup/views/PageFooterSettings.html",
        "<h4 class=\"border-bottom\"> Page Footer Settings: </h4>\n" +
        "<div class=\"form-horizontal\">\n" +
        "	<div class=\"form-group\">\n" +
        "		<label for=\"nolineabovefooter\" class=\"control-label col-md-3 col-sm-2 col-xs-12\">\n" +
        "			Number of Lines Above Footer:\n" +
        "		</label>\n" +
        "		<div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "			<select id=\"nolineabovefooter\" name=\"companyID\" class=\"form-control\" ng-model=\"reportSetup.jsonData.pageFooterSettings.linesAboveFooter\">\n" +
        "				<option value=\"0\">0</option>\n" +
        "				<option value=\"1\">1</option>\n" +
        "				<option value=\"2\">2</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "</div>\n" +
        "<hr>\n" +
        "<div class=\"row\">\n" +
        "	<!-- Left -->\n" +
        "	<div class=\"col-md-4 col-sm-4 col-lg-4 col-xs-12\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "			<div class=\"panel-body\">\n" +
        "				<h4>Left</h4>\n" +
        "				<div class=\"row\">\n" +
        "					<div class=\"col-xs-12 col-md-6 col-sm-6\">\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.jsonData.pageFooterSettings.left.dynamicContent\">\n" +
        "								<option value=\"\">Add Dynamic Content...</option>\n" +
        "								<option value=\"{compname}\">Your Company's Name</option>\n" +
        "								<option value=\"{credo}\">Your Company's Credo</option>\n" +
        "								<option value=\"{logo}\">Your Company's Logo</option>\n" +
        "								<option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "								<option value=\"{cCity}\">Your Company's City</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "						<div class=\"form-group\">\n" +
        "\n" +
        "							<textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\" ng-model=\"reportSetup.jsonData.pageFooterSettings.left.content\">Phase I Report {siteAddress} {siteCity}, {siteState} {siteZip}</textarea>\n" +
        "						</div>\n" +
        "					</div>\n" +
        "				</div>\n" +
        "				<div class=\"row\">\n" +
        "					<div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.cssData['page-footer-settings-left']['font-family']\">\n" +
        "								<option>Arial</option>\n" +
        "								<option selected=\"\">Helvetica</option>\n" +
        "								<option>Times</option>\n" +
        "								<option>Americana</option>\n" +
        "								<option>Times New Roman</option>\n" +
        "								<option>Book Antiqua</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.cssData['page-footer-settings-left']['font-size']\">\n" +
        "								<option value=\"8px\">8</option>\n" +
        "								<option value=\"9px\">9</option>\n" +
        "								<option value=\"10px\">10</option>\n" +
        "								<option value=\"11px\">11</option>\n" +
        "								<option value=\"12px\">12</option>\n" +
        "								<optionv>13</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "					</div>\n" +
        "					<div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "						<select class=\"form-control\" multiple=\"\" ng-model=\"reportSetup.cssData['page-footer-settings-left'].style\">\n" +
        "							<option value=\"B\" selected=\"\">Bold</option>\n" +
        "							<option value=\"I\">Italic</option>\n" +
        "							<option value=\"U\">Underline</option>\n" +
        "						</select>\n" +
        "					</div>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "	<!-- Left end -->\n" +
        "\n" +
        "	<!-- Center -->\n" +
        "	<div class=\"col-md-4 col-sm-4 col-lg-4 col-xs-12  text-center\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "			<div class=\"panel-body\">\n" +
        "				<h4>Center</h4>\n" +
        "				<div class=\"row\">\n" +
        "					<div class=\"col-xs-12 col-md-6 col-sm-6 col-md-push-3 col-sm-push-3\">\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.jsonData.pageFooterSettings.center.dynamicContent\">\n" +
        "								<option value=\"\">Add Dynamic Content...</option>\n" +
        "								<option value=\"{compname}\">Your Company's Name</option>\n" +
        "								<option value=\"{credo}\">Your Company's Credo</option>\n" +
        "								<option value=\"{logo}\">Your Company's Logo</option>\n" +
        "								<option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "								<option value=\"{cCity}\">Your Company's City</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "						<div class=\"form-group\">\n" +
        "							<textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\" ng-model=\"reportSetup.jsonData.pageFooterSettings.center.content\"></textarea>\n" +
        "						</div>\n" +
        "					</div>\n" +
        "				</div>\n" +
        "				<div class=\"row\">\n" +
        "					<div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.cssData['page-footer-settings-center']['font-family']\">\n" +
        "								<option>Arial</option>\n" +
        "								<option selected=\"\">Helvetica</option>\n" +
        "								<option>Times</option>\n" +
        "								<option>Americana</option>\n" +
        "								<option>Times New Roman</option>\n" +
        "								<option>Book Antiqua</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.cssData['page-footer-settings-center']['font-size']\">\n" +
        "								<option value=\"8px\">8</option>\n" +
        "								<option value=\"9px\">9</option>\n" +
        "								<option value=\"10px\">10</option>\n" +
        "								<option value=\"11px\">11</option>\n" +
        "								<option value=\"12px\">12</option>\n" +
        "								<optionv>13</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "					</div>\n" +
        "					<div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "						<select class=\"form-control\" multiple=\"\" ng-model=\"reportSetup.cssData['page-footer-settings-center'].style\">\n" +
        "							<option value=\"B\" selected=\"\">Bold</option>\n" +
        "							<option value=\"I\">Italic</option>\n" +
        "							<option value=\"U\">Underline</option>\n" +
        "						</select>\n" +
        "					</div>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "	<!-- Center end -->\n" +
        "\n" +
        "	<!-- Right -->\n" +
        "	<div class=\"col-md-4 col-sm-4 col-lg-4 col-xs-12  text-right\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "			<div class=\"panel-body\">\n" +
        "\n" +
        "				<h4>Right</h4>\n" +
        "\n" +
        "				<div class=\"row\">\n" +
        "					<div class=\"col-xs-6 col-md-6 col-md-offset-6\">\n" +
        "\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.jsonData.pageFooterSettings.right.dynamicContent\">\n" +
        "								<option value=\"\">Add Dynamic Content...</option>\n" +
        "								<option value=\"{compname}\">Your Company's Name</option>\n" +
        "								<option value=\"{credo}\">Your Company's Credo</option>\n" +
        "								<option value=\"{logo}\">Your Company's Logo</option>\n" +
        "								<option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "								<option value=\"{cCity}\">Your Company's City</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "						<div class=\"form-group\">\n" +
        "\n" +
        "							<textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\" ng-model=\"reportSetup.jsonData.pageFooterSettings.right.content\">Project Number: {projnumber}</textarea>\n" +
        "						</div>\n" +
        "					</div>\n" +
        "				</div>\n" +
        "				<div class=\"row\">\n" +
        "					<div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.cssData['page-footer-settings-right']['font-family']\">\n" +
        "								<option>Arial</option>\n" +
        "								<option selected=\"\">Helvetica</option>\n" +
        "								<option>Times</option>\n" +
        "								<option>Americana</option>\n" +
        "								<option>Times New Roman</option>\n" +
        "								<option>Book Antiqua</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.cssData['page-footer-settings-right']['font-size']\">\n" +
        "								<option value=\"8px\">8</option>\n" +
        "								<option value=\"9px\">9</option>\n" +
        "								<option value=\"10px\">10</option>\n" +
        "								<option value=\"11px\">11</option>\n" +
        "								<option value=\"12px\">12</option>\n" +
        "								<optionv>13</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "					</div>\n" +
        "					<div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "						<select class=\"form-control\" multiple=\"\" ng-model=\"reportSetup.cssData['page-footer-settings-right'].style\">\n" +
        "							<option value=\"B\" selected=\"\">Bold</option>\n" +
        "							<option value=\"I\">Italic</option>\n" +
        "							<option value=\"U\">Underline</option>\n" +
        "						</select>\n" +
        "					</div>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "\n" +
        "	<!-- Right End -->\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportSetup/views/PageHeaderSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportSetup/views/PageHeaderSettings.html",
        "<h4 class=\"border-bottom\">\n" +
        "    Page Header Settings:\n" +
        "</h4>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "	<!-- Left -->\n" +
        "	<div class=\"col-md-4 col-sm-4 col-lg-4 col-xs-12\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "			<div class=\"panel-body\">\n" +
        "				<h4>Left</h4>\n" +
        "				<div class=\"row\">\n" +
        "					<div class=\"col-xs-12 col-md-6 col-sm-6\">\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.jsonData.pageHeaderSettings.left.dynamicContent\">\n" +
        "								<option value=\"\">Add Dynamic Content...</option>\n" +
        "								<option value=\"{compname}\">Your Company's Name</option>\n" +
        "								<option value=\"{credo}\">Your Company's Credo</option>\n" +
        "								<option value=\"{logo}\">Your Company's Logo</option>\n" +
        "								<option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "								<option value=\"{cCity}\">Your Company's City</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "						<div class=\"form-group\">\n" +
        "\n" +
        "							<textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\" ng-model=\"reportSetup.jsonData.pageHeaderSettings.left.content\">Phase I Report {siteAddress} {siteCity}, {siteState} {siteZip}</textarea>\n" +
        "						</div>\n" +
        "					</div>\n" +
        "				</div>\n" +
        "				<div class=\"row\">\n" +
        "					<div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.cssData['page-header-settings-left']['font-family']\">\n" +
        "								<option>Arial</option>\n" +
        "								<option selected=\"\">Helvetica</option>\n" +
        "								<option>Times</option>\n" +
        "								<option>Americana</option>\n" +
        "								<option>Times New Roman</option>\n" +
        "								<option>Book Antiqua</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.cssData['page-header-settings-left']['font-size']\">\n" +
        "								<option value=\"8px\">8</option>\n" +
        "								<option value=\"9px\">9</option>\n" +
        "								<option value=\"10px\">10</option>\n" +
        "								<option value=\"11px\">11</option>\n" +
        "								<option value=\"12px\">12</option>\n" +
        "								<optionv>13</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "					</div>\n" +
        "					<div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "						<select class=\"form-control\" multiple=\"\" ng-model=\"reportSetup.cssData['page-header-settings-left'].style\">\n" +
        "							<option value=\"B\" selected=\"\">Bold</option>\n" +
        "							<option value=\"I\">Italic</option>\n" +
        "							<option value=\"U\">Underline</option>\n" +
        "						</select>\n" +
        "					</div>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "	<!-- Left end -->\n" +
        "\n" +
        "	<!-- Center -->\n" +
        "	<div class=\"col-md-4 col-sm-4 col-lg-4 col-xs-12  text-center\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "			<div class=\"panel-body\">\n" +
        "				<h4>Center</h4>\n" +
        "				<div class=\"row\">\n" +
        "					<div class=\"col-xs-12 col-md-6 col-sm-6 col-md-push-3 col-sm-push-3\">\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.jsonData.pageHeaderSettings.center.dynamicContent\">\n" +
        "								<option value=\"\">Add Dynamic Content...</option>\n" +
        "								<option value=\"{compname}\">Your Company's Name</option>\n" +
        "								<option value=\"{credo}\">Your Company's Credo</option>\n" +
        "								<option value=\"{logo}\">Your Company's Logo</option>\n" +
        "								<option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "								<option value=\"{cCity}\">Your Company's City</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "						<div class=\"form-group\">\n" +
        "							<textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\" ng-model=\"reportSetup.jsonData.pageHeaderSettings.center.content\"></textarea>\n" +
        "						</div>\n" +
        "					</div>\n" +
        "				</div>\n" +
        "				<div class=\"row\">\n" +
        "					<div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.cssData['page-header-settings-center']['font-family']\">\n" +
        "								<option>Arial</option>\n" +
        "								<option selected=\"\">Helvetica</option>\n" +
        "								<option>Times</option>\n" +
        "								<option>Americana</option>\n" +
        "								<option>Times New Roman</option>\n" +
        "								<option>Book Antiqua</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.cssData['page-header-settings-center']['font-size']\">\n" +
        "								<option value=\"8px\">8</option>\n" +
        "								<option value=\"9px\">9</option>\n" +
        "								<option value=\"10px\">10</option>\n" +
        "								<option value=\"11px\">11</option>\n" +
        "								<option value=\"12px\">12</option>\n" +
        "								<optionv>13</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "					</div>\n" +
        "					<div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "						<select class=\"form-control\" multiple=\"\" ng-model=\"reportSetup.cssData['page-header-settings-center'].style\">\n" +
        "							<option value=\"B\" selected=\"\">Bold</option>\n" +
        "							<option value=\"I\">Italic</option>\n" +
        "							<option value=\"U\">Underline</option>\n" +
        "						</select>\n" +
        "					</div>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "	<!-- Center end -->\n" +
        "\n" +
        "	<!-- Right -->\n" +
        "	<div class=\"col-md-4 col-sm-4 col-lg-4 col-xs-12  text-right\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "			<div class=\"panel-body\">\n" +
        "\n" +
        "				<h4>Right</h4>\n" +
        "\n" +
        "				<div class=\"row\">\n" +
        "					<div class=\"col-xs-6 col-md-6 col-md-offset-6\">\n" +
        "\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.jsonData.pageHeaderSettings.right.dynamicContent\">\n" +
        "								<option value=\"\">Add Dynamic Content...</option>\n" +
        "								<option value=\"{compname}\">Your Company's Name</option>\n" +
        "								<option value=\"{credo}\">Your Company's Credo</option>\n" +
        "								<option value=\"{logo}\">Your Company's Logo</option>\n" +
        "								<option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "								<option value=\"{cCity}\">Your Company's City</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "						<div class=\"form-group\">\n" +
        "\n" +
        "							<textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\" ng-model=\"reportSetup.jsonData.pageHeaderSettings.right.content\">Project Number: {projnumber}</textarea>\n" +
        "						</div>\n" +
        "					</div>\n" +
        "				</div>\n" +
        "				<div class=\"row\">\n" +
        "					<div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.cssData['page-header-settings-right']['font-family']\">\n" +
        "								<option>Arial</option>\n" +
        "								<option selected=\"\">Helvetica</option>\n" +
        "								<option>Times</option>\n" +
        "								<option>Americana</option>\n" +
        "								<option>Times New Roman</option>\n" +
        "								<option>Book Antiqua</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "						<div class=\"form-group\">\n" +
        "							<select class=\"form-control\" ng-model=\"reportSetup.cssData['page-header-settings-right']['font-size']\">\n" +
        "								<option value=\"8px\">8</option>\n" +
        "								<option value=\"9px\">9</option>\n" +
        "								<option value=\"10px\">10</option>\n" +
        "								<option value=\"11px\">11</option>\n" +
        "								<option value=\"12px\">12</option>\n" +
        "								<optionv>13</option>\n" +
        "							</select>\n" +
        "						</div>\n" +
        "					</div>\n" +
        "					<div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "						<select class=\"form-control\" multiple=\"\" ng-model=\"reportSetup.cssData['page-header-settings-right'].style\">\n" +
        "							<option value=\"B\" selected=\"\">Bold</option>\n" +
        "							<option value=\"I\">Italic</option>\n" +
        "							<option value=\"U\">Underline</option>\n" +
        "						</select>\n" +
        "					</div>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "\n" +
        "\n" +
        "	<!-- Right End -->\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"form-horizontal top-margin\">\n" +
        "\n" +
        "	<div class=\"form-group\">\n" +
        "		<label for=\"nolineaboveheader\" class=\"control-label col-md-3 col-lg-3 col-sm-2 col-xs-12\">\n" +
        "			Number of Lines Below Header:\n" +
        "		</label>\n" +
        "		<div class=\"col-xs-12 col-sm-3 col-lg-4 col-md-4\">\n" +
        "			<select id=\"nolineaboveheader\" name=\"companyID\" class=\"form-control\" ng-model=\"reportSetup.jsonData.pageHeaderSettings.linesBelowHeader\">\n" +
        "				<option value=\"0\">0</option>\n" +
        "				<option value=\"1\">1</option>\n" +
        "				<option value=\"2\">2</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "\n" +
        "	</div>\n" +
        "\n" +
        "	<div class=\"form-group\">\n" +
        "		<label for=\"companyID\" class=\"control-label col-md-3 col-lg-3 col-sm-2 col-xs-12\">\n" +
        "			Number of Spaces Below Header:\n" +
        "		</label>\n" +
        "		<div class=\"col-xs-12 col-lg-4 col-sm-3 col-md-4\">\n" +
        "			<select id=\"companyID\" name=\"companyID\" class=\"form-control\" ng-model=\"reportSetup.jsonData.pageHeaderSettings.spacesBelowHeader\">\n" +
        "				<option value=\"0\">0</option>\n" +
        "				<option value=\"1\">1</option>\n" +
        "				<option value=\"2\">2</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportSetup/views/ReportSectionSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportSetup/views/ReportSectionSettings.html",
        "<h4 class=\"border-bottom\">\n" +
        "    Report Section Settings\n" +
        "</h4>\n" +
        "\n" +
        "<div class=\"form-horizontal\">\n" +
        "	<div class=\"form-group\">\n" +
        "		<label for=\"noofheaderspaces\" class=\"control-label col-md-3 col-sm-2 col-xs-12\" title=\"The number of carriage returns below each section header\">\n" +
        "			Number of Header Spaces:\n" +
        "		</label>\n" +
        "		<div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "			<select id=\"noofheaderspaces\" name=\"noofheaderspaces\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportSectionSettings.headerSpaces\">\n" +
        "				<option value=\"0\">0</option>\n" +
        "				<option value=\"1\">1</option>\n" +
        "				<option value=\"2\">2</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "</div>\n" +
        "\n" +
        "<hr>\n" +
        "<div class=\"row\">\n" +
        "	<label class=\"control-label col-xs-12 col-md-12\">\n" +
        "		Section Header (1.0 - Top Level Sections):\n" +
        "	</label>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "	<div class=\"col-xs-12 col-lg-4 col-sm-4 col-md-4\">\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-lg-12 col-sm-12 col-md-12\">\n" +
        "				<label for=\"Font\" class=\"control-label\">Font:</label>\n" +
        "\n" +
        "				<div class=\"form-group\">\n" +
        "					<select id=\"Font\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-section-header']['font-family']\">\n" +
        "						<option>Arial</option>\n" +
        "						<option selected=\"\">Helvetica</option>\n" +
        "						<option>Times</option>\n" +
        "						<option>Americana</option>\n" +
        "						<option>Times New Roman</option>\n" +
        "						<option>Book Antiqua</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "				<div class=\"form-group\">\n" +
        "					<select class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-section-header']['font-size']\">\n" +
        "						<option value=\"8px\">8</option>\n" +
        "						<option value=\"9px\">9</option>\n" +
        "						<option value=\"10px\">10</option>\n" +
        "						<option value=\"11px\">11</option>\n" +
        "						<option value=\"12px\">12</option>\n" +
        "						<option value=\"13px\">13</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "				<div class=\"form-group\">\n" +
        "					<select class=\"form-control\" multiple=\"\" ng-model=\"reportSetup.cssData['report-section-settings-section-header'].style\">\n" +
        "						<option value=\"B\" selected=\"\">Bold</option>\n" +
        "						<option value=\"I\">Italic</option>\n" +
        "						<option value=\"U\">Underline</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "	<div class=\"col-xs-12 col-md-8\">\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group \">\n" +
        "					<label for=\"leftindent1\" class=\"control-label\">Left Indent (inches):</label>\n" +
        "					<select id=\"leftindent1\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-section-header']['margin-left']\">\n" +
        "						<option value=\"0in\">0</option>\n" +
        "						<option value=\"0.125in\">0.125</option>\n" +
        "						<option value=\"0.166in\">0.166</option>\n" +
        "						<option value=\"0.25in\">0.25</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textalignsection1\" class=\"control-label\">Text Align:</label>\n" +
        "					<select id=\"textalignsection1\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-section-header']['text-align']\">\n" +
        "						<option value=\"left\">Left</option>\n" +
        "						<option value=\"center\">Center</option>\n" +
        "						<option value=\"right\">Right</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textcaoitalizedsection1\" class=\"control-label\">Text Capitalized:</label>\n" +
        "					<select id=\"textcaoitalizedsection1\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-section-header']['text-transform']\">\n" +
        "						<option value=\"none\">No</option>\n" +
        "						<option value=\"capitalize\">Yes</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textcolorsection1\" class=\"control-label\">Text Color:</label>\n" +
        "					<input id=\"textcolorsection1\" colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"reportSetup.cssData['report-section-settings-section-header']['color']\">\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"shoerectsection1\" class=\"control-label\">Show Rectangle:</label>\n" +
        "					<select id=\"shoerectsection1\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportSectionSettings.sectionHeader.showRectangle\">\n" +
        "						<option value=\"0\">No</option>\n" +
        "						<option value=\"1\">Yes</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "\n" +
        "			</div>\n" +
        "\n" +
        "\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"headerfillsection1\" class=\"control-label\">Header Fill:</label>\n" +
        "					<select id=\"headerfillsection1\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportSectionSettings.sectionHeader.fillHeader\">\n" +
        "						<option value=\"0\">No</option>\n" +
        "						<option value=\"1\">Yes</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"headerfillcolorsection1\" class=\"control-label\">Header Fill Color:</label>\n" +
        "					<input id=\"headerfillcolorsection1\" colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"reportSetup.cssData['report-section-settings-section-header']['background-color']\">\n" +
        "				</div>\n" +
        "			</div>\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"lowbelowheadersection1\" class=\"control-label\">Line Below Header:</label>\n" +
        "					<select id=\"lowbelowheadersection1\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportSectionSettings.sectionHeader.lineBelowHeader\">\n" +
        "						<option value=\"0\">No</option>\n" +
        "						<option value=\"1\">Yes</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"lowbelowheadercolorsection1\" class=\"control-label\">Line Below Header Color:</label>\n" +
        "					<input id=\"lowbelowheadercolorsection1\" colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"reportSetup.cssData['report-section-settings-section-header-below']['background-color']\">\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "\n" +
        "	</div>\n" +
        "</div>\n" +
        "\n" +
        "<hr>\n" +
        "<div class=\"row\">\n" +
        "	<label class=\"control-label col-xs-12 col-md-12\">\n" +
        "		Sub-Section Header (1.1 - First child level sections):\n" +
        "	</label>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "	<div class=\"col-xs-12 col-md-4\">\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-12\">\n" +
        "				<label for=\"Fontsecond\" class=\"control-label\">Font:</label>\n" +
        "\n" +
        "				<div class=\"form-group\">\n" +
        "					<select id=\"Fontsecond\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-sub-section-header']['font-family']\">\n" +
        "						<option>Arial</option>\n" +
        "						<option selected=\"\">Helvetica</option>\n" +
        "						<option>Times</option>\n" +
        "						<option>Americana</option>\n" +
        "						<option>Times New Roman</option>\n" +
        "						<option>Book Antiqua</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "				<div class=\"form-group\">\n" +
        "					<select class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-sub-section-header']['font-size']\">\n" +
        "						<option value=\"8px\">8</option>\n" +
        "						<option value=\"9px\">9</option>\n" +
        "						<option value=\"10px\">10</option>\n" +
        "						<option value=\"11px\">11</option>\n" +
        "						<option value=\"12px\">12</option>\n" +
        "						<option value=\"13px\">13</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "				<div class=\"form-group\">\n" +
        "					<select class=\"form-control\" multiple=\"\" ng-model=\"reportSetup.cssData['report-section-settings-sub-section-header'].style\">\n" +
        "						<option value=\"B\" selected=\"\">Bold</option>\n" +
        "						<option value=\"I\">Italic</option>\n" +
        "						<option value=\"U\">Underline</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "	<div class=\"col-xs-12 col-md-8\">\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group \">\n" +
        "					<label for=\"leftindentsec2\" class=\"control-label\">Left Indent (inches):</label>\n" +
        "					<select id=\"leftindentsec2\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-sub-section-header']['margin-left']\">\n" +
        "						<option value=\"0in\">0</option>\n" +
        "						<option value=\"0.125in\">0.125</option>\n" +
        "						<option value=\"0.166in\">0.166</option>\n" +
        "						<option value=\"0.25in\">0.25</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textalignsec2\" class=\"control-label\">Text Align:</label>\n" +
        "					<select id=\"textalignsec2\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-sub-section-header']['text-align']\">\n" +
        "						<option value=\"left\">Left</option>\n" +
        "						<option value=\"center\" selected=\"\">Center</option>\n" +
        "						<option value=\"right\">Right</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textcapsec2\" class=\"control-label\">Text Capitalized:</label>\n" +
        "					<select id=\"textcapsec2\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-sub-section-header']['text-transform']\">\n" +
        "						<option value=\"none\">No</option>\n" +
        "						<option value=\"capitalize\">Yes</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textcolorsec2\" class=\"control-label\">Text Color:</label>\n" +
        "					<input id=\"textcolorsec2\" colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"reportSetup.cssData['report-section-settings-sub-section-header']['color']\">\n" +
        "				</div>\n" +
        "\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"showcolorsec2\" class=\"control-label\">Show Rectangle:</label>\n" +
        "					<select id=\"showcolorsec2\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportSectionSettings.subSectionHeader.showRectangle\">\n" +
        "						<option value=\"0\">No</option>\n" +
        "						<option value=\"1\">Yes</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "\n" +
        "			</div>\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"headerfillsec2\" class=\"control-label\">Header Fill:</label>\n" +
        "					<select id=\"headerfillsec2\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportSectionSettings.subSectionHeader.fillHeader\">\n" +
        "						<option value=\"0\">No</option>\n" +
        "						<option value=\"1\">Yes</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"headerfillcolorsec2\" class=\"control-label\">Header Fill Color:</label>\n" +
        "					<input id=\"headerfillcolorsec2\" colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"reportSetup.cssData['report-section-settings-sub-section-header']['background-color']\">\n" +
        "				</div>\n" +
        "			</div>\n" +
        "\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"linebelowheadersec2\" class=\"control-label\">Line Below Header:</label>\n" +
        "					<select id=\"linebelowheadersec2\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportSectionSettings.subSectionHeader.lineBelowHeader\">\n" +
        "						<option value=\"0\">No</option>\n" +
        "						<option value=\"1\">Yes</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"linebelowheadercolorsec2\" class=\"control-label\">Line Below Header Color:</label>\n" +
        "					<input id=\"linebelowheadercolorsec2\" colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"reportSetup.cssData['report-section-settings-sub-section-header-below']['background-color']\">\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "</div>\n" +
        "<hr>\n" +
        "<div class=\"row\">\n" +
        "	<label class=\"control-label col-xs-12 col-md-12\">\n" +
        "		Sub-Sub-Section Header (1.1.1 - Second Child level sections and anything deeper):\n" +
        "	</label>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "	<div class=\"col-xs-12 col-md-4\">\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-12\">\n" +
        "				<label class=\"control-label\" for=\"Fontthird\">Font:</label>\n" +
        "				<div class=\"form-group\">\n" +
        "					<select id=\"Fontthird\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-sub-sub-section-header']['font-family']\">\n" +
        "						<option>Arial</option>\n" +
        "						<option selected=\"\">Helvetica</option>\n" +
        "						<option>Times</option>\n" +
        "						<option>Americana</option>\n" +
        "						<option>Times New Roman</option>\n" +
        "						<option>Book Antiqua</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "				<div class=\"form-group\">\n" +
        "					<select class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-sub-sub-section-header']['font-size']\">\n" +
        "						<option value=\"8px\">8</option>\n" +
        "						<option value=\"9px\">9</option>\n" +
        "						<option value=\"10px\">10</option>\n" +
        "						<option value=\"11px\">11</option>\n" +
        "						<option value=\"12px\">12</option>\n" +
        "						<option value=\"13px\">13</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "				<div class=\"form-group\">\n" +
        "					<select class=\"form-control\" multiple=\"\" ng-model=\"reportSetup.cssData['report-section-settings-sub-sub-section-header'].style\">\n" +
        "						<option value=\"B\" selected=\"\">Bold</option>\n" +
        "						<option value=\"I\">Italic</option>\n" +
        "						<option value=\"U\">Underline</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "	<div class=\"col-xs-12 col-md-8\">\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group \">\n" +
        "					<label for=\"leftindentsec3\" class=\"control-label\">Left Indent (inches):</label>\n" +
        "					<select id=\"leftindentsec3\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-sub-sub-section-header']['margin-left']\">\n" +
        "						<option value=\"0in\">0</option>\n" +
        "						<option value=\"0.125in\">0.125</option>\n" +
        "						<option value=\"0.166in\">0.166</option>\n" +
        "						<option value=\"0.25in\">0.25</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textalignsec3\" class=\"control-label\">Text Align:</label>\n" +
        "					<select id=\"textalignsec3\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-sub-sub-section-header']['text-align']\">\n" +
        "						<option value=\"left\">Left</option>\n" +
        "						<option value=\"center\" selected=\"\">Center</option>\n" +
        "						<option value=\"right\">Right</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textcapsec3\" class=\"control-label\">Text Capitalized:</label>\n" +
        "					<select id=\"textcapsec3\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-sub-sub-section-header']['text-transform']\">\n" +
        "						<option value=\"none\">No</option>\n" +
        "						<option value=\"capitalize\">Yes</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textcolorsec3\" class=\"control-label\">Text Color:</label>\n" +
        "					<input id=\"textcolorsec3\" colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"reportSetup.cssData['report-section-settings-sub-sub-section-header']['color']\">\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"showectsec3\" class=\"control-label\">Show Rectangle:</label>\n" +
        "					<select id=\"showectsec3\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportSectionSettings.subSubSectionHeader.showRectangle\">\n" +
        "						<option value=\"0\">No</option>\n" +
        "						<option value=\"1\">Yes</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"headerfillsec3\" class=\"control-label\">Header Fill:</label>\n" +
        "					<select id=\"headerfillsec3\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportSectionSettings.subSubSectionHeader.fillHeader\">\n" +
        "						<option value=\"0\">No</option>\n" +
        "						<option value=\"1\">Yes</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"headerfillcolorsec3\" class=\"control-label\">Header Fill Color:</label>\n" +
        "					<input id=\"headerfillcolorsec3\" colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"reportSetup.cssData['report-section-settings-sub-sub-section-header']['background-color']\">\n" +
        "				</div>\n" +
        "			</div>\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"linebelowheadersec3\" class=\"control-label\">Line Below Header:</label>\n" +
        "					<select id=\"linebelowheadersec3\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportSectionSettings.subSubSectionHeader.lineBelowHeader\">\n" +
        "						<option value=\"0\">No</option>\n" +
        "						<option value=\"1\">Yes</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"linebelowheadercolorsec3\" class=\"control-label\">Line Below Header Color:</label>\n" +
        "					<input id=\"linebelowheadercolorsec3\" colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"reportSetup.cssData['report-section-settings-sub-sub-section-header-below']['background-color']\">\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "</div>\n" +
        "<hr>\n" +
        "<div class=\"row\">\n" +
        "	<label class=\"control-label col-xs-12 col-md-12\">\n" +
        "		Narrative Section Text:\n" +
        "	</label>\n" +
        "</div>\n" +
        "<div class=\"row\">\n" +
        "	<div class=\"col-xs-12 col-md-4\">\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\"col-xs-12 col-md-12\">\n" +
        "				<label for=\"Fontfourth\" class=\"control-label\">Font:</label>\n" +
        "				<div class=\"form-group\">\n" +
        "					<select id=\"Fontfourth\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-narrative-section']['font-family']\">\n" +
        "						<option>Arial</option>\n" +
        "						<option selected=\"\">Helvetica</option>\n" +
        "						<option>Times</option>\n" +
        "						<option>Americana</option>\n" +
        "						<option>Times New Roman</option>\n" +
        "						<option>Book Antiqua</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "				<div class=\"form-group\">\n" +
        "					<select class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-narrative-section']['font-size']\">\n" +
        "						<option value=\"8px\">8</option>\n" +
        "						<option value=\"9px\">9</option>\n" +
        "						<option value=\"10px\">10</option>\n" +
        "						<option value=\"11px\">11</option>\n" +
        "						<option value=\"12px\">12</option>\n" +
        "						<option value=\"13px\">13</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "				<div class=\"form-group\">\n" +
        "					<select class=\"form-control\" multiple=\"\" ng-model=\"reportSetup.cssData['report-section-settings-narrative-section'].style\">\n" +
        "						<option value=\"B\" selected=\"\">Bold</option>\n" +
        "						<option value=\"I\">Italic</option>\n" +
        "						<option value=\"U\">Underline</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "	<div class=\"col-xs-12 col-md-8\">\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\" col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"leftindentnar\" class=\"control-label\">Left Indent (inches):</label>\n" +
        "					<select id=\"leftindentnar\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-narrative-section']['margin-left']\">\n" +
        "						<option value=\"0in\">0</option>\n" +
        "						<option value=\"0.125in\">0.125</option>\n" +
        "						<option value=\"0.166in\">0.166</option>\n" +
        "						<option value=\"0.25in\">0.25</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "			<div class=\" col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textalignnar\" class=\"control-label\">Text Align:</label>\n" +
        "					<select id=\"textalignnar\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-section-settings-narrative-section']['text-align']\">\n" +
        "						<option value=\"left\">Left</option>\n" +
        "						<option value=\"center\">Center</option>\n" +
        "						<option value=\"right\">Right</option>\n" +
        "						<option value=\"justify\">Full-Justify</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\" col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"matchheaderindentnar\" class=\"control-label\">Match Header Indent:</label>\n" +
        "					<select id=\"matchheaderindentnar\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportSectionSettings.narrativeSection.matchHeaderIndent\">\n" +
        "						<option value=\"0\">No</option>\n" +
        "						<option value=\"1\">Yes</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "			<div class=\" col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"linespacingnar\" class=\"control-label\">Line Spacing:</label>\n" +
        "					<select id=\"linespacingnar\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportSectionSettings.narrativeSection.lineSpacing\">\n" +
        "						<option value=\"1.0\" selected=\"\">1.0</option>\n" +
        "						<option value=\"1.5\">1.5</option>\n" +
        "						<option value=\"2.0\">2.0</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "</div>");
}]);

angular.module("../app/modules/ReportSetup/views/ReportSetup.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportSetup/views/ReportSetup.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "	<title>Report Output Setup</title>\n" +
        " \n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "	<script id=\"repSetupDelete.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "		<div class=\"modal-header\">\n" +
        "			<button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "			<h4 class=\"modal-title\">Delete Report Setup </h4>\n" +
        "		</div>\n" +
        "\n" +
        "		<form name=\"myFormAddTemplate\" novalidate>\n" +
        "\n" +
        "			<div class=\"modal-body \">\n" +
        "				<p><strong> You are about to delete the \" {{ReportSetupName}} \". Are you sure you want to delete it?</strong></p>\n" +
        "\n" +
        "			</div>\n" +
        "\n" +
        "			<div class=\"modal-footer\">\n" +
        "\n" +
        "				<button class=\"btn btn-md btn-default\" role=\"button\" ng-click=\"CancelDelete()\">Cancel</button>\n" +
        "				<button class=\"btn btn-md btn-primary\" role=\"button\" ng-click=\"deleteReport()\">Continue </button>\n" +
        "\n" +
        "			</div>\n" +
        "		</form>\n" +
        "\n" +
        "	</script>\n" +
        "\n" +
        "	<script id=\"repSetupRename.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "		<div class=\"modal-header \">\n" +
        "			<button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "			<h4 class=\"modal-title\">Rename Report Setup: </h4>\n" +
        "		</div>\n" +
        "\n" +
        "\n" +
        "		<form name=\"myFormAddTemplate\" novalidate>\n" +
        "\n" +
        "			<div class=\"modal-body\">\n" +
        "\n" +
        "				<div class=\"form-group required\" show-errors>\n" +
        "					<label for=\"renameReportTemplate\" class=\"control-label\">Enter a new name for this Report Setup:</label>  \n" +
        "					<input id=\"renameReportTemplate\" name=\"renameReportTemplate\" class=\"form-control\" type=\"text\" placeholder=\"Enter a new name\" ng-model=\"cloned.name\" required>\n" +
        "\n" +
        "				</div>\n" +
        "\n" +
        "			</div>\n" +
        "			<div class=\"modal-footer\">\n" +
        "				<button type=\"button\" class=\"btn btn-md btn-default\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\">Cancel</button>\n" +
        "				<button type=\"button\" class=\"btn btn-md btn-primary\" ng-click=\"renameReport(myFormAddTemplate)\">Continue</button>\n" +
        "			</div>\n" +
        "		</form>\n" +
        "\n" +
        "	</script>\n" +
        "\n" +
        "\n" +
        "	<script id=\"repSetupDuplicate.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "		<div class=\"modal-header\">\n" +
        "			<button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "			<h4 class=\"modal-title\">Duplicate Report Output Setup </h4>\n" +
        "		</div>\n" +
        "\n" +
        "\n" +
        "		<form name=\"myFormAddTemplate\" class=\"form-horizontal\">\n" +
        "\n" +
        "			<div class=\"modal-body \">\n" +
        "				<div class=\"form-group required\">\n" +
        "					<label for=\"copyfrom\" class=\"col-md-3 col-lg-3 col-xs-12 control-label\">Copy From:</label>\n" +
        "					<div class=\"col-md-5 col-lg-7 col-xs-11\" show-errors>\n" +
        "						<select id=\"copyfrom\" name=\"setupCopyFrom\" class=\"form-control\" ng-model=\"report\" ng-options=\"report.name for report in reportSetup.setupProperties.reportSection.coll\" required ng-change=\"duplicateError = ''\">\n" +
        "							<option value=\"\">Select Report Output Setup</option>\n" +
        "						</select>\n" +
        "					</div>\n" +
        "					 \n" +
        "				</div>\n" +
        "\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"copyto\" class=\"col-md-3 col-lg-3 col-xs-12 control-label\">Copy To:</label>\n" +
        "					<div class=\"col-md-12 col-lg-7 col-xs-12\">\n" +
        "						<select id=\"copyto\" name=\"copyTo\" class=\"form-control\" ng-init=\"copyToAction='Existing'\" ng-model=\"copyToAction\" ng-change=\"duplicateError = ''\">\n" +
        "							<option value=\"Existing\">Existing</option>\n" +
        "							<option value=\"New\">New</option>\n" +
        "						</select>\n" +
        "					</div>\n" +
        "\n" +
        "				</div>\n" +
        "\n" +
        "				<div class=\"form-group required\">\n" +
        "					<label for=\"Existing\" class=\"col-md-3 col-lg-3 col-xs-12 control-label\">{{copyToAction}}</label>\n" +
        "					<div class=\" col-md-11 col-lg-7 col-xs-11\" form-input-validation=\"(myFormAddTemplate.newName && myFormAddTemplate.newName.$invalid) || (myFormAddTemplate.copyTo && myFormAddTemplate.copyTo.$invalid)\">\n" +
        "						<input class=\"form-control\" type=\"text\" placeholder=\"Enter a name\" ng-show=\"copyToAction == 'New'\" ng-model=\"toCreateReport\" name=\"newName\" ng-required=\"copyToAction == 'New'\">\n" +
        "						<select id=\"Existing\" name=\"copyTo\" class=\"form-control\" ng-init=\"copyToReport='';\" ng-model=\"copyToReport\" ng-options=\"report.name for report in reportSetup.setupProperties.reportSection.coll\" ng-show=\"copyToAction == 'Existing'\" ng-required=\"copyToAction == 'Existing'\" ng-change=\"duplicateError = ''\">\n" +
        "							<option value=\"\">Select Report Output Setup</option>\n" +
        "						</select>\n" +
        "\n" +
        "					</div>\n" +
        "				 \n" +
        "				</div>\n" +
        "\n" +
        "			</div>\n" +
        "\n" +
        "			<div ng-show=\"duplicateError != '' && duplicateError != null && duplicateError != undefined\" class=\"alert alert-danger\" role=\"alert\" ng-class=\"danger\">\n" +
        "				{{duplicateError}}\n" +
        "			</div>\n" +
        "			<div class=\"modal-footer \">\n" +
        "				<button type=\"button\" class=\"btn btn-md btn-default\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\">Cancel</button>\n" +
        "				<button type=\"button\" class=\"btn btn-md btn-primary\" ng-click=\"duplicate(myFormAddTemplate)\">Continue</button>\n" +
        "			</div>\n" +
        "		</form>\n" +
        "\n" +
        "	</script>\n" +
        "\n" +
        "\n" +
        "	<div class=\"container-fluid\" ng-controller=\"ParcelUI.ReportOutputSetup.ReportSetupCtrl as reportSetup\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "		<div class=\"panel-body\">\n" +
        "		<h2 class=\"page-header\">Report Output Setup</h2>\n" +
        "        <span class=\"pull-right\">	\n" +
        "            <button type=\"reset \" class=\"btn btn-md btn-default \" tabindex=\"-1\">Cancel</button>\n" +
        "            <button type=\"submit \" class=\"btn btn-md btn-primary \" ng-click=\"reportSetup.save()\" tabindex=\"-1\"> Save Changes</button>\n" +
        "        </span>\n" +
        "		<form class=\"form-horizontal\">\n" +
        "			<div class=\"form-group \">\n" +
        "				<label for=\"company\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "					Company:\n" +
        "				</label>\n" +
        "				<div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "					<select id=\"company\" name=\"companyID\" class=\"form-control\" ng-init=\"reportSetup.selectedCompanyId = 0\" ng-model=\"reportSetup.selectedCompanyId\" ng-change=\"reportSetup.selectedCompanyChanged()\" tabindex=\"1\" autofocus>\n" +
        "						<option value=\"0\" ng-if=\"!reportSetup.selectedCompanyId\">Select a company</option>\n" +
        "						<option value=\"5572\"> Land Environmental Group</option>\n" +
        "						<option value=\"5684\"> Lauenstein &amp; Associates</option>\n" +
        "						<option value=\"3099\">123 ENG Test</option>\n" +
        "						<option value=\"7590\">14555 Blanco Road</option>\n" +
        "						<option value=\"5745\">172d Airlift Wing MS ANG</option>\n" +
        "						<option value=\"5666\">1st Bank Yuma</option>\n" +
        "						<option value=\"5315\">1st Colonial Community Bank</option>\n" +
        "						<option value=\"5857\">1st Constitution Bank</option>\n" +
        "						<option value=\"4991\">1st National Bank of Demo</option>\n" +
        "						<option value=\"8014\">1st National Bank of South Florida</option>\n" +
        "						<option value=\"5829\">1st National Community Bank</option>\n" +
        "						<option value=\"9599\">1st Security Bank of Washington</option>\n" +
        "						<option value=\"5926\">1st Source Bank</option>\n" +
        "						<option value=\"7917\">21 Environmental</option>\n" +
        "						<option value=\"4734\">2G Environmental, LLC</option>\n" +
        "						<option value=\"6477\">3 Kings Environmental</option>\n" +
        "						<option value=\"4735\">3 Kings Environmental, Inc.</option>\n" +
        "						<option value=\"3098\">3065866: Vince Grandinetti</option>\n" +
        "						<option value=\"3206\">3126775: Monty Bruner</option>\n" +
        "						<option value=\"4367\">3266541: Benjamin Ford</option>\n" +
        "						<option value=\"5048\">3434731: Paul Gebhard</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "\n" +
        "			<div class=\"form-group\" ng-if=\"reportSetup.setupProperties.reportSection.coll && reportSetup.setupProperties.reportSection.coll.length\">\n" +
        "				<label for=\"reportsetup\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "					Report Setup:\n" +
        "				</label>\n" +
        "				<div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "					<select id=\"reportsetup\" name=\"setupID\" class=\"form-control\" ng-model=\"reportSetup.setupProperties.reportSection.selected\" ng-options=\"report.name for report in reportSetup.setupProperties.reportSection.coll track by report.reportOutputSetupID\" ng-change=\"reportSetup.setupProperties.reportSectionChanged()\" tabindex=\"2\">\n" +
        "						<option ng-if=\"!reportSetup.setupProperties.reportSection.selected\" value=\"\">Select a Report Output Setup...</option>\n" +
        "\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "\n" +
        "			<div class=\"form-group\" ng-show=\"reportSetup.setupProperties.reportSection.setupReady\">\n" +
        "\n" +
        "				<label class=\"control-label col-md-2 col-sm-2 col-xs-12\">Tools:</label>\n" +
        "				<div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "					<button tooltip=\"Delete\" class=\"btn btn-md btn-default\" ng-click=\"reportSetup.setupProperties.toolOptions.selectAction('delete')\" tabindex=\"3\"><i class=\"fa fa-times text-danger icon-16\"></i></button>\n" +
        "					<button tooltip=\"Rename\" class=\"btn btn-md btn-default\" ng-click=\"reportSetup.setupProperties.toolOptions.selectAction('rename')\" tabindex=\"4\"><i class=\"fa fa-terminal text-info icon-16\"></i></button>\n" +
        "					<button tooltip=\"Duplicate\" class=\"btn btn-md btn-default\" ng-click=\"reportSetup.setupProperties.toolOptions.selectAction('duplicate')\" tabindex=\"5\"><i class=\"fa fa-file text-success icon-16\"></i></button>\n" +
        "				</div>\n" +
        "\n" +
        "			</div>\n" +
        "		</form>\n" +
        "		<div class=\"alert\" ng-class=\"reportSetup.msgType\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"reportSetup.serviceResponseAlert\">\n" +
        "			<button type=\"button\" class=\"close\" ng-click=\"reportSetup.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "				<span aria-hidden=\"true\">&times;</span>\n" +
        "			</button>\n" +
        "			{{reportSetup.serviceResponseText}}\n" +
        "		</div>\n" +
        "		<hr>\n" +
        "		<div ng-show=\"reportSetup.setupProperties.reportSection.setupReady\">\n" +
        "\n" +
        "			<div ng-include src=\"'app/modules/ReportSetup/views/GlobalPageSettings.html'\"></div>\n" +
        "			<hr>\n" +
        "\n" +
        "			<div ng-include src=\"'app/modules/ReportSetup/views/PCASpecificSettings.html'\"></div>\n" +
        "			<hr>\n" +
        "\n" +
        "			<div ng-include src=\"'app/modules/ReportSetup/views/PageHeaderSettings.html'\"></div>\n" +
        "			<hr>\n" +
        "\n" +
        "			<div ng-include src=\"'app/modules/ReportSetup/views/ReportSectionSettings.html'\"></div>\n" +
        "			<hr>\n" +
        "\n" +
        "			<div ng-include src=\"'app/modules/ReportSetup/views/ReportTableSettings.html'\"></div>\n" +
        "			<hr>\n" +
        "			<div ng-include src=\"'app/modules/ReportSetup/views/PageFooterSettings.html'\"></div>\n" +
        "			<hr>\n" +
        "\n" +
        "			<div class=\"form-group text-center\">\n" +
        "				<button type=\"reset \" class=\"btn btn-md btn-default \"> Cancel</button>\n" +
        "				<button type=\"submit \" class=\"btn btn-md btn-primary \" ng-click=\"reportSetup.save()\"> Save Changes</button>\n" +
        "\n" +
        "			</div>\n" +
        "\n" +
        "			<div ng-show=\"false\">\n" +
        "				<hr>\n" +
        "				<div class=\"\" id=\"applied\">\n" +
        "					<span>Test html </span>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/ReportSetup/views/ReportTableSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportSetup/views/ReportTableSettings.html",
        "<h4 class=\"border-bottom\">\n" +
        "    Report Table Settings:\n" +
        "</h4>\n" +
        "<div class=\"row\">\n" +
        "	<div class=\"col-xs-12 col-md-3\">\n" +
        "		<div class=\"form-group\">\n" +
        "\n" +
        "			<label for=\"tableleftindent\" class=\"control-label\">\n" +
        "				Table Left Indent (inches):\n" +
        "			</label>\n" +
        "			<select id=\"tableleftindent\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-table-settings']['margin-left']\">\n" +
        "				<option value=\"0in\">0</option>\n" +
        "				<option value=\"0.125in\">0.125</option>\n" +
        "				<option value=\"0.166in\">0.166</option>\n" +
        "				<option value=\"0.25in\">0.25</option>\n" +
        "			</select>\n" +
        "\n" +
        "		</div>\n" +
        "	</div>\n" +
        "	<div class=\"col-xs-12 col-md-3\">\n" +
        "		<div class=\"form-group\">\n" +
        "\n" +
        "			<label for=\"doubleborders\" class=\"control-label\">\n" +
        "				Double Borders:\n" +
        "			</label>\n" +
        "			<select id=\"doubleborders\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportTableSettings.doubleBorders\">\n" +
        "				<option>No</option>\n" +
        "				<option>Yes</option>\n" +
        "			</select>\n" +
        "\n" +
        "		</div>\n" +
        "	</div>\n" +
        "</div>\n" +
        "\n" +
        "<hr>\n" +
        "\n" +
        "<!-- Table Header: -->\n" +
        "\n" +
        "<!-- section title -->\n" +
        "<strong>Table Header:  </strong>\n" +
        "<!-- end: section title -->\n" +
        "\n" +
        "<!-- left part of section -->\n" +
        "<div class=\"row\">\n" +
        "	<div class=\"col-xs-12 col-md-4\">\n" +
        "\n" +
        "		<label for=\"Fontfifth\" class=\"label-control\">\n" +
        "			Font:\n" +
        "		</label>\n" +
        "		<div class=\"form-group\">\n" +
        "			<select id=\"Fontfifth\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-table-settings-table-header']['font-family']\">\n" +
        "				<option>Arial</option>\n" +
        "				<option>Helvetica</option>\n" +
        "				<option>Times</option>\n" +
        "				<option>Americana</option>\n" +
        "				<option>Times New Roman</option>\n" +
        "				<option>Book Antiqua</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "		<div class=\"form-group\">\n" +
        "			<select class=\"form-control\" ng-model=\"reportSetup.cssData['report-table-settings-table-header']['font-size']\">\n" +
        "				<option value=\"8px\">8</option>\n" +
        "				<option value=\"9px\">9</option>\n" +
        "				<option value=\"10px\">10</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "		<div class=\"form-group\">\n" +
        "			<select class=\"form-control\" multiple=\"\" ng-model=\"reportSetup.cssData['report-table-settings-table-header'].style\">\n" +
        "				<option value=\"B\">Bold</option>\n" +
        "				<option value=\"I\">Italic</option>\n" +
        "				<option value=\"U\">Underline</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "\n" +
        "	<!-- end: left part of section -->\n" +
        "\n" +
        "	<!-- right part of section -->\n" +
        "	<div class=\"col-xs-12 col-md-8\">\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\" col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textalign1\" class=\"label-control\">\n" +
        "						Text Align:\n" +
        "					</label>\n" +
        "					<select id=\"textalign1\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-table-settings-table-header']['text-align']\">\n" +
        "						<option value=\"left\">Left</option>\n" +
        "						<option value=\"center\">Center</option>\n" +
        "						<option value=\"right\">Right</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "			<div class=\" col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"lineheight\" class=\"label-control\">\n" +
        "						Line Height:\n" +
        "					</label>\n" +
        "					<select id=\"lineheight\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportTableSettings.tableHeader.lineHeight\">\n" +
        "						<option value=\"4\">4</option>\n" +
        "						<option value=\"5\">5</option>\n" +
        "						<option value=\"6\">6</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\" col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"fillcolor\" class=\"label-control\">\n" +
        "						Fill Color:\n" +
        "					</label>\n" +
        "					<input id=\"fillcolor\" colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"reportSetup.cssData['report-table-settings-table-header']['background-color']\">\n" +
        "				</div>\n" +
        "			</div>\n" +
        "			<div class=\" col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textcolor\" class=\"label-control\">\n" +
        "						Text Color:\n" +
        "					</label>\n" +
        "					<input id=\"textcolor\" colorpicker class=\"form-control ng-valid ng-dirty\" ng-model=\"reportSetup.cssData['report-table-settings-table-header']['color']\">\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\" col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"linesunderheader\" class=\"label-control\">\n" +
        "						Lines Under Header:\n" +
        "					</label>\n" +
        "					<select id=\"linesunderheader\" class=\"form-control\" ng-model=\"reportSetup.jsonData.reportTableSettings.tableHeader.linesUnderHeader\">\n" +
        "						<option value=\"0\">0</option>\n" +
        "						<option value=\"1\">1</option>\n" +
        "						<option value=\"2\">2</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "</div>\n" +
        "<!-- end: right part of section -->\n" +
        "<!-- end: Table Header: -->\n" +
        "<hr>\n" +
        "\n" +
        "<!-- Table Column Header: -->\n" +
        "\n" +
        "<!-- section title -->\n" +
        "\n" +
        "<strong>Table Column Header: </strong>\n" +
        "\n" +
        "<!-- end: section title -->\n" +
        "<div class=\"row\">\n" +
        "	<div class=\"col-xs-12 col-md-4\">\n" +
        "\n" +
        "		<label for=\"Fontfifth\" class=\"label-control\">\n" +
        "			Font:\n" +
        "		</label>\n" +
        "		<div class=\"form-group\">\n" +
        "			<select id=\"Fontfifth\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-table-settings-table-header']['font-family']\">\n" +
        "				<option>Arial</option>\n" +
        "				<option>Helvetica</option>\n" +
        "				<option>Times</option>\n" +
        "				<option>Americana</option>\n" +
        "				<option>Times New Roman</option>\n" +
        "				<option>Book Antiqua</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "		<div class=\"form-group\">\n" +
        "			<select class=\"form-control\" ng-model=\"reportSetup.cssData['report-table-settings-table-header']['font-size']\">\n" +
        "				<option value=\"8px\">8</option>\n" +
        "				<option value=\"9px\">9</option>\n" +
        "				<option value=\"10px\">10</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "		<div class=\"form-group\">\n" +
        "			<select class=\"form-control\" multiple=\"\" ng-model=\"reportSetup.cssData['report-table-settings-table-header'].style\">\n" +
        "				<option value=\"B\">Bold</option>\n" +
        "				<option value=\"I\">Italic</option>\n" +
        "				<option value=\"U\">Underline</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "\n" +
        "	<!-- end: left part of section -->\n" +
        "\n" +
        "	<!-- right part of section -->\n" +
        "	<div class=\"col-xs-12 col-md-8\">\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\" col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textalign1\" class=\"label-control\">\n" +
        "						Text Align:\n" +
        "					</label>\n" +
        "					<select id=\"textalign1\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-table-settings-table-header']['text-align']\">\n" +
        "						<option value=\"left\">Left</option>\n" +
        "						<option value=\"center\">Center</option>\n" +
        "						<option value=\"right\">Right</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "</div>\n" +
        "\n" +
        "<!-- end: Table Column Header:  -->\n" +
        "<hr>\n" +
        "\n" +
        "<!-- Table Data -->\n" +
        "<!-- section title -->\n" +
        "\n" +
        "<strong>  Table Data: </strong>\n" +
        "\n" +
        "<!-- end: section title -->\n" +
        "<div class=\"row\">\n" +
        "	<div class=\"col-xs-12 col-md-4\">\n" +
        "\n" +
        "		<label for=\"Fontfifth\" class=\"label-control\">\n" +
        "			Font:\n" +
        "		</label>\n" +
        "		<div class=\"form-group\">\n" +
        "			<select id=\"Fontfifth\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-table-settings-table-header']['font-family']\">\n" +
        "				<option>Arial</option>\n" +
        "				<option>Helvetica</option>\n" +
        "				<option>Times</option>\n" +
        "				<option>Americana</option>\n" +
        "				<option>Times New Roman</option>\n" +
        "				<option>Book Antiqua</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "		<div class=\"form-group\">\n" +
        "			<select class=\"form-control\" ng-model=\"reportSetup.cssData['report-table-settings-table-header']['font-size']\">\n" +
        "				<option value=\"8px\">8</option>\n" +
        "				<option value=\"9px\">9</option>\n" +
        "				<option value=\"10px\">10</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "		<div class=\"form-group\">\n" +
        "			<select class=\"form-control\" multiple=\"\" ng-model=\"reportSetup.cssData['report-table-settings-table-header'].style\">\n" +
        "				<option value=\"B\">Bold</option>\n" +
        "				<option value=\"I\">Italic</option>\n" +
        "				<option value=\"U\">Underline</option>\n" +
        "			</select>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "\n" +
        "	<!-- end: left part of section -->\n" +
        "\n" +
        "	<!-- right part of section -->\n" +
        "	<div class=\"col-xs-12 col-md-8\">\n" +
        "		<div class=\"row\">\n" +
        "			<div class=\" col-xs-12 col-md-6\">\n" +
        "				<div class=\"form-group\">\n" +
        "					<label for=\"textalign1\" class=\"label-control\">\n" +
        "						Text Align:\n" +
        "					</label>\n" +
        "					<select id=\"textalign1\" class=\"form-control\" ng-model=\"reportSetup.cssData['report-table-settings-table-header']['text-align']\">\n" +
        "						<option value=\"left\">Left</option>\n" +
        "						<option value=\"center\">Center</option>\n" +
        "						<option value=\"right\">Right</option>\n" +
        "					</select>\n" +
        "				</div>\n" +
        "			</div>\n" +
        "		</div>\n" +
        "	</div>\n" +
        "</div>\n" +
        "\n" +
        "<!-- end: Table Column Header:   -->");
}]);

angular.module("../app/modules/ReportTemplates/views/defaultTemplateSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportTemplates/views/defaultTemplateSettings.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        " \n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <script id=\"dllDeleteTemplate.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Delete Default Template </h4>\n" +
        "        </div>\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "                <p> This will delete the Default Template. Are you sure you want to continue ?</p>\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDelete()\">No</a>\n" +
        "                <a class=\"btn btn-primary\" role=\"button\" ng-click=\"deleteDefaultTemplate()\">Yes</a>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "    <div class=\"container-fluid \" ng-controller=\"DefaultTemplateSettingsController\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "		<div class=\"panel-body\">	\n" +
        "        <h2>Templates</h2>\n" +
        "\n" +
        "\n" +
        "        <div class=\"form-group\">\n" +
        "            <div class=\"row\">\n" +
        "            <label for=\"company\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">Company:</label>\n" +
        "            <div class=\"col-xs-12 col-sm-5 col-md-4\">\n" +
        "                <select class=\"form-control\" id=\"company\" name=\"company\" ng-model=\"companyID\" ng-change=\"companySelectionChanged()\" focus-if>\n" +
        "                  <!--  ng-options=\"company as company.name for company in companyList  track by company.companyGUID\"-->\n" +
        "                    <option value=\"\">Select Company</option>\n" +
        "                    <option value=\"602AE305-1B48-49B2-BC86-ABB0FA530C03\"> Land Environmental Group</option>\n" +
        "                    <option value=\"A744B47F-529A-40FF-B6C1-33C504A1AAAE\"> Lauenstein &amp; Associates</option>                   \n" +
        "                </select>\n" +
        "            </div>\n" +
        "                </div>\n" +
        "        </div>\n" +
        "\n" +
        "        <div class=\"row\">\n" +
        "            <div class=\"col-md-12 col-lg-12 col-sm-12\">\n" +
        "                <hr>                \n" +
        "                    <div class=\"alert\" ng-class=\"msgType\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"serviceResponseAlert\">\n" +
        "                        <button type=\"button\" class=\"close\" ng-click=\"serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                            <span aria-hidden=\"true\">&times;</span>\n" +
        "                        </button>\n" +
        "                        {{serviceResponseText}}\n" +
        "                    </div>\n" +
        "                    <span ng-hide=\"templateArr.length && templateArr.length > 0\">  No templates available</span>\n" +
        "                    <div class=\"table-responsive\">\n" +
        "                        <table ng-show=\"templateArr.length > 0\" class=\"table table-condensed table-hover\">\n" +
        "\n" +
        "                            <thead>\n" +
        "                                <tr>\n" +
        "                                    <th>Template</th>\n" +
        "                                    <th>Default Language Library</th>\n" +
        "                                    <th>Report Setup</th>\n" +
        "                                    <th>Table of Contents Setup</th>\n" +
        "                                    <th>Transmittal Letter</th>\n" +
        "                                    <th>Cover Page</th>\n" +
        "                                    <th>Action</th>\n" +
        "                                </tr>\n" +
        "                            </thead>\n" +
        "                            <tbody>                                \n" +
        "\n" +
        "                                <tr ng-repeat=\"template in templateArr \">\n" +
        "                                    <td>\n" +
        "\n" +
        "                                        <span e-name=\"name\" e-form=\"rowform\" e-required>\n" +
        "                                <a class=\"pointer\" ui-sref=\"editTemplate({SelectedTemplateID:template.templateID, companyID: companyID})\"> {{ template.name || 'empty' }}</a>\n" +
        "\n" +
        "\n" +
        "                            </span>\n" +
        "                                    </td>\n" +
        "                                    <td>                                      \n" +
        "                                        <span editable-select=\"template.languageLibraryID\" e-name=\"languageLibraryID\" e-form=\"rowform\" e-ng-options=\"s.value as s.text for s in defLangLibArr\">\n" +
        "                                {{ showdefLangLib(template) }}\n" +
        "                            </span>\n" +
        "                                    </td>\n" +
        "                                    <td>\n" +
        "\n" +
        "                                        <span editable-select=\"template.reportOutputSetupID\" e-name=\"reportOutputSetupID\" e-form=\"rowform\" e-ng-options=\"s.value as s.text for s in repSetupArr\">\n" +
        "                                {{ showrepSetup(template) }}\n" +
        "                            </span>\n" +
        "                                    </td>\n" +
        "                                    <td>\n" +
        "\n" +
        "                                        <span editable-select=\"template.tocSetupID\" e-name=\"tocSetupID\" e-form=\"rowform\" e-ng-options=\"s.value as s.text for s in tocArr\">\n" +
        "                                {{ showtoc(template) }}\n" +
        "                            </span>\n" +
        "                                    </td>\n" +
        "                                    <td>\n" +
        "\n" +
        "                                        <span editable-select=\"template.transmittalSetupID\" e-name=\"transmittalSetupID\" e-form=\"rowform\" e-ng-options=\"s.value as s.text for s in transLetterArr\">\n" +
        "                                {{ showtranLetter(template) }}\n" +
        "                            </span>\n" +
        "                                    </td>\n" +
        "                                    <td>\n" +
        "\n" +
        "                                        <span editable-select=\"template.coverPageVal\" e-name=\"coverPageVal\" e-form=\"rowform\" e-ng-options=\"s.value as s.text for s in coverPageArr\">\n" +
        "                                {{ showcoverPage(template) }}\n" +
        "                            </span>\n" +
        "                                    </td>\n" +
        "\n" +
        "\n" +
        "\n" +
        "                                    <td class=\"template-action-btn\">\n" +
        "                                        <!-- form -->\n" +
        "                                        <form editable-form name=\"rowform\" ng-show=\"rowform.$visible\" class=\"form-buttons form-inline\" shown=\"inserted == template\">\n" +
        "\n" +
        "                                            <button class=\"btn btn-sm btn-primary\" type=\"submit\" ng-disabled=\"rowform.$waiting\" tooltip=\"Save Template\" ng-click=\"saveDefaultTemplate(template)\">\n" +
        "                                                <i class=\"fa fa-floppy-o pointer\"></i>\n" +
        "                                            </button>\n" +
        "                                            \n" +
        "                                            <button class=\"btn btn-sm btn-default\" type=\"button\" ng-disabled=\"rowform.$waiting\" ng-click=\"rowform.$cancel()\" tooltip=\"Cancel\">\n" +
        "                                                cancel\n" +
        "                                            </button>\n" +
        "\n" +
        "                                        </form>\n" +
        "                                        <div ng-show=\"!rowform.$visible\">\n" +
        "                                            <a class=\"btn\" tooltip=\"Edit Template\" ng-click=\"rowform.$show()\"><i class=\"fa fa-pencil text-primary pointer\"></i> </a>\n" +
        "                                            <a class=\"btn\" tooltip=\"Delete Template\" ng-disabled=\"rowform.$waiting\" tooltip=\"Delete\" ng-click=\"openDelete(template)\"><i class=\"fa fa-times text-danger pointer\"></i> </a>\n" +
        "                                        </div>\n" +
        "                                    </td>\n" +
        "                                </tr>\n" +
        "\n" +
        "                            </tbody>\n" +
        "\n" +
        "                        </table>\n" +
        "                    </div>                                    \n" +
        "            </div>\n" +
        "        </div>\n" +
        "		</div>	\n" +
        "		</div>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/ReportTemplates/views/editTemplate.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportTemplates/views/editTemplate.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        " \n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <script id=\"DeleteTemplate.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Delete Template </h4>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "                <strong> This will delete the Template. Are you sure you want to continue ?</strong>\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <a class=\"btn btn-primary\" role=\"button\" ng-click=\"deleteTemplate()\">Yes</a>\n" +
        "                <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDelete()\">No</a>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "    <div class=\"container-fluid\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "		<div class=\"panel-body\">\n" +
        "        <h2>Templates</h2>\n" +
        "\n" +
        "        <form name=\"editTemplateForm\" class=\"form-horizontal\" ng-controller=\"EditTemplatesController\">\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-md-12 col-lg-12 col-xs-12\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"companyType\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                            Company:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "                            <select class=\"form-control\" id=\"companyType\" type=\"select\" name=\"companyTypes\" ng-model=\"selectedCompany\" ng-change=\"companySelectionChanged()\" ng-options=\"company as company.name for company in companyList\" focus-if>\n" +
        "                                <option value=\"\">Select Company</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"selectTemplate\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                            Select a template:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "                            <select id=\"selectTemplate\" class=\"form-control\" type=\"select\" ng-model=\"selectedTemplate\" ng-options=\"template.name for template in templates\" ng-change=\"templateChange();\">\n" +
        "                                <option value=\"\" ng-if=\"!selectedTemplate\">Select Template</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"action\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                            I want to:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "                            <select class=\"form-control\" id=\"action\" name=\"action\" ng-model=\"action\" ng-change=\"actionSelected()\">\n" +
        "                                <option value=\"\">Select Action</option>\n" +
        "                                <option value=\"showRename\">Rename this Template</option>\n" +
        "                                <option value=\"showCopy\">Copy this Template into a new Template with a different name</option>\n" +
        "                                <option value=\"showStructure\">View report section structure for this template</option>\n" +
        "                                <option value=\"showRules\">Define rules for when this template is used</option>\n" +
        "                                <option value=\"showMove\">Move this template to another company</option>\n" +
        "                                <option value=\"showDelete\">Delete this Template</option>\n" +
        "                                <option value=\"showShortName\">Define a short name for this template</option>\n" +
        "                                <option value=\"showDashboard\">Define the dashboard that should be used with this template</option>\n" +
        "                                <option value=\"showDefault\" ng-if=\"!selectedTemplate.companyDefaultTemplate\">Make this my default template for {{selectedTemplate.reportType}} reports</option>\n" +
        "\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "\n" +
        "                    </div>\n" +
        "                    <hr>\n" +
        "\n" +
        "                    <div class=\"\">\n" +
        "                        <p>This template<b> IS <span ng-show=\"!selectedTemplate.companyDefaultTemplate\">NOT</span></b> your default template for {{selectedTemplate.reportType}} reports.</p>\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"alert\" ng-class=\"msgType\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"serviceResponseAlert\">\n" +
        "                        <button type=\"button\" class=\"close\" ng-click=\"serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                            <span aria-hidden=\"true\">&times;</span>\n" +
        "                        </button>\n" +
        "                        {{serviceResponseText}}\n" +
        "                    </div>\n" +
        "\n" +
        "\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"row\">\n" +
        "                <div class=\"col-md-12 col-lg-12 col-xs-12\" ng-show=\"action != undefined && action != null && action != ''\">\n" +
        "                    <hr>\n" +
        "                    <div class=\"form-group required\" ng-show=\"action == 'showDashboard'\" show-errors>\n" +
        "                        <label id=\"dashboard\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                            Dashboard\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "                            <select id=\"dashboard\" class=\"form-control\" name=\"dashboard\" type=\"select\" ng-model=\"dashboardVal\" ng-options=\"dash.dashboardOptionShortName as dash.dashboardOptionName for dash in Dashboards\" data-ng-required=\"action == 'showDashboard'\">\n" +
        "                                <option value=\"\">Select Dashboard</option>\n" +
        "                            </select>\n" +
        "\n" +
        "                        </div>\n" +
        "                        \n" +
        "\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group required\" ng-show=\"action == 'showRename'\" show-errors>\n" +
        "                        <label id=\"name\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                            Name\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "                            <input id=\"name\" type=\"text\" name=\"rename\" class=\"form-control\" placeholder=\"Rename template\" ng-model=\"renameVal\" data-ng-required=\"action == 'showRename'\">\n" +
        "\n" +
        "                        </div>\n" +
        "                        \n" +
        "                    </div>\n" +
        "                    <div class=\"form-group required\" ng-show=\"action == 'showCopy'\" show-errors>\n" +
        "                        <label for=\"copy\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                            New Template Name\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "                            <input id=\"copy\" type=\"text\" class=\"form-control\" name=\"copy\" placeholder=\"Enter new name\" ng-model=\"copyVal\" data-ng-required=\"action == 'showCopy'\">\n" +
        "\n" +
        "                        </div>\n" +
        "                       \n" +
        "                    </div>\n" +
        "                    <div class=\"form-group\" ng-show=\"action == 'showStructure'\">\n" +
        "                        <label class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                            Report Structure\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "                            <div section-structure-display sections=\"sections\" root-section-level=\"true\"></div>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group\" ng-show=\"action == 'showDelete'\">\n" +
        "                        <div>\n" +
        "                            Are you sure you want to delete the \" {{template.name}} \" Template? You will no longer be have access to the default language, report styles, and other configurations that it contains.\n" +
        "                        </div>\n" +
        "\n" +
        "                    </div>\n" +
        "                    <div class=\"form-group required\" ng-show=\"action == 'showShortName'\" show-errors>\n" +
        "                        <label for=\"shortName\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                            Short Name\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "                            <input id=\"shortName\" type=\"text\" name=\"shortName\" class=\"form-control\" placeholder=\"Enter short name\" ng-model=\"shortNameVal\" data-ng-required=\"action == 'showShortName'\">\n" +
        "\n" +
        "                        </div>\n" +
        "                        \n" +
        "                    </div>\n" +
        "                    <div class=\"form-group required\" ng-show=\"action == 'showMove'\" show-errors>\n" +
        "                        <label for=\"company_move\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                            Select Company\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "                            <select class=\"form-control\" name=\"companyMove\" id=\"company_move\" type=\"select\" name=\"company_move\" ng-model=\"company_move\" data-ng-required=\"action == 'showMove'\" ng-options=\"other as other.name for other in companyList\">\n" +
        "                                <option value=\"\">Select Company</option>\n" +
        "                                <!--<option value=\"602AE305-1B48-49B2-BC86-ABB0FA530C03\"> Land Environmental Group</option>\n" +
        "                                <option value=\"A744B47F-529A-40FF-B6C1-33C504A1AAAE\"> Lauenstein &amp; Associates</option>\n" +
        "                                <option value=\"12180000-0000-0000-0000-000000000000\">172d Airlift Wing MS ANG</option>-->\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                         \n" +
        "\n" +
        "                    </div>\n" +
        "                    <div class=\"row\" ng-hide=\"action == 'showDefault'\">\n" +
        "                        <div class=\"col-sm-offset-2 col-sm-10\">\n" +
        "                            <button type=\"submit\" class=\"btn btn-md btn-danger\" ng-click=\"openDelete()\" ng-show=\"action == 'showDelete'\"> Delete</button>\n" +
        "                            <button class=\"btn btn-md btn-default\" ng-click=\"Cancel()\"> Cancel</button>\n" +
        "                            <button type=\"submit\" class=\"btn btn-md btn-primary\" ng-click=\"Save(editTemplateForm)\" ng-hide=\"action == 'showStructure' || action == 'showDelete'\"> Save</button>\n" +
        "\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "		</div>	\n" +
        "		</div>\n" +
        "    </div>\n" +
        "\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/ReportTemplates/views/report-output-setup.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/ReportTemplates/views/report-output-setup.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title></title>\n" +
        " \n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <div class=\"container-fluid\">\n" +
        "        <div class=\"row\">\n" +
        "            <div class=\"col-md-12 col-sm-12 col-xs-12\">\n" +
        "                <h2 class=\"page-header\">Templates</h2>\n" +
        "\n" +
        "                <form class=\"form-horizontal\">\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"company\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                            Company:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "                            <select id=\"company\" class=\"form-control\">\n" +
        "                                <option>Default</option>\n" +
        "                                <option>2</option>\n" +
        "                                <option>3</option>\n" +
        "                                <option>4</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"SelectTemplate\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                            Select a template:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "                            <select id=\"SelectTemplate\" class=\"form-control\">\n" +
        "                                <option>Default</option>\n" +
        "                                <option>2</option>\n" +
        "                                <option>3</option>\n" +
        "                                <option>4</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "\n" +
        "                    </div>\n" +
        "\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"wantTo\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                            I want to:\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "                            <select id=\"wantTo\" class=\"form-control\">\n" +
        "                                <option>Default</option>\n" +
        "                                <option>2</option>\n" +
        "                                <option>3</option>\n" +
        "                                <option>4</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "\n" +
        "                    </div>\n" +
        "                    <hr>\n" +
        "\n" +
        "                    <p>This template<strong> IS</strong> your default template for Agricultural Land Appraisal reports.</p>\n" +
        "\n" +
        "                    <hr>\n" +
        "                    <div class=\"form-group\">\n" +
        "                        <label for=\"dashboard\" class=\"control-label col-md-2 col-sm-3 col-xs-12\">\n" +
        "                            Dashboard\n" +
        "                        </label>\n" +
        "                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "                            <select id=\"dashboard\" class=\"form-control\">\n" +
        "                                <option>Default</option>\n" +
        "                                <option>2</option>\n" +
        "                                <option>3</option>\n" +
        "                                <option>4</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "\n" +
        "                    </div>\n" +
        "                    <hr>\n" +
        "                    <div class=\"form-group \">\n" +
        "                        <div class=\"col-sm-offset-3 \">\n" +
        "                            <button type=\"reset\" class=\"btn btn-md btn-default\">Cancel</button>\n" +
        "                            <button type=\"submit\" class=\"btn btn-md btn-primary\">Save</button>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </form>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "    </div>\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/SharedModules/countriesState.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/SharedModules/countriesState.html",
        "<div class=\"form-group required\" show-errors>\n" +
        "    <label ng-class=\"addCountryLabelClass()\" for=\"country\">\n" +
        "        Country:\n" +
        "    </label>\n" +
        "    <div ng-class=\"addCountryDivClass()\">\n" +
        "        <select class=\"form-control\" id=\"country\" type=\"select\" ng-options=\"countryObj.name for countryObj in ngModel\" name=\"country\" ng-model=\"country\" ng-change=\"getCountryStates()\" required>\n" +
        "            <option value=\"\">Select Country</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    \n" +
        "</div>\n" +
        "<div class=\"form-group required\" show-errors>\n" +
        "    <label ng-class=\"addStateLabelClass()\" for=\"state\">\n" +
        "        State:\n" +
        "    </label>\n" +
        "    <div ng-class=\"addStateDivClass()\">\n" +
        "        <select class=\"form-control\" id=\"stateDropDown\" type=\"select\" ng-options=\"stateObj.name for stateObj in states\" ng-disabled=\"setDisabled()\" required ng-change=\"getStateCities()\" ng-model=\"state\" name=\"propertyState\">\n" +
        "            <option value=\"\">Select State</option>\n" +
        "        </select>\n" +
        "        \n" +
        "\n" +
        "    </div>\n" +
        "    \n" +
        "</div>");
}]);

angular.module("../app/modules/SharedModules/multiselect.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/SharedModules/multiselect.html",
        "<div class=\"dropdown\">\n" +
        "    <button class=\"btn btn-md btn-default\" ng-click=\"toggleSelect()\" ng-disabled=\"disabled\" ng-class=\"{'error': !valid()}\">\n" +
        "        <span>{{header}}</span>&nbsp;&nbsp;&nbsp;&nbsp;\n" +
        "        <div class=\"caret text-right\"></div>\n" +
        "    </button>\n" +
        "    <ul class=\"dropdown-menu\">\n" +
        "        <li>\n" +
        "            <input class=\"form-control input-block-level\" type=\"text\" ng-model=\"searchText.label\" autofocus=\"autofocus\" placeholder=\"{{placeHolder}}\" >\n" +
        "     \n" +
        "        </li>\n" +
        "        <li ng-show=\"multiple\">\n" +
        "            <button class=\"btn-link btn-small\" ng-click=\"checkAll()\">\n" +
        "                <!--<i class=\"icon-ok\"></i>-->\n" +
        "                <span class=\"btn-sm glyphicon glyphicon-ok Green\"></span>\n" +
        "                Check all\n" +
        "\n" +
        "            </button>\n" +
        "            <button class=\"btn-link btn-small\" ng-click=\"uncheckAll()\">\n" +
        "                <!--<i class=\"icon-remove\"></i>-->\n" +
        "                <span class=\"btn-sm glyphicon glyphicon-remove Red\"></span>\n" +
        "                Uncheck all\n" +
        "            </button>\n" +
        "        </li>\n" +
        "        <li ng-repeat=\"i in items | filter:searchText\">\n" +
        "            <a ng-click=\"select(i); focus()\">\n" +
        "\n" +
        "\n" +
        "                <span ng-class=\"{'btn-sm glyphicon glyphicon-ok Green': i.checked, 'icon-empty': !i.checked}\"></span>{{i.label}}\n" +
        "            </a>\n" +
        "        </li>\n" +
        "    </ul>\n" +
        "</div>");
}]);

angular.module("../app/modules/SharedModules/resolveErrorHandler.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/SharedModules/resolveErrorHandler.html",
        "<div class=\"text-center\">\n" +
        "<span class=\"glyphicon glyphicon-warning-sign fa-4x text-danger\"></span>\n" +
        "    <h3>The page you're trying to view can't be displayed right now.</h3>\n" +
        "</div>");
}]);

angular.module("../app/modules/TableOfContentsSetup/views/GlobalPageSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TableOfContentsSetup/views/GlobalPageSettings.html",
        "<h4>Global Page Settings:</h4>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-xs-12 col-md-3\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"leftMargin\" class=\"control-label\">Left Margin (inches):</label>\n" +
        "            <select id=\"leftMargin\" class=\"form-control\" ng-model=\"tocSetup.cssData['global']['margin-left']\">\n" +
        "                <option value=\"0.5\">0.5\"</option>\n" +
        "                <option value=\"0.75\">0.75\"</option>\n" +
        "                <option value=\"1\">1\"</option>\n" +
        "                <option value=\"1.25\">1.25\"</option>\n" +
        "                <option value=\"0.5\">0.5\"</option>\n" +
        "                <option value=\"1.75\">1.75\"</option>\n" +
        "                <option value=\"2\">2\"</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <div class=\"col-xs-12 col-md-3\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"rightMargin\" class=\"control-label\">Right Margin (inches):</label>\n" +
        "            <select id=\"rightMargin\" class=\"form-control\" ng-model=\"tocSetup.cssData['global']['margin-right']\">\n" +
        "                <option value=\"0.5\">0.5\"</option>\n" +
        "                <option value=\"0.75\">0.75\"</option>\n" +
        "                <option value=\"1\">1\"</option>\n" +
        "                <option value=\"1.25\">1.25\"</option>\n" +
        "                <option value=\"0.5\">0.5\"</option>\n" +
        "                <option value=\"1.75\">1.75\"</option>\n" +
        "                <option value=\"2\">2\"</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <div class=\"col-xs-12 col-md-3\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"indentSectionNumber\" class=\"control-label\">Indent Section Number:</label>\n" +
        "            <select id=\"indentSectionNumber\" class=\"form-control\" ng-model=\"tocSetup.jsonData.global.indentSectionNumber\">\n" +
        "                <option value=\"0\">No</option>\n" +
        "                <option value=\"1\">Yes</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <div class=\"col-xs-12 col-md-3\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"blanklineBeforeSection\">Blank Line Before Section:</label>\n" +
        "            <select id=\"blanklineBeforeSection\" class=\"form-control\" ng-model=\"tocSetup.jsonData.global.blankLinesBeforeSection\">\n" +
        "                <option value=\"0\">No</option>\n" +
        "                <option value=\"1\">Yes</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/TableOfContentsSetup/views/PageFooterSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TableOfContentsSetup/views/PageFooterSettings.html",
        "<h4>Page Footer Settings:</h4>\n" +
        "<div class=\"form-horizontal\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"linesAboveFooter\" class=\"control-label col-md-3 col-sm-2 col-xs-12\">\n" +
        "            Number of Lines Above Footer:\n" +
        "        </label>\n" +
        "        <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "            <select id=\"linesAboveFooter\" name=\"companyID\" class=\"form-control\" ng-model=\"tocSetup.jsonData.pageFooterSettings.linesAboveFooter\">\n" +
        "                <option value=\"0\">0</option>\n" +
        "                <option value=\"1\">1</option>\n" +
        "                <option value=\"2\">2</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "<hr>\n" +
        "<div class=\"row\">\n" +
        "    <!-- Left -->\n" +
        "    <div class=\"col-md-4 col-lg-4 col-xs-12\">\n" +
        "        <div class=\"panel panel-default\">\n" +
        "            <div class=\"panel-body\">\n" +
        "                <h4>Left</h4>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-md-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"tocSetup.jsonData.pageFooterSettings.left.dynamicContent\">\n" +
        "                                <option value=\"\">Add Dynamic Content...</option>\n" +
        "                                <option value=\"{compname}\">Your Company's Name</option>\n" +
        "                                <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "                                <option value=\"{logo}\">Your Company's Logo</option>\n" +
        "                                <option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "                                <option value=\"{cCity}\">Your Company's City</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\"> </textarea>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-footer-settings-left']['font-family']\">\n" +
        "                                <option>Arial</option>\n" +
        "                                <option selected=\"\">Helvetica</option>\n" +
        "                                <option>Times</option>\n" +
        "                                <option>Americana</option>\n" +
        "                                <option>Times New Roman</option>\n" +
        "                                <option>Book Antiqua</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-footer-settings-left']['font-size']\">\n" +
        "                                <option value=\"8px\">8</option>\n" +
        "                                <option value=\"9px\">9</option>\n" +
        "                                <option value=\"10px\">10</option>\n" +
        "                                <option value=\"11px\">11</option>\n" +
        "                                <option value=\"12px\">12</option>\n" +
        "                                <optionv value=\"13px\">13</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" multiple=\"\" ng-model=\"tocSetup.cssData['page-footer-settings-left'].style\">\n" +
        "                                <option value=\"B\">Bold</option>\n" +
        "                                <option value=\"I\">Italic</option>\n" +
        "                                <option value=\"U\">Underline</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <!-- Left end -->\n" +
        "    <!-- Center -->\n" +
        "    <div class=\"col-md-4 col-lg-4 col-xs-12 text-center\">\n" +
        "        <div class=\"panel panel-default\">\n" +
        "            <div class=\"panel-body\">\n" +
        "                <h4>Center</h4>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-md-push-3\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"tocSetup.jsonData.pageFooterSettings.center.dynamicContent\">\n" +
        "                                <option value=\"\">Add Dynamic Content...</option>\n" +
        "                                <option value=\"{compname}\">Your Company's Name</option>\n" +
        "                                <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "                                <option value=\"{logo}\">Your Company's Logo</option>\n" +
        "                                <option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "                                <option value=\"{cCity}\">Your Company's City</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\">Page {page}</textarea>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-footer-settings-center']['font-family']\">\n" +
        "                                <option>Arial</option>\n" +
        "                                <option selected=\"\">Helvetica</option>\n" +
        "                                <option>Times</option>\n" +
        "                                <option>Americana</option>\n" +
        "                                <option>Times New Roman</option>\n" +
        "                                <option>Book Antiqua</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-footer-settings-center']['font-size']\">\n" +
        "                                <option value=\"8px\">8</option>\n" +
        "                                <option value=\"9px\">9</option>\n" +
        "                                <option value=\"10px\">10</option>\n" +
        "                                <option value=\"11px\">11</option>\n" +
        "                                <option value=\"12px\">12</option>\n" +
        "                                <optionv value=\"13px\">13</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" multiple=\"\" ng-model=\"tocSetup.cssData['page-footer-settings-center'].style\">\n" +
        "                                <option value=\"B\">Bold</option>\n" +
        "                                <option value=\"I\">Italic</option>\n" +
        "                                <option value=\"U\">Underline</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <!-- Center end -->\n" +
        "    <!-- Right -->\n" +
        "    <div class=\"col-md-4 col-lg-4 col-xs-12 text-right\">\n" +
        "        <div class=\"panel panel-default\">\n" +
        "            <div class=\"panel-body\">\n" +
        "                <h4>Right</h4>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-md-6 col-md-offset-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"tocSetup.jsonData.pageFooterSettings.right.dynamicContent\">\n" +
        "                                <option value=\"\">Add Dynamic Content...</option>\n" +
        "                                <option value=\"{compname}\">Your Company's Name</option>\n" +
        "                                <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "                                <option value=\"{logo}\">Your Company's Logo</option>\n" +
        "                                <option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "                                <option value=\"{cCity}\">Your Company's City</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\"></textarea>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-footer-settings-right']['font-family']\">\n" +
        "                                <option>Arial</option>\n" +
        "                                <option selected=\"\">Helvetica</option>\n" +
        "                                <option>Times</option>\n" +
        "                                <option>Americana</option>\n" +
        "                                <option>Times New Roman</option>\n" +
        "                                <option>Book Antiqua</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-footer-settings-right']['font-size']\">\n" +
        "                                <option value=\"8px\">8</option>\n" +
        "                                <option value=\"9px\">9</option>\n" +
        "                                <option value=\"10px\">10</option>\n" +
        "                                <option value=\"11px\">11</option>\n" +
        "                                <option value=\"12px\">12</option>\n" +
        "                                <optionv value=\"13px\">13</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" multiple=\"\" ng-model=\"tocSetup.cssData['page-footer-settings-right'].style\">\n" +
        "                                <option value=\"B\">Bold</option>\n" +
        "                                <option value=\"I\">Italic</option>\n" +
        "                                <option value=\"U\">Underline</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <!-- Right End -->\n" +
        "</div>");
}]);

angular.module("../app/modules/TableOfContentsSetup/views/PageHeaderSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TableOfContentsSetup/views/PageHeaderSettings.html",
        "<h4>Page Header Settings:</h4>\n" +
        "<div class=\"row\">\n" +
        "\n" +
        "    <!-- Left -->\n" +
        "    <div class=\"col-md-4 col-lg-4 col-xs-12\">\n" +
        "        <div class=\"panel panel-default\">\n" +
        "            <div class=\"panel-body\">\n" +
        "        <h4>Left</h4>\n" +
        "        <div class=\"row\">\n" +
        "            <div class=\"col-xs-12 col-md-6\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\" ng-model=\"tocSetup.jsonData.pageHeaderSettings.left.dynamicContent\">\n" +
        "                        <option value=\"\">Add Dynamic Content...</option>\n" +
        "                        <option value=\"{compname}\">Your Company's Name</option>\n" +
        "                        <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "                        <option value=\"{logo}\">Your Company's Logo</option>\n" +
        "                        <option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "                        <option value=\"{cCity}\">Your Company's City</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\">Phase I Report {siteAddress} {siteCity}, {siteState} {siteZip}</textarea>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"row\">\n" +
        "            <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-header-settings-left']['font-family']\">\n" +
        "                        <option>Arial</option>\n" +
        "                        <option selected=\"\">Helvetica</option>\n" +
        "                        <option>Times</option>\n" +
        "                        <option>Americana</option>\n" +
        "                        <option>Times New Roman</option>\n" +
        "                        <option>Book Antiqua</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-header-settings-left']['font-size']\">\n" +
        "                        <option value=\"8px\">8</option>\n" +
        "                        <option value=\"9px\">9</option>\n" +
        "                        <option value=\"10px\">10</option>\n" +
        "                        <option value=\"11px\">11</option>\n" +
        "                        <option value=\"12px\">12</option>\n" +
        "                        <optionv value=\"13px\">13</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                <div class=\"form-group\">\n" +
        "                <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-header-settings-left'].style\">\n" +
        "                    <option value=\"B\">Bold</option>\n" +
        "                    <option value=\"I\">Italic</option>\n" +
        "                    <option value=\"U\">Underline</option>\n" +
        "                </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <!-- Left end -->\n" +
        "\n" +
        "    <!-- Center -->\n" +
        "    <div class=\"col-md-4 col-lg-4 col-xs-12 text-center\">\n" +
        "        <div class=\"panel panel-default\">\n" +
        "            <div class=\"panel-body\">\n" +
        "        <h4>Center</h4>\n" +
        "        <div class=\"row\">\n" +
        "            <div class=\"col-xs-12 col-md-6 col-sm-6 col-md-push-3 col-sm-push-3\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-header-settings-center']['dynamicContent']\">\n" +
        "                        <option value=\"\">Add Dynamic Content...</option>\n" +
        "                        <option value=\"{compname}\">Your Company's Name</option>\n" +
        "                        <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "                        <option value=\"{logo}\">Your Company's Logo</option>\n" +
        "                        <option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "                        <option value=\"{cCity}\">Your Company's City</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\"></textarea>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"row\">\n" +
        "            <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-header-settings-center']['font-family']\">\n" +
        "                        <option>Arial</option>\n" +
        "                        <option selected=\"\">Helvetica</option>\n" +
        "                        <option>Times</option>\n" +
        "                        <option>Americana</option>\n" +
        "                        <option>Times New Roman</option>\n" +
        "                        <option>Book Antiqua</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-header-settings-center']['font-size']\">\n" +
        "                        <option value=\"8px\">8</option>\n" +
        "                        <option value=\"9px\">9</option>\n" +
        "                        <option value=\"10px\">10</option>\n" +
        "                        <option value=\"11px\">11</option>\n" +
        "                        <option value=\"12px\">12</option>\n" +
        "                        <optionv value=\"13px\">13</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                <div class=\"form-group\">\n" +
        "                <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-header-settings-center'].style\">\n" +
        "                    <option value=\"B\">Bold</option>\n" +
        "                    <option value=\"I\">Italic</option>\n" +
        "                    <option value=\"U\">Underline</option>\n" +
        "                </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <!-- Center end -->\n" +
        "\n" +
        "    <!-- Right -->\n" +
        "    <div class=\"col-md-4 col-lg-4 col-xs-12 text-right\">\n" +
        "       <div class=\"panel panel-default\">\n" +
        "            <div class=\"panel-body\">\n" +
        "        <h4>Right</h4>\n" +
        "        <div class=\"row\">\n" +
        "            <div class=\"col-xs-12 col-md-6 col-lg-6 col-md-offset-6\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-header-settings-right']['dynamicContent']\">\n" +
        "                        <option value=\"\">Add Dynamic Content...</option>\n" +
        "                        <option value=\"{compname}\">Your Company's Name</option>\n" +
        "                        <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "                        <option value=\"{logo}\">Your Company's Logo</option>\n" +
        "                        <option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "                        <option value=\"{cCity}\">Your Company's City</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\">Project Number: {projnumber}</textarea>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <div class=\"row\">\n" +
        "            <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-header-settings-right']['font-family']\">\n" +
        "                        <option>Arial</option>\n" +
        "                        <option selected=\"\">Helvetica</option>\n" +
        "                        <option>Times</option>\n" +
        "                        <option>Americana</option>\n" +
        "                        <option>Times New Roman</option>\n" +
        "                        <option>Book Antiqua</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-header-settings-right']['font-size']\">\n" +
        "                        <option value=\"8px\">8</option>\n" +
        "                        <option value=\"9px\">9</option>\n" +
        "                        <option value=\"10px\">10</option>\n" +
        "                        <option value=\"11px\">11</option>\n" +
        "                        <option value=\"12px\">12</option>\n" +
        "                        <optionv value=\"13px\">13</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                <div class=\"form-group\">\n" +
        "                <select class=\"form-control\" ng-model=\"tocSetup.cssData['page-header-settings-right'].style\">\n" +
        "                    <option value=\"B\">Bold</option>\n" +
        "                    <option value=\"I\">Italic</option>\n" +
        "                    <option value=\"U\">Underline</option>\n" +
        "                </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "           </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <!-- Right End -->\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"form-horizontal\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"numberofLinesBelowHeader\" class=\"control-label col-md-3 col-sm-2 col-xs-12\">\n" +
        "            Number of Lines Below Header:\n" +
        "        </label>\n" +
        "        <div class=\"col-xs-12 col-sm-3 col-md-4\">\n" +
        "            <select id=\"numberofLinesBelowHeader\" name=\"numberofLinesBelowHeader\" class=\"form-control\" ng-model=\"tocSetup.jsonData.pageHeaderSettings.linesBelowHeader\">\n" +
        "                <option value=\"0\">0</option>\n" +
        "                <option value=\"1\">1</option>\n" +
        "                <option value=\"2\">2</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/TableOfContentsSetup/views/ReportAppendixSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TableOfContentsSetup/views/ReportAppendixSettings.html",
        "<h4>Report Appendix Settings</h4>\n" +
        "\n" +
        "<div class=\"form-horizontal\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label class=\"control-label col-xs-12 col-md-2\">\n" +
        "            Font:\n" +
        "        </label>\n" +
        "        <div class=\"col-xs-12 col-md-10\">\n" +
        "            <p class=\"form-control-static\"><strong>Appendices font settings pull from Sub Section Header above.</strong></p>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "<!-- controls -->\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"beginAppendices\" class=\"control-label\">\n" +
        "                Begin Appendices on a new page:\n" +
        "            </label>\n" +
        "            <select class=\"form-control\" id=\"beginAppendices\" ng-model=\"tocSetup.jsonData.reportAppendixSettings.appendicesOnNewPage\">\n" +
        "                <option value=\"0\">No</option>\n" +
        "                <option value=\"1\">Yes</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"indentAppendixTitle\" class=\"control-label\">\n" +
        "                Indent Appendix Title:\n" +
        "            </label>\n" +
        "            <select class=\"form-control\" id=\"indentAppendixTitle\" ng-model=\"tocSetup.jsonData.reportAppendixSettings.indentAppendixTitle\">\n" +
        "                <option value=\"0\">No</option>\n" +
        "                <option value=\"1\">Yes</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"appendixTabLeader\" class=\"control-label\">\n" +
        "                Tab Leader:\n" +
        "            </label>\n" +
        "            <select class=\"form-control\" id=\"appendixTabLeader\" ng-model=\"tocSetup.jsonData.reportAppendixSettings.tabLeader\">\n" +
        "                <option value=\" \">(none)</option>\n" +
        "                <option value=\".\">...</option>\n" +
        "                <option value=\"-\">---</option>\n" +
        "                <option value=\"_\">___</option>\n" +
        "            </select>\n" +
        "            </div>\n" +
        "            <div class=\"form-group\">\n" +
        "            <input class=\"form-control\" ng-disabled=\"true\" value=Section{{tocSetup.jsonData.reportAppendixSettings.tabLeader}}1>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"usesAppendixContainerStyle\" class=\"control-label\">\n" +
        "                Uses Appendix Container Style:\n" +
        "            </label>\n" +
        "            <select class=\"form-control\" id=\"usesAppendixContainerStyle\" ng-model=\"tocSetup.jsonData.reportAppendixSettings.usesAppendixContainerStyle\">\n" +
        "                <option value=\"0\">No</option>\n" +
        "                <option value=\"1\">Yes</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"hideAppendixTitleInPdf\" class=\"control-label\">\n" +
        "                Hide Appendix Title in PDF:\n" +
        "            </label>\n" +
        "            <select id=\"hideAppendixTitleInPdf\" class=\"form-control\" ng-model=\"tocSetup.jsonData.reportAppendixSettings.hideAppendixTitleInPdf\">\n" +
        "                <option value=\"0\">No</option>\n" +
        "                <option value=\"1\">Yes</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"linesBeforeAppendices\" class=\"control-label\">\n" +
        "                Number of Lines before Appendices:\n" +
        "            </label>\n" +
        "            <select id=\"linesBeforeAppendices\" class=\"form-control\" ng-model=\"tocSetup.jsonData.reportAppendixSettings.linesBeforeAppendices\">\n" +
        "                <option value=\"0\">0</option>\n" +
        "                <option value=\"1\">1</option>\n" +
        "                <option value=\"2\">2</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"containerFontStyle\" class=\"control-label\">\n" +
        "                Appendix Container Font Style:\n" +
        "            </label>\n" +
        "            <select class=\"form-control\" id=\"containerFontStyle\" ng-model=\"tocSetup.cssData['report-appendix-settings'].style\">\n" +
        "\n" +
        "                <option value=\"B\">Bold</option>\n" +
        "                <option value=\"I\">Italic</option>\n" +
        "                <option value=\"U\">Underline</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"hideAppendixCoverPages\" class=\"control-label\">\n" +
        "                Hide Appendix Cover Pages:\n" +
        "            </label>\n" +
        "            <select class=\"form-control\" id=\"hideAppendixCoverPages\" ng-model=\"tocSetup.jsonData.reportAppendixSettings.hideAppendixCoverPages\">\n" +
        "                <option value=\"0\">No</option>\n" +
        "                <option value=\"1\">Yes</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"appendixContainerTitle\" class=\"control-label\">\n" +
        "                Appendix Container Title:\n" +
        "            </label>\n" +
        "            <input id=\"appendixContainerTitle\" class=\"form-control\" value=\"\" ng-model=\"tocSetup.jsonData.reportAppendixSettings.appendixContainerTitle\">\n" +
        "        </div>\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"showPageNumbers\" class=\"control-label\">\n" +
        "                Show Page Numbers:\n" +
        "            </label>\n" +
        "            <select class=\"form-control\" id=\"showPageNumbers\" ng-model=\"tocSetup.jsonData.reportAppendixSettings.showPageNumbers\">\n" +
        "                <option value=\"0\">No</option>\n" +
        "                <option value=\"1\">Yes</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "</div>\n" +
        "\n" +
        "<!-- controls end -->");
}]);

angular.module("../app/modules/TableOfContentsSetup/views/ReportSectionSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TableOfContentsSetup/views/ReportSectionSettings.html",
        "<h4>Report Section Settings:</h4>\n" +
        "    \n" +
        "    <div class=\"form-horizontal\">\n" +
        "    <div class=\"form-group\">\n" +
        "            <label for=\"tabLeader\" class=\"control-label col-xs-12 col-sm-3 col-md-2 col-lg-2\">\n" +
        "                Tab Leader:\n" +
        "            </label>\n" +
        "            <div class=\"col-xs-12 col-sm-3 col-md-3 col-lg-3\">\n" +
        "                <select id=\"tabLeader\" class=\"form-control\" ng-model=\"tocSetup.jsonData.reportSectionSettings.tabLeader\">\n" +
        "                    <option value=\" \">(none)</option>\n" +
        "                    <option value=\".\" selected=\"\">...</option>\n" +
        "                    <option value=\"-\">---</option>\n" +
        "                    <option value=\"_\">___</option>\n" +
        "                </select>\n" +
        "            </div>\n" +
        "            <div class=\"col-xs-12 col-sm-3 col-md-3 col-lg-3\">\n" +
        "                <input class=\"form-control\" ng-disabled=\"true\" value=\"Section{{tocSetup.jsonData.reportSectionSettings.tabLeader}}1\">\n" +
        "            </div>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "    \n" +
        "    <hr>\n" +
        "\n" +
        "    <!-- Section Header (1.0 - Top Level Sections) -->\n" +
        "    <div class=\"row\">\n" +
        "        <label class=\"control-label col-xs-12 col-md-12\">\n" +
        "            Section Header (1.0 - Top Level Sections):\n" +
        "        </label>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"row\">\n" +
        "    <div class=\"col-xs-12 col-md-4\">                               \n" +
        "                <div class=\"form-group\">\n" +
        "                <label for=\"font\" class=\"control-label\">Font:</label>\n" +
        "                <select id=\"font\" class=\"form-control\" ng-model=\"tocSetup.cssData['report-section-settings-section-header']['font-family']\">\n" +
        "                    <option>Arial</option>\n" +
        "                    <option selected=\"\">Helvetica</option>\n" +
        "                    <option>Times</option>\n" +
        "                    <option>Americana</option>\n" +
        "                    <option>Times New Roman</option>\n" +
        "                    <option>Book Antiqua</option>\n" +
        "                </select>\n" +
        "                </div>\n" +
        "                 <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\" ng-model=\"tocSetup.cssData['report-section-settings-section-header']['font-size']\">\n" +
        "                        <option>8</option>\n" +
        "                        <option>9</option>\n" +
        "                        <option selected=\"\">10</option>\n" +
        "                        <option>11</option>\n" +
        "                        <option>12</option>\n" +
        "                        <option>13</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                <select class=\"form-control\" multiple=\"\" ng-model=\"tocSetup.cssData['report-section-settings-section-header'].style\">\n" +
        "                    <option value=\"B\" selected=\"\">Bold</option>\n" +
        "                    <option value=\"I\">Italic</option>\n" +
        "                    <option value=\"U\">Underline</option>\n" +
        "                </select>\n" +
        "                </div>\n" +
        "    </div>\n" +
        "            <div class=\"col-xs-12 col-md-4\">\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"leftIndent\" class=\"control-label\">Left Indent (inches):</label>\n" +
        "                <select id=\"leftIndent\" class=\"form-control\" ng-model=\"tocSetup.cssData['report-section-settings-section-header']['margin-left']\">\n" +
        "                    <option value=\"0in\">0</option>\n" +
        "                    <option value=\"0.125in\">0.125</option>\n" +
        "                    <option value=\"0.166in\">0.166</option>\n" +
        "                    <option value=\"0.25in\">0.25</option>\n" +
        "                </select>\n" +
        "            </div>\n" +
        "            </div>\n" +
        "            <div class=\"col-xs-12 col-md-4\">\n" +
        "            <div class=\"form-group\">\n" +
        "                <label for=\"textCapitalized\" class=\"control-label\">Text Capitalized:</label>\n" +
        "                <select id=\"textCapitalized\" class=\"form-control\" ng-model=\"tocSetup.cssData['report-section-settings-section-header']['text-transform']\">\n" +
        "                    <option value=\"none\">No</option>\n" +
        "                    <option value=\"capitalize\">Yes</option>\n" +
        "                </select>\n" +
        "            </div>\n" +
        "            </div>\n" +
        "     \n" +
        "   \n" +
        "    </div>\n" +
        "    <!-- end: Section Header (1.0 - Top Level Sections) -->\n" +
        "\n" +
        "    <hr>\n" +
        "\n" +
        "    <!-- Sub-Section Header (1.1 - First child level sections) -->\n" +
        "    <div class=\"row\">\n" +
        "    <div class=\"col-xs-12 col-md-12\">\n" +
        "        <div class=\"checkbox\">\n" +
        "        <label>\n" +
        "        <input type=\"checkbox\"></input><strong>Sub-Section Header (1.1 - First child level sections):</strong>\n" +
        "        </label>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "    \n" +
        "    <div class=\"row\">\n" +
        "    <div class=\"col-xs-12 col-md-4\">                                                     \n" +
        "                <div class=\"form-group\">\n" +
        "                <label for=\"fontSubsection\" class=\"control-label\">Font:</label> \n" +
        "                <select id=\"fontSubsection\" class=\"form-control\" ng-model=\"tocSetup.cssData['report-section-settings-sub-section-header']['font-family']\">\n" +
        "                    <option>Arial</option>\n" +
        "                    <option selected=\"\">Helvetica</option>\n" +
        "                    <option>Times</option>\n" +
        "                    <option>Americana</option>\n" +
        "                    <option>Times New Roman</option>\n" +
        "                    <option>Book Antiqua</option>\n" +
        "                </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\" ng-model=\"tocSetup.cssData['report-section-settings-sub-section-header']['font-size']\">\n" +
        "                        <option>8</option>\n" +
        "                        <option>9</option>\n" +
        "                        <option selected=\"\">10</option>\n" +
        "                        <option>11</option>\n" +
        "                        <option>12</option>\n" +
        "                        <option>13</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                <select class=\"form-control\" multiple=\"\" ng-model=\"tocSetup.cssData['report-section-settings-sub-section-header'].style\">\n" +
        "                    <option value=\"B\" selected=\"\">Bold</option>\n" +
        "                    <option value=\"I\">Italic</option>\n" +
        "                    <option value=\"U\">Underline</option>\n" +
        "                </select>\n" +
        "                </div>                          \n" +
        "    </div>\n" +
        "      \n" +
        "            <div class=\"col-xs-12 col-md-4\">\n" +
        "                <div class=\"form-group\">                \n" +
        "                <label for=\"leftIndentSubsection\" class=\"control-label\">Left Indent (inches):</label>\n" +
        "                <select id=\"leftIndentSubsection\" class=\"form-control\" ng-model=\"tocSetup.cssData['report-section-settings-sub-section-header']['margin-left']\">\n" +
        "                    <option value=\"0in\">0</option>\n" +
        "                    <option value=\"0.125in\">0.125</option>\n" +
        "                    <option value=\"0.166in\">0.166</option>\n" +
        "                    <option value=\"0.25in\">0.25</option>\n" +
        "                </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"col-xs-12 col-md-4\">\n" +
        "                <div class=\"form-group\">\n" +
        "                <label for=\"textCapitalizedSubsection\" class=\"control-label\">Text Capitalized:</label>            \n" +
        "                <select id=\"textCapitalizedSubsection\" class=\"form-control\" ng-model=\"tocSetup.cssData['report-section-settings-sub-section-header']['text-transform']\">\n" +
        "                    <option value=\"none\">No</option>\n" +
        "                    <option value=\"capitalize\">Yes</option>\n" +
        "                </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "    </div>\n" +
        "    <!-- end: Sub-Section Header (1.1 - First child level sections) -->\n" +
        "\n" +
        "    <hr>\n" +
        "\n" +
        "\n" +
        "    <!-- Sub-Sub-Section Header (1.1.1 - Second Child level sections and anything deeper) -->\n" +
        "    <div class=\"row\">\n" +
        "    <div class=\"col-xs-12 col-md-12\">\n" +
        "        <div class=\"checkbox\">\n" +
        "        <label>\n" +
        "        <input type=\"checkbox\"></input><strong>Sub-Sub-Section Header (1.1.1 - Second Child level sections and anything deeper):</strong>\n" +
        "        </label>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"row\">\n" +
        "    <div class=\"col-xs-12 col-md-4\">                                                         \n" +
        "                <div class=\"form-group\">\n" +
        "                <label for=\"fontSubsection1\" class=\"control-label\">Font:</label>                  \n" +
        "                <select id=\"fontSubsection1\" class=\"form-control\" ng-model=\"tocSetup.cssData['report-section-settings-sub-sub-section-header']['font-family']\">\n" +
        "                    <option>Arial</option>\n" +
        "                    <option selected=\"\">Helvetica</option>\n" +
        "                    <option>Times</option>\n" +
        "                    <option>Americana</option>\n" +
        "                    <option>Times New Roman</option>\n" +
        "                    <option>Book Antiqua</option>\n" +
        "                </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\" ng-model=\"tocSetup.cssData['report-section-settings-sub-sub-section-header']['font-size']\">\n" +
        "                        <option>8</option>\n" +
        "                        <option>9</option>\n" +
        "                        <option selected=\"\">10</option>\n" +
        "                        <option>11</option>\n" +
        "                        <option>12</option>\n" +
        "                        <option>13</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                <select class=\"form-control\" multiple=\"\" ng-model=\"tocSetup.cssData['report-section-settings-sub-sub-section-header'].style\">\n" +
        "                    <option value=\"B\" selected=\"\">Bold</option>\n" +
        "                    <option value=\"I\">Italic</option>\n" +
        "                    <option value=\"U\">Underline</option>\n" +
        "                </select>\n" +
        "                </div>    \n" +
        "        \n" +
        "    </div>\n" +
        "    \n" +
        "     \n" +
        "            <div class=\"col-xs-12 col-md-4\">\n" +
        "                <div class=\"form-group\">\n" +
        "                <label for=\"leftIndentSubsection1\" class=\"control-label\">Left Indent (inches):</label>            \n" +
        "                <select id=\"leftIndentSubsection1\" class=\"form-control\" ng-model=\"tocSetup.cssData['report-section-settings-sub-sub-section-header']['margin-left']\">\n" +
        "                    <option value=\"0in\">0</option>\n" +
        "                    <option value=\"0.125in\">0.125</option>\n" +
        "                    <option value=\"0.166in\">0.166</option>\n" +
        "                    <option value=\"0.25in\">0.25</option>\n" +
        "                </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"col-xs-12 col-md-4\">\n" +
        "                <div class=\"form-group\">                \n" +
        "                <label for=\"textCapitalizedSubsection1\" class=\"control-label\">Text Capitalized:</label> \n" +
        "                <select id=\"textCapitalizedSubsection1\" class=\"form-control\" ng-model=\"tocSetup.cssData['report-section-settings-sub-sub-section-header']['text-transform']\">\n" +
        "                    <option value=\"none\">No</option>\n" +
        "                    <option value=\"capitalize\">Yes</option>\n" +
        "                </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "    \n" +
        "    </div>\n" +
        "    <!-- end: Sub-Sub-Section Header (1.1.1 - Second Child level sections and anything deeper) -->\n" +
        "\n" +
        "");
}]);

angular.module("../app/modules/TableOfContentsSetup/views/TOCSetupForm.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TableOfContentsSetup/views/TOCSetupForm.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        "\n" +
        "<head>\n" +
        "    <title>Report Output Setup</title>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "    <script id=\"tocDelete.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Delete Table of Content Setup</h4>\n" +
        "        </div>\n" +
        "\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate\" novalidate>\n" +
        "            <div class=\"modal-body \">                \n" +
        "                    <p><strong>You are about to delete the \" {{tocSetupName}} \". Are you sure you want to delete it?</strong></p>                \n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <a class=\"btn btn-default\" role=\"button\" ng-click=\"CancelDelete()\">Cancel</a>\n" +
        "                 <a class=\"btn btn-danger\" role=\"button\" ng-click=\"deleteReport()\">Continue</a>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "    <script id=\"tocRename.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Rename Table of Content Setup:</h4>\n" +
        "        </div>\n" +
        "        <form name=\"myFormAddTemplate\" novalidate>\n" +
        "            <div class=\"modal-body\"> \n" +
        "                <div class=\"form-group\" show-errors>\n" +
        "                <label for=\"renameReportTemplate\" class=\"control-label\">Enter a new name for this Table of Content Setup:</label>      \n" +
        "                    <span class=\"reqText\">*</span>\n" +
        "                                <input id=\"renameReportTemplate\" name=\"renameReportTemplate\" class=\"form-control\" type=\"text\" placeholder=\"Enter a new name\" ng-model=\"cloned.name\" required>                            \n" +
        "                </div>                                    \n" +
        "            </div>\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\">Cancel</button>\n" +
        "                <button type=\"button\" class=\"btn btn-primary\" ng-click=\"renameReport(myFormAddTemplate)\">Continue</button>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "  \n" +
        "    <script id=\"tocDuplicate.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Duplicate Table of Content Setup</h4>\n" +
        "        </div>\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate\" class=\"form-horizontal\">\n" +
        "            <div class=\"modal-body \">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"setupCopyFrom\" class=\"col-sm-3 col-lg-3 control-label\">Copy From:</label>        \n" +
        "                            <div class=\"col-md-7 col-lg-7 col-xs-12\" show-errors>\n" +
        "                                <select id=\"setupCopyFrom\" name=\"setupCopyFrom\" class=\"form-control\" ng-model=\"report\" ng-options=\"report.name for report in tocSetup.setupProperties.reportSection.coll\" required ng-change=\"duplicateError = ''\">\n" +
        "                                    <option value=\"\">Select Table of Content Setup</option>\n" +
        "                                </select>\n" +
        "                            </div>\n" +
        "                            <span class=\"reqText\">*</span>                                        \n" +
        "                </div>\n" +
        "                                   \n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"copyTo\" class=\"col-sm-3 col-lg-3 control-label\">Copy To:</label>        \n" +
        "                                    <div class=\"col-md-7 col-lg-7 col-xs-12\">\n" +
        "                                        <select id=\"copyTo\" name=\"copyTo\" class=\"form-control\" ng-init=\"copyToAction='Existing'\" ng-model=\"copyToAction\" ng-change=\"duplicateError = ''\">\n" +
        "                                            <option value=\"Existing\">Existing</option>\n" +
        "                                            <option value=\"New\">New</option>\n" +
        "                                        </select>\n" +
        "                                    </div>                            \n" +
        "                        </div>\n" +
        "\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <label for=\"copyToAction\" class=\"col-sm-3 col-lg-3 control-label\">{{copyToAction}}</label>                           \n" +
        "                                \n" +
        "                                    <div class=\"col-md-7 col-lg-7 col-xs-12\" form-input-validation=\"(myFormAddTemplate.newName && myFormAddTemplate.newName.$invalid) || (myFormAddTemplate.copyTo && myFormAddTemplate.copyTo.$invalid)\">\n" +
        "                                        <input id=\"copyToAction\" class=\"form-control\" type=\"text\" placeholder=\"Enter a name\" ng-show=\"copyToAction == 'New'\" ng-model=\"toCreateReport\" name=\"newName\" ng-required=\"copyToAction == 'New'\">\n" +
        "                                        <select name=\"copyTo\" class=\"form-control\" ng-init=\"copyToReport='';\" ng-model=\"copyToReport\" ng-options=\"report.name for report in tocSetup.setupProperties.reportSection.coll\" ng-show=\"copyToAction == 'Existing'\" ng-required=\"copyToAction == 'Existing'\" ng-change=\"duplicateError = ''\">\n" +
        "                                            <option value=\"\">Select Table of Content Setup</option>\n" +
        "                                        </select>\n" +
        "                                    </div>\n" +
        "                                    <span class=\"reqText\">*</span>\n" +
        "                        </div>                \n" +
        "            </div>\n" +
        "\n" +
        "            <div ng-show=\"duplicateError != '' && duplicateError != null && duplicateError != undefined\" class=\"alert alert-danger\" role=\"alert\" ng-class=\"danger\">\n" +
        "                {{duplicateError}}\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer \">\n" +
        "                <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\">Cancel</button>\n" +
        "                <button type=\"button\" class=\"btn btn-primary\" ng-click=\"duplicate(myFormAddTemplate)\">Continue</button>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "\n" +
        "    <div class=\"container-fluid\" ng-controller=\"TOCSetupCtrl as tocSetup\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "		<div class=\"panel-body\">	\n" +
        "        <h2 class=\"page-header\">Table of Contents Setup</h2>\n" +
        "        <span class=\"pull-right\"> \n" +
        "            <button type=\"reset\" class=\"btn btn-md btn-default\" tabindex=\"-1\">Cancel</button>\n" +
        "            <button type=\"submit\" class=\"btn btn-md btn-primary\" ng-click=\"tocSetup.save()\" tabindex=\"-1\">Save Changes</button>\n" +
        "        </span>\n" +
        "\n" +
        "        <form class=\"form-horizontal\">\n" +
        "        <div class=\"form-group \">\n" +
        "            <label for=\"company\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                Company:\n" +
        "            </label>\n" +
        "            <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                <select id=\"company\" name=\"companyID\" class=\"form-control\" ng-init=\"tocSetup.selectedCompanyId = 0\" ng-model=\"tocSetup.selectedCompanyId\" ng-change=\"tocSetup.selectedCompanyChanged()\" tabindex=\"1\" autofocus>\n" +
        "                    <option value=\"0\" ng-if=\"!tocSetup.selectedCompanyId\">Select a company</option>\n" +
        "                    <option value=\"5572\"> Land Environmental Group</option>\n" +
        "                    <option value=\"5684\"> Lauenstein &amp; Associates</option>\n" +
        "                    <option value=\"3099\">123 ENG Test</option>\n" +
        "                    <option value=\"7590\">14555 Blanco Road</option>\n" +
        "                    <option value=\"5745\">172d Airlift Wing MS ANG</option>\n" +
        "                    <option value=\"5666\">1st Bank Yuma</option>\n" +
        "                    <option value=\"5315\">1st Colonial Community Bank</option>\n" +
        "                    <option value=\"5857\">1st Constitution Bank</option>\n" +
        "                    <option value=\"4991\">1st National Bank of Demo</option>\n" +
        "                    <option value=\"8014\">1st National Bank of South Florida</option>\n" +
        "                    <option value=\"5829\">1st National Community Bank</option>\n" +
        "                    <option value=\"9599\">1st Security Bank of Washington</option>\n" +
        "                    <option value=\"5926\">1st Source Bank</option>\n" +
        "                    <option value=\"7917\">21 Environmental</option>\n" +
        "                    <option value=\"4734\">2G Environmental, LLC</option>\n" +
        "                    <option value=\"6477\">3 Kings Environmental</option>\n" +
        "                    <option value=\"4735\">3 Kings Environmental, Inc.</option>\n" +
        "                    <option value=\"3098\">3065866: Vince Grandinetti</option>\n" +
        "                    <option value=\"3206\">3126775: Monty Bruner</option>\n" +
        "                    <option value=\"4367\">3266541: Benjamin Ford</option>\n" +
        "                    <option value=\"5048\">3434731: Paul Gebhard</option>\n" +
        "                </select>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "       \n" +
        "        <div class=\"form-group\" ng-if=\"tocSetup.setupProperties.reportSection.coll && tocSetup.setupProperties.reportSection.coll.length\">\n" +
        "            <label for=\"reportSetup\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                Report Setup:\n" +
        "            </label>\n" +
        "            <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                <select name=\"setupID\" id=\"reportSetup\" class=\"form-control\" ng-model=\"tocSetup.setupProperties.reportSection.selected\" ng-options=\"report.name for report in tocSetup.setupProperties.reportSection.coll track by report.tocSetupID\" ng-change=\"tocSetup.setupProperties.reportSectionChanged()\" tabindex=\"2\">\n" +
        "                    <option ng-if=\"!tocSetup.setupProperties.reportSection.selected\" value=\"\">Select Table of Content Setup...</option>\n" +
        "                </select>\n" +
        "\n" +
        "                <!--\n" +
        "                <select class=\"form-control\" name=\"reportSel\" type=\"select\" ng-model=\"tocSetup.setupProperties.reportSection.selected\" ng-options=\"report.name for report in tocSetup.setupProperties.reportSection.coll track by report.reportOutputSetupID\" ng-change=\"tocSetup.setupProperties.reportSectionChanged()\">\n" +
        "                    <option value=\"\">Select Report Output Setup</option>\n" +
        "                </select>\n" +
        "-->\n" +
        "            </div>\n" +
        "        </div>\n" +
        "\n" +
        "        <div ng-show=\"tocSetup.setupProperties.reportSection.setupReady\">\n" +
        "            <div class=\"form-group\">\n" +
        "                <label class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                    Tools:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                    <button tooltip=\"Delete\" class=\"btn btn-md btn-default\" ng-click=\"tocSetup.setupProperties.toolOptions.selectAction('delete')\" tabindex=\"3\"><i class=\"fa fa-times text-danger icon-16\"></i></button>\n" +
        "                    <button tooltip=\"Rename\" class=\"btn btn-md btn-default\" ng-click=\"tocSetup.setupProperties.toolOptions.selectAction('rename')\" tabindex=\"4\"><i class=\"fa fa-terminal text-info icon-16\"></i></button>\n" +
        "                    <!--\n" +
        "                    <a tooltip=\"Copy FROM\" class=\"btn btn-md btn-default\" ng-click=\"tocSetup.setupProperties.toolOptions.selectAction('copyFrom')\"><i class=\"fa fa-files-o text-primary icon-16\"></i></a>\n" +
        "                    <a tooltip=\"Copy TO\" class=\"btn btn-md btn-default\" ng-click=\"tocSetup.setupProperties.toolOptions.selectAction('copyTo')\"><i class=\"fa fa-file text-success icon-16\"></i></a>\n" +
        "-->\n" +
        "                    <button tooltip=\"Duplicate\" class=\"btn btn-md btn-default\" ng-click=\"tocSetup.setupProperties.toolOptions.selectAction('duplicate')\" tabindex=\"5\"><i class=\"fa fa-file text-success icon-16\"></i></button>\n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        </form>\n" +
        "        <div class=\"alert\" ng-class=\"tocSetup.msgType\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"tocSetup.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"tocSetup.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{tocSetup.serviceResponseText}}\n" +
        "        </div>\n" +
        "        <hr>\n" +
        "        <div ng-show=\"tocSetup.setupProperties.reportSection.setupReady\">\n" +
        "\n" +
        "\n" +
        "            <div ng-include src=\"'app/modules/TableOfContentsSetup/views/GlobalPageSettings.html'\"></div>\n" +
        "            <hr>\n" +
        "\n" +
        "            <div ng-include src=\"'app/modules/TableOfContentsSetup/views/PageHeaderSettings.html'\"></div>\n" +
        "            <hr>\n" +
        "\n" +
        "            <div ng-include src=\"'app/modules/TableOfContentsSetup/views/ReportSectionSettings.html'\"></div>\n" +
        "            <hr>\n" +
        "\n" +
        "            <div ng-include src=\"'app/modules/TableOfContentsSetup/views/ReportAppendixSettings.html'\"></div>\n" +
        "            <hr>\n" +
        "            <div ng-include src=\"'app/modules/TableOfContentsSetup/views/PageFooterSettings.html'\"></div>\n" +
        "            <hr>\n" +
        "            \n" +
        "            \n" +
        "\n" +
        "            <div class=\"form-group text-center\">                \n" +
        "                <button type=\"reset\" class=\"btn btn-md btn-default\">Cancel</button>\n" +
        "                <button type=\"submit\" class=\"btn btn-md btn-primary\" ng-click=\"tocSetup.save()\">Save Changes</button>\n" +
        "            </div>\n" +
        "\n" +
        "            <div ng-show=\"false\">\n" +
        "                <hr>\n" +
        "                <div class=\"\" id=\"applied\">\n" +
        "                    <span>Test html </span>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "		</div>	\n" +
        "		</div>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);

angular.module("../app/modules/TransmittalLetterSetup/views/Closing.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TransmittalLetterSetup/views/Closing.html",
        "<h4>Closing</h4>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"closingFont\" class=\"control-label\">Font:</label>\n" +
        "        <select id=\"closingFont\" class=\"form-control\" ng-model=\"transSetup.cssData['closing']['font-family']\">\n" +
        "            <option>Arial</option>\n" +
        "            <option>Helvetica</option>\n" +
        "            <option>Times</option>\n" +
        "            <option>Times New Roman</option>\n" +
        "            <option>Book Antiqua</option>\n" +
        "            <option>Arial Narrow</option>\n" +
        "            <option>Verdana</option>\n" +
        "            <option>Calibri</option>\n" +
        "            <option>Cambria</option>\n" +
        "            <option>Century Gothic</option>\n" +
        "            <option>Garamond</option>\n" +
        "            <option>Tahoma</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"closingFontSize\" class=\"control-label\">Font Size:</label>\n" +
        "        <select id=\"closingFontSize\" class=\"form-control\" ng-model=\"transSetup.cssData['closing']['font-size']\">\n" +
        "            <option value=\"8px\">8</option>\n" +
        "            <option value=\"9px\">9</option>\n" +
        "            <option value=\"10px\">10</option>\n" +
        "            <option value=\"11px\">11</option>\n" +
        "            <option value=\"12px\">12</option>\n" +
        "            <optionv value=\"13px\">13</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"closingFontStyle\" class=\"control-label\">Font Style:</label>\n" +
        "        <select id=\"closingFontStyle\" class=\"form-control\" ng-model=\"transSetup.cssData['closing'].style\">\n" +
        "            <option value=\"B\">Bold</option>\n" +
        "            <option value=\"I\">Italic</option>\n" +
        "            <option value=\"U\">Underline</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"closingOptions\" class=\"control-label\">\n" +
        "            Options:\n" +
        "        </label>\n" +
        "        <select id=\"closingOptions\" name=\"Options5\" class=\"form-control\" ng-model=\"transSetup.jsonData.closing.addDynamicContent\">\n" +
        "            <option value=\"\">Add Dynamic Content...</option>\n" +
        "            <option value=\"{compname}\">Your Company's Name</option>\n" +
        "            <option value=\"{fullname}\">Your Full Name</option>\n" +
        "            <option value=\"{firstname}\">Your First Name</option>\n" +
        "            <option value=\"{lastname}\">Your Last Name</option>\n" +
        "            <option value=\"{title}\">Your Title</option>\n" +
        "            <option value=\"{email}\">E-mail</option>\n" +
        "            <option value=\"{reviewer_name}\">Senior Reviewer from General Information</option>\n" +
        "            <option value=\"{reviewer_title}\">Reviewer Title from General Information</option>\n" +
        "            <option value=\"{consultAddress}\">Consultant Address from General Information</option>\n" +
        "            <option value=\"{consultCity}\">Consultant City from General Information</option>\n" +
        "            <option value=\"{consultState}\">Consultant State from General Information</option>\n" +
        "            <option value=\"{consultZip}\">Consultant Zip from General Information</option>\n" +
        "            <option value=\"{consultPhone}\">Consultant Phone # from General Information</option>\n" +
        "            <option value=\"{consultFax}\">Consultant Fax # from General Information</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">       \n" +
        "        <textarea name=\"closing\" rows=\"5\" cols=\"30\" class=\"form-control\" ng-model=\"transSetup.jsonData.closing.optionsVal\">\n" +
        "        </textarea>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "<div class=\"row\">\n" +
        "       <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"linesafterClosing\" class=\"control-label\">\n" +
        "                Lines after Closing:\n" +
        "            </label>\n" +
        "            <select id=\"linesafterClosing\" name=\"LinesafterClosing\" class=\"form-control\" ng-model=\"transSetup.jsonData.closing.linesAfterClosing\">\n" +
        "                <option value=\"1\">1</option>\n" +
        "                <option value=\"2\">2</option>\n" +
        "                <option value=\"3\">3</option>\n" +
        "                <option value=\"4\">4</option>\n" +
        "                <option value=\"5\">5</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/TransmittalLetterSetup/views/Footer.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TransmittalLetterSetup/views/Footer.html",
        "<h4>Footer:</h4>\n" +
        "<div class=\"row\">\n" +
        "        <!-- Left -->\n" +
        "        <div class=\"col-md-4 col-lg-4 col-xs-12\">\n" +
        "             <div class=\"panel panel-default\">\n" +
        "            <div class=\"panel-body\">            \n" +
        "            <h4>Left</h4>            \n" +
        "            <div class=\"row\">\n" +
        "            <div class=\"form-group col-xs-6 col-md-6\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\">\n" +
        "                        <option value=\"\">Add Dynamic Content...</option>\n" +
        "                        <option value=\"{compname}\">Your Company's Name</option>\n" +
        "                        <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "                        <option value=\"{logo}\">Your Company's Logo</option>\n" +
        "                        <option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "                        <option value=\"{cCity}\">Your Company's City</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <textarea class=\"form-control\" name=\"leftFooter\" rows=\"3\" cols=\"36\">Phase I Report {siteAddress} {siteCity}, {siteState} {siteZip}</textarea>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "           </div>\n" +
        "            <div class=\"row\">\n" +
        "            <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\">\n" +
        "                        <option>Arial</option>\n" +
        "                        <option selected=\"\">Helvetica</option>\n" +
        "                        <option>Times</option>\n" +
        "                        <option>Americana</option>\n" +
        "                        <option>Times New Roman</option>\n" +
        "                        <option>Book Antiqua</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\">\n" +
        "                        <option>8</option>\n" +
        "                        <option>9</option>\n" +
        "                        <option selected=\"\">10</option>\n" +
        "                        <option>11</option>\n" +
        "                        <option>12</option>\n" +
        "                        <option>13</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group col-xs-12 col-md-6 col-lg-6\">\n" +
        "                <select class=\"form-control\" multiple=\"\">\n" +
        "                    <option value=\"B\" selected=\"\">Bold</option>\n" +
        "                    <option value=\"I\">Italic</option>\n" +
        "                    <option value=\"U\">Underline</option>\n" +
        "                </select>\n" +
        "            </div>\n" +
        "            </div>\n" +
        "            </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <!-- Left end -->\n" +
        "        <!-- Center -->\n" +
        "        <div class=\"col-md-4 col-lg-4 col-xs-12 text-center\">\n" +
        "            <div class=\"panel panel-default\">\n" +
        "            <div class=\"panel-body\">            \n" +
        "            <h4>Center</h4>            \n" +
        "            <div class=\"row\">\n" +
        "            <div class=\"col-xs-12 col-md-6 col-sm-6 col-md-push-3 col-sm-push-3\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\">\n" +
        "                        <option value=\"\">Add Dynamic Content...</option>\n" +
        "                        <option value=\"{compname}\">Your Company's Name</option>\n" +
        "                        <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "                        <option value=\"{logo}\">Your Company's Logo</option>\n" +
        "                        <option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "                        <option value=\"{cCity}\">Your Company's City</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <textarea class=\"form-control\" name=\"leftFooter\" rows=\"3\" cols=\"36\"></textarea>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            </div>\n" +
        "            <div class=\"row\">\n" +
        "            <div class=\"col-xs-12 col-md-6 col-lg-6\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\">\n" +
        "                        <option>Arial</option>\n" +
        "                        <option selected=\"\">Helvetica</option>\n" +
        "                        <option>Times</option>\n" +
        "                        <option>Americana</option>\n" +
        "                        <option>Times New Roman</option>\n" +
        "                        <option>Book Antiqua</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\">\n" +
        "                        <option>8</option>\n" +
        "                        <option>9</option>\n" +
        "                        <option selected=\"\">10</option>\n" +
        "                        <option>11</option>\n" +
        "                        <option>12</option>\n" +
        "                        <option>13</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group col-xs-12 col-md-6 col-lg-6\">\n" +
        "                <select class=\"form-control\" multiple=\"\">\n" +
        "                    <option value=\"B\" selected=\"\">Bold</option>\n" +
        "                    <option value=\"I\">Italic</option>\n" +
        "                    <option value=\"U\">Underline</option>\n" +
        "                </select>\n" +
        "            </div>\n" +
        "            </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "        <!-- Center end -->\n" +
        "        <!-- Right -->\n" +
        "        <div  class=\"col-md-4 col-lg-4 col-xs-12 text-right\">\n" +
        "            <div class=\"panel panel-default\">\n" +
        "            <div class=\"panel-body\">           \n" +
        "            <h4>Right</h4>                \n" +
        "            <div class=\"row\">\n" +
        "            <div class=\"col-xs-6 col-md-6 col-md-offset-6\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\">\n" +
        "                        <option value=\"\">Add Dynamic Content...</option>\n" +
        "                        <option value=\"{compname}\">Your Company's Name</option>\n" +
        "                        <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "                        <option value=\"{logo}\">Your Company's Logo</option>\n" +
        "                        <option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "                        <option value=\"{cCity}\">Your Company's City</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <textarea class=\"form-control\" name=\"leftFooter\" rows=\"3\" cols=\"36\">Project Number: {projnumber}</textarea>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            </div>\n" +
        "            <div class=\"row\">\n" +
        "            <div class=\" col-xs-12 col-md-6 col-lg-6\">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\">\n" +
        "                        <option>Arial</option>\n" +
        "                        <option selected=\"\">Helvetica</option>\n" +
        "                        <option>Times</option>\n" +
        "                        <option>Americana</option>\n" +
        "                        <option>Times New Roman</option>\n" +
        "                        <option>Book Antiqua</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "                <div class=\"form-group\">\n" +
        "                    <select class=\"form-control\">\n" +
        "                        <option>8</option>\n" +
        "                        <option>9</option>\n" +
        "                        <option selected=\"\">10</option>\n" +
        "                        <option>11</option>\n" +
        "                        <option>12</option>\n" +
        "                        <option>13</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "            <div class=\"form-group col-xs-12 col-md-6 col-lg-6\">\n" +
        "                <select class=\"form-control\" multiple=\"\">\n" +
        "                    <option value=\"B\" selected=\"\">Bold</option>\n" +
        "                    <option value=\"I\">Italic</option>\n" +
        "                    <option value=\"U\">Underline</option>\n" +
        "                </select>\n" +
        "            </div>\n" +
        "             </div>   \n" +
        "            </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "        <!-- Right End -->\n" +
        "\n" +
        "</div>\n" +
        "\n" +
        "        \n" +
        "        <div class=\"form-horizontal\">            \n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"repeatFooter\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                Repeat Footer:\n" +
        "            </label>\n" +
        "            <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                <select id=\"repeatFooter\" name=\"repeatFooter\" class=\"form-control\">\n" +
        "                    <option value=\"0\">Yes</option>\n" +
        "                    <option value=\"1\">No</option>\n" +
        "\n" +
        "                </select>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    \n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"numberofLinesBelowFooter\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">\n" +
        "                Number of Lines Below Footer:\n" +
        "            </label>\n" +
        "            <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                <select id=\"numberofLinesBelowFooter\" name=\"NumberofLinesBelowFooter\" class=\"form-control\">\n" +
        "                    <option value=\"0\">0</option>\n" +
        "                    <option value=\"1\">1</option>\n" +
        "                    <option value=\"2\">2</option>\n" +
        "                </select>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "         </div>\n" +
        "\n" +
        "");
}]);

angular.module("../app/modules/TransmittalLetterSetup/views/GlobalPageSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TransmittalLetterSetup/views/GlobalPageSettings.html",
        "<h4>Global Page Settings:</h4>\n" +
        "\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-4 col-lg-4 col-sm-4 col-xs-12\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"leftMargin\" class=\"control-label\">Left Margin (in inches):</label>\n" +
        "            <select id=\"leftMargin\" class=\"form-control\" ng-model=\"transSetup.cssData['global']['margin-left']\">\n" +
        "                <option>0.5\"</option>\n" +
        "                <option>0.75\"</option>\n" +
        "                <option>1\"</option>\n" +
        "                <option>1.25\"</option>\n" +
        "                <option>0.5\"</option>\n" +
        "                <option>1.75\"</option>\n" +
        "                <option>2\"</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"col-md-4 col-lg-4 col-sm-4 col-xs-12\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"rightMargin\" class=\"control-label\">Right Margin (in inches):</label>\n" +
        "            <select id=\"rightMargin\" class=\"form-control\" ng-model=\"transSetup.cssData['global']['margin-right']\">\n" +
        "                <option>0.5\"</option>\n" +
        "                <option>0.75\"</option>\n" +
        "                <option>1\"</option>\n" +
        "                <option>1.25\"</option>\n" +
        "                <option>0.5\"</option>\n" +
        "                <option>1.75\"</option>\n" +
        "                <option>2\"</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/TransmittalLetterSetup/views/LetterBody.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TransmittalLetterSetup/views/LetterBody.html",
        "<h4>Letter Body</h4>\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"letterbodyFont\" class=\"control-label\">Font:</label>\n" +
        "        <select id=\"letterbodyFont\" class=\"form-control\" ng-model=\"transSetup.cssData['letter-body']['font-family']\">\n" +
        "            <option>Arial</option>\n" +
        "            <option>Helvetica</option>\n" +
        "            <option>Times</option>\n" +
        "            <option>Times New Roman</option>\n" +
        "            <option>Book Antiqua</option>\n" +
        "            <option>Arial Narrow</option>\n" +
        "            <option>Verdana</option>\n" +
        "            <option>Calibri</option>\n" +
        "            <option>Cambria</option>\n" +
        "            <option>Century Gothic</option>\n" +
        "            <option>Garamond</option>\n" +
        "            <option>Tahoma</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "\n" +
        "   <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"letterbodyFontSize\" class=\"control-label\">Font Size:</label>\n" +
        "        <select id=\"letterbodyFontSize\" class=\"form-control\" ng-model=\"transSetup.cssData['letter-body']['font-size']\">\n" +
        "            <option>8</option>\n" +
        "            <option>9</option>\n" +
        "            <option>10</option>\n" +
        "            <option>11</option>\n" +
        "            <option selected=\"\">12</option>\n" +
        "            <option>13</option>\n" +
        "            <option>14</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"letterbodyFontStyle\" class=\"control-label\">Font Style:</label>\n" +
        "        <select id=\"letterbodyFontStyle\" class=\"form-control\" ng-model=\"transSetup.cssData['letter-body'].style\">\n" +
        "            <option value=\"B\">Bold</option>\n" +
        "            <option value=\"I\">Italic</option>\n" +
        "            <option value=\"U\">Underline</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "        <div class=\"form-group\">\n" +
        "        <label for=\"options\" class=\"control-label\">\n" +
        "            Options:\n" +
        "        </label>\n" +
        "        <select id=\"options\" name=\"Options\" class=\"form-control\" ng-model=\"transSetup.jsonData.letterBody.dynamicContent\">\n" +
        "            <option value=\"\">Add Dynamic Content...</option>\n" +
        "            <option value=\"{compname}\">Your Company's Name</option>\n" +
        "            <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "            <option value=\"{propnumber}\">Property Number</option>\n" +
        "            <option value=\"{projname}\">Project Name from General Information</option>\n" +
        "            <option value=\"{projnumber}\">Project Number from General Information</option>\n" +
        "            <option value=\"{siteAddress}\">Site Address from General Information</option>\n" +
        "            <option value=\"{siteCity}\">Site City from General Information</option>\n" +
        "            <option value=\"{siteState}\">Site State from General Information</option>\n" +
        "            <option value=\"{siteCounty}\">Site County from General Information</option>\n" +
        "            <option value=\"{consultAddress}\">Consultant Address from General Information</option>\n" +
        "            <option value=\"{consultCity}\">Consultant City from General Information</option>\n" +
        "            <option value=\"{consultState}\">Consultant State from General Information</option>\n" +
        "            <option value=\"{consultZip}\">Consultant Zip from General Information</option>\n" +
        "            <option value=\"{consultPhone}\">Consultant Phone # from General Information</option>\n" +
        "            <option value=\"{consultFax}\">Consultant Fax # from General Information</option>\n" +
        "            <option value=\"{generationdate}\">Date of Report Generation</option>\n" +
        "            <option value=\"{longgenerationdate}\">Long Date of Report Generation</option>\n" +
        "            <option value=\"{reportdate}\">Report Date from General Information</option>\n" +
        "            <option value=\"{longreportdate}\">Long Report Date from General Information</option>\n" +
        "            <option value=\"{contract}\">Contract/Proposal #</option>\n" +
        "            <option value=\"{taskOrder}\">Task Order #</option>\n" +
        "            <option value=\"{proposalDate}\">Proposal Date</option>\n" +
        "            <option value=\"{seniorReviewer}\">Senior Reviewer from General Information</option>\n" +
        "        </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12 \">\n" +
        "    <div class=\"form-group\">       \n" +
        "        <textarea name=\"body\" rows=\"15\" cols=\"80\" class=\"form-control\" ng-model=\"transSetup.jsonData.letterBody.dynamicContentVal\">\n" +
        "            Please find enclosed the Phase I Environmental Site Assessment we have completed for the above referenced site. We appreciate this opportunity to serve you. Please contact me if you have any questions about the report.\n" +
        "        </textarea>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"linesAfterBody\" class=\"control-label\">\n" +
        "                Lines after Body:\n" +
        "            </label>\n" +
        "            <select id=\"linesAfterBody\" name=\"linesAfterBody\" class=\"form-control\" ng-model=\"transSetup.jsonData.letterBody.linesAfterBody\">\n" +
        "                <option>0</option>\n" +
        "                <option>1</option>\n" +
        "                <option selected=\"\">2</option>\n" +
        "                <option>3</option>\n" +
        "                <option>4</option>\n" +
        "                <option>5</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/TransmittalLetterSetup/views/LetterDate.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TransmittalLetterSetup/views/LetterDate.html",
        "<div class=\"checkbox\">\n" +
        "    <label>\n" +
        "     <h4><input type=\"checkbox\" name=\"letterDateIncluded\" value=\"1\" checked=\"\">Letter Date</h4>\n" +
        "    </label>\n" +
        "</div>\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"font\" class=\"control-label\">Font:</label>\n" +
        "            <select id=\"font\" class=\"form-control\" ng-model=\"transSetup.cssData['letter-date']['font-family']\">\n" +
        "                <option>Arial</option>\n" +
        "                <option>Helvetica</option>\n" +
        "                <option>Times</option>\n" +
        "                <option>Times New Roman</option>\n" +
        "                <option>Book Antiqua</option>\n" +
        "                <option>Arial Narrow</option>\n" +
        "                <option>Verdana</option>\n" +
        "                <option>Calibri</option>\n" +
        "                <option>Cambria</option>\n" +
        "                <option>Century Gothic</option>\n" +
        "                <option>Garamond</option>\n" +
        "                <option>Tahoma</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"fontSize\" class=\"control-label\">Font Size:</label>\n" +
        "            <select id=\"fontSize\" class=\"form-control\" ng-model=\"transSetup.cssData['letter-date']['font-size']\">\n" +
        "                <option>8</option>\n" +
        "                <option>9</option>\n" +
        "                <option>10</option>\n" +
        "                <option>11</option>\n" +
        "                <option selected=\"\">12</option>\n" +
        "                <option>13</option>\n" +
        "                <option>14</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"fontStyle\" class=\"control-label\">Font Style:</label>\n" +
        "            <select id=\"fontStyle\" class=\"form-control\" ng-model=\"transSetup.cssData['letter-date'].style\">\n" +
        "                <option value=\"B\" selected=\"\">Bold</option>\n" +
        "                <option value=\"I\">Italic</option>\n" +
        "                <option value=\"U\">Underline</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"form-horizontal\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"format\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "            Format:\n" +
        "        </label>\n" +
        "        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "            <select id=\"format\" name=\"Format\" class=\"form-control\" ng-model=\"transSetup.jsonData.letterDate.format\">\n" +
        "                <option value=\"{weekday}, {month_full} {day}, {year_full}\">Wednesday, October 31, 2001</option>\n" +
        "                <option value=\"{month_full} {day} {year_full}\" selected=\"\">October 31, 2001</option>\n" +
        "                <option value=\"{day} {month_full}, {year_full}\">31 October, 2001</option>\n" +
        "                <option value=\"{day}-{month_abbr}-{year_short}\">31-Oct-01</option>\n" +
        "                <option value=\"{month_abbr}-{day}-{year_short}\">Oct-31-01</option>\n" +
        "                <option value=\"{day}.{month_num}.{year_short}\">31.10.01</option>\n" +
        "                <option value=\"{month_num}.{day}.{year_short}\">10.31.01</option>\n" +
        "\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"align\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "            Align:\n" +
        "        </label>\n" +
        "        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "            <select id=\"align\" name=\"Align\" class=\"form-control\" ng-model=\"transSetup.cssData['letter-date']['align']\">\n" +
        "                <option value=\"left\" selected=\"\">Left</option>\n" +
        "                <option value=\"center\">Center</option>\n" +
        "                <option value=\"right\">Right</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"linesafterDate\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "            Lines after Date:\n" +
        "        </label>\n" +
        "        <div class=\"col-xs-12 col-sm-3 col-md-3\">\n" +
        "            <select id=\"linesafterDate\" name=\"LinesafterDate\" class=\"form-control\" ng-model=\"transSetup.jsonData.letterDate.linesAfterDate\">\n" +
        "                <option value=\"0\">0</option>\n" +
        "                <option value=\"1\">1</option>\n" +
        "                <option value=\"2\">2</option>\n" +
        "                <option value=\"3\">3</option>\n" +
        "                <option value=\"4\">4</option>\n" +
        "                <option value=\"5\">5</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/TransmittalLetterSetup/views/PageHeaderSettings.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TransmittalLetterSetup/views/PageHeaderSettings.html",
        "<h4>Page Header Settings:</h4>\n" +
        "<div class=\"row\">\n" +
        "    <!-- Left -->\n" +
        "    <div class=\"col-md-4 col-lg-4 col-sm-4 col-xs-12\">\n" +
        "        <div class=\"panel panel-default\">\n" +
        "            <div class=\"panel-body\">\n" +
        "                <h4>Left</h4>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6 col-sm-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"transSetup.jsonData.pageHeaderSettings.left.dynamicContent\">\n" +
        "                                <option value=\"\">Add Dynamic Content...</option>\n" +
        "                                <option value=\"{compname}\">Your Company's Name</option>\n" +
        "                                <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "                                <option value=\"{logo}\">Your Company's Logo</option>\n" +
        "                                <option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "                                <option value=\"{cCity}\">Your Company's City</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\" ng-model=\"transSetup.jsonData.pageHeaderSettings.left.content\">Phase I Report {siteAddress} {siteCity}, {siteState} {siteZip}\n" +
        "                            </textarea>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6 col-sm-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"transSetup.cssData['page-header-settings-left']['font-family']\">\n" +
        "                                <option>Arial</option>\n" +
        "                                <option selected=\"\">Helvetica</option>\n" +
        "                                <option>Times</option>\n" +
        "                                <option>Americana</option>\n" +
        "                                <option>Times New Roman</option>\n" +
        "                                <option>Book Antiqua</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"transSetup.cssData['page-header-settings-left']['font-size']\">\n" +
        "                                <option value=\"8px\">8</option>\n" +
        "                                <option value=\"9px\">9</option>\n" +
        "                                <option value=\"10px\">10</option>\n" +
        "                                <option value=\"11px\">11</option>\n" +
        "                                <option value=\"12px\">12</option>\n" +
        "                                <optionv value=\"13px\">13</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6 col-sm-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" multiple=\"\" ng-model=\"transSetup.cssData['page-header-settings-left'].style\">\n" +
        "                                <option value=\"B\" selected=\"\">Bold</option>\n" +
        "                                <option value=\"I\">Italic</option>\n" +
        "                                <option value=\"U\">Underline</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <!-- Left end -->\n" +
        "\n" +
        "    <!-- Center -->\n" +
        "    <div class=\"col-md-4 col-lg-4 col-sm-4 col-xs-12 text-center\">\n" +
        "        <div class=\"panel panel-default\">\n" +
        "            <div class=\"panel-body\">\n" +
        "                <h4>Center</h4>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-sm-6 col-md-push-3 col-sm-push-3\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"transSetup.cssData['page-header-settings-center']['dynamicContent']\">\n" +
        "                                <option value=\"\">Add Dynamic Content...</option>\n" +
        "                                <option value=\"{compname}\">Your Company's Name</option>\n" +
        "                                <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "                                <option value=\"{logo}\">Your Company's Logo</option>\n" +
        "                                <option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "                                <option value=\"{cCity}\">Your Company's City</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\"></textarea>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6 col-sm-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"transSetup.cssData['page-header-settings-center']['font-family']\">\n" +
        "                                <option>Arial</option>\n" +
        "                                <option selected=\"\">Helvetica</option>\n" +
        "                                <option>Times</option>\n" +
        "                                <option>Americana</option>\n" +
        "                                <option>Times New Roman</option>\n" +
        "                                <option>Book Antiqua</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"transSetup.cssData['page-header-settings-center']['font-size']\">\n" +
        "                                <option value=\"8px\">8</option>\n" +
        "                                <option value=\"9px\">9</option>\n" +
        "                                <option value=\"10px\">10</option>\n" +
        "                                <option value=\"11px\">11</option>\n" +
        "                                <option value=\"12px\">12</option>\n" +
        "                                <optionv value=\"13px\">13</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6 col-sm-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" multiple=\"\" ng-model=\"transSetup.cssData['page-header-settings-center'].style\">\n" +
        "                                <option value=\"B\" selected=\"\">Bold</option>\n" +
        "                                <option value=\"I\">Italic</option>\n" +
        "                                <option value=\"U\">Underline</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <!-- Center end -->\n" +
        "\n" +
        "    <!-- Right -->\n" +
        "    <div class=\"col-md-4 col-lg-4 col-sm-4 col-xs-12 text-right\">\n" +
        "        <div class=\"panel panel-default\">\n" +
        "            <div class=\"panel-body\">\n" +
        "                <h4>Right</h4>\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6 col-md-offset-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"transSetup.cssData['page-header-settings-right']['dynamicContent']\">\n" +
        "                                <option value=\"\">Add Dynamic Content...</option>\n" +
        "                                <option value=\"{compname}\">Your Company's Name</option>\n" +
        "                                <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "                                <option value=\"{logo}\">Your Company's Logo</option>\n" +
        "                                <option value=\"{cAddress}\">Your Company's Address</option>\n" +
        "                                <option value=\"{cCity}\">Your Company's City</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <textarea class=\"form-control\" name=\"leftHeader\" rows=\"3\" cols=\"36\"></textarea>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"row\">\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6 col-sm-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"transSetup.cssData['page-header-settings-right']['font-family']\">\n" +
        "                                <option>Arial</option>\n" +
        "                                <option selected=\"\">Helvetica</option>\n" +
        "                                <option>Times</option>\n" +
        "                                <option>Americana</option>\n" +
        "                                <option>Times New Roman</option>\n" +
        "                                <option>Book Antiqua</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" ng-model=\"transSetup.cssData['page-header-settings-right']['font-size']\">\n" +
        "                                <option value=\"8px\">8</option>\n" +
        "                                <option value=\"9px\">9</option>\n" +
        "                                <option value=\"10px\">10</option>\n" +
        "                                <option value=\"11px\">11</option>\n" +
        "                                <option value=\"12px\">12</option>\n" +
        "                                <optionv value=\"13px\">13</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                    <div class=\"col-xs-12 col-md-6 col-lg-6 col-sm-6\">\n" +
        "                        <div class=\"form-group\">\n" +
        "                            <select class=\"form-control\" multiple=\"\" ng-model=\"transSetup.cssData['page-header-settings-right'].style\">\n" +
        "                                <option value=\"B\" selected=\"\">Bold</option>\n" +
        "                                <option value=\"I\">Italic</option>\n" +
        "                                <option value=\"U\">Underline</option>\n" +
        "                            </select>\n" +
        "                        </div>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <!-- Right End -->\n" +
        "</div>\n" +
        "<div class=\"form-horizontal\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"repeatHeader\" class=\"control-label col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "            Repeat Header:\n" +
        "        </label>\n" +
        "        <div class=\"col-xs-12 col-sm-4 col-lg-4 col-md-4\">\n" +
        "            <select id=\"repeatHeader\" name=\"repeatHeader\" class=\"form-control\" ng-model=\"transSetup.jsonData.pageHeaderSettings.repeatHeader\">\n" +
        "                <option value=\"0\">Yes</option>\n" +
        "                <option value=\"1\">No</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"numberofLinesBelowHeader\" class=\"control-label col-md-3 col-lg-3 col-sm-3 col-xs-12\">Number of Lines Below Header:</label>\n" +
        "        <div class=\"col-xs-12 col-sm-4 col-lg-4 col-md-4\">\n" +
        "            <select id=\"numberofLinesBelowHeader\" name=\"NumberofLinesBelowHeader\" class=\"form-control\" ng-model=\"transSetup.jsonData.pageHeaderSettings.linesBelowHeader\">\n" +
        "                <option value=\"0\">0</option>\n" +
        "                <option value=\"1\">1</option>\n" +
        "                <option value=\"2\">2</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"linesAfterHeader\" class=\"control-label col-md-3 col-lg-3 col-sm-3 col-xs-12\">Lines After Header:</label>\n" +
        "        <div class=\"col-xs-12 col-sm-4 col-lg-4 col-md-4\">\n" +
        "            <select id=\"linesAfterHeader\" name=\"LinesAfterHeader\" class=\"form-control\" ng-model=\"transSetup.jsonData.pageHeaderSettings.linesAfterHeader\">\n" +
        "                <option value=\"0\">0</option>\n" +
        "                <option value=\"1\" selected=\"\">1</option>\n" +
        "                <option value=\"2\">2</option>\n" +
        "                <option value=\"3\">3</option>\n" +
        "                <option value=\"4\">4</option>\n" +
        "                <option value=\"5\">5</option>\n" +
        "                <option value=\"6\">6</option>\n" +
        "                <option value=\"7\">7</option>\n" +
        "                <option value=\"8\">8</option>\n" +
        "                <option value=\"9\">9</option>\n" +
        "                <option value=\"10\">10</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "");
}]);

angular.module("../app/modules/TransmittalLetterSetup/views/Salutation.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TransmittalLetterSetup/views/Salutation.html",
        "<h4>Salutation</h4>\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"salutationFont\" class=\"control-label\">Font:</label>\n" +
        "            <select id=\"salutationFont\" class=\"form-control\" ng-model=\"transSetup.cssData['salutation']['font-family']\">\n" +
        "                <option>Arial</option>\n" +
        "                <option>Helvetica</option>\n" +
        "                <option>Times</option>\n" +
        "                <option>Times New Roman</option>\n" +
        "                <option>Book Antiqua</option>\n" +
        "                <option>Arial Narrow</option>\n" +
        "                <option>Verdana</option>\n" +
        "                <option>Calibri</option>\n" +
        "                <option>Cambria</option>\n" +
        "                <option>Century Gothic</option>\n" +
        "                <option>Garamond</option>\n" +
        "                <option>Tahoma</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"salutationFontSize\" class=\"control-label\">Font Size:</label>\n" +
        "            <select id=\"salutationFontSize\" class=\"form-control\" ng-model=\"transSetup.cssData['salutation']['font-size']\">\n" +
        "                <option value=\"8px\">8</option>\n" +
        "                <option value=\"9px\">9</option>\n" +
        "                <option value=\"10px\">10</option>\n" +
        "                <option value=\"11px\">11</option>\n" +
        "                <option value=\"12px\">12</option>\n" +
        "                <option value=\"13px\">13</option>\n" +
        "                <option value=\"14px\">14</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"salutationFontStyle\" class=\"control-label\">Font Style:</label>\n" +
        "            <select id=\"salutationFontStyle\" class=\"form-control\" ng-model=\"transSetup.cssData['salutation'].style\">\n" +
        "                <option value=\"B\" selected=\"\">Bold</option>\n" +
        "                <option value=\"I\">Italic</option>\n" +
        "                <option value=\"U\">Underline</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"linesAfterSalutaion\" class=\"control-label\">\n" +
        "                Lines after Salutation:\n" +
        "            </label>\n" +
        "            <select id=\"linesAfterSalutaion\" name=\"linesAfterSalutaion\" class=\"form-control\" ng-model=\"transSetup.jsonData.salutation.linesAfterSalutaion\">\n" +
        "                <option value=\"0\">0</option>\n" +
        "                <option value=\"1\">1</option>\n" +
        "                <option value=\"2\">2</option>\n" +
        "                <option value=\"3\">3</option>\n" +
        "                <option value=\"4\">4</option>\n" +
        "                <option value=\"5\">5</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>");
}]);

angular.module("../app/modules/TransmittalLetterSetup/views/Signature.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TransmittalLetterSetup/views/Signature.html",
        "<div class=\"checkbox\">\n" +
        "    <label>\n" +
        "     <h4><input type=\"checkbox\" name=\"signatureIncluded\" value=\"1\" checked=\"\">Signature</h4>\n" +
        "    </label>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"signatureFont\" class=\"control-label\">Font:</label>\n" +
        "        <select id=\"signatureFont\" class=\"form-control\">\n" +
        "            <option>Arial</option>\n" +
        "            <option>Helvetica</option>\n" +
        "            <option>Times</option>\n" +
        "            <option>Times New Roman</option>\n" +
        "            <option>Book Antiqua</option>\n" +
        "            <option>Arial Narrow</option>\n" +
        "            <option>Verdana</option>\n" +
        "            <option>Calibri</option>\n" +
        "            <option>Cambria</option>\n" +
        "            <option>Century Gothic</option>\n" +
        "            <option>Garamond</option>\n" +
        "            <option>Tahoma</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"signatureFontSize\" class=\"control-label\">Font Size:</label>\n" +
        "        <select id=\"signatureFontSize\" class=\"form-control\">\n" +
        "            <option>8</option>\n" +
        "            <option>9</option>\n" +
        "            <option>10</option>\n" +
        "            <option>11</option>\n" +
        "            <option selected=\"\">12</option>\n" +
        "            <option>13</option>\n" +
        "            <option>14</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"signatureFontStyle\" class=\"control-label\">Font Style:</label>\n" +
        "        <select id=\"signatureFontStyle\" class=\"form-control\">\n" +
        "            <option value=\"B\" selected=\"\">Bold</option>\n" +
        "            <option value=\"I\">Italic</option>\n" +
        "            <option value=\"U\">Underline</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"signatureAlign\" class=\"control-label\">\n" +
        "            Align:\n" +
        "        </label>\n" +
        "        <select id=\"signatureAlign\" name=\"align\" class=\"form-control\">\n" +
        "            <option value=\"L\" selected=\"\">Left</option>\n" +
        "            <option value=\"C\">Center</option>\n" +
        "            <option value=\"R\">Right</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div> \n" +
        "</div>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"signatureOptions\" class=\"control-label\">\n" +
        "            Options:\n" +
        "        </label>\n" +
        "        <select id=\"signatureOptions\" name=\"option\" class=\"form-control\">\n" +
        "            <option value=\"\">Add Signature...</option>\n" +
        "            <option value=\"{compname}\">Your Company's Name</option>\n" +
        "            <option value=\"{credo}\">Your Company's Credo</option>\n" +
        "            <option value=\"{image}\">Upload an Image</option>\n" +
        "            <option value=\"{consultAddress}\">Consultant Address from General Information</option>\n" +
        "            <option value=\"{consultCity}\">Consultant City from General Information</option>\n" +
        "            <option value=\"{consultState}\">Consultant State from General Information</option>\n" +
        "            <option value=\"{consultZip}\">Consultant Zip from General Information</option>\n" +
        "            <option value=\"{consultPhone}\">Consultant Phone # from General Information</option>\n" +
        "            <option value=\"{consultFax}\">Consultant Fax # from General Information</option>\n" +
        "            <option value=\"{digitally_signed}\">Signature Image</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "    \n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <textarea name=\"signature\" rows=\"5\" cols=\"30\" class=\"form-control\"></textarea>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "\n" +
        "        <p>The transmittal letter can have up to 2 signatures. Each signature will use the settings from the left, but these are additional per signature settings. Note that these settings are in hierarchical order. (I.E. If \"Use Reviewer Signature\" is set to \"Signature #1\", then Signature #1 will ignore the settings for \"Use Assessor Signature\" and \"Use Signer\".</p>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"useReviewerSignature\" class=\"control-label\">\n" +
        "            Use Reviewer Signature:\n" +
        "        </label>\n" +
        "        <select id=\"useReviewerSignature\" class=\"form-control\">\n" +
        "            <option value=\"0\" selected=\"\">None</option>\n" +
        "            <option value=\"1\">Signature #1</option>\n" +
        "            <option value=\"2\">Signature #2</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "    \n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"useAssessorSignature\" class=\"control-label\">\n" +
        "            Use Assessor Signature:\n" +
        "        </label>\n" +
        "        <select id=\"useAssessorSignature\" class=\"form-control\">\n" +
        "            <option value=\"0\" selected=\"\">None</option>\n" +
        "            <option value=\"1\">Signature #1</option>\n" +
        "            <option value=\"2\">Signature #2</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "    \n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"useSigner\" class=\"control-label\">\n" +
        "            Use Signer:\n" +
        "        </label>\n" +
        "        <select id=\"useSigner\" class=\"form-control\">\n" +
        "            <option value=\"0\" selected=\"\">None</option>\n" +
        "            <option value=\"1\">Signature #1</option>\n" +
        "            <option value=\"2\">Signature #2</option>\n" +
        "            <option value=\"2\">Both</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div> \n" +
        "</div>\n" +
        "        <p>To use the exact signatures from the General Information section, select an option from the dropdown below. This will override all existing signature settings on the transmittal letter.</p>\n" +
        "    \n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"useGeneralInformationSignatures\" class=\"control-label\">\n" +
        "            Use General Information Signatures:\n" +
        "        </label>\n" +
        "        <select id=\"useGeneralInformationSignatures\" class=\"form-control\">\n" +
        "            <option value=\"\">None</option>\n" +
        "            <option value=\"print_CoalescePMSigs\">print_CoalescePMSigs</option>\n" +
        "            <option value=\"print_FirstSigOnly\">print_FirstSigOnly</option>\n" +
        "            <option value=\"print_FirstSigOnlyNoCompany\">print_FirstSigOnlyNoCompany</option>\n" +
        "            <option value=\"print_FirstSignOnlyNoTitle\">print_FirstSignOnlyNoTitle</option>\n" +
        "            <option value=\"print_PMSigsOnly\">print_PMSigsOnly</option>\n" +
        "            <option value=\"print_PMSigsOnlyNoTitle\">print_PMSigsOnlyNoTitle</option>\n" +
        "            <option value=\"printTLDynamicSigsHorizontal\">printTLDynamicSigsHorizontal</option>\n" +
        "            <option value=\"printTLDynamicSigsVertical\">printTLDynamicSigsVertical</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div> \n" +
        "</div>");
}]);

angular.module("../app/modules/TransmittalLetterSetup/views/To.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TransmittalLetterSetup/views/To.html",
        "<div class=\"checkbox\">\n" +
        "    <label>\n" +
        "     <h4> <input type=\"checkbox\" name=\"toIncluded\" value=\"1\" checked=\"\"> To</h4>\n" +
        "    </label>\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12 \">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"toFont\" class=\"control-label\">Font:</label>\n" +
        "            <select id=\"toFont\" class=\"form-control\" ng-model=\"transSetup.cssData['to']['font-family']\">\n" +
        "                <option>Arial</option>\n" +
        "                <option>Helvetica</option>\n" +
        "                <option>Times</option>\n" +
        "                <option>Times New Roman</option>\n" +
        "                <option>Book Antiqua</option>\n" +
        "                <option>Arial Narrow</option>\n" +
        "                <option>Verdana</option>\n" +
        "                <option>Calibri</option>\n" +
        "                <option>Cambria</option>\n" +
        "                <option>Century Gothic</option>\n" +
        "                <option>Garamond</option>\n" +
        "                <option>Tahoma</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12 \">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"toFontSize\" class=\"control-label\">Font Size:</label>\n" +
        "            <select id=\"toFontSize\" class=\"form-control\" ng-model=\"transSetup.cssData['to']['font-size']\">\n" +
        "                <option value=\"8px\">8</option>\n" +
        "                <option value=\"9px\">9</option>\n" +
        "                <option value=\"10px\">10</option>\n" +
        "                <option value=\"11px\">11</option>\n" +
        "                <option value=\"12px\">12</option>\n" +
        "                <option value=\"13px\">13</option>\n" +
        "                <option value=\"14px\">14</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12 \">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"toFontStyle\" class=\"control-label\">Font Style:</label>\n" +
        "            <select id=\"toFontStyle\" class=\"form-control\" ng-model=\"transSetup.cssData['to'].style\">\n" +
        "                <option value=\"B\" selected=\"\">Bold</option>\n" +
        "                <option value=\"I\">Italic</option>\n" +
        "                <option value=\"U\">Underline</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "\n" +
        "</div>\n" +
        "\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">\n" +
        "        <label for=\"prependData\" class=\"control-label\">\n" +
        "            Prepend Data:\n" +
        "        </label>\n" +
        "        <select id=\"prependData\" name=\"prependData\" class=\"form-control\" ng-model=\"transSetup.jsonData.to.prependData\">\n" +
        "            <option value=\"\">Add Prepend Data...</option>\n" +
        "            <option value=\"{projname}\">Project Name from General Information</option>\n" +
        "            <option value=\"{projnumber}\">Project Number from General Information</option>\n" +
        "            <option value=\"{propnumber}\">Property Number</option>\n" +
        "            <option value=\"{siteName}\">Site Name from General Information</option>\n" +
        "            <option value=\"{siteAddress}\">Site Address from General Information</option>\n" +
        "            <option value=\"{siteCity}\">Site City from General Information</option>\n" +
        "            <option value=\"{siteCounty}\">Site County from General Information</option>\n" +
        "            <option value=\"{siteState}\">Site State from General Information</option>\n" +
        "            <option value=\"{clientName}\">Client Name from General Information</option>\n" +
        "            <option value=\"{clientContact}\">Client Contact from General Information</option>\n" +
        "            <option value=\"{clientAddress}\">Client Address from General Information</option>\n" +
        "            <option value=\"{clientCity}\">Client City from General Information</option>\n" +
        "            <option value=\"{clientState}\">Client State from General Information</option>\n" +
        "            <option value=\"{clientZip}\">Client Zip from General Information</option>\n" +
        "            <option value=\"{generationdate}\">Date of Report Generation</option>\n" +
        "            <option value=\"{longgenerationdate}\">Long Date of Report Generation</option>\n" +
        "            <option value=\"{reportdate}\">Report Date from General Information</option>\n" +
        "            <option value=\"{longreportdate}\">Long Report Date from General Information</option>\n" +
        "        </select>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "    <div class=\"col-md-3 col-lg-3 col-sm-3 col-xs-12\">\n" +
        "    <div class=\"form-group\">        \n" +
        "        <textarea name=\"toPrependData\" rows=\"10\" cols=\"80\" class=\"form-control\" ng-model=\"transSetup.jsonData.to.prependDataVal\">\n" +
        "            {clientContact} {clientName} {clientAddress} {clientCity}, {clientState} {clientZip} Re: Environmental Site Assessment, Phase I {projname} {siteAddress} {siteCity}, {siteState}\n" +
        "        </textarea>\n" +
        "    </div>\n" +
        "    </div>\n" +
        "    \n" +
        "</div>\n" +
        "<div class=\"row\">\n" +
        "    <div class=\"col-xs-12 col-sm-3 col-lg-3 col-md-3\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"appendData\" class=\"control-label\">\n" +
        "                Append Data:\n" +
        "            </label>\n" +
        "            <select id=\"appendData\" name=\"appendData\" class=\"form-control\" ng-model=\"transSetup.jsonData.to.appendData\">\n" +
        "                <option value=\"\">Add Append Data...</option>\n" +
        "                <option value=\"{projname}\">Project Name from General Information</option>\n" +
        "                <option value=\"{projnumber}\">Project Number from General Information</option>\n" +
        "                <option value=\"{propnumber}\">Property Number</option>\n" +
        "                <option value=\"{siteName}\">Site Name from General Information</option>\n" +
        "                <option value=\"{siteAddress}\">Site Address from General Information</option>\n" +
        "                <option value=\"{siteCity}\">Site City from General Information</option>\n" +
        "                <option value=\"{siteCounty}\">Site County from General Information</option>\n" +
        "                <option value=\"{siteState}\">Site State from General Information</option>\n" +
        "                <option value=\"{clientName}\">Client Name from General Information</option>\n" +
        "                <option value=\"{clientContact}\">Client Contact from General Information</option>\n" +
        "                <option value=\"{clientAddress}\">Client Address from General Information</option>\n" +
        "                <option value=\"{clientCity}\">Client City from General Information</option>\n" +
        "                <option value=\"{clientState}\">Client State from General Information</option>\n" +
        "                <option value=\"{clientZip}\">Client Zip from General Information</option>\n" +
        "                <option value=\"{generationdate}\">Date of Report Generation</option>\n" +
        "                <option value=\"{longgenerationdate}\">Long Date of Report Generation</option>\n" +
        "                <option value=\"{reportdate}\">Report Date from General Information</option>\n" +
        "                <option value=\"{longreportdate}\">Long Report Date from General Information</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "    <div class=\"col-xs-12 col-sm-3 col-lg-3 col-md-3\">\n" +
        "        <div class=\"form-group\">\n" +
        "            <label for=\"linesAfterTo\" class=\"control-label\">\n" +
        "                Lines after to:\n" +
        "            </label>\n" +
        "            <select id=\"linesAfterTo\" name=\"linesAfterTo\" class=\"form-control\" ng-model=\"transSetup.jsonData.to.linesAfterTo\">\n" +
        "                <option>0</option>\n" +
        "                <option>1</option>\n" +
        "                <option selected=\"\">2</option>\n" +
        "                <option>3</option>\n" +
        "                <option>4</option>\n" +
        "                <option>5</option>\n" +
        "            </select>\n" +
        "        </div>\n" +
        "    </div>\n" +
        "</div>\n" +
        "</div>");
}]);

angular.module("../app/modules/TransmittalLetterSetup/views/TransmittalLetterSetup.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("../app/modules/TransmittalLetterSetup/views/TransmittalLetterSetup.html",
        "<!DOCTYPE html>\n" +
        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n" +
        " \n" +
        "<head>\n" +
        "    <title>Transmittal Letter Setup</title>\n" +
        "</head>\n" +
        "\n" +
        "<body>\n" +
        "\n" +
        "    <script id=\"transDelete.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Delete Transmittal Setup</h4>\n" +
        "        </div>\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body \">\n" +
        "                <p><strong> You are about to delete the \" {{transmittalLetterSetupName}} \" Report Setup. Are you sure you want to delete it?</strong>\n" +
        "                </p>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <button class=\"btn btn-md btn-default\" role=\"button\" ng-click=\"CancelDelete()\">Cancel</button>\n" +
        "                <button class=\"btn btn-md btn-primary\" role=\"button\" ng-click=\"deleteReport()\">Continue</button>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "    <script id=\"transRename.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header \">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Rename Transmittal Setup: </h4>\n" +
        "        </div>\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate\" novalidate>\n" +
        "\n" +
        "            <div class=\"modal-body\">\n" +
        "                <div class=\"form-group required\" show-errors>\n" +
        "                    <label for=\"renameReportTemplate\" class=\"control-label\">Enter a new name for this Transmittal Setup:</label>\n" +
        "                     \n" +
        "                    <input id=\"renameReportTemplate\" name=\"renameReportTemplate\" class=\"form-control\" type=\"text\" placeholder=\"Enter a new name\" ng-model=\"cloned.name\" required>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"modal-footer\">\n" +
        "                <button type=\"button\" class=\"btn btn-md btn-default\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\">Cancel</button>\n" +
        "                <button type=\"button\" class=\"btn btn-md btn-primary\" ng-click=\"renameReport(myFormAddTemplate)\">Continue</button>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "    </script>\n" +
        "\n" +
        "    <script id=\"transDuplicate.html\" type=\"text/ng-template\">\n" +
        "\n" +
        "        <div class=\"modal-header\">\n" +
        "            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" +
        "            <h4 class=\"modal-title\">Duplicate Transmittal Setup </h4>\n" +
        "        </div>\n" +
        "\n" +
        "        <form name=\"myFormAddTemplate\" class=\"form-horizontal\">\n" +
        "            <div class=\"modal-body \">\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"setupCopyFrom\" class=\"col-sm-3 col-lg-3 control-label\">Copy From:</label>\n" +
        "                    <div class=\"col-md-7 col-lg-7 col-xs-12\" show-errors>\n" +
        "                        <select name=\"setupCopyFrom\" id=\"setupCopyFrom\" class=\"form-control\" ng-model=\"report\" ng-options=\"report.name for report in transSetup.setupProperties.reportSection.coll\" required ng-change=\"duplicateError = ''\">\n" +
        "                            <option value=\"\">Select Transmittal Setup</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group\">\n" +
        "                    <label for=\"copyTo\" class=\"col-sm-3 col-lg-3 control-label\">Copy To:</label>\n" +
        "                    <div class=\"col-md-7 col-lg-7 col-xs-12\">\n" +
        "                        <select name=\"copyTo\" id=\"copyTo\" class=\"form-control\" ng-init=\"copyToAction='Existing'\" ng-model=\"copyToAction\" ng-change=\"duplicateError = ''\">\n" +
        "                            <option value=\"Existing\">Existing</option>\n" +
        "                            <option value=\"New\">New</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                </div>\n" +
        "\n" +
        "                <div class=\"form-group required\">\n" +
        "\n" +
        "                    <label for=\"copyToAction\" class=\"col-sm-3 col-lg-3 control-label\">{{copyToAction}}</label>\n" +
        "\n" +
        "                    <div class=\"col-md-7 col-lg-7 col-xs-12\" form-input-validation=\"(myFormAddTemplate.newName && myFormAddTemplate.newName.$invalid) || (myFormAddTemplate.copyTo && myFormAddTemplate.copyTo.$invalid)\">\n" +
        "                        <input id=\"copyToAction\" class=\"form-control\" type=\"text\" placeholder=\"Enter a name\" ng-show=\"copyToAction == 'New'\" ng-model=\"toCreateReport\" name=\"newName\" ng-required=\"copyToAction == 'New'\">\n" +
        "                        <select name=\"copyToAction\" class=\"form-control\" ng-init=\"copyToReport='';\" ng-model=\"copyToReport\" ng-options=\"report.name for report in transSetup.setupProperties.reportSection.coll\" ng-show=\"copyToAction == 'Existing'\" ng-required=\"copyToAction == 'Existing'\" ng-change=\"duplicateError = ''\">\n" +
        "                            <option value=\"\">Select Report Output Setup</option>\n" +
        "                        </select>\n" +
        "                    </div>\n" +
        "                    \n" +
        "                </div>\n" +
        "\n" +
        "            </div>\n" +
        "\n" +
        "            <div ng-show=\"duplicateError != '' && duplicateError != null && duplicateError != undefined\" class=\"alert alert-danger\" role=\"alert\" ng-class=\"danger\">\n" +
        "                {{duplicateError}}\n" +
        "            </div>\n" +
        "            <div class=\"modal-footer \">\n" +
        "                <button type=\"button\" class=\"btn btn-md btn-default\" data-dismiss=\"modal\" ng-click=\"CancelDelete()\">Cancel</button>\n" +
        "                <button type=\"button\" class=\"btn btn-md btn-primary\" ng-click=\"duplicate(myFormAddTemplate)\">Continue</button>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "    </script>\n" +
        "\n" +
        "    <div class=\"container-fluid\" ng-controller=\"TransmittalLetterSetupCtrl as transSetup\">\n" +
        "		<div class=\"panel panel-default\">\n" +
        "		<div class=\"panel-body\">	\n" +
        "        <h2 class=\"page-header\">Report Output Setup</h2>\n" +
        "        <span class=\"pull-right\">\n" +
        "            <button type=\"reset \" class=\"btn btn-md btn-default\" tabindex=\"-1\">Cancel</button>\n" +
        "            <button type=\"submit \" class=\"btn btn-md btn-primary\" ng-click=\"transSetup.save()\" tabindex=\"-1\">Save Changes</button>\n" +
        "        </span>\n" +
        "        <form class=\"form-horizontal\">\n" +
        "            <div class=\"form-group \">\n" +
        "                <label for=\"company\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                    Company:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                    <select id=\"company\" name=\"companyID\" class=\"form-control\" ng-init=\"transSetup.selectedCompanyId = 0\" ng-model=\"transSetup.selectedCompanyId\" ng-change=\"transSetup.selectedCompanyChanged()\" autofocus tabindex=\"1\">\n" +
        "                        <option value=\"0\" ng-if=\"!transSetup.selectedCompanyId\">Select a company</option>\n" +
        "                        <option value=\"5572\"> Land Environmental Group</option>\n" +
        "                        <option value=\"5684\"> Lauenstein &amp; Associates</option>\n" +
        "                        <option value=\"3099\">123 ENG Test</option>\n" +
        "                        <option value=\"7590\">14555 Blanco Road</option>\n" +
        "                        <option value=\"5745\">172d Airlift Wing MS ANG</option>\n" +
        "                        <option value=\"5666\">1st Bank Yuma</option>\n" +
        "                        <option value=\"5315\">1st Colonial Community Bank</option>\n" +
        "                        <option value=\"5857\">1st Constitution Bank</option>\n" +
        "                        <option value=\"4991\">1st National Bank of Demo</option>\n" +
        "                        <option value=\"8014\">1st National Bank of South Florida</option>\n" +
        "                        <option value=\"5829\">1st National Community Bank</option>\n" +
        "                        <option value=\"9599\">1st Security Bank of Washington</option>\n" +
        "                        <option value=\"5926\">1st Source Bank</option>\n" +
        "                        <option value=\"7917\">21 Environmental</option>\n" +
        "                        <option value=\"4734\">2G Environmental, LLC</option>\n" +
        "                        <option value=\"6477\">3 Kings Environmental</option>\n" +
        "                        <option value=\"4735\">3 Kings Environmental, Inc.</option>\n" +
        "                        <option value=\"3098\">3065866: Vince Grandinetti</option>\n" +
        "                        <option value=\"3206\">3126775: Monty Bruner</option>\n" +
        "                        <option value=\"4367\">3266541: Benjamin Ford</option>\n" +
        "                        <option value=\"5048\">3434731: Paul Gebhard</option>\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\" ng-if=\"transSetup.setupProperties.reportSection.coll && transSetup.setupProperties.reportSection.coll.length\">\n" +
        "                <label for=\"transmittalLetterSetup\" class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                    Transmittal Letter Setup:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                    <select name=\"setupID\" id=\"transmittalLetterSetup\" class=\"form-control\" ng-model=\"transSetup.setupProperties.reportSection.selected\" ng-options=\"report.name for report in transSetup.setupProperties.reportSection.coll track by report.transmittalSetupID\" ng-change=\"transSetup.setupProperties.reportSectionChanged()\" tabindex=\"2\">\n" +
        "                        <option ng-if=\"!transSetup.setupProperties.reportSection.selected\" value=\"\">Select Transmittal letter Setup...</option>\n" +
        "\n" +
        "                    </select>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "\n" +
        "            <div class=\"form-group\" ng-show=\"transSetup.setupProperties.reportSection.setupReady\">\n" +
        "                <label class=\"control-label col-md-2 col-sm-2 col-xs-12\">\n" +
        "                    Tools:\n" +
        "                </label>\n" +
        "                <div class=\"col-xs-12 col-sm-4 col-md-4\">\n" +
        "                    <button tooltip=\"Delete\" class=\"btn btn-md btn-default\" ng-click=\"transSetup.setupProperties.toolOptions.selectAction('delete')\" tabindex=\"3\"><i class=\"fa fa-times text-danger fa-lg\"></i></button>\n" +
        "                    <button tooltip=\"Rename\" class=\"btn btn-md btn-default\" ng-click=\"transSetup.setupProperties.toolOptions.selectAction('rename')\" tabindex=\"4\"><i class=\"fa fa-terminal text-info fa-lg\"></i></button>\n" +
        "                    <button tooltip=\"Duplicate\" class=\"btn btn-md btn-default\" ng-click=\"transSetup.setupProperties.toolOptions.selectAction('duplicate')\" tabindex=\"5\"><i class=\"fa fa-file text-success fa-lg\"></i></button>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </form>\n" +
        "\n" +
        "        <div class=\"alert\" ng-class=\"transSetup.msgType\" role=\"alert\" id=\"serviceResponseDiv\" ng-show=\"transSetup.serviceResponseAlert\">\n" +
        "            <button type=\"button\" class=\"close\" ng-click=\"transSetup.serviceResponseAlert = false;\" aria-label=\"Close\">\n" +
        "                <span aria-hidden=\"true\">&times;</span>\n" +
        "            </button>\n" +
        "            {{transSetup.serviceResponseText}}\n" +
        "        </div>\n" +
        "        <hr>\n" +
        "        <div ng-show=\"transSetup.setupProperties.reportSection.setupReady\">\n" +
        "\n" +
        "            <div ng-include src=\"'app/modules/TransmittalLetterSetup/views/GlobalPageSettings.html'\"></div>\n" +
        "            <hr>\n" +
        "\n" +
        "            <div ng-include src=\"'app/modules/TransmittalLetterSetup/views/PageHeaderSettings.html'\"></div>\n" +
        "            <hr>\n" +
        "\n" +
        "            <div ng-include src=\"'app/modules/TransmittalLetterSetup/views/LetterDate.html'\"></div>\n" +
        "            <hr>\n" +
        "\n" +
        "            <div ng-include src=\"'app/modules/TransmittalLetterSetup/views/To.html'\"></div>\n" +
        "            <hr>\n" +
        "\n" +
        "            <div ng-include src=\"'app/modules/TransmittalLetterSetup/views/Salutation.html'\"></div>\n" +
        "            <hr>\n" +
        "\n" +
        "            <div ng-include src=\"'app/modules/TransmittalLetterSetup/views/LetterBody.html'\"></div>\n" +
        "            <hr>\n" +
        "\n" +
        "            <div ng-include src=\"'app/modules/TransmittalLetterSetup/views/Closing.html'\"></div>\n" +
        "            <hr>\n" +
        "\n" +
        "            <div ng-include src=\"'app/modules/TransmittalLetterSetup/views/Signature.html'\"></div>\n" +
        "            <hr>\n" +
        "\n" +
        "            <div ng-include src=\"'app/modules/TransmittalLetterSetup/views/Footer.html'\"></div>\n" +
        "            <hr>\n" +
        "\n" +
        "            <div class=\"form-group text-center\">                \n" +
        "                <button type=\"reset \" class=\"btn btn-md btn-default\">Cancel</button>\n" +
        "                <button type=\"submit \" class=\"btn btn-md btn-primary\" ng-click=\"transSetup.save()\">Save Changes</button>\n" +
        "            </div>\n" +
        "\n" +
        "            <div ng-show=\"false\">\n" +
        "                <hr>\n" +
        "                <div class=\"\" id=\"applied\">\n" +
        "                    <span>Test html </span>\n" +
        "                </div>\n" +
        "            </div>\n" +
        "        </div>\n" +
        "		</div>	\n" +
        "		</div>\n" +
        "    </div>\n" +
        "\n" +
        "</body>\n" +
        "\n" +
        "</html>");
}]);; // define module
angular.module('DefaultLanguageLibrary', ['ui.router.state', 'ui.bootstrap', 'colorpicker.module']);

// routers
angular.module('DefaultLanguageLibrary').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');

        var baseViewsFolder = 'app/modules/DefaultLanguageLibrary/views/';
        $stateProvider.state('defaultLanguageLibrary', {
            'url': '/DefaultLanguage',
            'templateUrl': baseViewsFolder + 'DefaultLanguage.html',
            'controller': "DefaultLangLibCtrl as dll",
            /*  'resolve': {
                  defaultCompanyList: function (DefaultLanguageLibraryAPI, BASEURL) {
                      return DefaultLanguageLibraryAPI.getDLLCompanyListByUser(BASEURL.userGUID).then(function (dllList) {
                          // self.dllCompanyList = dllList ? dllList.companies : [];
                          self.dllCompanyList = [];
                          var obj = {};
                          obj.companyGUID = dllList.users[0].company.companyGUID;
                          obj.name = dllList.users[0].company.name;
                          self.dllCompanyList.push(obj);
                          return self.dllCompanyList;

                      }, function (error) {
                          console.log("error");
                          // self.addLangLibError = true;
                          // self.languageError = error;
                      });
                  }
              }*/

        });
    }
]);;
angular.module('DefaultLanguageLibrary').controller('DefaultLangLibCtrl', ['$scope', '$modal', 'DefaultLanguageLibraryAPI', 'ReportTemplatesAPI', '$sce', '$rootScope', 'BASEURL', '$timeout', function ($scope, $modal, DefaultLanguageLibraryAPI, ReportTemplatesAPI, $sce, $rootScope, BASEURL, $timeout) {
    var self = this;
    this.categoryOptions_lang = [{
        text: "Instructions",
        value: "Instructions"
    }, {
        text: "Sample Language",
        value: "Sample"
    }, {
        text: "Option to Insert",
        value: "Options"
    }];



    //$scope.companies = BASEURL.companies;
    self.userGuid = BASEURL.userGUID;
    /*{
        text: "Hardcoded Language",
        value: "Hardcoded"
    }, {
        text: "Included in Project Setup",
        value: "Included in Project Setup"
    }*/

    //self.dllCompanyList = defaultCompanyList;

    $scope.shouldShow = function (narrative, number) {

        // put your authorization logic here
        /* if(self.currentSectionFlag == 'true')
             return permissionLevel.value !== 'Sample' && permissionLevel.value !== 'Options';
         else if(self.currentSectionFlag == 'false')
             return permissionLevel.value !== 'Instructions';*/

        if (narrative == true) {
            this[number] = [{
                text: "Instructions",
                value: "Instructions"
    }];
            return this[number];
        } else {
            this[number] = [{
                text: "Instructions",
                value: "Instructions"
    }, {
                text: "Sample Language",
                value: "Sample"
    }, {
                text: "Option to Insert",
                value: "Options"
    }];
            return this[number];
        }
    }



    var setUpParent = self.setupProperties = {};

    self.showDisplayMsg = function (msg, type) {
        self.serviceResponseAlert = true;
        self.serviceResponseText = msg;
        self.msgType = 'alert-' + (type || 'danger');
    }

    function clearDll() {
        self.languageLibrarySelected = null;
        self.dllList = [];
    }

    function clearTemplate() {
        self.templateSelectedId = 0;
        self.templateList = [];
    }

    function clearSection() {
        self.sectionSelected = null;
        self.templateSectionList = [];
    }

    function clearErrorDisplay() {
        self.addLangLibError = false;
        self.languageError = null;
        self.serviceResponseAlert = false;
        self.serviceResponseText = null;
    }


    var getCompanyListPromise = DefaultLanguageLibraryAPI.getDLLCompanyListByUser(self.userGuid);

    getCompanyListPromise.then(function (dllList) {
        // self.dllCompanyList = dllList ? dllList.companies : [];
        self.dllCompanyList = [];
        var obj = {};
        obj.companyGUID = dllList.users[0].companyGUID;
        obj.name = dllList.users[0].companyName;
        self.dllCompanyList.push(obj);
        console.log(self.dllCompanyList);
        self.selectedCompanyId = self.dllCompanyList[0];
        if (self.dllCompanyList.length > 1) {
            self.disableFlag = false;
            self.moveText = "Move default language library to different company.";
        } else {
            self.disableFlag = true;
            self.moveText = "Can not Move default language library to different company as user has Only One Company.";
        }

        /* var getAllCompanyListPromise = DefaultLanguageLibraryAPI.getDLLCompanyList();

        getAllCompanyListPromise.then(function (dllList) {
           // self.dllCompanyList = dllList ? dllList.companies : [];
            var companyListForMoveLibrary = [];
             for(i=0;i<dllList.companies.length;i++)
                 {
                     if(dllList.companies[i].companyGUID != self.selectedCompanyId.companyGUID)
                         companyListForMoveLibrary.push(dllList.companies[i]);
                 }
           $scope.companies = companyListForMoveLibrary;
        }, function (error) {
            // self.addLangLibError = true;
            // self.languageError = error;
        });*/

        self.companySelectionChanged();
    }, function (error) {
        self.addLangLibError = true;
        self.languageError = error;
    });


    /*var getAllCompanyListPromise = DefaultLanguageLibraryAPI.getDLLCompanyList();

      getAllCompanyListPromise.then(function (dllList) {
         // self.dllCompanyList = dllList ? dllList.companies : [];
         $scope.companies = dllList.companies;
      }, function (error) {
          // self.addLangLibError = true;
          // self.languageError = error;
      });*/

    $scope.removeCurrentCompany = function (itm) {
        if (self.selectedCompanyId.companyGUID != itm.companyGUID)
            return itm;
    }

    self.companySelectionChanged = function () {
        clearDll();
        clearTemplate();
        clearSection();
        clearErrorDisplay();

        // console.log(self.selectedCompanyId.companyGUID,'companyID');
        var selectedCompany = self.selectedCompanyId.companyGUID;
        // var selectedCompany = self.selectedCompanyId;
        var getListPromise = DefaultLanguageLibraryAPI.getDLLList(selectedCompany);

        getListPromise.then(function (dllList) {
            self.dllList = dllList ? dllList.libraries : [];
        }, function (error) {
            self.addLangLibError = true;
            self.languageError = error;
        });

        $scope.delay = 0;
        $scope.minDuration = 0;
        $scope.message = 'Please Wait...';
        $scope.backdrop = true;
        $scope.promise = null;
        $scope.promise = ReportTemplatesAPI.getTemplateList(selectedCompany).then(function (templateList) {
            self.templateList = templateList ? templateList.templates : [];
        }, function (error) {
            self.addLangLibError = true;
            self.languageError = error;
        });
    }



    /* self.unlinkLibrary = function (libraryGUID, sectionGUID, languageGUID,name) {
         console.log(libraryGUID + "     " + name, "libraryGUID to unlink");
         var obj = {
             "library": {
                 "libraryGUID":  libraryGUID,
                 "isUnlink": true,
                  "name":name
             }
         };
         

         $scope.promise = null;
         $scope.promise = DefaultLanguageLibraryAPI.unlinkLibrary(obj, libraryGUID,sectionGUID).then(function (resp) {
                  getLanguageForLibrary(libraryGUID);
                 self.isLibraryLinked = false;
             //self.templateSelectionChanged();
         }, function (error) {
             self.addLangLibError = true;
             self.languageError = error;
         });
     }*/

    self.unlinkLibrary = function (libraryGUID, sectionGUID, languageGUID, name) {

        var obj = {
            "library": {
                "libraryGUID": libraryGUID,
                "isUnlink": true,
                "name": name
            },
            "sectionGUID": sectionGUID
        };


        var modalInstance = $modal.open({
            templateUrl: "dllLibraryUnlinkSection.html",
            scope: $scope,
            controller: dllLibraryUnlinkSectionController,
            size: 0,
            resolve: {
                parameters: function () {
                    return obj;
                }
            }

        })

    }

    var dllLibraryUnlinkSectionController = function ($scope, $modalInstance, parameters) {

        $scope.unlinkLibrary = function () {
            var libobj = parameters.library;
            var obj = {};
            obj.library = libobj;
            $scope.promise = null;
            $scope.promise = DefaultLanguageLibraryAPI.unlinkLibrary(obj, libobj.libraryGUID, parameters.sectionGUID).then(function (resp) {
                getLanguageForLibrary(libobj.libraryGUID);
                if (resp.linkedLibraryID != 0 && resp.linkedLibraryID != "" && resp.linkedLibraryID != undefined)
                    self.isLibraryLinked = true;
                else
                    self.isLibraryLinked = false;
                self.showDisplayMsg('Library Section Unlinked successfully', 'success');
            }, function (error) {
                self.addLangLibError = true;
                self.languageError = error;
            });

            $modalInstance.close();
        }



        $scope.CancelDelete = function () {

            $modalInstance.close();
        }
    }



    self.dllSelectionChanged = function () {
        /*if (self.languageLibrarySelected && self.languageLibrarySelected.defaultTemplateID) {
            self.templateSelectedId = self.languageLibrarySelected.defaultTemplateID;
            self.templateSelectionChanged();
        }*/

        clearErrorDisplay();
        var libraryId = self.languageLibrarySelected.libraryGUID;
        //console.log(self.languageLibrarySelected.linkedLibraryID,'linked libraryid');


        /*console.log(self.dllList,"dll list");
            var obj = $filter('filter')(self.dllList,  {libraryGUID: libraryId});
            console.log(obj,"filtered obj");    
        */
        if (self.languageLibrarySelected.linkedLibraryID != 0 && self.languageLibrarySelected.linkedLibraryID != "" && self.languageLibrarySelected.linkedLibraryID != undefined) {
            self.isLibraryLinked = true;
        } else {
            self.isLibraryLinked = false;

        }
        //$('[data-toggle="tooltip"]').tooltip();
        //console.log(self.isLibraryLinked,"linked library");
        getLanguageForLibrary(libraryId);
        getPdfurl(libraryId);
        setDefaultTemplateAsSelected();
        if (self.templateSelectedId) {
            self.templateSelectionChanged();
        }
    }

    function getLanguageForLibrary(libraryId) {
        $scope.delay = 0;
        $scope.minDuration = 3000;
        $scope.message = 'Please Wait...';
        $scope.backdrop = true;
        $scope.promise = null;
        $scope.promise = DefaultLanguageLibraryAPI.getLanguageForAllSections(libraryId).then(function (languageList) {
            self.languageList = languageList;
            mergeLanguageWithSections(self.languageList, self.templateSectionList);
            // $('[data-toggle="tooltip"]').tooltip();
            $timeout(function () {
                $('[data-toggle="tooltip"]').tooltip();
            }, 3000);

        });
    }

    self.templateSelectionChanged = function () {
        clearSection();
        clearErrorDisplay();

        var templateId = self.templateSelectedId.templateGUID;
        var templateObjPromise = DefaultLanguageLibraryAPI.getTemplate(templateId);
        templateObjPromise.then(function (data) {
            self.templateSectionObject = data;

        }, function (error) {
            self.languageBySectionList = null;
            self.addLangLibError = true;
            self.languageError = error;
        });


        var promise = ReportTemplatesAPI.getTemplateSections(templateId);
        promise.then(function (sections) {
            /* var sectionWithoutAppendix = [];
             for(i=0;i<sections.length;i++)
                 {
                     if(sections[i].isAppendix == false)
                         sectionWithoutAppendix.push(sections[i]);
                 }
             self.templateSectionList = sectionWithoutAppendix;*/
            self.templateSectionList = sections;
            mergeLanguageWithSections(self.languageList, self.templateSectionList);
        }, function (error) {
            self.languageBySectionList = null;
            self.addLangLibError = true;
            self.languageError = error;
        });
    }

    function setDefaultTemplateAsSelected() {
        if (self.languageLibrarySelected && self.languageLibrarySelected.defaultTemplateID && self.templateList && self.templateList.length) {
            var toSelectTemplateID = self.languageLibrarySelected.defaultTemplateID;
            for (var i = 0; i < self.templateList.length; i++) {
                var local = self.templateList[i];
                if (local.templateID == toSelectTemplateID) {
                    self.templateSelectedId = local;
                    break;
                }
            }
        }
    }

    function createNewGuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = crypto.getRandomValues(new Uint8Array(1))[0] % 16 | 0,
                v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    self.sectionSelectionChanged = function () {
        clearErrorDisplay();
        /*var selectedSectionId = self.sectionSelected ? self.sectionSelected.sectionID : 0;
        if (!selectedSectionId) return;

        getSectionData(selectedSectionId);*/
    }

    function getSectionData(sectionId) {

    }

    self.languageBySectionList = [];

    function mergeLanguageWithSections(languageList, sectionList, isAppend, rootSectionID) {
        //if (!languageList || !languageList.length || !sectionList || !sectionList.length) return;

        self.languageBySectionList = isAppend ? self.languageBySectionList : [];
        if (sectionList && sectionList.length)
            for (var i = 0; i < sectionList.length; i++) {
                var section = sectionList[i];
                var langBySection = {
                    languageList: [],
                    name: section.sectionName,
                    number: section.sectionNumber,
                    sectionID: section.sectionID,
                    sectionGUID: section.sectionGUID,
                    hasNarrative: section.hasNarrative
                };
                if (rootSectionID) {
                    langBySection.rootSectionID = rootSectionID;
                }

                if (languageList && languageList.length) {
                    for (var j = 0; j < languageList.length; j++) {
                        var language = languageList[j];
                        if (language.sectionGUID == section.sectionGUID) {
                            var languageObj = {
                                languageID: language.languageID,
                                languageGUID: language.languageGUID,
                                category: language.category,
                                keyword: language.keyword,
                                sectionID: language.sectionID,
                                sectionGUID: language.sectionGUID,
                                text: language.text,
                                isAddedOnProjectStartup: language.isAddedOnProjectStartup,
                                showInPage: language.showInPage,
                                orderIndex: language.orderIndex,
                                isLinked: language.isLinked
                            };

                            langBySection.languageList.push(languageObj);
                        }
                    }
                }
                self.languageBySectionList.push(langBySection);

                // merge language for nested sections
                if (section.sections && section.sections.length) {
                    var rootSection = rootSectionID || section.sectionID;
                    mergeLanguageWithSections(languageList, section.sections, true, rootSection);
                }
            }
    }

    function matchLanguageByProperty(languageList, prop, val) {
        var arr = languageList;
        if (!arr || !arr.length) return;

        for (var i = 0; i < arr.length; i++) {
            var local = arr[i];
            if (local[prop] == val) {
                return local;
            }
        }
    }

    self.renderHtml = function (html_asText) {
        var renderedHtml = $sce.trustAsHtml(html_asText);
        return renderedHtml;
    }



    self.unlinkCompleteLibrary = function (libraryGUID, name) {

        var obj = {
            "library": {
                "libraryGUID": libraryGUID,
                "isUnlink": true,
                "name": name
            }
        };


        var modalInstance = $modal.open({
            templateUrl: "dllLibraryUnlink.html",
            scope: $scope,
            controller: dllLibraryUnlinkController,
            size: 0,
            resolve: {
                parameters: function () {
                    return obj;
                }
            }

        })

    }

    var dllLibraryUnlinkController = function ($scope, $modalInstance, parameters) {

        $scope.unlinkLibrary = function () {
            var obj = parameters;
            $scope.promise = null;
            $scope.promise = DefaultLanguageLibraryAPI.unlinkCompleteLibrary(obj, obj.library.libraryGUID).then(function (resp) {
                getLanguageForLibrary(obj.library.libraryGUID);
                self.isLibraryLinked = false;
                self.showDisplayMsg('Library Unlinked successfully', 'success');
            }, function (error) {
                self.addLangLibError = true;
                self.languageError = error;
            });

            $modalInstance.close();
        }



        $scope.CancelDelete = function () {

            $modalInstance.close();
        }
    }

    self.editOption = function (index, libraryId, languageId, languageSection, isDeleteBySection) {
        self.editAllMode = false;
        console.log("dfdsf");
        clearErrorDisplay();
        angular.forEach(languageSection, function (language, index) {
            self.toEditLang[language.languageGUID] = angular.copy(language);
            language.editmode = true;
        });
        //language.editmode = true;
        /* clearErrorDisplay();
         var val = {
             index: index,
             libId: libraryId,
             langId: languageId,
             languageSection: languageSection,
             isDeleteBySection: isDeleteBySection
         }

         var modalInstance = $modal.open({
             templateUrl: "dllLanguage.html",
             scope: $scope,
             controller: deleteLanguageController,
             size: 0,
             resolve: {
                 parameters: function () {
                     return val;
                 }
             }
         })*/

    }

    self.deleteOption = function (index, libraryId, languageId, languageSection, isDeleteBySection) {

        clearErrorDisplay();
        var val = {
            index: index,
            libId: libraryId,
            langId: languageId,
            languageSection: languageSection,
            isDeleteBySection: isDeleteBySection
        }

        var modalInstance = $modal.open({
            templateUrl: "dllLanguage.html",
            scope: $scope,
            controller: deleteLanguageController,
            size: 0,
            resolve: {
                parameters: function () {
                    return val;
                }
            }
        })

    }

    var deleteLanguageController = function ($scope, $modalInstance, parameters) {
        $scope.isDeleteBySection = parameters.isDeleteBySection;
        $scope.deleteLanguage = function () {

            var promise = null;
            if (parameters.isDeleteBySection) {
                promise = DefaultLanguageLibraryAPI.deleteLanguageBySection(parameters.libId, parameters.langId);
                promise.then(function (result) {
                    parameters.languageSection.length = 0;
                    self.showDisplayMsg('Language Items for section deleted successfully', 'success');
                });
            } else {
                promise = DefaultLanguageLibraryAPI.deleteLanguageItem(parameters.libId, parameters.langId);
                promise.then(function (result) {
                    parameters.languageSection.splice(parameters.index, 1);
                    self.showDisplayMsg('Default Language Item deleted successfully', 'success');
                });
            }
            $modalInstance.close();
        }



        $scope.CancelDeleteLanguage = function () {

            $modalInstance.close();
        }
    }


    function LanguagesReorder(arr, libraryID, sectionID) {

        var languages = [];
        for (index = 0; index < arr.length; index++) {
            languages.push({
                'languageGUID': arr[index].languageGUID
            });
        }
        var putPromise = DefaultLanguageLibraryAPI.putLanguageItemsReorder(libraryID, sectionID, languages);
        putPromise.then(function (result) {
            angular.forEach(arr, function (item, index) {
                item.orderIndex = index;
            });
            dataContainer.refreshOnReturn = true;
            $modalInstance.close();
        });
    }
    self.moveTopOption = function (index, arr, sectionID) {
        clearErrorDisplay();
        $('[data-toggle="tooltip"]').tooltip('hide');
        if (!index) return;

        arr.move(index, 0);
        var libraryID = self.languageLibrarySelected.libraryGUID;
        LanguagesReorder(arr, libraryID, sectionID);
    }

    self.moveEndOption = function (index, arr, sectionID) {
        clearErrorDisplay();
        $('[data-toggle="tooltip"]').tooltip('hide');
        if (index == (arr.length - 1)) return;

        arr.move(index, (arr.length - 1));
        var libraryID = self.languageLibrarySelected.libraryGUID;
        LanguagesReorder(arr, libraryID, sectionID);
    }

    self.moveUpOption = function (index, arr, sectionID) {
        clearErrorDisplay();
        $('[data-toggle="tooltip"]').tooltip('hide');
        if (!index) return;

        arr.move(index, index - 1);
        var libraryID = self.languageLibrarySelected.libraryGUID;
        LanguagesReorder(arr, libraryID, sectionID);
    }

    self.moveDownOption = function (index, arr, sectionID) {
        clearErrorDisplay();
        $('[data-toggle="tooltip"]').tooltip('hide');
        if (index >= (arr.length - 1)) return;

        arr.move(index, index + 1);
        var libraryID = self.languageLibrarySelected.libraryGUID;
        LanguagesReorder(arr, libraryID, sectionID);
    }

    self.toEditLang = {};
    self.editLanguage = function (language) {
        clearErrorDisplay();
        self.editAllMode = true;
        self.toEditLang[language.languageGUID] = angular.copy(language);
        language.editmode = true;
    };
    self.cancelEditLanguage = function (language) {
        var originalCopy = self.toEditLang[language.languageGUID];
        copyLanguageProperties(language, originalCopy);
        language.editmode = false;
        delete self.toEditLang[language.languageGUID];
        $rootScope.$broadcast("cancel-editor-edit");
    }
    self.cancelAllEditLanguage = function (languageList) {

        angular.forEach(languageList, function (language, index) {
            var originalCopy = self.toEditLang[language.languageGUID];
            copyLanguageProperties(language, originalCopy);
            language.editmode = false;
            delete self.toEditLang[language.languageGUID];
            $rootScope.$broadcast("cancel-editor-edit");
        });



    }

    function copyLanguageProperties(language, fromLang) {
        language.category = fromLang.category;
        language.keyword = fromLang.keyword;
        language.isAddedOnProjectStartup = fromLang.isAddedOnProjectStartup;
        language.text = fromLang.text;
        //$scope.$apply();
    }

    /*self.saveLanguage = function (form, index, libId, objLanguage) {
     
        if (!form || form.$invalid) {
            // self.showDisplayMsg('Invalid Form Submission');
            return;
        }
      
        var promise = DefaultLanguageLibraryAPI.putLanguage(libId, objLanguage.Id, objLanguage)
        promise.then(function (result) {
         
           // objLanguage.editmode = false;


        });
        objLanguage.editmode = false;
    } */

    self.saveAllLanguage = function (index, libId, languageList, editLanguageForm) {
        if (editLanguageForm.$valid) {
            angular.forEach(languageList, function (objLanguage, index) {
                var lang = angular.copy(objLanguage);
                delete lang.editmode;
                var promise = DefaultLanguageLibraryAPI.putLanguageItem(libId, objLanguage.languageGUID, lang);
                promise.then(function (result) {
                    objLanguage.editmode = false;
                    console.log("success");

                });
            });
        }
        if (editLanguageForm.language.$valid == false) {
            alert("Make sure you have text to all narratives.");
        }

    }

    self.saveLanguage = function (index, libId, objLanguage, editLanguageForm) {
        /*var arrLanguage = [];
        arrLanguage.push(objLanguage);
        for (var i = 0; i < arrLanguage.length; i++) {
            delete arrLanguage[i]['editmode'];
        }*/
        //var promise = DefaultLanguageLibraryAPI.putLanguageItem(libId, objLanguage.languageGUID, arrLanguage[0])
        if (editLanguageForm.$valid) {
            var lang = angular.copy(objLanguage);
            delete lang.editmode;
            var promise = DefaultLanguageLibraryAPI.putLanguageItem(libId, objLanguage.languageGUID, lang);
            promise.then(function (result) {
                objLanguage.editmode = false;
                console.log("success");

            });
        }
        if (editLanguageForm.language.$valid == false) {
            alert("Please add text to narrative.");
        }
    }

    Array.prototype.move = function (old_index, new_index) {
        if (new_index >= this.length) {
            var k = new_index - this.length;
            while ((k--) + 1) {
                this.push(undefined);
            }
        }
        this.splice(new_index, 0, this.splice(old_index, 1)[0]);
        return this; // for testing purposes
    };



    // add new language
    self.addOptionsToSection = function (noOfOptions, section, narative, number) {

        clearErrorDisplay();

        var modalDataContainer = {
            noOfOptions: noOfOptions,
            section: section,
            libraryGUID: self.languageLibrarySelected.libraryGUID,
            categoryOptions: self.categoryOptions_lang,
            refreshOnReturn: false,
            narative: narative,
            number: number

        }

        var modal = $modal.open({
            templateUrl: 'addOptionsToSection.html',
            controller: addOptionsToSectionController,
            scope: $scope,
            size: "lg",
            resolve: {
                dataContainer: function () {
                    return modalDataContainer;
                }
            }
        });

        modal.result.then(function () {
            var refreshLanguage = modalDataContainer.refreshOnReturn;
            section.addOptions = 1;
            if (refreshLanguage) {
                var libraryId = modalDataContainer.libraryGUID;
                // no need to GET again
                // POST returns the added language list
                //getLanguageForLibrary(libraryId);
            }
        });
    }
    var addOptionsToSectionController = function ($scope, $modalInstance, dataContainer) {
        $scope.addLangLibError = false;
        $scope.languageError = "";
        $scope.selectedSection_addOptions = dataContainer.section;
        $scope.noOfOptions = dataContainer.noOfOptions;
        $scope.toAddOptions = [];
        $scope.categoryOptions = dataContainer.categoryOptions;
        $scope.narative = dataContainer.narative;
        $scope.number = dataContainer.number;

        $scope.cancelAddOptionToSection = function () {
            $modalInstance.close();
        }

        $scope.addNewOptionsToSection = function (form) {

            if (!form || form.$invalid) {
                // self.showDisplayMsg('Invalid Form Submission');
                return;
            }
            if ($scope.toAddOptions && $scope.toAddOptions.length) {
                var libraryID = dataContainer.libraryGUID;
                var sectionId = $scope.selectedSection_addOptions.sectionID;
                var sectionGUID = $scope.selectedSection_addOptions.sectionGUID;
                var languageArr = [];

                /*var tempIdList = [];
                for (var prop in self.languageBySectionList['1'].languageList) {
                    tempIdList.push(parseInt(prop));
                }
                Array.max = function(array) {
                    return Math.max.apply(Math, array);
                };
                var lastId = Array.max(tempIdList);*/

                for (var i = 0; i < $scope.toAddOptions.length; i++) {
                    var local = $scope.toAddOptions[i];
                    var obj = {
                        //Id: 1,
                        category: local.category,
                        keyword: local.keyword,
                        sectionID: sectionId,
                        sectionGUID: sectionGUID,
                        text: local.text
                            //languageID: dataContainer.section.languageList.length + i
                    };

                    if (obj.category == "Instructions") {
                        if (local.included == undefined)
                            obj.showInPage = false;
                        else
                            obj.showInPage = local.included;
                    } else {
                        if (local.included == undefined)
                            obj.isAddedOnProjectStartup = false;
                        else
                            obj.isAddedOnProjectStartup = local.included;
                    }

                    languageArr.push(obj);
                }

                var postPromise = DefaultLanguageLibraryAPI.postLanguage(libraryID, languageArr);
                postPromise.then(function (languageList) {
                    dataContainer.refreshOnReturn = true;

                    // insert into array
                    Array.prototype.push.apply(dataContainer.section.languageList, languageList);

                    $modalInstance.close();
                    getLanguageForLibrary(libraryID);
                }, function (error) {
                    $scope.addLangLibError = true;
                    $scope.languageError = error;
                });


                /*// below code for testing only
                var arr = dataContainer.section.languageList;

                //dataContainer.section.languageList.splice(arr.length - 1, 0, languageArr);
                Array.prototype.push.apply(arr, languageArr);
                $modalInstance.close();*/
            }
        }

        $scope.getNumber = function (num) {
            var parsedInt = parseInt(num);
            var arr = new Array(parsedInt);
            return arr;
        }
    }

    function getPdfurl(libraryId) {
        console.log("SuccessID---------" + libraryId);
        //self.pdfURL =  "http://www.pdf995.com/samples/pdf.pdf";

        // var libraryId = 12;
        var promise = DefaultLanguageLibraryAPI.getPDFURL(libraryId)
        promise.then(function (result) {
            console.log(result);
            self.pdfURL = result.outputDocument;
            console.log(result.outputDocument);
        });
    }

    // tool options
    self.openPopup = function (action) {

        clearErrorDisplay();

        var modalDataContainer = {
            dll: self.languageLibrarySelected,
            selectedTemplateId: self.templateSelectedId,
            dllList: self.dllList,
            action: action,
            templateObject: self.templateSectionObject,
            sections: self.templateSectionList,
            result: {
                deleted: false,
                languageDeleted: false
            }
        };

        if (action == 'deleteAll') {
            var url = 'dllDeleteAll.html';
        } else if (action == 'rename') {
            var url = 'dllRename.html';
        } else if (action == 'duplicate') {
            var url = 'dllDuplicate.html';
        } else if (action == 'delete') {
            var url = 'dllDelete.html';
        } else if (action == 'move' && self.disableFlag == false) {
            var url = 'dllMove.html';
        } else if (action == 'setDefaultStructure') {
            var url = 'dllSetDefaultStructure.html';
        } else if (action == "link") {
            var url = 'dllLink.html';
        } else if (action == "pdf") {
            var url = 'dllPDFGeneration.html'
        }

        var modalInstance = $modal.open({
            templateUrl: url,
            scope: $scope,
            controller: dllToolsController,
            size: 'lg',
            resolve: {
                dataContainer: function () {
                    return modalDataContainer;
                }
            }
        });

        modalInstance.result.then(function () {
            if (modalDataContainer.action == "delete" && modalDataContainer.result.deleted) {
                var index = self.dllList.indexOf(self.languageLibrarySelected);
                if (index >= 0) {
                    self.dllList.splice(index, 1);
                    self.languageLibrarySelected = "";
                }
            } else if (modalDataContainer.action == 'deleteAll' && modalDataContainer.result.languageDeleted) {
                self.languageList = [];
                mergeLanguageWithSections(self.languageList, self.templateSectionList);
            }
        });

        //self.deleteClicked = true;

        //self.copytoClicked = false;
        //self.renameClicked = false;       
        //self.copyfromClicked = false;
    }

    var dllToolsController = function ($scope, $modalInstance, dataContainer) {

        $scope.library = dataContainer.dll.libraryGUID;

        /* var promise = DefaultLanguageLibraryAPI.getPDFURL(dataContainer.dll.libraryGUID)
         promise.then(function (result) {
             console.log(result);
             $scope.pdfURL = result.outputDocument;
         });*/

        $scope.sections = dataContainer.sections;

        //$scope.companies = BASEURL.companies;
        this.moveToCompany = 0;


        $scope.newNameDll = dataContainer && dataContainer.dll ? dataContainer.dll.name : '';
        $scope.renameDll = function (form) {
            if (!form || form.$invalid) {
                // self.showDisplayMsg('Invalid Form Submission');
                return;
            }
            var dll = angular.copy(dataContainer.dll);
            var id = dll.libraryGUID;
            var newName = this.newNameDll;
            dll.name = newName;
            var promise = DefaultLanguageLibraryAPI.update(id, dll)
            promise.then(function (result) {
                dataContainer.dll.name = dll.name;
                self.showDisplayMsg('Default Language Library renamed successfully', 'success');
                $modalInstance.close();
            }).catch(function (result) {
                self.showDisplayMsg(result, 'danger');
                $modalInstance.close();
            });
        }

        $scope.deleteDll = function () {
            var dll = angular.copy(dataContainer.dll);
            var id = dll.libraryGUID;
            var promise = DefaultLanguageLibraryAPI.delete(id)
            promise.then(function (result) {
                self.showDisplayMsg('Default Language deleted successfully', 'success');
                dataContainer.result.deleted = true;
                $modalInstance.close();
            });
        }

        $scope.removeAllDefaultLanguage = function () {

            var dll = angular.copy(dataContainer.dll);
            var id = dll.libraryGUID;
            var promise = DefaultLanguageLibraryAPI.deleteLanguage(id)
            promise.then(function (result) {
                self.showDisplayMsg('Default Language Library from every section of the selected library is deleted successfully', 'success');
                dataContainer.result.languageDeleted = true;
                $modalInstance.close();
            });
        }

        $scope.moveToDifferentCompany = function (form) {
            if (!form || form.$invalid) {
                // self.showDisplayMsg('Invalid Form Submission');
                return;
            }
            var dll = angular.copy(dataContainer.dll);
            var id = dll.libraryGUID;
            var moveToCompany = this.moveToCompany;
            dll.ownerCompanyID = moveToCompany.companyID;
            dll.ownerCompanyGUID = moveToCompany.companyGUID;
            var promise = DefaultLanguageLibraryAPI.update(id, dll)
            promise.then(function (result) {
                dataContainer.dll.ownerCompanyID = moveToCompany;
                self.showDisplayMsg('Default Language Library moved successfully to different company', 'success');

                var index = dataContainer.dllList.indexOf(dataContainer.dll);
                if (index >= 0) {
                    dataContainer.dllList.splice(index, 1);
                }

                $modalInstance.close();
            });
        }

        $scope.linkLibrary = function (form) {
            if (!form || form.$invalid) {
                // self.showDisplayMsg('Invalid Form Submission');
                return;
            }

            var name = this.linkLibraryName;
            var data = {
                //"reportTypeID": 22, self.languageLibrarySelected.defaultTemplateID
                libraryID: dataContainer.dll.libraryID,
                libraryGUID: dataContainer.dll.libraryGUID,
                companyID: dataContainer.dll.ownerCompanyID,
                companyGUID: dataContainer.dll.ownerCompanyGUID,
                defaultTemplateID: self.languageLibrarySelected.defaultTemplateID,
                isMobile: dataContainer.templateObject.isMobile,
                description: dataContainer.templateObject.description,
                reportTypeID: dataContainer.dll.reportType,
                requestType: "LINK",
                name: name
            };
            var promise = DefaultLanguageLibraryAPI.linkLibrary(data);
            promise.then(function (linkedlibrary) {
                linkedlibrary.linkedLibraryID = dataContainer.dll.libraryID;
                dataContainer.dllList.push(linkedlibrary);
                //to refresh section languages after linked library success
                getLanguageForLibrary(data.libraryGUID);
                self.showDisplayMsg('Library Linked successfully', 'success');
                $modalInstance.close();
            });
        }


        $scope.duplicate = function (form) {
            if (!form || form.$invalid) {
                // self.showDisplayMsg('Invalid Form Submission');
                return;
            }

            switch (this.copyToAction) {
                case "Existing":
                    $scope.cloneReport.apply(this);
                    $scope.showCopyBtn = false;
                    //$scope.cloneReport();
                    break;
                case "New":
                    $scope.createReport.apply(this);
                    $scope.showCopyBtn = false;
                    break;
            }
        }

        $scope.createReport = function () {
            var dll = angular.copy(dataContainer.dll);
            var id = this.langLibrarySelectedFrom.libraryGUID;
            var companyGuid = dll.ownerCompanyGUID;
            var companyId = dll.ownerCompanyID;

            var newDllName = this.toCreateReport;
            var data = {
                libraryGUID: id,
                companyGUID: companyGuid,
                companyID: companyId,
                name: newDllName,
                requestType: "COPY"
            }
            var promise = DefaultLanguageLibraryAPI.post(data);
            promise.then(function (newDll) {
                dataContainer.dllList.push(newDll);
                self.showDisplayMsg('Language Library duplicated successfully', 'success');
                $modalInstance.close();
            });
        }


        $scope.cloneReport = function () {
            var langLibrarySelectedTo = this.langLibrarySelectedTo;
            var langLibrarySelectedFrom = this.langLibrarySelectedFrom;
            if (langLibrarySelectedTo.libraryGUID == langLibrarySelectedFrom.libraryGUID) {
                this.duplicateError = "Copy from and copy to can't be same. Please select two different language library.";
                return;
            }

            /*if(this.isCopyOnlySection){
                var section = this.sectionSelected;
                // only copy language for selected section
            }*/

            //var dll = angular.copy(dataContainer.dll);
            var id = langLibrarySelectedTo.libraryGUID;
            var data = {
                libraryGUID: langLibrarySelectedFrom.libraryGUID

            }
            var promise = DefaultLanguageLibraryAPI.postCopyFromLibrary(id, data);
            promise.then(function (newDll) {
                // retrieve languge for selected library again
                // service response only sends partial language set
                var libraryId = self.languageLibrarySelected.libraryGUID;
                getLanguageForLibrary(libraryId);

                self.showDisplayMsg('Language Library duplicated successfully', 'success');
                $modalInstance.close();
            });
        }
        $scope.setTemplateAsDefault = function () {
            var dll = angular.copy(dataContainer.dll);
            var id = dll.libraryGUID;
            var selectedTemplateguId = dataContainer.selectedTemplateId.templateGUID;
            var selectedTemplateId = dataContainer.selectedTemplateId.templateID; //templateGUID
            dll.defaultTemplateID = selectedTemplateId;
            dll.defaultTemplateGUID = selectedTemplateguId;
            var promise = DefaultLanguageLibraryAPI.update(id, dll)
            promise.then(function (result) {
                dataContainer.dll.defaultTemplateID = selectedTemplateId;
                $scope.setTemplateComplete = true;
                self.showDisplayMsg('Selected template is successfully saved as default structure for the library.', 'success');
                $modalInstance.close();
            });
        }

        $scope.CancelDelete = function () {

            $modalInstance.close();
        }

    }




}]);
angular.module('DefaultLanguageLibrary').service('DefaultLanguageLibraryAPI', ['APIFactory', 'DefaultLanguageLibraryAPIUrlCollection', 'BASEURL', function (APIFactory, UrlColl, BASEURL) {

    var self = this;


    this.getPDFURL = function (libraryID) {
        var url = BASEURL.DLLLIB + UrlColl.GETAPI_DLLPDF;
        var queryParams = {
            libraryID: libraryID,
            outputType: 'pdf'
        }
        return APIFactory.get(url, queryParams);
    }

    this.getDLLCompanyList = function () {
        var url = BASEURL.DLL_SHARED + UrlColl.GETAPI_DLLCOMPANYLIST;

        return APIFactory.get(url);
    };

    this.getDLLCompanyListByUser = function (userGUID) {
        var url = BASEURL.DLL_SHARED + UrlColl.GETAPI_DLLCOMPANYLISTBYUSER;
        var queryParams = {
            userGuid: userGUID
        }
        return APIFactory.get(url, queryParams);
    };

    this.getDLLList = function (companyId) {
        var url = BASEURL.DLLCOMPLIB + UrlColl.GETAPI_DLLLIST;
        var queryParams = {
            companyID: companyId
        }
        return APIFactory.get(url, queryParams);
    };

    this.update = function (id, dll) {
        var url = BASEURL.DLLLIB + UrlColl.PUTAPI;
        var queryParams = {
            libraryID: id
        }
        var putData = {
            library: dll
        }
        return APIFactory.put(url, putData, queryParams).then(function (dll) {
            return dll.library;
        });
    };

    this.delete = function (id) {
        var url = BASEURL.DLLLIB + UrlColl.DELETEAPI;
        var queryParams = {
            libraryID: id
        }

        return APIFactory.delete(url, null, queryParams);
    };

    this.unlinkLibrary = function (data, libraryID, sectionGUID) {
        var url = BASEURL.DLLLIB + UrlColl.POSTAPI_UNLINKLIBRARY;
        var queryParams = {
            libraryID: libraryID,
            sectionGUID: sectionGUID
        }
        var postData = data;
        return APIFactory.put(url, postData, queryParams).then(function (response) {
            return response.library;
        });
    };
    this.unlinkCompleteLibrary = function (data, libraryID) {
        var url = BASEURL.DLLLIB + UrlColl.POSTAPI_UNLINKCOMPLETELIBRARY;
        var queryParams = {
            libraryID: libraryID
        }
        var postData = data;
        return APIFactory.put(url, postData, queryParams).then(function (response) {
            return response.library;
        });
    };

    this.post = function (data) {
        var url = BASEURL.DLLLIB + UrlColl.POSTAPI;

        var postData = data;
        return APIFactory.post(url, postData).then(function (response) {
            return response.library;
        });
    };

    this.linkLibrary = function (data) {
        var url = BASEURL.DLLLIB + UrlColl.POSTAPI_LINKLIBRARY;
        return APIFactory.post(url, data).then(function (result) {
            return result.library;
        });
    };


    this.postLanguage = function (libraryId, data) {
        var url = BASEURL.DLLLIB + UrlColl.POSTAPI_LANGUAGE;
        var queryParams = {
            libraryID: libraryId
        }
        var postData = {
            languages: data
        };
        return APIFactory.post(url, postData, queryParams).then(function (response) {
            return response.languageList;
        });
    };

    this.deleteLanguage = function (libraryId) {
        var url = BASEURL.DLLLIB + UrlColl.DELETEAPI_LANGUAGE;
        var queryParams = {
            libraryID: libraryId
        }

        return APIFactory.delete(url, null, queryParams);
    };

    this.getLanguageBySection = function (libraryId, sectionId) {
        var url = BASEURL.DLLLIB + UrlColl.GETAPI_LANGUAGE_BYSECTION;
        var queryParams = {
            libraryID: libraryId,
            sectionID: sectionId
        }
        return APIFactory.get(url, queryParams).then(function (response) {
            return response.language;
        });
    };
    this.deleteLanguageBySection = function (libraryId, sectionId) {
        var url = BASEURL.DLLLIB + UrlColl.DELETEAPI_LANGUAGE_BYSECTION;
        var params = {
            libraryID: libraryId,
            sectionID: sectionId
        };

        return APIFactory.delete(url, null, params);
    };

    this.getLanguageForAllSections = function (libraryId) {
        var url = BASEURL.DLLLIB + UrlColl.GETAPI_LANGUAGE_ALLSECTIONS;
        var queryParams = {
            libraryID: libraryId,
            outputType: ""
        }
        return APIFactory.get(url, queryParams).then(function (response) {
            return response.language;
        });
    };
    this.postCopyFromLibrary = function (libraryId, data) {
        var url = BASEURL.DLLLIB + UrlColl.POSTAPI_LANGUAGE;
        var queryParams = {
            libraryID: libraryId
        }
        var postData = {
            copyFromLibrary: data
        };
        return APIFactory.post(url, postData, queryParams).then(function (response) {
            return response.language;
        });
    };

    this.putLanguageItem = function (libId, langId, language) {
        var url = BASEURL.DLLLIB + UrlColl.PUTTAPI_LANGUAGEITEM;
        var queryParams = {
            libraryID: libId,
            languageID: langId
        }
        var putData = {
            language: language
        }
        return APIFactory.put(url, putData, queryParams).then(function (dll) {
            return dll.library;
        });
    };

    this.putLanguageItemsReorder = function (libId, sectionID, languages) {
        var url = BASEURL.DLLLIB + UrlColl.PUTTAPI_LANGUAGESITEMREORDER;
        var queryParams = {
            libraryID: libId
        }
        var putData = {
            sectionGUID: sectionID,
            languages: languages
        }
        return APIFactory.put(url, putData, queryParams).then(function (dll) {
            return dll.library;
        });
    };
    this.putLanguage = function (libId, langId, language) {
        var url = BASEURL.DLLLIB + UrlColl.PUTAPI_LANGUAGE;
        var queryParams = {
            libraryID: libId,
            languageID: langId
        }
        var putData = {
            language: language
        }
        return APIFactory.put(url, putData, queryParams).then(function (dll) {
            return dll.library;
        });
    };
    this.deleteLanguageItem = function (libraryId, languageId) {
        var url = BASEURL.DLLLIB + UrlColl.DELETEAPI_LANGUAGEITEM;
        var queryParams = {
            libraryID: libraryId,
            languageID: languageId
        }

        return APIFactory.delete(url, null, queryParams);
    };

    this.getTemplate = function (templateId) {
        var url = BASEURL.REPORTTEMPLATES_TEMPLATES + UrlColl.GETAPI_TEMPLATESECTIONS;
        var queryParams = {
            templateID: templateId
        }
        return APIFactory.get(url, queryParams).then(function (data) {
            return data.template;
        });
    };


}]);;
angular.module('DefaultLanguageLibrary').constant('DefaultLanguageLibraryAPIUrlCollection', {
    GETAPI_DLLPDF: '{libraryID}/language?outputType={outputType}',




    GETAPI_DLLLIST: '{companyID}',

    GETAPI_DLLCOMPANYLIST: 'companies/',
    GETAPI_DLLCOMPANYLISTBYUSER: 'users/{userGuid}',

    PUTAPI: '{libraryID}',


    DELETEAPI: '{libraryID}',


    POSTAPI: '',

    POSTAPI_UNLINKLIBRARY: "{libraryID}/{sectionGUID}",
    POSTAPI_UNLINKCOMPLETELIBRARY: "{libraryID}",

    DELETEAPI_LANGUAGE: '{libraryID}/language/',


    GETAPI_LANGUAGE_ALLSECTIONS: '{libraryID}/language?outputType={outputType}',


    POSTAPI_LANGUAGE: '{libraryID}/language',


    PUTTAPI_LANGUAGEITEM: '{libraryID}/language/{languageID}',


    PUTTAPI_LANGUAGESITEMREORDER: '{libraryID}/language',


    GETAPI_LANGUAGE_BYSECTION: '{libraryID}/language?sectionGUID={sectionID}',




    DELETEAPI_LANGUAGE_BYSECTION: "{libraryID}/language/?sectionGUID={sectionID}",

    POSTAPI_LINKLIBRARY: "",


    POSTAPI_COPYFROMLANGUAGE: '{libraryID}/language',


    PUTAPI_LANGUAGE: '{libraryID}/language/{languageID}',


    DELETEAPI_LANGUAGEITEM: '{libraryID}/language/{languageID}',


    GETAPI_TEMPLATESECTIONS: '{templateID}/sections',

});;
angular.module('ParcelUI').constant('appBridgeConstants', {
    IS_BRIDGE_LINKED: true,
    APP_BRIDGE: "http://refactorbridgeqa.parcelplatform.com",
    companyid: 1218,
    officeid: 1145,
    userid: 17905 //Mike Ewrse
});;
angular.module('ParcelUI').controller('appBridgeLandingPageController', ['$scope', '$timeout', '$filter', '$compile', 'appBridgeConstants', 'BASEURL', function ($scope, $timeout, $filter, $compile, appBridgeConstants, BASEURL) {
    self = this;

    self.refactorBridge = appBridgeConstants.IS_BRIDGE_LINKED;
    self.filter_noOfDays = "";
    self.filter_endDate = "";
    self.appBridgeStatusFilter = "ALL";
    self.targetArr = [];

    self.appBridgeFilterByStatus = function () {
        $scope.appBridgeDataTable.ajax.url(BASEURL.APP_BRIDGE + "/appbridge/projects/" + appBridgeConstants.userid + "?itemstatus=" + self.appBridgeStatusFilter + "&numofdays=" + self.filter_noOfDays + "&enddate=" + self.filter_endDate).load();
    }

    init();

    function init() {
        initAppBridgeDataTable();
        initializeDateRangeFilter();
    }

    function initAppBridgeDataTable() {
        $(document).ready(function () {
            var appBridgeColDefs = [];
            var appBridgeColDefPre = [
                {
                    "orderIndex": 0,
                    "title": "R",
                    "data": null,
                    "sortable": false,
                    "render": function (data, type, full) {
                        var html = '<a title="Enter this report or project" class = "btn btn-warning btn-xs" target="_blank" href="' + appBridgeConstants.APP_BRIDGE + '/refactorBridge/sessionInjector.php?userId=' + appBridgeConstants.userid + '&userOid=' + appBridgeConstants.officeid + '&userCid=' + appBridgeConstants.companyid + '&redirectTo=reportAuth&siteId=' + data.reportGuid + '"><span class="fa fa-file-text fa-inverse"></span></a>';
                        return html;
                    }
                },
                {
                    "orderIndex": 1,
                    "title": "P",
                    "data": null,
                    "sortable": false,
                    "class": "projectDashboardIcon",

                    "render": function (data, type, full) {
                        var html = '<a title="Enter this project" class = "btn btn-warning btn-xs" target="_blank" href="' + appBridgeConstants.APP_BRIDGE + '/refactorBridge/sessionInjector.php?userId=' + appBridgeConstants.userid + '&userOid=' + appBridgeConstants.officeid + '&userCid=' + appBridgeConstants.companyid + '&redirectTo=projectDash&pId=' + data.projectGuid + '"><span class= "glyphicon glyphicon-duplicate"></span></a>';
                        return html;
                    }
                        },
                {
                    "orderIndex": 2,
                    "title": "Project Name",
                    "data": "projectName",
                    "visible": true
                        },
                {
                    "orderIndex": 3,
                    "title": "Client Prop.#",
                    "data": "propertyNumber",
                    "visible": true
                        },
                {

                    "orderIndex": 4,
                    "title": "Site Name",
                    "data": "siteName",
                    "visible": true
                        },

                {
                    "orderIndex": 5,
                    "title": "Address",
                    "data": "address",
                    "visible": true
                        },
                {
                    "orderIndex": 6,
                    "title": "City",
                    "data": "city",
                    "visible": true
                        },
                {
                    "orderIndex": 7,
                    "title": "State",
                    "data": "state",
                    "visible": true
                        },
                {
                    "orderIndex": 8,
                    "title": "Report Type",
                    "data": "reportTypeName",
                    "visible": true
                        },
                {
                    "orderIndex": 9,
                    "title": "Creation Date",
                    "data": "creationDateTime",
                    "visible": true,
                    "render": function (data, type, full) {
                        var creationDate = new Date(data);
                        return (creationDate.getMonth() + 1) + '/' + creationDate.getDate() + '/' + creationDate.getFullYear();
                    }
                        },
                {
                    "orderIndex": 10,
                    "title": "Site ID",
                    "data": "siteGuid",
                    "visible": true
                        }
                    ]

            var appBridgeSortedCols = $filter('orderBy')(appBridgeColDefPre, "orderIndex");
            angular.forEach(appBridgeSortedCols, function (col, index) {
                var def = angular.copy(col);
                def.targets = index;
                def.name = def.data;
                self.targetArr.push(index);
                def.sortable = ("sortable" in def) ? def.sortable : true;
                delete def.orderIndex;
                appBridgeColDefs.push(def);
            });

            $scope.appBridgeDataTable = $('#appBridgeDataTable').DataTable({
                "dom": '<"toolbar pull-left col-md-4 col-xs-12 btn-group"B><"col-md-4 col-xs-12 text-right"p><"col-md-4 col-xs-12 text-right"i>r<"dashboard-table pull-left"t> ',
                "processing": true,
                "serverSide": true,
                "ajax": {
                    "url": BASEURL.APP_BRIDGE + "/appbridge/projects/" + appBridgeConstants.userid + "?itemstatus=&numofdays=&enddate=",
                    "type": "PUT"
                },
                "responsive": true,
                "orderCellsTop": true,
                "bInfo": true,
                "iDisplayLength": 100,
                "autoWidth": false,
                "initComplete": function () {
                    $('#appBridgeDataTable tbody tr').each(function () {
                        $(this).find('td:eq(0)').css('white-space', 'nowrap');
                    });
                    $('.csvHtml5').parents('a').attr('title', 'Export to CSV');
                    insertFilterInputHTML();
                },
                "language": {
                    "lengthMenu": "Per page: _MENU_",
                    "infoFiltered": "",
                    "paginate": {
                        "previous": '<i class="fa fa-caret-left" ></i>',
                        "next": '<i class="fa fa-caret-right" ></i>',
                    },
                },
                "stateSave": true,
                "stateLoadParams": function (settings, data) {
                    for (var i = 0; i < data.columns.length; i++) {
                        data.columns[i].search.search = "";
                    }
                    data.search.search = "";
                },
                "buttons": [
                    {
                        extend: 'csvHtml5',
                        text: '<i class="csvHtml5 fa fa-clipboard fa-lg"></i>'
                    }
                ],
                "order": [[9, "desc"]],
                "colReorder": true,
                "columnDefs": appBridgeColDefs
            });

            $.fn.dataTable.ext.pager.numbers_length = 6;

            $('#appBridgeDataTable tbody').on('click', 'tr', function () {
                $scope.appBridgeDataTable.$('tr.row-selected').removeClass('row-selected');
                $(this).addClass('row-selected');
            });
        });
    }

    function insertFilterInputHTML() {
        $('#appBridgeDataTable thead tr#filterrow th').each(function () {
            var title = $('#appBridgeDataTable thead th').eq($(this).index()).text();
            if (title != "" && title != "R" && title != "P") {
                var elemHtml = '<form class="form-inline" > <div class="input-group filterinput"><input type="text" class="form-control input-xs"  ng-click="stopPropagation($event);" app-bridge-column-filter = ' + title.split(" ").join("") + ' /><span title="Clear Search Value" class="input-group-addon input-xs pointer" ng-click="appBridgeClearFilter($event);">x</span></div> </form>';
                var compiledHtml = $compile(elemHtml)($scope);
                $(this).html(compiledHtml);
            }
        });
    }

    function getDateDiffInDays(sdate, edate) {
        var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
        var startDate = sdate instanceof Date ? sdate : new Date(sdate);
        var endDate = edate instanceof Date ? edate : new Date(edate);;
        return (Math.round(Math.abs((endDate.getTime() - startDate.getTime()) / (oneDay))) - 1);
    }

    function initializeDateRangeFilter() {
        $(function () {
            function cb(start, end, title) {
                if (title && title != "Custom Range") {
                    $('#appBridgeReportRange span').html(title);
                } else {
                    $('#appBridgeReportRange span').html(start.format('MM/DD/YYYY') + ' - ' + end.format('MM/DD/YYYY'));
                }
            }

            $('#appBridgeReportRange').daterangepicker({
                "showDropdowns": true,
                "opens": "right",
                ranges: {
                    'Last 90 Days': [moment().subtract(90, 'days'), moment(), 'Last 90 Days'],
                    'This Year': [moment().startOf('year'), moment(), 'This Year'],
                    'Last Year': [moment().subtract(1, 'year').startOf('year'), moment().subtract(1, 'year').endOf('year'), 'Last Year'],
                    'All Time': [moment().subtract(10, 'year'), moment(), 'All Time']
                },
                startDate: moment().subtract(90, 'days'),
                endDate: moment()
            }, cb);

            // to apply default filter
            $timeout(function () {
                var startMoment = moment().subtract(90, 'days');
                var endMoment = moment();
                cb(startMoment, endMoment, 'Last 90 Days');
                $("input[name=daterangepicker_start]").val(startMoment.format('MMMM D, YYYY'));
                $("input[name=daterangepicker_end]").val(endMoment.format('MMMM D, YYYY'));
                self.filter_noOfDays = 90;
                $scope.appBridgeDataTable.ajax.url(BASEURL.APP_BRIDGE + "/appbridge/projects/" + appBridgeConstants.userid + "?itemstatus=" + self.appBridgeStatusFilter + "&numofdays=" + self.filter_noOfDays + "&enddate=" + self.filter_endDate).load();
            });

            $('#appBridgeReportRange').on('apply.daterangepicker', function (ev, picker) {
                switch (picker.chosenLabel) {
                    case "Last 90 Days":
                        self.filter_noOfDays = 90;
                        self.filter_endDate = "";
                        break;
                    case "This Year":
                        self.filter_noOfDays = getDateDiffInDays(picker.startDate._d, new Date());
                        self.filter_endDate = "";
                        break;
                    case "Last Year":
                        self.filter_noOfDays = 365;
                        self.filter_endDate = $filter('date')(picker.endDate._d, 'yyyy-MM-dd');
                        break;
                    case "All Time":
                        self.filter_noOfDays = 0;
                        self.filter_endDate = "";
                        break;
                    case "Custom Range":
                        self.filter_noOfDays = getDateDiffInDays(picker.startDate._d, picker.endDate._d);
                        self.filter_endDate = $filter('date')(picker.endDate._d, 'yyyy-MM-dd');
                }

                $scope.appBridgeDataTable.ajax.url(BASEURL.APP_BRIDGE + "/appbridge/projects/" + appBridgeConstants.userid + "?itemstatus=" + self.appBridgeStatusFilter + "&numofdays=" + self.filter_noOfDays + "&enddate=" + self.filter_endDate).load();
            });
        });
    }

    $scope.appBridgeClearFilter = function (evt) {
        var elem;
        if (event.srcElement) elem = event.srcElement;
        else if (event.target) elem = event.target;

        $(elem).parent().children('input').val("");
        $scope.appBridgeDataTable
            .column($(elem).parents('th').index() + ':visible')
            .search("")
            .draw();
        $scope.appBridgeDataTable.state.save();
    }
}]);;
angular.module('ParcelUI').directive('appBridgeColumnFilter', [function () {
    return {
        restrict: 'A',

        link: function (scope, elem, attr) {

            if (attr.textChange == "CreationDate") {
                $(elem).attr("readOnly", true);

                elem.datepicker({
                        format: "m/d/yyyy",
                        autoclose: true,
                        clearBtn: true,
                        orientation: 'left'
                    }).change(dateChanged)
                    .on('changeDate', dateChanged);

                function dateChanged(ev) {
                    scope.dateFilterRangeSearch = true;
                    scope.appBridgeDataTable
                        .column($(this).parents('th').index() + ':visible')
                        .search(this.value)
                        .draw();
                    scope.dataTable.state.save();
                }
                elem.bind('click', function () {
                    $(elem).datepicker('show');
                })
            } else {
                elem.bind('keyup', function () {
                    if ($(this).attr("type") == "text" && attr.textChange != "CreationDate") {
                        scope.appBridgeDataTable
                            .column($(this).parents('th').index() + ':visible')
                            .search(this.value)
                            .draw();
                        scope.dataTable.state.save();

                    }
                });
            }
        }
    }
}]);;
angular.module('ParcelUI').controller('DashBoardCtrl', ['$timeout', '$scope', '$compile',
    'DashboardAPI', '$filter', '$state', '$location', 'viewedRecentReports', 'BASEURL', 'projectDashboardOperations',
    '$q', '$interval', 'appBridgeConstants',
    function ($timeout, $scope, $compile, DashboardAPI, $filter,
        $state, $location, viewedRecentReports, BASEURL, projectDashboardOperations, $q, $interval, appBridgeConstants) {


        var self = this;
        var scope = $scope;
        self.recentViewReports = viewedRecentReports;
        self.isRefactorBridgeLinked = appBridgeConstants.IS_BRIDGE_LINKED;

        $scope.$on('load-datatable', function () {
            init();
        });

        function init() {
            $('body').addClass('body-padding');
            self.accountGuid = BASEURL.accountGUID;
            self.companyGuid = BASEURL.companyGUID;
            self.localStorageKey = "DataTable_LandingPageGrid";
            self.length;
            self.statusFilter = "";
            getDataForDashboard();

        }


        function getDataForDashboard() {
            $('.goto-project').prop('disabled', true);
            $scope.delay = 0;
            $scope.minDuration = 0;
            $scope.message = 'Please Wait...';
            $scope.backdrop = true;
            $scope.promise = DashboardAPI.getReports(BASEURL.accountGUID).then(function (response) {
                self.dashboardData = response;
                fillDataTable();
                showSelect2();
                initializeDateRangeFilter();

            });
        }

        self.getClass = function (str) {
            var length = self.getTotal();
            if (str == "panel") {
                if (length <= 6)
                    return 'maximized';
                else
                    return 'default';
            } else {
                if (length <= 6)
                    return 'text-muted';
                else
                    return 'pointer';
            }


        }
        self.getTotal = function () {
            var total = 0;
            if (self.recentViewReports) {

                angular.forEach(self.recentViewReports.activities, function (object) {
                    total = total + object.activityItems.length;

                });
            }

            return total;
        }

        self.filterByStatus = function () {
            var filteredResultSet = [];
            $("#landingpageTable_processing").css('visibility', 'visible');
            switch (self.statusFilter) {

                case "0":
                    filteredResultSet = $filter('filter')(self.dashboardData.data, {
                        reportStatus: "!Final"
                    }, true);
                    break;
                case "1":
                    filteredResultSet = $filter('filter')(self.dashboardData.data, {
                        reportStatus: "Final"
                    }, true);
                    break;
                default:
                    filteredResultSet = angular.copy(self.dashboardData.data);

            }

            $scope.dataTable.clear().draw();
            $scope.dataTable.rows.add(filteredResultSet);
            $scope.dataTable.draw();
        }

        self.goToProject = function () {
            if (self.selectedProject && self.selectedProject != "") {
                $state.go('projectDashboard', {
                    projectGuid: self.selectedProject.projectGUID,
                    accountGuid: BASEURL.accountGUID,
                    companyGuid: BASEURL.companyGUID
                });
            }
        }

        self.targetArr = [];

        function fillDataTable() {
            $(document).ready(function () {

                var columnDefs = [];
                self.dashboardData.desc.columns = [
                    {
                        "orderIndex": 0,
                        "title": "R",
                        "data": null,
                        "sortable": false,
                        "render": function (data, type, full) {
                            return '<a title="Enter this report or project" class = "btn btn-warning btn-xs report-write-link" href="#/ReportAuthoring/Write?projectGuid=' + data.projectGuid + '&reportGuid=' + data.reportGuid + '"' + '><span class="fa fa-file-text fa-inverse"></span></a>';
                        }
                    },
                    {
                        "orderIndex": 1,
                        "title": "P",
                        "data": null,
                        "sortable": false,
                        "class": "projectDashboardIcon",

                        "render": function (data, type, full) {
                            return '<a title="Enter this project" class = "btn btn-warning btn-xs" href="#/projectDashboard?projectGuid=' + data.projectGuid + '&accountGuid=' + BASEURL.accountGUID + '&companyGuid=' + BASEURL.companyGUID + '"' + '><span class= "glyphicon glyphicon-duplicate"></span></a>';
                        }

                    },
                    {
                        "orderIndex": 2,
                        "title": "Project",
                        "data": "projectName",
                        "visible": true
                    },
                    {
                        "orderIndex": 3,
                        "title": "Client Prop.#",
                        "data": "propertyNumber",
                        "visible": true
                    },
                    {

                        "orderIndex": 4,
                        "title": "Site Name",
                        "data": "siteName",
                        "visible": true
                    },

                    {
                        "orderIndex": 5,
                        "title": "Address",
                        "data": "address",
                        "visible": true
                    },
                    {
                        "orderIndex": 6,
                        "title": "City",
                        "data": "city",
                        "visible": true
                    },
                    {
                        "orderIndex": 7,
                        "title": "State",
                        "data": "state",
                        "visible": true
                    },
                    {
                        "orderIndex": 8,
                        "title": "Report Type",
                        "data": "reportTypeName",
                        "visible": true
                    },
                    {
                        "orderIndex": 9,
                        "title": "Creation Date",
                        "data": "creationDateTime",
                        "visible": true,
                        "orderData": 11,
                        "render": function (data, type, full) {
                            var creationDate = new Date(parseFloat(data));
                            return (creationDate.getMonth() + 1) + '/' + creationDate.getDate() + '/' + creationDate.getFullYear();
                        }
                    },
                    {
                        "orderIndex": 10,
                        "title": "Site ID",
                        "data": "siteID",
                        "visible": true
                    },
                    {
                        "orderIndex": 11,
                        "title": "hidden field",
                        "data": "creationDateTime",
                        "visible": false
                    }
                ]
                self.sortedCols = $filter('orderBy')(self.dashboardData.desc.columns, "orderIndex");
                angular.forEach(self.sortedCols, function (col, index) {
                    var def = angular.copy(col);
                    def.targets = index;
                    def.name = def.data;
                    self.targetArr.push(index);
                    def.sortable = ("sortable" in def) ? def.sortable : true;
                    delete def.orderIndex;
                    columnDefs.push(def);
                });

                $('#landingpageTable')
                    .on('order.dt', function (e, settings, column, state) {
                        eventFired(e, settings, column, state);
                    })
                    .on('search.dt', function (e, settings, column, state) {
                        eventFired(e, settings, column, state);
                    })
                    .on('page.dt', function (e, settings, column, state) {
                        eventFired(e, settings, column, state);
                    })
                    .on('length.dt', function (e, settings, column, state) {
                        eventFired(e, settings, column, state);
                    })
                    .on('column-visibility.dt', function (e, settings, column, state) {

                        eventFired(e, settings, column, state);
                    })
                var eventFired = function (e, settings, column, state) {
                    $timeout(function () {
                        $('#landingpageTable tbody tr td').each(function () {
                            this.setAttribute('title', $(this).text());
                        });
                    });
                }

                $scope.dataTable = $('#landingpageTable').DataTable({

                    "dom": '<"toolbar pull-left col-md-4 col-xs-12 btn-group"B><"col-md-4 col-xs-12 text-right"p><"col-md-4 col-xs-12 text-right"i>r<"dashboard-table pull-left"t > ',
                    "processing": true,
                    "responsive": true,
                    "data": self.dashboardData.data,
                    "orderCellsTop": true,
                    "bInfo": true,
                    "iDisplayLength": 100,
                    "autoWidth": false,
                    "initComplete": function () {
                        $('#landingpageTable tbody tr').each(function () {
                            $(this).find('td:eq(0)').css('white-space', 'nowrap');

                        });
                        $('.csvHtml5').parents('a').attr('title', 'Export to CSV');
                        insertFilterInputHTML();
                    },
                    "language": {
                        "lengthMenu": "Per page: _MENU_",
                        "infoFiltered": "",
                        "paginate": {
                            "previous": '<i class="fa fa-caret-left" ></i>',
                            "next": '<i class="fa fa-caret-right" ></i>',
                        },
                    },
                    "stateSave": true,
                    "stateSaveCallback": function (settings, data) {
                        localStorage.setItem(self.localStorageKey, JSON.stringify(data));
                    },
                    "stateLoadCallback": function () {
                        return JSON.parse(localStorage.getItem(self.localStorageKey));
                    },
                    "stateLoadParams": function (settings, data) {
                        for (var i = 0; i < data.columns.length; i++) {
                            data.columns[i].search.search = "";
                        }
                        data.search.search = "";
                    },
                    "buttons": [{
                            extend: 'csvHtml5',
                            text: '<i class="csvHtml5 fa fa-clipboard fa-lg"></i>'
                    }
                    ],

                    "columnDefs": columnDefs,
                    "lengthMenu": [
                        [10, 25, 50, 100, 250, 500, -1],
                        [10, 25, 50, 100, 250, 500, "All"]
                    ],
                    "paging": true,
                    "ordering": true,
                    "info": false,
                    "filter": true,
                    "searching": true,
                    "order": [], //[[0, "asc"]],

                    "serverSide": false,
                    "colReorder": true

                });

                $("#landingpageTable_wrapper div.toolbar").prepend("<div class='btn-group pull-left'><div class='settings-button btn-group' aria-haspopup='true' aria-expanded='false' id='openOrdersSettingsButton' ng-click='dashboard.settings()' data-placement='right'><a id='column-setting' data-toggle='tooltip' data-placement='left' title='Choose Columns' items='dashboard.columns' class='column-settings pointer btn btn-default decoration-n'><span class='glyphicon glyphicon-new-window'></span> Columns</a> </div><button data-toggle='tooltip' data-placement='left' title='Reload Grid'  class='btn btn-md btn-default' ng-click='dashboard.reloadData()'><i class='fa fa-refresh'></i></button><button data-toggle='tooltip' data-placement='left' title='Clear Column Filters' class='btn btn-md btn-default' ng-click='dashboard.clearAllFilter()'>Clear</button></div>");
                $compile($("#landingpageTable_wrapper div.toolbar"))($scope)

                angular.element('.settings').popover({
                    html: true,
                    container: 'body',
                    trigger: 'manual',
                    title: 'Custom Range',
                    content: showContentDate(),
                    template: '<div id="settings-popover" class="popover popover-large"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>'
                });



                $('.settings').click(function (e) {
                    if ($('.settings').val() == 3)
                        $('.settings').popover('show');
                    else
                        $('.settings').popover('hide');
                });

                function showContentDate() {
                    var itemsTemplate = '<div class="row">' +
                        '<div class="col-md-6 col-xs-12 input-group date">' +
                        "<input id='minDate' type='text' class='form-control datePicker' />" +
                        '</div>' +
                        '<div class="col-md-6 col-xs-12 input-group date">' +
                        "<input id='maxDate' type='text' class='form-control datePicker' />" +
                        '</div>' +
                        '</div>  </br>' +
                        '<div class="pull-right"><button class="btn-sm btn" ng-click="dashboard.submitValues(date)">go</button><button close-popover class="btn-sm btn" ng-click="dashboard.closeDateSettingsPopup()">Close</button>';
                    return $compile(itemsTemplate)($scope);
                }

                $('body').on('click', 'input.datePicker', function (event) {
                    $(this).datepicker({
                        showOn: 'focus',
                        yearRange: '1900:+0',
                        changeMonth: true,
                        changeYear: true
                    }).focus();
                });

                angular.element('.settings-button').popover({
                    html: true,
                    container: 'body',
                    trigger: 'manual',
                    title: 'Select Columns',
                    content: showContent(),
                    template: '<div id="settings-popover" class="popover popover-large column-popover"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>'
                });

                $('.column-settings').click(function (e) {

                    e.preventDefault();
                    var tab = $(this).attr('data-tab');
                    $('.settings-button').popover('show');

                });
                $('input.global_filter').on('keyup click', function () {
                    filterGlobal();
                });

                function showContent() {

                    var itemsTemplate = '<div class="row bottom-margin-sm list-group" ui-sortable ng-model="dashboard.columns">' +
                        '<div class="col-md-12 col-xs-12 list-group-item cursor-move padding-15" ng-repeat="item in dashboard.columns" ng-hide="$index==0 || $index==1 || $index == 11">' +
                        '<div class="checkbox margin-5"  ><i class="fa fa-arrows-v cursor-move"></i>&nbsp;&nbsp;<label><input ng-model="item.visible" class="column-settings-checkbox" columnindex = "{{item.index}}"' +
                        'type="checkbox"></input> {{item.name}} </label> </div>' +
                        '</div> </div> ' +
                        '<div class="text-right bottom-margin-sm"><button close-popover class="btn-sm btn btn-default" ng-click="dashboard.closeSettingsPopup()">Close</button><button close-popover class="btn-sm marginLeft btn btn-primary" ng-click="dashboard.saveSettingsPopup()">Save</button>';

                    return $compile(itemsTemplate)($scope);
                }

                // Dashboard row bouble click event
                $('#landingpageTable tbody').on('dblclick', 'tr', function () {
                    //$state.go('ReportAuthoring.Write');
                    window.location.assign(this.getElementsByClassName('report-write-link')[0].href);
                });

                // Highlight row on row single click
                $('#landingpageTable tbody').on('click', 'tr', function () {
                    $scope.dataTable.$('tr.row-selected').removeClass('row-selected');
                    $(this).addClass('row-selected');
                });
            });
        }

        function insertFilterInputHTML() {
            $('#landingpageTable thead tr#filterrow th').each(function () {
                var title = $('#landingpageTable thead th').eq($(this).index()).text();
                if (title != "" && title != "R" && title != "P") {
                    var elemHtml = '<form class="form-inline" > <div class="input-group filterinput"><input type="text"  class="form-control input-xs "  ng-click="stopPropagation($event);" text-change = ' + title.split(" ").join("") + ' /><span title="Clear Search Value" class="input-group-addon input-xs pointer" ng-click="clearFilter($event);">x</span></div> </form>';
                    var compiledHtml = $compile(elemHtml)(scope);
                    $(this).html(compiledHtml);
                }
            });
        }

        function initializeDateRangeFilter() {
            $(function () {
                function cb(start, end, title) {
                    if (title && title != "Custom Range") {
                        $('#reportrange span').html(title);
                    } else {
                        $('#reportrange span').html(start.format('MM/DD/YYYY') + ' - ' + end.format('MM/DD/YYYY'));
                    }
                }

                $('#reportrange').daterangepicker({
                    "showDropdowns": true,
                    "opens": "right",
                    "autoApply": true,
                    "ranges": {
                        'Last 90 Days': [moment().subtract(90, 'days'), moment(), 'Last 90 Days'],
                        'This Year': [moment().startOf('year'), moment(), 'This Year'],
                        'Last Year': [moment().subtract(1, 'year').startOf('year'), moment().subtract(1, 'year').endOf('year'), 'Last Year'],
                        'All Time': [moment().subtract(10, 'year'), moment(), 'All Time']
                    },
                    "startDate": moment().subtract(90, 'days'),
                    "endDate": moment()
                }, cb);

                // to apply default filter
                $timeout(function () {
                    var startMoment = moment().subtract(90, 'days');
                    var endMoment = moment();
                    cb(startMoment, endMoment, 'Last 90 Days');
                    $("input[name=daterangepicker_start]").val(startMoment.format('MMMM D, YYYY'));
                    $("input[name=daterangepicker_end]").val(endMoment.format('MMMM D, YYYY'));
                    $scope.dataTable.draw();
                });

                /*$('#reportrange').on('apply.daterangepicker', function (ev, picker) {
                    self.dateRange_start = picker.startDate._d;
                    self.dateRange_end = picker.endDate._d;
                    $scope.dataTable.draw();
                });*/

                $('#reportrange').on('hide.daterangepicker', function (ev, picker) {
                    self.dateRange_start = picker.startDate._d;
                    self.dateRange_end = picker.endDate._d;
                    if (picker.chosenLabel == "Custom Range") {
                        self.dateRange_end = moment(picker.endDate._d).subtract(1, 'day')._d;
                    }
                    $scope.dataTable.draw();
                });
            });
        }

        this.submitValues = function (date) {
            $scope.minVal = new Date('10/21/2014');
            $scope.maxVal = new Date('10/21/2015');

            $scope.dataTable.draw();
            $scope.dataTable.state.save();
        }

        this.saveSettings = function () {
            $scope.dataTable.state.save();
        }

        this.saveSettingsPopup = function () {
            var columnDefs = angular.copy(self.dashboardData.desc.columns);
            angular.forEach(this.columns, function (col, index) {
                var originalIndex = col.index;
                var result = columnDefs.filter(function (item) {
                    return item.data == col.field;
                });
                if (result && result.length) {
                    var first = result[0];
                    first.orderIndex = index;
                    first.visible = col.visible;
                }
            });
            applyPopupSettings();
        }

        function applyPopupSettings() {
            var reorder = [];
            angular.forEach(self.columns, function (item) {
                var column = $scope.dataTable.column(item.index);
                column.visible(item.visible);
                reorder.push(item.index);
            });

            $scope.dataTable.colReorder.order(reorder);
            $('.settings-button').popover('hide');
            insertFilterInputHTML();
        }

        this.closeSettingsPopup = function () {
            $('.settings-button').popover('hide');
        }

        this.closeDateSettingsPopup = function () {
            $('.settings').popover('hide');
        }


        this.hideshowColumns = function (item) {
            console.log("dashboard items: " + item);
            var column = $scope.dataTable.column(item.index);
            // toggel visibility
            column.visible(!column.visible());
        }


        this.settings = function () {
            this.columns = [];
            for (var i = 0; i < $scope.dataTable.context[0].aoColumns.length; i++) {
                this.obj = {};
                this.obj.name = $scope.dataTable.context[0].aoColumns[i].title;
                this.obj.field = $scope.dataTable.context[0].aoColumns[i].data;
                this.obj.index = i;
                this.obj.visible = $scope.dataTable.context[0].aoColumns[i].bVisible;
                if (this.obj.name != "R" && this.obj.name != "P") {
                    this.obj.isVisible = true;
                    // this.columns.push(this.obj);
                }
                this.columns.push(this.obj);
            }
        }

        $scope.stopPropagation = function (evt) {
            if (evt.stopPropagation !== undefined) {
                evt.stopPropagation();
            } else {
                evt.cancelBubble = true;
            }
        }

        function fnResetAllFilters(oTable) {
            var oSettings = oTable.settings();
            for (iCol = 0; iCol < oSettings[0].aoPreSearchCols.length; iCol++) {
                oSettings[0].aoPreSearchCols[iCol].sSearch = '';
            }
            oSettings[0].oPreviousSearch.sSearch = '';
            oTable.draw();
        }

        this.clearAllFilter = function () {
            clearFilterTextFronLS();
            $('#landingpageTable thead tr#filterrow th :input').val("");
            fnResetAllFilters($scope.dataTable);
        }

        function clearFilterTextFronLS() {
            var key = self.localStorageKey;
            var rawVal = localStorage.getItem(key);
            var json = JSON.parse(rawVal);
            angular.forEach(json.columns, function (col) {
                if (col && col.search && col.search.search) {
                    col.search.search = "";
                }
            });
            localStorage.setItem(self.localStorageKey, JSON.stringify(json));
        }

        function getDashboardData_withPromise(accountGuid) {
            return DashboardAPI.getReports(accountGuid).then(function (dashboard) {
                return dashboard;
            });
        }

        self.reloadData = function () {
            $scope.delay = 0;
            $scope.minDuration = 0;
            $scope.message = 'Please Wait...';
            $scope.backdrop = true;
            self.clearAllFilter();
            $scope.promise = DashboardAPI.getReports(BASEURL.accountGUID).then(function (response) {
                self.dashboardData = response;
                $scope.dataTable.draw();
            });
        }

        $scope.displayProject = function (result) {
            if (JSON.stringify(result) != "{}") {
                self.selectedProject = result;
                $('.goto-project').prop('disabled', false);
                $('.select2-chosen').text(result.name);
                $('.select2-search-choice-close').css("display", "block");
                scope.dataTable
                    .column('projectName:name')
                    .search(result.name)
                    .draw();
                scope.dataTable.state.save();
                scope.isProjectSelected = true;

            } else {
                $('.goto-project').prop('disabled', true);

                $('.select2-chosen').text("Quick select a project");
                $('.select2-search-choice-close').css("display", "none");
            }
        }


        $scope.projectListProvider = {
            readData: function (term, page, pageSize) {
                if (term != undefined) {
                    if (self.readDataCount == 0) {
                        projectDashboardOperations.setTerm(term);
                        self.readDataCount = self.readDataCount + 1;
                        self.readDataPage = page - 1;
                    } else {
                        if ($('.select2-input').val() == projectDashboardOperations.getTerm()) {
                            self.readDataPage = self.readDataPage + pageSize;
                        } else {
                            projectDashboardOperations.setTerm(term);
                            self.readDataPage = page - 1;
                        }
                    }
                }
                var deferred = $q.defer();
                projectDashboardOperations.getProjectSearchData({
                        limit: pageSize,
                        offset: (page * pageSize) - pageSize,
                        projectName: term

                    })
                    .then(function (result) {
                        deferred.resolve(result.projects);
                    }, function (reason) {

                        deferred.reject(reason);
                    });
                return deferred.promise;
            }
        }

        $scope.clearFilter = function (evt) {
            var elem;
            if (event.srcElement) elem = event.srcElement;
            else if (event.target) elem = event.target;

            $(elem).parent().children('input').val("");
            scope.dataTable
                .column($(elem).parents('th').index() + ':visible')
                .search("")
                .draw();
            scope.dataTable.state.save();
        }

        $scope.projectSearchGenerateMarkup = function (result, element, search) {
            var n = result.name.toLowerCase().indexOf(search.term.toLowerCase());
            var matchText = result.name.substring(n, n + search.term.length)
            var markup = "";
            if (n >= 0) {
                markup += "<div>" + result.name.substring(0, n) + "<u>" + matchText + "</u>" + result.name.substring(n + search.term.length, result.name.length) + "</div>";
                markup += "</div>";
            } else {
                markup += "<div>" + result.name + "</div>";
            }
            return markup;
        }

        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            if (settings.sTableId == "landingpageTable") {
                if (!self.dateRange_start || !self.dateRange_end) return true;

                var minVal = self.dateRange_start
                var maxVal = self.dateRange_end

                if (minVal == 'Invalid Date' || maxVal == 'Invalid Date') {
                    return true;
                }
                var dataTable = $('#landingpageTable').DataTable();
                var index = dataTable.column('creationDateTime:name').index();
                var creationDateColIndex = dataTable.column("creationDateTime:name").index();
                var date = new Date(data[creationDateColIndex]);


                if (date >= minVal && date <= maxVal) {
                    return true;
                } else {

                    return false;
                }
            } else {
                return true;
            }
        });

        function larg() {
            var landingTablecolumns = $scope.dataTable.columns().nodes().length;
            for (checkCount = 1; checkCount <= landingTablecolumns; checkCount++) {
                if ($('.thHeader' + checkCount).css('display') == 'none') {
                    $('.headerFilter' + checkCount).hide();
                } else {
                    $('.headerFilter' + checkCount).show();
                }
            }
        }

        $('body').click(function (e) {
            var idClicked = e.target.id;
            if (idClicked != 'column-setting' && $(e.target).parents('.popover.in').length === 0 && $(e.target).parent().attr('id') != 'column-setting' && $(e.target).attr('class') != 'column-popover') {
                $('.column-popover').popover('hide');
            }
        });

        $interval(function () {
            if ($scope.dataTable) {
                larg();
            }
        }, 100);

        function showSelect2() {
            $('.select2-search-choice-close').on('click', function () {
                self.selectedProject = "";
                $('.goto-project').prop('disabled', true);
                $('.select2-search-choice-close').css("display", "none");
                scope.dataTable
                    .column('projectName:name')
                    .search('')
                    .draw();

                scope.dataTable.state.save();
            });
            self.showFilter = true;
        }
    }]);;
angular.module('ParcelUI').directive('cookiesFooter', ['$cookies', '$cookieStore', '$window', 'DashboardAPI', function ($cookies, $cookieStore, $window, DashboardAPI) {

    return {

        restrict: 'E',
        scope: {
            user: '=',
            code: '=',
            data: '='
        },
        templateUrl: 'app/modules/LandingPage/views/footer.html',




        link: function ($scope, element, attrs) {
            /*            $(window).scroll(function () {
                            if ($(this).scrollTop() === 0) {
                                $('#footerLP').hide();
                            } else {
                                $('#footerLP').show();
                                $('#footerLP').fadeIn();
                            }
                        });*/
            // $scope.user = cookiesData.header();

        },
        controller: function ($scope) {
            $scope.exampleCookie = $cookieStore.get('exampleCookie');
            console.log($scope.code);
            var iCalContent = '<form name="Response" method="post" action="http://wwwdev.collateral360.com:80/?code=c556e1f0-eacd-416f-9847-83a4e1924a7c&scope=cn">';



            extractCode(iCalContent);

            function extractCode(iCalContent) {
                var arr = iCalContent.match(/^<form name="Response" method="post" action="http:\/\/wwwdev.collateral360.com:80\/\?code=(.+)">/);
                console.log(arr[1]);
            }



        }
    };


}]);


angular.module('ParcelUI').directive('helpBtn', [function () {

    return {
        restrict: 'A',

        link: function (scope, elem, attr) {

            elem.bind('click', function () {

                scope.$apply(
                    scope.hidebtn = true
                );


                $(".needhelp-toggle").slideToggle({
                    direction: "top"
                });



            });

        }
    }


}]);


angular.module('ParcelUI').directive('helpPopup', ['$timeout', function ($timeout) {

    return {
        restrict: 'A',

        link: function (scope, elem, attr) {

            elem.bind('click', function () {
                console.log("viuer");
                scope.$apply(
                    $timeout(function () {
                        scope.hidebtn = false;
                    }, 500)

                );


                $(".needhelp-toggle").slideToggle({
                    direction: "top"
                });



            });

        }
    }


}]);;
angular.module('ParcelUI').directive('datePicker', function () {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            element.datepicker({
                format: 'mm/dd/yyyy'
            });
        }
    };
});


angular.module('ParcelUI').directive('hideShowColumns', [function () {
    return {
        restrict: 'A',
        scope: {
            columnindex: '@'
        },
        link: function (scope, elem, attr) {
            elem.bind('click', function () {
                if ($(this).prop('checked')) {
                    scope.$emit('show-hide-column', scope.columnindex);
                    console.log("checked " + scope.columnindex);
                } else {
                    scope.$emit('show-hide-column', scope.columnindex);
                    console.log(" not checked " + scope.columnindex);
                }
            });
        }
    }
}]);


angular.module('ParcelUI').directive('activityUpdisplay', [function () {
    return {
        restrict: 'A',

        link: function (scope, elem, attr) {
            elem.bind('click', function () {
                if ($(".report-panel").hasClass("maximized")) {
                    $(".report-panel").removeClass("maximized");
                    $(".report-panel").addClass("default");
                    $(".down-arrow").removeClass("text-muted");
                    $(".down-arrow").addClass("pointer");
                    $(window).scrollTop(0);
                } else if ($(".report-panel").hasClass("default")) {
                    $(".report-panel").removeClass("default");
                    $(".report-panel").addClass("minimized");
                    $(".up-arrow").removeClass("pointer");
                    $(".up-arrow").addClass("text-muted");
                    $(".down-arrow").removeClass("text-muted");
                    $(".down-arrow").addClass("pointer");
                }
            });
        }
    }
}])

angular.module('ParcelUI').directive('activityDowndisplay', [function () {
    return {
        scope: {
            length: "="
        },
        link: function (scope, elem, attr) {
            console.log('attr', scope.length);
            elem.bind('click', function () {

                if (scope.length <= 6 && $(".report-panel").hasClass("minimized")) {
                    $(".report-panel").removeClass("minimized");
                    $(".report-panel").addClass("maximized");
                    $(".up-arrow").addClass("pointer");
                    $(".up-arrow").removeClass("text-muted");
                    $(".down-arrow").addClass("text-muted");
                    $(".down-arrow").removeClass("pointer");

                } else if (scope.length <= 6) {
                    $(".report-panel").removeClass("default");
                    $(".report-panel").addClass("maximized");
                    $(".down-arrow").addClass("text-muted");
                    $(".down-arrow").removeClass("pointer");

                } else if ($(".report-panel").hasClass("minimized")) {
                    $(".report-panel").removeClass("minimized");
                    $(".report-panel").addClass("default");
                    $(".up-arrow").addClass("pointer");
                    $(".up-arrow").removeClass("text-muted");


                } else if ($(".report-panel").hasClass("default")) {
                    $(".report-panel").removeClass("default");
                    $(".report-panel").addClass("maximized");
                    $(".down-arrow").addClass("text-muted");
                    $(".down-arrow").removeClass("pointer");
                }
            });
        }
    }
}])


angular.module('ParcelUI').directive('menuToggle', [function () {
    return {
        restrict: 'A',

        link: function (scope, elem, attr) {
            window.onresize = function () {
                if ($(window).width() < 1285) {
                    $(".report-menu").removeClass("col-md-3");
                    $(".report-menu").addClass("report-menu-width");
                    $(".report-menu").addClass("col-sm-3");
                    $(".report-contain").removeClass("col-md-9 col-md-12");
                    $(".report-contain").addClass("col-sm-12");
                    $("#menu-toggle").addClass("report-menubar-toggled");
                    $("#menu-toggle").addClass("sidemenubar-icon");
                    $("#menu-toggle").addClass("menu-toggle");
                }
            }

            elem.bind('click', function () {

                console.log("menutoggle");
                $(".report-menu").toggleClass("col-md-3");
                $(".report-menu").toggleClass("report-menu-width");
                $(".report-menu").toggleClass("col-sm-3");
                $(".report-contain").toggleClass("col-md-9 col-md-12");
                $(".report-contain").toggleClass("col-sm-12");
                $("#menu-toggle").toggleClass("report-menubar-toggled");
                $("#menu-toggle").toggleClass("sidemenubar-icon");
                $("#menu-toggle").toggleClass("menu-toggle");
            });
        }
    }
}]);



angular.module('ParcelUI').directive('openHideshowpopover', ['$compile', '$timeout', function ($compile, $timeout) {

    var itemsTemplate = '<div class="row">' +
        '<div class="col-md-6 col-xs-12" ng-repeat="item in items">' +
        '<input ng-model="item.default"  columnindex = "{{item.index}}"' +
        'type="checkbox"></input> {{item.name}}  </div> </div>' +
        '<div><button close-popover class="btn-sm btn">Close</button>' +
        '<button save-settings class="btn-sm btn btn-default">Save tab settings</button></div>'

    var getTemplate = function (contentType) {
        var template = '';
        switch (contentType) {
            case 'items':
                template = itemsTemplate;
                break;
        }
        return template;
    }
    return {
        restrict: 'A',
        transclude: true,
        template: "<span ng-transclude></span>",
        scope: {
            items: '=',
            title: '@'
        },
        link: function (scope, elem, attr) {
            elem.bind('click', function (e) {
                e.stopPropagation();
                $timeout(function () {
                    var popOverContent;
                    if (scope.items) {
                        var html = getTemplate("items");
                        popOverContent = $compile(html)(scope);
                    }
                    var options = {
                        content: popOverContent,
                        placement: "right",
                        html: true,
                        title: scope.title,
                        container: 'body'
                    };

                    $(elem).popover(options);
                }, 5000);
            });
        }
    }
}]);

angular.module('ParcelUI').directive('textChange', [function () {
    return {
        restrict: 'A',

        link: function (scope, elem, attr) {

            if (attr.textChange == "CreationDate") {
                $(elem).attr("readOnly", true);

                elem.datepicker({
                        format: "m/d/yyyy",
                        autoclose: true,
                        clearBtn: true,
                        orientation: 'left'
                    }).change(dateChanged)
                    .on('changeDate', dateChanged);

                function dateChanged(ev) {
                    scope.dateFilterRangeSearch = true;
                    scope.dataTable
                        .column($(this).parents('th').index() + ':visible')
                        .search(this.value)
                        .draw();
                    scope.dataTable.state.save();
                }
                elem.bind('click', function () {
                    $(elem).datepicker('show');
                });
            } else {
                elem.bind('keyup', function () {
                    if ($(this).attr("type") == "text" && attr.textChange != "CreationDate") {
                        scope.dataTable
                            .column($(this).parents('th').index() + ':visible')
                            .search(this.value)
                            .draw();
                        scope.dataTable.state.save();
                    }
                });
            }
        }
    }
}]);;
angular.module('ParcelUI').directive('loadDataTable', [function () {
    return {
        restrict: 'A',
        link: function ($scope, elem, attrs) {
            $scope.$emit('load-datatable');
        }
    }
}]);
angular.module("ParcelUI").service("DashboardAPI", ["APIFactory", "ReportDashboardUrlCollection", "BASEURL", "$q", "globalValues", function (APIFactory, ReportDashboardUrlCollection, BASEURL, $q, globalValues) {

    var self = this;

    self.getReports = function (accountGuid, detail, limit, offset) {
        var url = BASEURL.LANDINGPAGE_REAL + ReportDashboardUrlCollection.GETAPI;
        var params = {};
        params.limit = "-1";
        params.offset = 0;
        params.detail = "none";

        if (accountGuid) {
            params.accountGuid = accountGuid;
        }
        if (detail) {
            params.detail = detail;
        }
        if (limit) {
            params.limit = limit;
        }
        if (offset) {
            params.offset = offset;
        }

        return APIFactory.get(url, params).then(function (data) {
            return data.dashboard;
        });
    };



    self.recentViewedReports = function () {
        var url = BASEURL.LANDINGPAGE_Activity + ReportDashboardUrlCollection.GETAPI_RECENTLYVIEWEDREPORTS_REAL;

        return APIFactory.get(url).then(function (data) {
            return data;
        });
    };

    self.updateColumns = function (accountGuid, columns) {
        var url = BASEURL.LANDINGPAGE_MOCK + ReportDashboardUrlCollection.PUTAPI;
        var putData = {
            columns: columns
        };
        return APIFactory.put(url, putData).then(function (data) {
            return data;
        });
    }


}]);;
angular.module("ParcelUI").constant("ReportDashboardUrlCollection", {

    GETAPI: "{accountGuid}?detail={detail}&limit={limit}&offset={offset}", //Sort and Filter is removed from real API impl.

    GETAPI_MOCK: "{accountGuid}?detail={detail}&limit={limit}&offset={offset}&sort={sort}&filter={filter}",

    PUTAPI: "accountGuid?detail=detail&limit=limit&offset=offset&sort=sort&filter=filter",
    GETAPI_RECENTLYVIEWEDREPORTS_REAL: "activities/?activityname=Recently+Opened+Files",
    GETUSERDETAILS_ACCOUNMGMT: "users/{userGuid}"
        // GETAPI_RECENTLYVIEWEDREPORTS_MOCK: "app/modules/LandingPage/staticData/sampleActivityServiceJSON.js",


});;

angular.module('ParcelUI').controller('indexController', ['$scope', '$http', '$cookieStore', 'checkStatus', 'AuthFactory', 'globalValues', 'BASEURL', '$state',
    '$location', '$window', 'ReportAuthoringAPI', 'globalValues',
    function ($scope, $http, $cookieStore, checkStatus, AuthFactory, globalValues, BASEURL, $state, $location, $window, ReportAuthoringAPI, globalValues)
    {

        init();

        function init() {
            if (BASEURL.IS_LOCAL === 1) $scope.isAuthenticated = true;
            else {

                $scope.isAuthenticated = checkIfSessionIsActive();

                setUserDisplayName();
            }
        }

        function setUserDisplayName() {
            var userDetails = JSON.parse(localStorage.getItem('userdetails'));
            if (userDetails) {
                var userName;
                for (var i = 0; i < userDetails.length; i++) {
                    if (userDetails[i].key === "USERNAME") {
                        userName = userDetails[i].value;
                        $scope.userName = userName;
                    }
                }
            }
        }

        function checkIfSessionIsActive() {
            var sessionToken = AuthFactory.retrieveCookie('sessionToken');

            return sessionToken ? true : false;
        }


        $scope.logoutUser = function () {
            AuthFactory.logout().then(function (response) {
                // remove auth cookies
                var ca = document.cookie.split(';');
                var cookiesKeys = [];
                for (var i = 0; i < ca.length; i++) {
                    cookiesKeys.push(ca[i].split('=')[0]);
                }

                angular.forEach(cookiesKeys, function (key) {
                    AuthFactory.deleteCookie(key.trim());
                });

                // remove user information in local storage
                AuthFactory.deleteLocalStorage('userdetails');

                // already logout
                globalValues.isLogout = true;

                // OPENAM is configured to clear login information by redirecting to logout.html
                window.location = "/logout.html";
            })
        }

        $scope.$on("User", function (event, args) {
            $scope.isAuthenticated = true;
            $scope.userName = args;
        })

        $scope.isHeaderEnabled = function () {
            if ($state.current.name == "parcelLogin") return false;
            return true;
        }

        $scope.redirctToAccountMgmt = function () {
            var companyGuid, officeGuid, userGuid;
            var userDetails = JSON.parse(localStorage.getItem('userdetails'));
            if (userDetails) {
                for (var i = 0; i < userDetails.length; i++) {
                    if (userDetails[i].key === "COMPANYGUID") {

                        companyGuid = userDetails[i].value;
                    } else if (userDetails[i].key === "OFFICEGUID") {
                        officeGuid = userDetails[i].value;
                    } else if (userDetails[i].key === "USERGUID") {

                        userGuid = userDetails[i].value;
                    }
                }

                $window.location.href = BASEURL.ACCOUNT_MGMT + 'accounts/company/office/user/view?companyguid=' + companyGuid + '&officeguid' + officeGuid + '&userguid' + userGuid;
            }
        }

        $scope.searchReportBySiteID = function (siteID) {

            ReportAuthoringAPI.reportBySiteID(siteID).then(function (data) {

                if (data != null && data != undefined)
                    $state.go('ReportAuthoring.Write', {
                        projectGuid: data.report.projectGuid,
                        reportGuid: data.report.reportGuid,
                        siteID: siteID
                    }, {
                        reload: true,
                        inherit: false
                    });
            }).catch(function (error) {
                new PNotify({
                    title: 'Error',
                    text: 'No data found for this SiteID',
                    type: 'error',
                    addclass: "stack-topright"
                });
            });
        }
    }]);









; // define module
angular.module('ProjectCreation', ['ngFileUpload', 'ui.router.state', 'ui.bootstrap', 'countrySelect']);

// routers
angular.module('ProjectCreation').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');
        $stateProvider.state('quickCreateProj', {
            'url': '/QuickProjectSetup',
            'controller': 'FormCtrl as main',
            'templateUrl': 'app/modules/ProjectCreation/views/form.html'
        });
        $stateProvider.state('projectSearch', {
            'url': '/projectSearch',
            'controller': 'ProjectSearchCtrl as ProjectSearchCtrl',
            'templateUrl': 'app/modules/ProjectCreation/views/projectSearch.html'
        });

    }
]);;
angular.module('ProjectCreation').controller('AddPropertyInfoCtrl', ['$scope', '$log', '$modal', function ($scope, $log, $modal) {

    var addpropertyinfoControllerLogger = $log.getInstance('addpropertyinfoController');

    addpropertyinfoControllerLogger.info("addpropertyinfo controller reached");
    //this.propertyTypes = $scope.main.obj[2].propertyTypes;
    //this.transactionTypes = $scope.main.obj[6].transactionTypes;
    this.propTypeChanged = function (propTypeChanged) {

        console.log("option changed " + propTypeChanged);
        propTypeChanged === "Other..." ? this.showOption = true : this.showOption = false;
    }


    this.showLatLonHelp = function (size) {
        var modalInstance = $modal.open({
            templateUrl: 'app/modules/ProjectCreation/views/helpLatLon.html',
            scope: $scope,
            controller: LatLonHelpController,
            size: size

        })
    }

    var LatLonHelpController = function ($scope, $modalInstance) {
        $scope.CancelDelete = function () {
            $modalInstance.close()
        }
    }

}]);;
angular.module('ProjectCreation').controller('AttachmentCtrl', ['$scope', '$log', 'Upload', function ($scope, $log, Upload) {

    var self = this;
    $scope.$parent.$parent.main.submitData = $scope.$parent.$parent.main.submitData || {};
    self.data = $scope.$parent.$parent.main.submitData;
    self.attachmentFiles = [];
    self.UploadSuccessMsg = "";
    self.UploadErrorMsg = "";
    self.IncorrectFormat = "";
    self.isUploadErrorMsg = false;

    /*var attachmentsControllerLogger = $log.getInstance('ProjectCreation.AttachmentCtrl');

    attachmentsControllerLogger.info("attachments controller reached");*/

    File.prototype.convertToBase64 = function (callback) {
        var file = this;
        var FR = new FileReader();
        FR.onload = function (e) {
            var base64 = removeNoiseFromDataUrlOfBase64(e.target.result);
            callback(base64, file);
        };
        FR.readAsDataURL(this);
    };

    function removeNoiseFromDataUrlOfBase64(dataUrl) {
        return dataUrl.indexOf("base64") >= 0 ? dataUrl.split("base64,")[1] : dataUrl;
    }

    function convertAttachedFilesToBase64() {
        if (!$scope.files || !$scope.files.length) {
            return;
        } else {
            self.attachmentFilesExists = true;
        }

        var files = $scope.files;
        for (var i = 0, completedCount = 0; i < files.length; i++) {
            var file = files[i];
            file.convertToBase64(function (base64, attachedFile) {
                var attach = angular.copy(attachedFile);
                attach.base64 = base64;
                attach.size = $scope.fnconvertsize(attach.size);
                self.attachmentFiles.push(attach);
                completedCount++;
                if (completedCount == files.length) {
                    // callback invoked via non-angular code (FileReader.onload)
                    // need to apply changes to scope
                    $scope.$apply();
                    // set attachments to parent submit object
                    setSubmitDataAttachmentsFromLocal();
                }
            });
        }

        // clear files after processing
        $scope.files = [];
    }

    $scope.$watchCollection("files", function () {
        convertAttachedFilesToBase64();
    });


    $scope.fnconvertsize = function (sizeinbytes) {

        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        if (sizeinbytes == 0)
            var convertedsize = '0 Byte';
        var i = parseInt(Math.floor(Math.log(sizeinbytes) / Math.log(1024)));
        convertedsize = Math.round(sizeinbytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
        return convertedsize;
    }

    this.Upload = function () {
        self.UploadErrorMsg = "";
        self.isUploadErrorMsg = false;
        self.attachmentFilesExists = false;
        self.attachmentFiles = [];

        var files = $scope.files;
        if (!files || files.length <= 0) {
            self.isUploadErrorMsg = true;
            self.UploadErrorMsg += "Please attach files before trying to upload.";
            return;
        } else {
            self.attachmentFilesExists = true;
        }

        for (var i = 0, completedCount = 0; i < files.length; i++) {
            var file = files[i];

            file.convertToBase64(function (base64, attachedFile) {
                var attach = angular.copy(attachedFile);
                attach.base64 = base64;
                self.attachmentFiles.push(attach);
                completedCount++;
                if (completedCount == files.length) {
                    $scope.$apply();
                    setSubmitDataAttachmentsFromLocal();
                }
            });

            /*Upload.upload({
                url: 'https://angular-file-upload-cors-srv.appspot.com/upload',
                //                    fields: {
                //                        'username': $scope.username
                //                    },
                file: file
            }).progress(function(evt) {
                var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);
            }).success(function(data, status, headers, config) {
                //console.log('file ' + config.file.name + 'uploaded. Response: ' + JSON.stringify(data));
                self.attachmentFiles.push({
                    name: data.result[0].name,
                    size: data.result[0].size
                });
            }).error(function(data, status, headers, config) {
                //console.log('error status: ' + status);
                self.isUploadErrorMsg = true;
                self.UploadErrorMsg += "Failed to upload file '" + config.file.name + "'. Status: " + status + ".\n";
            });*/
        }

        $scope.files = [];

    };

    this.RemoveAttachment = function (name) {
        removeFileFromCollection(name);
    };

    var removeFileFromCollection = function (name) {
        if (!self || !self.attachmentFiles) return;
        for (var i = 0; i < self.attachmentFiles.length; i++) {
            var file = self.attachmentFiles[i];
            if (file.name == name) {
                self.attachmentFiles.splice(i, 1);
            }
        }
        setSubmitDataAttachmentsFromLocal();
    }

    function setSubmitDataAttachmentsFromLocal() {
        self.data.attachments = [];
        angular.forEach(self.attachmentFiles, function (attachment) {
            var obj = {
                fileName: attachment.name,
                base64: attachment.base64
            }
            self.data.attachments.push(obj);
        });
    }


}]);;
angular.module('ProjectCreation').controller('ClientInfoCtrl', ['$log', '$modal', '$scope', function ($log, $modal, $scope) {

    var self = this;
    $scope.$parent.$parent.main.submitData.client = $scope.$parent.$parent.main.submitData.client || {};
    self.data = $scope.$parent.$parent.main.submitData;

    var clientinfoControllerLogger = $log.getInstance('clientinfoController');

    clientinfoControllerLogger.info("clientinfo controller reached");

    this.ShowFindContact = function () {


        var modalInstance = $modal.open({
            templateUrl: 'app/modules/ProjectCreation/views/findContact.html',
            scope: $scope,
            controller: 'FindContactCtrl as findContact',
            size: 'lg',
            windowClass: 'app-modal-window',

            resolve: {
                contactObj: function () {
                    return self.data;

                }

            }
        })


    }



}]);;
angular.module('ProjectCreation').controller('EmailContactsCtrl', ['$scope', '$log', '$modalInstance', '$http', 'ContactAPIService', 'BASEURL', function ($scope, $log, $modalInstance, $http, ContactAPIService, BASEURL) {

    var self = this;
    // pagination
    self.currentPage = 1;
    self.numPerPage = 20;
    self.totalItems = 0;
    // data structures
    self.ContactArr = [];
    self.filtered = [];

    self.companyId = BASEURL.companyGUID;
    init();

    function init() {
        getContactData();
    }

    function getContactData(enforceLive) {
        ContactAPIService.getContacts(self.companyId, enforceLive).then(function (data) {
            bind(data);
        });
    }


    function checkEmailPattern(emailValue) {
        var regexp = /^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/;
        return regexp.test(emailValue);

    }

    function bind(data) {
        self.ContactArr = [];
        if (data.length > 0) {

            self.ContactArr = angular.copy(data);
            self.totalItems = self.ContactArr.length;
        }
    }


    this.uncheckCCContact = function (contact) {
        if (contact.toSelected != undefined) {
            contact.toSelected = false;
        }

    }

    this.uncheckToContact = function (contact) {
        if (contact.ccSelected != undefined) {
            contact.ccSelected = false;
        }

    }

    this.paginate = function (value) {
        var begin, end, index;
        begin = (self.currentPage - 1) * self.numPerPage;
        end = begin + self.numPerPage;
        index = self.filtered.indexOf(value);
        return (begin <= index && index < end);
    };

    this.Cancel = function () {
        $modalInstance.close();
    };

    this.DoneSelection = function () {
        var contactsArray = [];
        contactsArray.emailTo = [];
        contactsArray.emailCC = [];

        for (var i = 0; i < self.ContactArr.length; i++) {
            var contact = self.ContactArr[i];

            if (contact.toSelected || contact.ccSelected) {
                contactsArray.push(contact);

                if (contact.toSelected) {
                    contactsArray.emailTo.push(contact.email);

                }
                if (contact.ccSelected) {
                    contactsArray.emailCC.push(contact.email);
                }
            }

        }


        /*if (contactsArray && contactsArray.length) {         
            var emailTo = [];
            var emailCC = [];
            for (var i = 0; i < contactsArray.length; i++) {
                var contact = contactsArray[i];
                if (contact.toSelected) {
                    emailTo.push(contact.email);
                }
                if (contact.ccSelected) {
                    emailCC.push(contact.email);
                }
            }
            if(emailTo) contactsArray.emailTo = emailTo;
            if(emailCC) contactsArray.emailCC = emailCC;
        }*/


        $modalInstance.close(contactsArray);
    };



    this.Reset = function (form) {
        resetAddContactMsgFields();
        // ClearFields();
        clearValidationMessages(form.$name);
    }

    function ClearFields() {

        self.FirstName = "";
        self.LastName = "";
        self.CompanyName = "";
        self.Address = "";
        self.City = "";
        self.State = "";
        self.ZipCode = "";
        self.Phone = "";
        self.Fax = "";
        self.Email = "";

        self.newContact = {};
    }


    // edit contact
    self.editSelected = false;
    // contact selected for edit
    // used for clearing user changes
    self.contactSelectedToEdit = {};
    // hold user changes
    self.editedContact = {};

    self.EditContact = function (contact) {
        self.editSelected = true;
        self.contactSelectedToEdit = contact;
        copyContactSelectedToEditToEdited();
    }
    self.ResetEditChanges = function (form) {

        self.editedContact = {};
        self.EditContact(self.contactSelectedToEdit);
        //resetEditContactMsgFields();
        // copyContactSelectedToEditToEdited();
        // clearValidationMessages(form.$name);
        var formName = form.$name;
        $("form[name=" + formName + "] .has-error").each(function () {
            if (!$(this).hasClass('ng-hide')) {
                $(this).removeClass('has-error');
                $(this).find('.error-text').each(function () {
                    var spanElem = angular.element(this);
                    spanElem.remove();
                });
            }
        });
    }
    self.SubmitEdit = function (form) {

        if (!form || form.$invalid) {
            self.showEditContactOpMsg = true;
            self.isEditContactOpSuccess = false;
            self.editContactOpMsg = "Invalid Form Submission";
            var inputElements = document.getElementsByName(form.$name);
            angular.element(inputElements).find(':input').trigger('blur');
            return
        }

        resetEditContactMsgFields();
        var emailContact = self.editedContact;

        var put = {
            contactID: emailContact.contactID,
            contactGUID: emailContact.contactGUID,
            companyName: emailContact.companyName,
            firstName: emailContact.firstName,
            lastName: emailContact.lastName,
            address: emailContact.address,
            city: emailContact.city,
            state: emailContact.state,
            zipCode: emailContact.zipCode,
            phone: emailContact.phone,
            fax: emailContact.fax,
            email: emailContact.email
        }

        ContactAPIService.update(emailContact.contactGUID, put).then(function (result) {

            self.showEditContactOpMsg = true;
            self.isEditContactOpSuccess = true;
            self.editContactOpMsg = "Contact edited successfully.";
            self.editSelected = false;

            getContactData(true);
        }, function (error) {
            self.showEditContactOpMsg = true;
            self.isEditContactOpSuccess = false;
            self.editContactOpMsg = error;
        });
    }
    self.CancelEdit = function (form) {
        resetEditContactMsgFields();
        clearEditObjects();
        clearValidationMessages(form.$name);
    }

    // helpers
    function resetEditContactMsgFields() {
        self.isEditContactOpSuccess = false;
        self.showEditContactOpMsg = false;
        self.editContactOpMsg = "";
    }

    function clearEditObjects() {
        self.contactSelectedToEdit = null;
        self.editedContact = null;
        self.editSelected = false;
    }

    function copyContactSelectedToEditToEdited() {
        copyObj(self.contactSelectedToEdit, self, 'editedContact');
    }

    function copyObj(original, copyObjContainer, property) {
        copyObjContainer[property] = angular.copy(original);
    }


    function clearValidationMessages(formName) {
        $("form[name=" + formName + "] .has-error").each(function () {
            if (!$(this).hasClass('ng-hide')) {
                $(this).removeClass('has-error');
                $(this).find('.error-text').each(function () {
                    var spanElem = angular.element(this);
                    spanElem.remove();
                });
            }
        });

        $("form[name=" + formName + "]").get(0).reset();
    }

}]);;
angular.module('ProjectCreation').controller('EmailNotificationCtrl', ['$scope', '$log', '$modal', function ($scope, $log, $modal) {

    var emailNotificationControllerLogger = $log.getInstance('emailNotificationController');

    emailNotificationControllerLogger.info("attachments controller reached");
    $scope.$emit('showButtons');
    $scope.$parent.$parent.main.submitData.notification.sendEmailNotification = false;


    this.sendNotification = function () {

        if (!$scope.$parent.$parent.main.submitData.notification.sendEmailNotification) {
            $("#divEmailTo").children('.has-error').removeClass('has-error');
            $("#divEmailCC").children('.has-error').removeClass('has-error');
            $("#divEmailTo").removeClass('has-error');
            $("#divEmailCC").removeClass('has-error');
            $("#divEmailTo").find('#fieldValidationMsg').remove();
            $("#divEmailCC").find('#fieldValidationMsg').remove();
            $scope.$parent.$parent.main.submitData.notification.emailTo = '';
            $scope.$parent.$parent.main.submitData.notification.emailCC = '';
        } else {

            $("#divEmailTo").find('input').focus();
        }
        /*if(!$scope.main.parentEmailNotification.sendMail){
			$scope.main.parentEmailNotification.to = "";
			$scope.main.parentEmailNotification.CC = "";
			$scope.main.parentEmailNotification.message = "";
		}*/
    }

    this.emailTo = function (form) {

        if (form.To.$error.email) {
            emailNotificationControllerLogger.info("emailto field entered wrong");
            $('#divEmailTo').addClass('has-error');

        } else {
            $('#divEmailTo').removeClass('has-error');

        }
    }

    this.emailCC = function (form) {

        if (form.CC.$error.email) {
            emailNotificationControllerLogger.info("emailcc field entered wrong");
            $('#divEmailCC').addClass('has-error');

        } else {
            $('#divEmailCC').removeClass('has-error');

        }
    }

    this.ShowEmailHelp = function (size) {
        var modalInstance = $modal.open({
            templateUrl: 'app/modules/ProjectCreation/views/helpEmailConsultant.html',
            scope: $scope,
            controller: EmailHelpController,
            size: size

        })
    }
    var EmailHelpController = function ($scope, $modalInstance) {
        $scope.CancelDelete = function () {
            $modalInstance.close()
        }

        $scope.ShowAccessHelp = function () {
            $scope.CancelDelete();
            showAccessHelp();
        }
    }

    function showAccessHelp(size) {
        var modalInstance = $modal.open({
            templateUrl: 'app/modules/ProjectCreation/views/helpAccess.html',
            scope: $scope,
            controller: AccessHelpController,
            size: size
        })
    }
    var AccessHelpController = function ($scope, $modalInstance) {
        $scope.CancelDelete = function () {
            $modalInstance.close()
        }
    }


    var self = this;
    self.notifications = $scope.$parent.$parent.main.submitData.notification;
    self.notifications.emailTo = [];
    self.notifications.emailCC = [];

    this.ShowFindContact = function () {

        var modalInstance = $modal.open({
            templateUrl: 'app/modules/ProjectCreation/views/emailContacts.html',
            scope: $scope,
            controller: 'EmailContactsCtrl as emailContacts',
            size: 'lg',
            windowClass: 'app-modal-window'
        });

        modalInstance.result.then(function (emailObj) {

            if (emailObj.emailTo && emailObj.emailTo.length > 0) {
                if (angular.isArray(emailObj.emailTo)) {
                    if (self.notifications.emailTo) {
                        self.notifications.emailTo = self.notifications.emailTo.concat(emailObj.emailTo);
                    } else {
                        self.notifications.emailTo = emailObj.emailTo;
                    }
                } else {
                    if (!self.notifications.emailTo) {
                        self.notifications.emailTo = '';
                    }

                    if (self.notifications.emailTo.trim() == '') {
                        self.notifications.emailTo = emailObj.emailTo;
                    } else {
                        self.notifications.emailTo = self.notifications.emailTo.trim() == '' ? emailObj.emailTo : self.notifications.emailTo + "," + emailObj.emailTo;
                    }
                }
            }

            if (emailObj.emailCC && emailObj.emailCC.length > 0) {
                if (angular.isArray(emailObj.emailCC)) {
                    if (self.notifications.emailCC) {
                        self.notifications.emailCC = self.notifications.emailCC.concat(emailObj.emailCC);
                    } else {
                        self.notifications.emailCC = emailObj.emailCC;
                    }
                } else {
                    if (!self.notifications.emailCC) {
                        self.notifications.emailCC = '';
                    }
                    if (self.notifications.emailCC == '') {
                        self.notifications.emailCC = emailObj.emailCC;
                    } else {
                        self.notifications.emailCC = self.notifications.emailCC.trim() == '' ? emailObj.emailCC : self.notifications.emailCC + "," + emailObj.emailCC;
                    }
                }
            }
        });
    };

    function stringifyContactColl(coll) {
        if (!coll || coll.length <= 0) return "";

        var val = coll[0].email;
        for (var i = 1; i < coll.length; i++) {
            val += ", " + coll[i].email;
        }
        return val;
    }



}]);



angular.module('ProjectCreation').filter('selectColumnFilter', function () {

    return function (dataArray, searchTerm) {

        if (!dataArray) {
            return;
        } else if (!searchTerm) {
            return dataArray;
        } else {

            var term = searchTerm.toLowerCase();

            return dataArray.filter(function (item) {
                if (item.email)
                    var termInEmail = item.email.toLowerCase().indexOf(term) > -1;
                if (item.companyName)
                    var termInCompany = item.companyName.toLowerCase().indexOf(term) > -1;
                if (item.firstName)
                    var termInFirstName = item.firstName.toLowerCase().indexOf(term) > -1;
                if (item.lastName)
                    var termInLastName = item.lastName.toLowerCase().indexOf(term) > -1;
                return termInEmail || termInCompany || termInFirstName || termInLastName;
            });
        }
    }
});;
angular.module('ProjectCreation').controller('FindContactCtrl', ['$scope', '$log', '$modalInstance', '$http', 'contactObj', 'ContactAPIService', '$timeout', 'BASEURL', function ($scope, $log, $modalInstance, $http, contactObj, ContactAPIService, $timeout, BASEURL) {

        $scope.possibleTimes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];

        // $scope.time = time;


        var self = this;
        self.companyId = BASEURL.companyGUID;
        self.currentPage = 1;
        self.numPerPage = 5;
        self.CompanyContactsArr = [];
        self.totalItems = 0;
        $scope.selectedTab = 1;
        init();

        self.newContact = {};

        function init() {
            //$http.get('app/modules/ProjectCreation/sampleJson/Contacts.js').success(function (data) {
            //    if (data.length > 0) {

            //        self.CompanyContactsArr = data;
            //        self.totalItems = self.CompanyContactsArr.length;
            //    }
            //});


            getContactData();



        }

        function getStates() {
            var url = BASEURL.SHARED_GEOCODE + CountryStateUrlColl.GETAPI_STATES;
            var params = {
                countryCode: 'US'
            };

            self.stateList = APIFactory.get(url, params).then(function (data) {
                if (data && data.states) {
                    return data.states;
                }
                return null;
            });
        }

        function getContactData(enforceLive) {
            ContactAPIService.getContacts(self.companyId, enforceLive).then(function (data) {

                bind(data);
            });
        }

        function bind(data) {
            if (data.length > 0) {

                self.CompanyContactsArr = data;
                self.totalItems = self.CompanyContactsArr.length;
            }
        }



        this.paginate = function (value) {
            var begin, end, index;
            begin = (self.currentPage - 1) * self.numPerPage;
            end = begin + self.numPerPage;
            index = self.filtered.indexOf(value);
            return (begin <= index && index < end);
        };

        self.filter = function () {
            $timeout(function () {
                self.totalItems = self.filtered.length;
            }, 10);
        };

        this.CancelDelete = function () {

            //console.log("return value: " + $scope.hour);
            //console.log(time);
            //$modalInstance.close($scope.hour);
            $modalInstance.close();
        }

        this.FindContactClick = function () {

            resetAddContactMsgFields();
            resetEditContactMsgFields();

            $scope.selectedTab = 1;

            clearValidationMessages("addContactForm");
        }

        this.AddContactClick = function () {
            $scope.selectedTab = 2;
        }

        this.ContactSelected = function (contact) {
            var c = contact.FirstName + contact.LastName;
            console.log(c);
            var objContactSelected = {

                contactName: contact.firstName + " " + contact.lastName,
                companyName: contact.companyName || "",
                address: contact.address,
                city: contact.city,
                state: contact.state,
                zip: contact.zipCode

                //contactID: contact.contactID,
                //phone: contact.phone,
                //fax: contact.fax,
                //email: contact.email

                //FirstName: contact.FirstName == null ? "" : contact.FirstName,
                //LastName: contact.LastName == null ? "" : contact.LastName,


                //Phone: contact.Phone == null ? "" : contact.Phone,
                //Fax: "",
                //Email: contact.EmailAddress == null ? "" : contact.EmailAddress

            };

            contactObj.client = objContactSelected;
            localStorage.setItem('selectedCompanyContactDetails', objContactSelected);
            $modalInstance.close();

        }

        this.SubmitContact = function (form) {

            if (!form || form.$invalid) {
                self.showAddContactOpMsg = true;
                self.isAddContactOpSuccess = false;
                self.addContactOpMsg = "Invalid Form Submission";
                var inputElements = document.getElementsByName(form.$name);
                angular.element(inputElements).find(':input').trigger('blur');
                return
            }

            resetAddContactMsgFields();

            var contact = self.newContact;
            contact.companyGuid = self.companyId;

            ContactAPIService.add(contact).then(function (result) {
                ClearFields();
                self.showAddContactOpMsg = true;
                self.isAddContactOpSuccess = true;
                self.addContactOpMsg = "Contact added successfully."
                getContactData(true);
            }, function (error) {
                self.showAddContactOpMsg = true;
                self.isAddContactOpSuccess = false;
                self.addContactOpMsg = error;
            });
        }

        function resetAddContactMsgFields() {
            self.showAddContactOpMsg = false;
            self.isAddContactOpSuccess = false;
            self.addContactOpMsg = "";
        }

        this.Reset = function (form) {
            resetAddContactMsgFields();
            ClearFields();
            clearValidationMessages(form.$name);
        }



        function ClearFields() {

            self.FirstName = "";
            self.LastName = "";
            self.CompanyName = "";
            self.Address = "";
            self.City = "";
            self.State = "";
            self.ZipCode = "";
            self.Phone = "";
            self.Fax = "";
            self.Email = "";

            self.newContact = {};
        }


        // edit contact
        self.editSelected = false;
        // contact selected for edit
        // used for clearing user changes
        self.contactSelectedToEdit = {};
        // hold user changes
        self.editedContact = {};

        self.EditContact = function (contact) {

            self.editSelected = true;
            self.contactSelectedToEdit = contact;
            copyContactSelectedToEditToEdited();
        }
        self.ResetEditChanges = function (form) {

            self.editedContact = {};
            self.EditContact(self.contactSelectedToEdit);
            //resetEditContactMsgFields();
            // copyContactSelectedToEditToEdited();
            // clearValidationMessages(form.$name);
            var formName = form.$name;
            $("form[name=" + formName + "] .has-error").each(function () {
                if (!$(this).hasClass('ng-hide')) {
                    $(this).removeClass('has-error');
                    $(this).find('.error-text').each(function () {
                        var spanElem = angular.element(this);
                        spanElem.remove();
                    });
                }
            });
        }
        self.SubmitEdit = function (form) {

            if (!form || form.$invalid) {
                self.showEditContactOpMsg = true;
                self.isEditContactOpSuccess = false;
                self.editContactOpMsg = "Invalid Form Submission";
                var inputElements = document.getElementsByName(form.$name);
                angular.element(inputElements).find(':input').trigger('blur');
                return
            }

            resetEditContactMsgFields();
            var contact = self.editedContact;

            var put = {
                contactID: contact.contactID,
                contactGUID: contact.contactGUID,
                companyName: contact.companyName,
                firstName: contact.firstName,
                lastName: contact.lastName,
                address: contact.address,
                city: contact.city,
                state: contact.state,
                zipCode: contact.zipCode,
                phone: contact.phone,
                fax: contact.fax,
                email: contact.email
            }

            ContactAPIService.update(contact.contactGUID, put).then(function (result) {
                self.showEditContactOpMsg = true;
                self.isEditContactOpSuccess = true;
                self.editContactOpMsg = "Contact edited successfully."
                getContactData(true);
            }, function (error) {
                self.showEditContactOpMsg = true;
                self.isEditContactOpSuccess = false;
                self.editContactOpMsg = error;
            });
        }
        self.CancelEdit = function (form) {
            resetEditContactMsgFields();
            clearEditObjects();
            clearValidationMessages(form.$name);
        }

        // helpers
        function resetEditContactMsgFields() {
            self.isEditContactOpSuccess = false;
            self.showEditContactOpMsg = false;
            self.editContactOpMsg = "";
        }

        function clearEditObjects() {
            self.contactSelectedToEdit = null;
            self.editedContact = null;
            self.editSelected = false;
        }

        function copyContactSelectedToEditToEdited() {
            copyObj(self.contactSelectedToEdit, self, 'editedContact');
        }

        function copyObj(original, copyObjContainer, property) {
            copyObjContainer[property] = angular.copy(original);
        }


        function clearValidationMessages(formName) {
            $("form[name=" + formName + "] .has-error").each(function () {
                if (!$(this).hasClass('ng-hide')) {
                    $(this).removeClass('has-error');
                    $(this).find('.error-text').each(function () {
                        var spanElem = angular.element(this);
                        spanElem.remove();
                    });
                }
            });

            $("form[name=" + formName + "]").get(0).reset();
        }

    }
]);;
angular.module('ProjectCreation').controller('FormCtrl', ['$scope', '$timeout', '$log', '$location', 'ProjectStartupAPI', '$state', '$filter', '$anchorScroll', 'BASEURL', 'ParcelUI.Resources', function ($scope, $timeout, $log, $location, ProjectStartupAPI, $state, $filter, $anchorScroll, BASEURL, ParcelUI_Resources) {



    $anchorScroll.yOffset = 70;
    $anchorScroll("");

    var companyId = BASEURL.companyGUID;

    //this.companyName = "Enercon";

    var self = this;
    self.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;

    self.loadData = {
        //template -> {
        //"templateID" : 1,
        //    "reportType" : "PhaseI",
        //    "name" : "AAI/05 Phase I Template",
        //    "ownerCompanyID":1218,
        //    "shortName":"AAI/05",
        //    "description":"A template that I made one day.",
        //    "isMobile":0,
        //    "templateVersion":27
        //}
        //library -> {
        //    "libraryID":129,
        //    "name":"JP Morgan Phase I Language",
        //    "reportType":"PhaseI",
        //    "ownerCompanyID":1218,
        //    "description":"The default language to use for JP Morgan jobs.",
        //    "isMobile":0
        //}
        //reportTypes -> {
        //    title: '',
        //    templates: [],
        //    libraries: []
        //}
        reportTypes: [],
        transactionTypes: {}, // string array
        propertyTypes: {}, // string array
        accessTo: {
            organizationOptions: [],
            clientOptions: [],
            thirdPartyOptions: []
        }
    };

    self.submitData = {
        companyGUID: companyId,
        /*draftDueDate: new Date(),
        finalDueDate: new Date(),*/
        property: {},
        //{
        //	"templateID": 101,
        //    "libraryID": 102,
        //    "companyID": 153,
        //    "projectNumber": "",
        //    "poNumber": "",
        //    "fee": ""
        //}
        reports: [],
        client: {},
        siteContact: {},
        //{
        //	    "accessType": "company",
        //    "companyID": 102
        //}
        accessParties: [],
        // helper for accessParties
        accessCollector: {},

        notification: {}
    };

    self.loggedUser = {};

    var userId = BASEURL.userGUID;

    ProjectStartupAPI.getAccountUser(userId).then(function (userResult) {
        self.loggedUser = userResult.users[0];
        var companyOption = {
            name: 'Everyone in the ' + self.loggedUser.companyName + ' company',
            accessType: "COMPANY",
            companyGUID: self.loggedUser.companyGUID
        };
        self.loadData.accessTo.organizationOptions.push(companyOption);

        self.submitData.accessCollector['organization'] = {
            val: companyOption,
            selected: true
        };
        // self.submitData.accessCollector.push(companyOption);
    });


    self.waitingProcessResources.promise = null;
    self.waitingProcessResources.promise = ProjectStartupAPI.getInfo(companyId, userId).then(function (result) {

        // simple parse
        //  console.log("222222222222222222"+JSON.stringify(result));
        self.loadData.transactionTypes = result.transactionTypes;

        self.loadData.propertyTypes = result.propertyTypes;
        //self.loadData.teams = result.teams;
        //self.loadData.offices = result.offices;
        //self.loadData.relatedCompanies = result.relatedCompanies;





        // parse report types

        for (var i = 0; i < result.templates.length; i++) {

            var template = result.templates[i];
            var reportTypeVal = template.reportType;

            var reportType = null;
            for (var j = 0; j < self.loadData.reportTypes.length; j++) {
                var existing = self.loadData.reportTypes[j];
                if (existing.title == reportTypeVal) {
                    reportType = existing;
                    break;
                }
            }
            if (!reportType) {
                reportType = {
                    title: reportTypeVal,
                    reportTypeName: template.reportTypeName,
                    templates: [],
                    libraries: []
                };
                self.loadData.reportTypes.push(reportType);
            }

            reportType.templates.push(template);
        }

        for (var i = 0; i < result.libraries.length; i++) {
            var library = result.libraries[i];
            var reportTypeVal = library.reportType;
            var reportType = null;
            for (var j = 0; j < self.loadData.reportTypes.length; j++) {
                var existing = self.loadData.reportTypes[j];
                if (existing.title == reportTypeVal) {
                    reportType = existing;
                    break;
                }
            }
            if (!reportType) continue;

            reportType.libraries.push(library);
        }

        // parse access to options


        // 1. offices
        if (result.offices && result.offices.length) {
            for (var i = 0; i < result.offices.length; i++) {

                var office = result.offices[i];
                var option = {
                    name: 'Everyone in the ' + office.officeName + ' office',
                    accessType: "OFFICE",
                    officeGUID: office.companyOfficeGUID
                };
                self.loadData.accessTo.organizationOptions.push(option);
            }
        }
        // 2. teams
        if (result.teams && result.teams.length) {
            for (var i = 0; i < result.teams.length; i++) {
                var team = result.teams[i];
                var option = {
                    name: 'Everyone in the ' + team.name,
                    accessType: "TEAM",
                    teamGUID: team.teamGUID
                };
                self.loadData.accessTo.organizationOptions.push(option);
            }
        }


        var userOption = {
            name: 'Yourself only',
            accessType: "USER",
            userGUID: userId
        };
        self.loadData.accessTo.organizationOptions.push(userOption);

        // 3. relatedCompanies

        //I 
        if (result.relatedCompanies && result.relatedCompanies.length) {
            for (var i = 0; i < result.relatedCompanies.length; i++) {
                var related = result.relatedCompanies[i];

                var option = {
                    name: related.name,
                    accessType: "COMPANY",
                    companyGUID: related.companyGUID
                };

                if (related.functions && related.functions.length > 0 && related.functions.indexOf('Client') >= 0) {
                    self.loadData.accessTo.clientOptions.push(option);
                }

                if (related.functions && related.functions.length > 0 && related.functions.indexOf('Vendor') >= 0) {
                    self.loadData.accessTo.thirdPartyOptions.push(option);
                }
            }
        }


    });




    this.countries = ['Albania', 'Andorra',
        'Antarctica', 'Armenia', 'Azerbaijan'
    ];

    $scope.$on('showButtons', function () {

        self.lastDivLoaded = true;
    });

    self.showDisplayMsg = function (msg, type) {
        self.serviceResponseAlert = true;
        self.serviceResponseText = msg;
        self.msgType = 'alert-' + (type || 'danger');
    }

    function checkIfAnyReportSelected() {
        if (!self.submitData.reports || !self.submitData.reports.length) return false;
        for (var i = 0; i < self.submitData.reports.length; i++) {
            var report = self.submitData.reports[i];
            if (report && report.selected) {
                return true;
            }
        };

        return false;
    }

    this.createProject = function (form) {

        self.reportSelectionInvalid = false;
        if (!form || form.$invalid) {
            self.showDisplayMsg('Invalid Form Submission');
            var inputElements = document.getElementsByName(form.$name);
            angular.element(inputElements).find(':input').trigger('blur');

            var reportVal = checkIfAnyReportSelected();
            if (!reportVal) {
                self.reportSelectionInvalid = true;
            }

            $anchorScroll();
            return;
        }
        if (!checkIfAnyReportSelected()) {
            self.showDisplayMsg('Invalid Form Submission');
            self.reportSelectionInvalid = true;
            $anchorScroll();
            return;
        }

        self.submitData.property.reports = [];
        for (var r in self.submitData.reports) {
            var val = self.submitData.reports[r];
            if (!val.selected) continue;

            self.submitData.reports[r].templateID = r;
            self.submitData.reports[r].taskedCompanyGUID = companyId;
            self.submitData.property.reports.push(self.submitData.reports[r]);
        }


        self.submitData.accessParties = [];
        for (var p in self.submitData.accessCollector) {
            var accessor = self.submitData.accessCollector[p];
            if (!accessor.selected) continue;

            self.submitData.accessParties.push(accessor.val);
        }

        self.submitData.property.siteContact = self.submitData.siteContact;
        var postData = angular.copy(self.submitData);

        postData.locations = [];
        postData.locations.push(angular.copy(self.submitData.property));

        angular.forEach(postData.locations[0].reports, function (r) {
            delete r.selected;
        });

        if (postData && postData.client) {
            postData.client.clientCompanyGUID = companyId;
            if (postData.client.state && postData.client.state.name) {
                postData.client.state = postData.client.state.name;
            }
            if (postData.client.country && postData.client.country.name) {
                postData.client.country = postData.client.country.name;
            }
        }
        if (postData && postData.locations && postData.locations.length) {
            var site = postData.locations[0];
            if (site.state && site.state.name) {
                site.state = site.state.name;
            }
            if (site.country && site.country.name) {
                site.country = site.country.name;
            }
        }

        postData.draftDueDate = $filter('date')(postData.draftDueDate, "yyyy-MM-dd hh:mm:ss");
        postData.finalDueDate = $filter('date')(postData.finalDueDate, "yyyy-MM-dd hh:mm:ss");

        if (postData.notification) {
            if (postData.notification.sendEmailNotification) {
                postData.notification.sendEmailNotification = 1;
            } else {
                postData.notification.sendEmailNotification = 0;
            }

            if (postData.notification.emailTo && angular.isArray(postData.notification.emailTo)) {
                postData.notification.emailTo = postData.notification.emailTo.toString();
            }
            if (postData.notification.emailCC && angular.isArray(postData.notification.emailCC)) {
                postData.notification.emailCC = postData.notification.emailCC.toString();
            }
        }

        delete postData.accessCollector;
        delete postData.siteContact;
        delete postData.reports;
        delete postData.property;
        if (postData.client && postData.client.country) {
            delete postData.client.country;
        }

        angular.forEach(postData.accessParties, function (accessParty) {
            if (accessParty) {
                delete accessParty.name;
            }
        });


        //delete postData.project.property;
        //delete postData.project.reports;
        //delete self.submitData.accessCollector;

        //console.log(this.submitData);
        //console.log(postData);
        self.waitingProcessResources.promise = null;
        self.waitingProcessResources.promise = ProjectStartupAPI.postData(companyId, postData).then(function (result) {

            var locationlenght = result.locations.length - 1;
            var reportlenght = result.locations[locationlenght].reports.length - 1;
            var reportGuid = result.locations[locationlenght].reports[reportlenght].reportGuid;
            $state.go('ReportAuthoring.Write', {
                projectGuid: result.projectGUID,
                reportGuid: reportGuid
            });

            // self.showDisplayMsg('Project created successfully', 'success');
            $anchorScroll();
        }, function (error) {
            self.showDisplayMsg(error);
            $anchorScroll();
        });

    }

    this.cancelCreateProject = function () {
        /*formControllerLogger.info("cancel button clicked");
        $scope.$broadcast('show-errors-reset');
        $location.path("app/modules/LandingPage/views/CreateProjectMenu.html");*/
        $state.go('LandingPage');
    }

    $(function () {
        $('#accordion').on('shown.bs.collapse', function (e) {
            var offset = $(e.target);
            //var offset = $(this).find('.panel-heading');
            if (offset) {
                $('html,body').animate({
                    scrollTop: $(offset).offset().top - 100
                }, 500);
            }
        });
    });

            }]);;
angular.module('ProjectCreation').controller('GrantAccessCtrl', ['$scope', '$log', '$modal', function ($scope, $log, $modal) {

    var grantAccessControllerLogger = $log.getInstance('grantAccessController');

    grantAccessControllerLogger.info("grantAccessController controller reached");


    this.ShowAccessHelp = function (size) {
        var modalInstance = $modal.open({
            templateUrl: 'app/modules/ProjectCreation/views/helpAccess.html',
            scope: $scope,
            controller: AccessHelpController,
            size: size

        })
    }

    var AccessHelpController = function ($scope, $modalInstance) {
        $scope.CancelDelete = function () {
            $modalInstance.close()
        }
    }
}]);;
angular.module('ProjectCreation').controller('ProjectDocumentsController', ['$scope', '$modal', 'ProjectSearchAPI', '$location', 'BASEURL', '$timeout', '$stateParams', function ($scope, $modal, ProjectSearchAPI, $location, BASEURL, $timeout, $stateParams) {

    $scope.files = [];
    $scope.clientDocArr = [];
    $scope.generalDocArr = [];
    $scope.invoicesArr = [];
    $scope.reportsArr = [];


    $scope.fileErrorDanger = false;
    $scope.fileErrorTextDanger = "";
    $scope.fileErrorSuccess = false;
    $scope.fileErrorTextSuccess = "";
    $scope.fileErrorDangerFileType = false;
    $scope.fileErrorTextDangerFileType = "";
    $scope.fileErrorDangerFileSize = false;
    $scope.fileErrorTextDangerFileSize = "";

    $scope.clientFolderGUID = "";
    $scope.generalFolderGUID = "";
    $scope.invoiceFolderGUID = "";
    $scope.reportsFolderGUID = "";
    $scope.btnText = "Upload";
    $scope.serviceResponseAlertDanger = false;
    $scope.serviceResponseAlertSuccess = false;
    init();

    function init() {

        getFiles();

    }

    function getFiles() {

        var promise = ProjectSearchAPI.getFolders($stateParams.projectGuid)
        promise.then(function (result) {




            angular.forEach(result, function (document) {



                if (document.documentType.toLowerCase() == "client") {
                    $scope.clientFolderGUID = document.folderGUID;
                    angular.forEach(document.files, function (file) {
                        file.downloadURL = "";
                        file.downloadURL = BASEURL.REPORTAUTHORING_APPENDICES_COREFILES + '/files/' + file.fileGUID + '/stream';
                        $scope.clientDocArr.push(file);

                    });

                } else if (document.documentType.toLowerCase() == "general") {
                    $scope.generalFolderGUID = document.folderGUID;
                    angular.forEach(document.files, function (file) {
                        file.downloadURL = "";
                        file.downloadURL = BASEURL.REPORTAUTHORING_APPENDICES_COREFILES + '/files/' + file.fileGUID + '/stream';
                        $scope.generalDocArr.push(file);
                    });

                } else if (document.documentType.toLowerCase() == "invoices") {
                    $scope.invoiceFolderGUID = document.folderGUID;
                    angular.forEach(document.files, function (file) {
                        file.downloadURL = "";
                        file.downloadURL = BASEURL.REPORTAUTHORING_APPENDICES_COREFILES + '/files/' + file.fileGUID + '/stream';
                        $scope.invoicesArr.push(file);
                    });

                } else if (document.documentType.toLowerCase() == "reports") {
                    $scope.reportsFolderGUID = document.folderGUID;
                    angular.forEach(document.files, function (file) {

                        file.downloadURL = "";
                        file.downloadURL = BASEURL.REPORTAUTHORING_APPENDICES_COREFILES + '/files/' + file.fileGUID + '/stream';
                        $scope.reportsArr.push(file);
                    });

                }




            });
            $timeout(function () {
                $('[data-toggle="tooltip"]').tooltip();
            })





            //            $scope.fileArr=result;
            //            angular.forEach($scope.fileArr, function (file) {
            //             
            //                file.downloadURL = BASEURL.REPORTAUTHORING_APPENDICES_COREFILES + '/files/' + file.fileGUID + '/stream';
            //                $scope.clientDocArr.push(file);
            //            });

        });

    }

    $scope.uploadFiles = function (files) {
        // console.log("no of files: " + files.length);

        if ($scope.file) {

            if ($scope.file.length <= BASEURL.maxNumberOfFile) {

                var docType = $scope.docType;
                if (docType && docType != 0) {
                    saveFile($scope.file, docType);
                } else {
                    $('#selProjectDocuments').trigger('blur');
                    $scope.fileErrorDanger = true;

                    $scope.fileErrorTextDanger = "Please select document type.";
                }

            } else {
                $scope.fileErrorDanger = true;

                $scope.fileErrorTextDanger = "Maximum number of files exceeded. You can upload upto " + BASEURL.maxNumberOfFile + " files only.";

            }

        } else {

            $('#selProjectDocuments').trigger('blur');
            $scope.fileErrorDanger = true;
            $scope.fileErrorTextDanger = "Please attach file in order to upload.";

        }
        // files =[];

    }


    function saveFile(files, docType) {

        $scope.fileError = false;
        $scope.fileErrorText = "";
        $scope.bigSizeFiles = [];
        $scope.invalidFileTypeFiles = [];

        $scope.originalFileUploadedArr = [];
        angular.forEach(files, function (singleFile) {
            $scope.originalFileUploadedArr.push(singleFile);
        });

        for (var i = 0; i < files.length; i++) {
            var fileObj = "";
            $scope.btnText = "Uploading.Please Wait...";
            var file = files[i];

            //   file.convertToBase64(function (base64, attachedFile) {
            //                var attach = angular.copy(attachedFile);
            //                attach.fileName = attachedFile.name;
            //               // attach.base64 = base64;
            //                attach.size = $scope.fnconvertsize(attach.size);
            //                // $scope.clientDocArr.push(attach);
            //                attach.folderGUID = $scope.clientFolderGUID;

            if (file.size > BASEURL.maxSizeOfFile) {
                var bigSizefileObj = {
                    "fileName": file.name,

                }
                $scope.bigSizeFiles.push(bigSizefileObj);
                checkFileSizeOrType();

            } else {

                if (file.type == "application/vnd.ms-excel" || file.type == "application/pdf" || file.type == "image/jpeg" || file.type == "text/plain") {

                    var inputFile = file;
                    switch (docType) {
                        case '1':
                            var fileObj = {
                                "fileName": file.name,
                                "fileDescription": file.name + ', size:' + $scope.fnconvertsize(file.size),
                                "displayIndex": 0,
                                "retentionInDays": -1,
                                "deletionType": "DISABLE",
                                "folderGUID": $scope.clientFolderGUID,
                                "availabilityTier": "TIER1",
                                "physicalPathPreDate": "Accounts/Companies/535656ED-03A7-45F3-96EE-8AF9AC3CF0FE/GlobalFiles",
                                "physicalPathAddDate": false,
                                "physicalPathPostDate": ""
                            }

                            var fileRequestJson = {
                                "file": fileObj
                            };


                            var promise = ProjectSearchAPI.uploadFiles(inputFile, fileRequestJson);
                            promise.then(function (result) {
                                console.log("originally uploaded files details: " + JSON.stringify($scope.originalFileUploadedArr));
                                files = [];
                                $scope.btnText = "Upload";
                                var fileResult = result;
                                fileResult.fileGUID = result.fileGUID;
                                fileResult.fileName = fileObj.fileName;
                                fileResult.downloadURL = BASEURL.REPORTAUTHORING_APPENDICES_COREFILES + '/files/' + result.fileGUID + '/stream';
                                $scope.clientDocArr.push(fileResult);

                                $scope.fileErrorSuccess = true;
                                $scope.fileErrorTextSuccess = "File[s] uploaded successfully.";
                                $scope.docType = 0;
                                checkFileSizeOrType();
                                $scope.file = null;

                            }, function (error) {

                                $scope.fileErrorDanger = true;

                                $scope.fileErrorTextDanger = "File upload failed for Client Documents. " + error.data.message.userMessage;
                                $scope.btnText = "Upload";

                            })


                            break;
                        case '2':
                            var fileObj = {
                                "fileName": file.name,
                                "fileDescription": file.name + ', size:' + $scope.fnconvertsize(file.size),
                                "displayIndex": 0,
                                "retentionInDays": -1,
                                "deletionType": "DISABLE",
                                "folderGUID": $scope.generalFolderGUID,
                                "availabilityTier": "TIER1",
                                "physicalPathPreDate": "Accounts/Companies/535656ED-03A7-45F3-96EE-8AF9AC3CF0FE/GlobalFiles",
                                "physicalPathAddDate": false,
                                "physicalPathPostDate": ""
                            }

                            var fileRequestJson = {
                                "file": fileObj
                            };


                            var promise = ProjectSearchAPI.uploadFiles(inputFile, fileRequestJson);
                            promise.then(function (result) {

                                $scope.btnText = "Upload";
                                var fileResult = result;
                                fileResult.fileGUID = result.fileGUID;
                                fileResult.fileName = fileObj.fileName;
                                fileResult.downloadURL = BASEURL.REPORTAUTHORING_APPENDICES_COREFILES + '/files/' + result.fileGUID + '/stream';
                                $scope.generalDocArr.push(fileResult);

                                $scope.fileErrorSuccess = true;

                                $scope.fileErrorTextSuccess = "File[s] uploaded successfully.";
                                $scope.docType = 0;

                                checkFileSizeOrType();

                            }, function (error) {
                                $scope.fileErrorDanger = true;

                                $scope.fileErrorTextDanger = "File upload failed for General Documents. " + error.data.message.userMessage;
                                $scope.btnText = "Upload";
                                //  $scope.docType = 0;
                            })

                            break;
                        case '3':
                            var fileObj = {
                                "fileName": file.name,
                                "fileDescription": file.name + ', size:' + $scope.fnconvertsize(file.size),
                                "displayIndex": 0,
                                "retentionInDays": -1,
                                "deletionType": "DISABLE",
                                "folderGUID": $scope.invoiceFolderGUID,
                                "availabilityTier": "TIER1",
                                "physicalPathPreDate": "Accounts/Companies/535656ED-03A7-45F3-96EE-8AF9AC3CF0FE/GlobalFiles",
                                "physicalPathAddDate": false,
                                "physicalPathPostDate": ""
                            }

                            var fileRequestJson = {
                                "file": fileObj
                            };


                            var promise = ProjectSearchAPI.uploadFiles(inputFile, fileRequestJson);
                            promise.then(function (result) {

                                $scope.btnText = "Upload";
                                var fileResult = result;
                                fileResult.fileGUID = result.fileGUID;
                                fileResult.fileName = fileObj.fileName;
                                fileResult.downloadURL = BASEURL.REPORTAUTHORING_APPENDICES_COREFILES + '/files/' + result.fileGUID + '/stream';
                                $scope.invoicesArr.push(fileResult);

                                $scope.fileErrorSuccess = true;

                                $scope.fileErrorTextSuccess = "File[s] uploaded successfully.";
                                $scope.docType = 0;
                                checkFileSizeOrType();

                            }, function (error) {
                                $scope.fileErrorDanger = true;

                                $scope.fileErrorTextDanger = "File upload failed for Invoices." + error.data.message.userMessage;
                                $scope.btnText = "Upload";
                                //  $scope.docType = 0;
                            })

                            break;
                        case '4':
                            var fileObj = {
                                "fileName": file.name,
                                "fileDescription": file.name + ', size:' + $scope.fnconvertsize(file.size),
                                "displayIndex": 0,
                                "retentionInDays": -1,
                                "deletionType": "DISABLE",
                                "folderGUID": $scope.reportsFolderGUID,
                                "availabilityTier": "TIER1",
                                "physicalPathPreDate": "Accounts/Companies/535656ED-03A7-45F3-96EE-8AF9AC3CF0FE/GlobalFiles",
                                "physicalPathAddDate": false,
                                "physicalPathPostDate": ""
                            }

                            var fileRequestJson = {
                                "file": fileObj
                            };


                            var promise = ProjectSearchAPI.uploadFiles(inputFile, fileRequestJson);
                            promise.then(function (result) {

                                $scope.btnText = "Upload";
                                var fileResult = result;
                                fileResult.fileGUID = result.fileGUID;
                                fileResult.fileName = fileObj.fileName;
                                fileResult.downloadURL = BASEURL.REPORTAUTHORING_APPENDICES_COREFILES + '/files/' + result.fileGUID + '/stream';
                                $scope.reportsArr.push(fileResult);


                                $scope.fileErrorSuccess = true;

                                $scope.fileErrorTextSuccess = "File[s] uploaded successfully.";
                                $scope.docType = 0;
                                checkFileSizeOrType();

                            }, function (error) {
                                $scope.fileErrorDanger = true;

                                $scope.fileErrorTextDanger = "File upload failed for Reports. " + error.data.message.userMessage;
                                $scope.btnText = "Upload";
                                //  $scope.docType = 0;
                            })

                            break;
                        default:
                            break;


                    }


                } else {


                    var invalidFileTypeObj = {
                        "fileName": file.name,

                    }
                    $scope.invalidFileTypeFiles.push(invalidFileTypeObj);
                    checkFileSizeOrType();
                }

            }



        }



    }


    function checkFileSizeOrType() {
        if ($scope.bigSizeFiles.length > 0) {
            var fileDesc = "";

            for (var j = 0; j < $scope.bigSizeFiles.length; j++) {
                fileDesc = $scope.bigSizeFiles[j].fileName + ", " + fileDesc;

            }

            $scope.fileErrorDangerFileSize = true;

            $scope.fileErrorTextDangerFileSize = "File upload failed. Maximum size limit exceeded for - " + fileDesc;



        }

        if ($scope.invalidFileTypeFiles.length > 0) {

            var fileDesc = "";

            for (var j = 0; j < $scope.invalidFileTypeFiles.length; j++) {
                fileDesc = $scope.invalidFileTypeFiles[j].fileName + ", " + fileDesc;

            }

            $scope.fileErrorDangerFileType = true;

            $scope.fileErrorTextDangerFileType = "File upload failed. File type is not allowed for - " + fileDesc;


        }
        $scope.docType = 0;
        $scope.btnText = "Upload";
    }

    function setSubmitDataAttachmentsFromLocal() {
        $scope.data.attachments = [];
        angular.forEach($scope.clientDocArr, function (attachment) {
            var obj = {
                fileName: attachment.name,
                base64: attachment.base64
            }
            $scope.data.attachments.push(obj);
        });
    }

    File.prototype.convertToBase64 = function (callback) {
        var file = this;
        var FR = new FileReader();
        FR.onload = function (e) {
            var base64 = removeNoiseFromDataUrlOfBase64(e.target.result);
            callback(base64, file);
        };
        FR.readAsDataURL(this);
    };

    function removeNoiseFromDataUrlOfBase64(dataUrl) {
        return dataUrl.indexOf("base64") >= 0 ? dataUrl.split("base64,")[1] : dataUrl;
    }

    $scope.fnconvertsize = function (sizeinbytes) {

        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        if (sizeinbytes == 0)
            var convertedsize = '0 Byte';
        var i = parseInt(Math.floor(Math.log(sizeinbytes) / Math.log(1024)));
        convertedsize = Math.round(sizeinbytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
        return convertedsize;
    }

    $scope.openDeletePopup = function (fileGUID, folderType) {

        var modalInstance = $modal.open({
            templateUrl: "dllDelete.html",
            scope: $scope,
            controller: deleteFileController,
            size: 0
        });
        modalInstance.fileGuidToBeDeleted = fileGUID;
        modalInstance.folderType = folderType;
    }

    var deleteFileController = function ($scope, $modalInstance) {

        $scope.deleteFile = function () {
            var promise = ProjectSearchAPI.deleteFiles($modalInstance.fileGuidToBeDeleted)
            promise.then(function (result) {

                if ($modalInstance.folderType == 1) {
                    for (var i = 0; i < $scope.clientDocArr.length; i++) {
                        if ($scope.clientDocArr[i].fileGUID.toLowerCase() == $modalInstance.fileGuidToBeDeleted.toLowerCase()) {
                            $scope.clientDocArr.splice(i, 1);
                            $modalInstance.close();
                            break;
                        }
                    }

                } else if ($modalInstance.folderType == 2) {
                    for (var i = 0; i < $scope.invoicesArr.length; i++) {
                        if ($scope.invoicesArr[i].fileGUID.toLowerCase() == $modalInstance.fileGuidToBeDeleted.toLowerCase()) {
                            $scope.invoicesArr.splice(i, 1);
                            $modalInstance.close();
                            break;
                        }
                    }




                } else if ($modalInstance.folderType == 3) {
                    for (var i = 0; i < $scope.generalDocArr.length; i++) {
                        if ($scope.generalDocArr[i].fileGUID.toLowerCase() == $modalInstance.fileGuidToBeDeleted.toLowerCase()) {
                            $scope.generalDocArr.splice(i, 1);
                            $modalInstance.close();
                            break;
                        }
                    }
                } else if ($modalInstance.folderType == 4) {
                    for (var i = 0; i < $scope.reportsArr.length; i++) {
                        if ($scope.reportsArr[i].fileGUID.toLowerCase() == $modalInstance.fileGuidToBeDeleted.toLowerCase()) {
                            $scope.reportsArr.splice(i, 1);
                            $modalInstance.close();
                            break;
                        }
                    }

                }
                $scope.btnText = "Upload";
                $scope.docType = 0;
                $scope.fileError = true;
                $scope.fileStatusClass = "alert-success";
                $scope.fileErrorText = "File deleted successfully.";

            });

        }

        $scope.CancelDelete = function () {

            $modalInstance.close();
        }
    }



}]);;
angular.module('ProjectCreation').controller('ProjectInfoCtrl', ['$scope', '$log', '$modal', function ($scope, $log, $modal) {

    var self = this;
    //self.isDraftDateOpen = false;
    //self.isFinalDateOpen = false;

    //self.DraftDatePickerFocus = function(){
    //    self.isDraftDateOpen = true;
    //}

    //self.FinalDatePickerFocus = function(){
    //    self.isFinalDateOpen = true;
    //}

    var projectinfoControllerLogger = $log.getInstance('projectinfoController');

    projectinfoControllerLogger.info("projectinfo controller reached");


    //this.draftDue = function() {
    //    //console.log("scope draft date ");
    //}

    //this.finalDue = function() {
    //    //console.log("scope final date ");
    //}

    $scope.ShowProjectTips = function (size) {


        var modalInstance = $modal.open({
            templateUrl: 'ProjectTips.html',
            scope: $scope,
            controller: ProjectTipsController,
            size: size

        })

    }


    var ProjectTipsController = function ($scope, $modalInstance) {

        $scope.CancelDelete = function () {

            $modalInstance.close()
        }

    }

    //$scope.dates = {
    //    date1: new Date(),
    //    date2: new Date()
    //};

    $scope.open = {
        date1: false,
        date2: false,
    };

    // Disable weekend selection
    $scope.disabled = function (date, mode) {
        return (mode === 'day' && (new Date().toDateString() == date.toDateString()));
    };

    $scope.dateOptions = {
        showWeeks: false,
        startingDay: 1
    };

    $scope.timeOptions = {
        readonlyInput: true,
        showMeridian: false
    };

    $scope.openCalendar = function (e, date) {
        e.preventDefault();
        e.stopPropagation();

        $scope.open[date] = true;
    };



    $scope.displayAsPerCompany = function (main) {
        var returnValue = false;
        if (main.companyName) {
            returnValue = main.companyName == 'Enercon' ? true : false;
        }
        return returnValue;
    }

    $scope.displayAsPerOtherCompany = function (main) {

        var returnValue = true;
        if (main.companyName) {
            returnValue = main.companyName != 'Enercon' ? true : false;
        }
        return returnValue;
    }

    // watch date4 and date5 to calculate difference
    $scope.$watch(function () {
        return $scope.dates;
    }, function () {

    }, true);


}]);


$('body').keydown(function (event) {

    if (event.keyCode == 9) {
        $('#draftDueDate').next('.dropdown-menu.dropdown-menu-left.ng-pristine.ng-valid.ng-valid-date-disabled').hide();
        $('#dateFinalDue').next('.dropdown-menu.dropdown-menu-left.ng-pristine.ng-valid.ng-valid-date-disabled').hide();
    }
});

$('body').mouseup(function (event) {
    var target = event.toElement || event.relatedTarget || event.originalEvent.target;
    switch (target.attributes.id.value) {
        case 'draftDueDate':
            $('#draftDueDate').next('.dropdown-menu.dropdown-menu-left.ng-pristine.ng-valid.ng-valid-date-disabled').show();
            if (event.keyCode == 46 || event.keyCode == 9 || event.keyCode == 8) {
                $('#draftDueDate').next('.dropdown-menu.dropdown-menu-left.ng-pristine.ng-valid.ng-valid-date-disabled').hide();
            }
            break;
        case 'dateFinalDue':
            $('#dateFinalDue').next('.dropdown-menu.dropdown-menu-left.ng-pristine.ng-valid.ng-valid-date-disabled').show();
            break;

        default:
    }
});;
angular.module('ProjectCreation').controller('ProjectSearchCtrl', ['$scope', '$timeout', 'ProjectSearchAPI', '$location', 'BASEURL', '$state', function ($scope, $timeout, ProjectSearchAPI, $location, BASEURL, $state) {

    var self = this;

    var ProjectSearchObj = {};

    self.ProjectSearchFields = {};

    self.SearchData = [];

    init();

    function init() {
        getReportTypes();
        getProjectSearchFields();
    }

    self.SearchProjects = function () {
        ProjectSearchObj = {
            field1: self.ProjectSearchFields.field1,
            type1: self.ProjectSearchFields.type1,
            text1: self.ProjectSearchFields.text1,
            field2: self.ProjectSearchFields.field2,
            type2: self.ProjectSearchFields.type2,
            text2: self.ProjectSearchFields.text2,
            reportTypes: self.ProjectSearchFields.reportTypes.toString()
        }

        ProjectSearchAPI.getProjects(ProjectSearchObj).then(function (SearchResponse) {
            var SearchDataArray = [];

            for (var index = 0; index < SearchResponse.length; index++) {
                var element = {};

                element.projectGUID = SearchResponse[index].projectGUID;
                element.projectName = SearchResponse[index].name; //projectName;  
                element.FinalTotal = SearchResponse[index].numberOfFinalReports + '/' + SearchResponse[index].totalReports;

                for (var indexj = 0; indexj < SearchResponse[index].reports.length; indexj++) {
                    element.projectNumber = SearchResponse[index].reports[indexj].projectNumber;
                    element.clientCompanyName = ""; //SearchResponse[index].reports[indexj].clientCompanyName;

                    element.projectGuid = SearchResponse[index].reports[indexj].projectGuid;
                    SearchDataArray.push(element);
                    element = {};
                }
            }
            self.SearchData = SearchDataArray;


            self.showSearchResults = true;
            //CreateProjectSearchDatatable(); 


            bindSearchResultsDt(self.SearchData);


        })
    }

    self.gridData = false;

    $timeout(function () {
        $(document).ready(function () {

            tblprojectSearch = $('#tblprojectSearch').DataTable({
                //"dom": '<"pull-left"i><"pull-right"p>t<"pull-right"p>',
                destroy: true,
                "data": self.SearchData, //self.gridData,
                //"pagingType": "simple",
                /*"language": {
                    "info": "<b>Showing _START_ - _END_ of _TOTAL_ records</b>"
                },*/
                iDisplayLength: 30,
                "lengthMenu": [[30, 50, -1], [30, 50, "All"]],
                "dom": '<"top"ip>rt', //'<"top"i>rt<"top"fp><"clear">',
                //"pageLength": 30,
                "columnDefs": [
//                    {
//                    "targets": 0,
//                    "data": 'projectName',
//                     "mRender": function ( data, type, full )  {
//          return  '<a href="'+data+'">' + data + '</a>';
//      }
//                }
                    {
                        "targets": 0,
                        "data": 'projectName',
                        "mRender": function (data, type, full) {
                            return "<a title='Click to view the Project Dashboard' class='pointer table-projectName' data-id=" + full.projectGUID + ">" + data + "</a>"
                                //          return  '<a title="Click to view the Project Dashboard" href="' + '/index.html#/' + 'projectDashboard?projectGuid=' + full.projectGUID + '&accountGuid=' + BASEURL.accountGUID + '&companyGuid=' + BASEURL.companyGUID + '"' + '>' + data+'</a>';
                        }
                },

                    {
                        "targets": 1,
                        "data": 'projectNumber',
                        "orderable": false
                },

                    {
                        "targets": 2,
                        "data": 'clientCompanyName'
                },

                    {
                        "targets": 3,
                        "data": 'FinalTotal',
                        "orderable": false
                },
                    {
                        "targets": -1,
                        "title": "Actions",
                        "data": null,
                        "orderable": false,
                        "className": "center",
                        "mRender": function (data, type, full) {

                            return "<a title='View documents for this project' class='pointer table-documents' data-id=" + full.projectGUID + ">Documents</a>"
                        }
                    }
                              ]
            });
            $('#tblprojectSearch').on('click', 'a.table-projectName', function (e) {
                e.preventDefault();
                //var flag = false;

                var data = tblprojectSearch.row($(this).parents('tr')).data();
                var url = $state.href('projectDashboard', {
                    projectGuid: data.projectGUID,
                    accountGuid: BASEURL.accountGUID,
                    companyGuid: BASEURL.companyGUID
                });
                window.open(url, '_blank');

            });

            $('#tblprojectSearch').on('click', 'a.table-documents', function (e) {
                e.preventDefault();

                var data = tblprojectSearch.row($(this).parents('tr')).data();
                var url = $state.href('projectDocs', {
                    projectGuid: data.projectGUID,
                    companyGuid: BASEURL.companyGUID
                });
                window.open(url, '_blank');

            });


        });
    });


    bindSearchResultsDt = function (data) {
        if (data) self.gridData = true;

        if ($('#tblprojectSearch >tbody >tr').length) {
            tblprojectSearch.clear().draw();
        }
        tblprojectSearch.rows.add(data);
        tblprojectSearch.columns.adjust().order([0, 'asc']).draw();
    }

    /*function CreateProjectSearchDatatable(){         
        $timeout(function () {	        
             tableprojectSearch = $('#tblprojectSearch').DataTable({   
                    bDestroy: true,
                    //bRetrieve: true,
                    iDisplayLength: 30,
                    paging: true,
                    info: true,
                    filter: false,               
                    stateSave: true,
                    "lengthMenu": [[30, 50, -1], [30, 50, "All"]],            
                    "dom": '<"top"ip>rt<"clear">', //'<"top"i>rt<"top"fp><"clear">',
                    "columnDefs": [ { "targets": 1, "orderable": false },
                                  { "targets": 3, "orderable": false },
                                  { "targets": 4, "orderable": false }]
            });            
        });               
    }*/

    function getReportTypes() {
        ProjectSearchAPI.getReportTypes().then(function (data) {
            self.allReportTypes = data;
        })
    }


    function getProjectSearchFields() {
        ProjectSearchAPI.getProjectSearchFields().then(function (data) {

            self.projectSearchFields = data;

            var ProjectSearchFilters = [];
            var dupes = {};
            var singlesfilterGUID = [];
            $.each(data, function (i, el) {
                if (!dupes[el.filterGUID]) {
                    dupes[el.filterGUID] = true;
                    singlesfilterGUID.push(el);
                }
            });

            $.each(singlesfilterGUID, function (index, elmt) {
                var element = {};
                element.filterGUID = elmt.filterGUID;
                element.filterName = elmt.filterName;
                ProjectSearchFilters.push(element);
                elemet = {};
            });

            self.ProjectSearchFilters = ProjectSearchFilters;

            //set init value to ng-model search filters           
            self.ProjectSearchFields.field1 = ProjectSearchFilters[0].filterGUID;
            self.ProjectSearchFields.field2 = ProjectSearchFilters[0].filterGUID;

            //show operators for first filter default
            self.getSearchOperators(ProjectSearchFilters[0].filterGUID, 'type1');
            self.getSearchOperators(ProjectSearchFilters[0].filterGUID, 'type2');
        })
    }

    self.getSearchOperators = function (filterGUID, type) {
        var ProjectSearchOperators = [];
        $.each(self.projectSearchFields, function (index, elmt) {
            if (filterGUID == elmt.filterGUID) {
                var element = {};
                element.operatorGUID = elmt.operatorGUID;
                element.operatorName = elmt.operatorName;
                ProjectSearchOperators.push(element);
                element = {};
            }
        });
        if (type == 'type1') {
            self.ProjectSearchOperators1 = ProjectSearchOperators;
            //set init value ng-model search operators        
            self.ProjectSearchFields.type1 = ProjectSearchOperators[0].operatorGUID;
        }


        if (type == 'type2') {
            self.ProjectSearchOperators2 = ProjectSearchOperators;
            self.ProjectSearchFields.type2 = ProjectSearchOperators[0].operatorGUID;
        }
    }


}]);;
angular.module('ProjectCreation').controller('PropertyInfoCtrl', ['$log', '$scope', function ($log, $scope) {

    var propertyinfoControllerLogger = $log.getInstance('propertyinfoController');

    propertyinfoControllerLogger.info("propertyinfo controller reached");


}]);;
angular.module('ProjectCreation').controller('ReportSelectionCtrl', ['$scope', '$log', '$modal', function ($scope, $log, $modal) {

    //var reportSelectionControllerLogger = $log.getInstance('reportSelectionController');

    //reportSelectionControllerLogger.info("reportSelection controller reached");

    //var templateReportTypes = [];
    //var outputArrayForReportTpes = [];
    //var x = {};
    //this.obj = {};
    //this.template = {};
    //$scope.object = {};
    ////this.templates = [];

    //this.langLibrary = $scope.main.obj[0].libraries;
    //$scope.templates = $scope.main.obj[5].templates;



    //$scope.dynamicarrObj = {};
    //$scope.globalarr = [];

    //$scope.globallangobj = {};


    //init();

    //function init() {

    //    getTemplates($scope.main.obj[5].templates, getUniqueReportTypes);

    //}

    //function getLangLib() {
    //    try {
    //        for (var i = 0; i < $scope.reportTypes.length; i++) {

    //            $scope.globallangobj[i] = [];
    //            for (var j = 0; j < $scope.main.obj[0].libraries.length; j++) {
    //                if ($scope.main.obj[0].libraries[j].reportType == $scope.reportTypes[i]) {
    //                    $scope.globallangobj[i].push($scope.main.obj[0].libraries[j]);
    //                }
    //            }
    //        }
    //    } catch (e) {
    //        reportSelectionoControllerLogger.error(e);
    //    }

    //}

    //function getUniqueReportTypes(inputArray) {
    //    try {
    //        for (var i = 0; i < inputArray.length; i++) {
    //            if ((jQuery.inArray(inputArray[i], outputArrayForReportTpes)) == -1) {
    //                outputArrayForReportTpes.push(inputArray[i]);
    //            }
    //        }
    //        return outputArrayForReportTpes;
    //    } catch (e) {
    //        reportSelectionoControllerLogger.error(e);
    //    }
    //}


    //function getTemplates() {
    //    try {

    //        for (var i = 0; i < $scope.main.obj[5].templates.length; i++) {
    //            templateReportTypes.push($scope.main.obj[5].templates[i].reportType);
    //        }
    //        $scope.reportTypes = getUniqueReportTypes(templateReportTypes);
    //        getLangLib();


    //        for (var i = 0; i < $scope.reportTypes.length; i++) {
    //            $scope.dynamicarrObj[i] = [];
    //            for (var j = 0; j < $scope.main.obj[5].templates.length; j++) {

    //                if ($scope.main.obj[5].templates[j].reportType == $scope.reportTypes[i]) {


    //                    $scope.dynamicarrObj[i].push($scope.main.obj[5].templates[j]);



    //                }


    //            }
    //            $scope.globalarr.push($scope.dynamicarrObj[i]);

    //        }

    //        addLangToTemplates();
    //    } catch (e) {
    //        reportSelectionoControllerLogger.error(e);
    //    }


    //}

    //function addLangToTemplates() {
    //    try {
    //        for (var i = 0; i < $scope.reportTypes.length; i++) {
    //            for (var j = 0; j < $scope.globalarr[i].length; j++) {
    //                $scope.globalarr[i][j].langarr = $scope.globallangobj[i];
    //            }
    //        }
    //    } catch (e) {
    //        reportSelectionoControllerLogger.error(e);
    //    }



    //}

    //this.chkboxName = [];

    //this.chkboxChecked = function (template, index) {
    //    try {
    //        if ($scope.main.parentReportSelection.template[template.templateID])
    //            $scope.main.parentReportSelection.indexArr.push(template.templateID);
    //        else {

    //            for (var i = 0; i < $scope.main.parentReportSelection.indexArr.length; i++) {

    //                if ($scope.main.parentReportSelection.indexArr[i] == template.templateID) {

    //                    $scope.main.parentReportSelection.indexArr.splice(i, 1);
    //                }
    //            }


    //        }
    //    } catch (e) {
    //        reportSelectionoControllerLogger.error(e);
    //    }



    //}

    //this.langChanged = function (value) {


    //}


    this.ShowFeeHelp = function (size) {
        var modalInstance = $modal.open({
            templateUrl: 'app/modules/ProjectCreation/views/helpFee.html',
            scope: $scope,
            controller: FeeHelpController,
            size: size

        })
    }

    var FeeHelpController = function ($scope, $modalInstance) {
        $scope.CancelDelete = function () {
            $modalInstance.close()
        }
    }






}]);;
angular.module('ProjectCreation').controller('SiteContactInfoCtrl', ['$log', '$scope', function ($log, $scope) {

    var sitecontactinfoControllerLogger = $log.getInstance('sitecontactinfoController');

    sitecontactinfoControllerLogger.info("sitecontactinfo controller reached");

}]);;
angular.module('ProjectCreation').service('ContactAPIService', ['$http', 'UrlColl', '$q', 'APIFactory', 'BASEURL', function ($http, urlColl, $q, APIFactory, BASEURL) {

    var self = this;
    this.contacts = [];
    var test = [];

    var getContactServiceCall = function (companyId, enforceLive) {
        if ((this.contacts && this.contacts.length) > 0 && (!enforceLive)) {
            var defer = $q.defer();
            defer.resolve(this.contacts);
            return defer.promise;
        }

        var uri = BASEURL.PROJECTCREATION_CONTACTS + urlColl.GETAPI_CONTACTS;
        var params = {
            companyID: companyId
        };
        uri = uri + "?nocache=" + new Date().getTime();

        return APIFactory.get(uri, params).then(function (data) {
            return self.contacts = data.contacts;
        });
    };


    var addContactServiceCall = function (contact) {
        var uri = BASEURL.PROJECTCREATION_CONTACTS + urlColl.POSTAPI_CONTACT;
        var postData = {
            contact: contact
        };
        return APIFactory.post(uri, postData).then(function (results) {
            clearData();
        });

        //        return $http({
        //            method: 'POST',
        //            url: uri,
        //            data: contact,
        //            header: {
        //                'Content-Type': 'application/json',
        //                'Cache-Control': 'no-cache, no-store, must-revalidate',
        //                'Pragma': 'no-cache',
        //                'Expires': 0
        //            }
        //        }).then(function (results) {
        //             console.log("oooooo: "+JSON.stringify(results));
        //            var retVal = parseServiceRespForError(results);
        //            clearData();
        //            return retVal;
        //        });
    }

    // contact should be the same as post/add call
    var editContactServiceCall = function (contactID, contact) {
        var uri = BASEURL.PROJECTCREATION_CONTACTS + urlColl.PUTAPI_CONTACT;
        var params = {
            contactID: contactID
        };

        var putData = {
            contact: contact
        };


        return APIFactory.put(uri, putData, params).then(function (results) {
            clearData();

        });

        //        return $http({
        //            method: 'PUT',
        //            url: uri,
        //            data: contact,
        //            header: {
        //                'Content-Type': 'application/json',
        //                'Cache-Control': 'no-cache, no-store, must-revalidate',
        //                'Pragma': 'no-cache',
        //                'Expires': 0
        //            }
        //        }).then(function (results) {
        //            var retVal = parseServiceRespForError(results);
        //            clearData();
        //            return retVal;
        //        });
    }


    // helpers
    var parseServiceRespForError = function (rawResp) {
        var data = rawResp.data;
        var result = data.result;
        //if (!result || !result.success) throw new Error("error message here");
        return result;
    }

    var clearData = function () {
        this.contacts = null;
    }


    this.getContacts = getContactServiceCall;
    this.add = addContactServiceCall;
    this.update = editContactServiceCall;
}]);;
angular.module('ProjectCreation').factory('FetchDataFactory', ['$http', '$q', 'Urls', '$log', function ($http, $q, Urls, $log) {

    try {
        var fetchDataFactoryLogger = $log.getInstance('fetchDataFactory');

        fetchDataFactoryLogger.info(Urls.getFormData);
        var fetchData = {};
        //var staticPath = 'static_data/';
        return {

            getPreFormRenderData: function () {

                /*getLibrariesUrl  = staticPath + 'getLibraries.js';
			getOfficesUrl = staticPath + 'getOffices.js';
			getPropertyTypesUrl = staticPath + 'getPropertyTypes.js';
			getRelatedCompaniesUrl = staticPath + 'getRelatedCompanies.js';
			getTeamsUrl = staticPath + 'getTeams.js';
			getTemplatesUrl = staticPath + 'getTemplates.js';
			getTransactionTypesUrl = staticPath + 'getTransactionTypes.js';*/

                getLibrariesUrl = Urls.getLibraries;
                getOfficesUrl = Urls.getOffices;
                getPropertyTypesUrl = Urls.getPropertyTypes;
                getRelatedCompaniesUrl = Urls.getRelatedCompanies;
                getTeamsUrl = Urls.getTeams;
                getTemplatesUrl = Urls.getTemplates;
                getTransactionTypesUrl = Urls.getTransactionTypes;


                var promiseA = $http.get(getLibrariesUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("libraries fetched");
                    return result.data;
                }, function (error) {

                    fetchDataFactoryLogger.error(error.statusText);
                });

                var promiseB = $http.get(getOfficesUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("Offices fetched");
                    return result.data;
                }, function (error) {
                    fetchDataFactoryLogger.error(error.statusText);
                });

                var promiseC = $http.get(getPropertyTypesUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("PropertyTypes fetched");
                    return result.data;
                }, function (error) {
                    fetchDataFactoryLogger.error(error.statusText);
                });

                var promiseD = $http.get(getRelatedCompaniesUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("RelatedCompanies fetched");
                    return result.data;
                }, function (error) {
                    fetchDataFactoryLogger.error(error.statusText);
                });

                var promiseE = $http.get(getTeamsUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("Teams fetched");
                    return result.data;
                }, function (error) {
                    fetchDataFactoryLogger.error(error.statusText);
                });

                var promiseF = $http.get(getTemplatesUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("Templates fetched");
                    return result.data;
                }, function (error) {
                    fetchDataFactoryLogger.error(error.statusText);
                });

                var promiseG = $http.get(getTransactionTypesUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("TransactionTypes fetched");
                    return result.data;
                }, function (error) {
                    fetchDataFactoryLogger.error(error.statusText);
                });

                this.promise = $q.all([promiseA, promiseB, promiseC, promiseD, promiseE, promiseF, promiseG]).then(function (data) {
                    return data;

                });

                return this.promise;

            }
        }
    } catch (e) {
        fetchDataFactoryLogger.info("error in fetching records from service");
        fetchDataFactoryLogger.error(e);
    }

    return fetchData;

}]);;
angular.module('ProjectCreation').factory('PostDataFactory', ['$http', 'Urls', '$log', function ($http, Urls, $log) {

    try {
        var postDataFactoryLogger = $log.getInstance('postDataFactory');

        postDataFactoryLogger.info("service to post data reached");
        var postData = {};

        var path = Urls.postProjectCreationData;

        postData.submitData = function (data) {

            console.log("response post service ");
            return $http.post(path, data).then(
                function (results) {

                    return results.data;
                },
                function (error) {

                    postDataFactoryLogger.error(error.statusText);

                });


        }
    } catch (e) {
        postDataFactoryLogger.info("error in posting data service");
        postDataFactoryLogger.error("e");
    }


    return postData;

}]);;
var projectCreationModule = angular.module('ProjectCreation');
projectCreationModule.service('ProjectSearchAPI', ['APIFactory', 'UrlColl', 'BASEURL', function (APIFactory, UrlColl, BASEURL) {


    this.getProjects = function (paramObjSearch) {
        var url = BASEURL.parcelPOC + UrlColl.GET_PROJECTSEARCH;

        var params = {
            field1: paramObjSearch.field1,
            type1: paramObjSearch.type1,
            text1: paramObjSearch.text1,
            field2: paramObjSearch.field2,
            type2: paramObjSearch.type2,
            text2: paramObjSearch.text2,
            reportTypes: paramObjSearch.reportTypes
        };
        return APIFactory.get(url, params).then(function (response) {
            return response.projects;
        });
    }

    this.getReportTypes = function () {
        var url = BASEURL.parcelPOC + UrlColl.GET_REPORTTYPES;
        return APIFactory.get(url, null).then(function (response) {
            return response.reportTypes;
        });
    }

    this.getProjectSearchFields = function () {
        var url = BASEURL.parcelPOC + UrlColl.GET_PROJECTSEARCHFIELDS;
        return APIFactory.get(url, null).then(function (response) {
            return response.fields;
        });
    }

    this.getFolders = function (projectGuid) {
        var url = BASEURL.GET_FOLDERS + UrlColl.GET_FOLDERS;
        var params = {
            projectGuid: projectGuid
        };
        return APIFactory.get(url, params).then(function (response) {
            return response.projectFolder.subFolderTreeWithFiles;
        });
    }
    this.getFolderFiles = function (folderGuid) {
        var url = BASEURL.GET_FOLDER_FILES + UrlColl.GET_FOLDER_FILES;
        var params = {
            folder: folderGuid
        };
        return APIFactory.get(url, params).then(function (response) {
            return response.files;
        });
    }
    this.uploadFiles = function (file, fileRequestJson) {
        var url = BASEURL.PROJECTCREATION_PROJECTDOCUMENTS_UPLOAD + UrlColl.UPLOAD_FILES;

        var request = {
            "fileRequest": fileRequestJson
        };
        var queryParams = {

            fileRequest: JSON.stringify(fileRequestJson)
        }
        return APIFactory.uploadFile(url, request, queryParams, file).then(function (result) {
            return result.data.file;
        });
    };
    this.deleteFiles = function (fileguid) {
        var url = BASEURL.PROJECTCREATION_PROJECTDOCUMENTS_DELETE + UrlColl.DELETE_FILES;
        var params = {
            fileguid: fileguid
        };
        return APIFactory.delete(url, null, params).then(function (result) {
            return result;
        });
    };


}]);;
angular.module('ProjectCreation').service('ProjectStartupAPI', ['UrlColl', 'APIFactory', 'BASEURL', function (Urls, APIFactory, BASEURL) {

    function parseError(error) {
        return error && error.message && error.message.userMessage ? error.message.userMessage : error;
    }

    this.getInfo = function (companyId, userId) {

        var uri = BASEURL.PROJECTCREATION_PROJECTSTARTUP + Urls.GETAPI_PROJECTINFO;
        var params = {
            companyID: companyId,
            userID: userId
        };
        return APIFactory.get(uri, params);
    };

    this.getAccountUser = function (userId) {
        var uri = BASEURL.DLL_SHARED + Urls.GETAPI_ACCOUNTUSER;
        var params = {
            userID: userId
        };
        return APIFactory.get(uri, params);

    };


    this.postData = function (companyId, project) {
        var url = BASEURL.PROJECTCREATION_PROJECTSTARTUP + Urls.POSTAPI_PROJECT;
        var params = {
            companyID: companyId
        };
        var data = {
            project: project
        };
        return APIFactory.post(url, data, params).then(function (result) {
            return result.project;
        });
    };


    this.postDraft = function (companyID, draft) {
        var url = BASEURL.PROJECTCREATION_PROJECTSTARTUP + Urls.POSTAPI_DRAFTPROJECT;
        var data = {
            project: draft
        };

        return APIFactory.post(url, data).then(function (result) {
            return result.project;
        }, function (error) {
            var parsed = parseError(error);
            throw parsed;
        });
    };

    this.putDraft = function (draftProjectID, project) {
        var url = BASEURL.PROJECTCREATION_PROJECTSTARTUP + Urls.PUTAPI_DRAFTPROJECT;
        var params = {
            draftID: draftProjectID
        };
        var data = {
            project: project
        };
        return APIFactory.put(url, data, params).then(function (result) {
            return result.project;
        }, function (error) {
            var parsed = parseError(error);
            throw parsed;
        });
    };

    this.getCompany = function () {
        var url = 'http://wwwdev.edrcore.com:8080/accountmanagementservice/shared/accountmanagement/companies/e548bfc4-cf20-457a-8684-c96f876df542'; //BASEURL.PROJECTCREATION_PROJECTSTARTUP + Urls.PUTAPI_DRAFTPROJECT;

        var params = {

        };
        return APIFactory.get(url, params).then(function (result) {
            return result.companies[0];
        }, function (error) {
            var parsed = parseError(error);
            throw parsed;
        });
    }

}]);
angular.module('ProjectCreation').constant('UrlColl', {

    GETAPI_PROJECTINFO: '{companyID}/{userID}',

    POSTAPI_PROJECT: '',

    POSTAPI_DRAFTPROJECT: "draft",
    PUTAPI_DRAFTPROJECT: "draft/{draftID}",

    GETAPI_CONTACTS: 'search/{companyID}',
    POSTAPI_CONTACT: '',
    PUTAPI_CONTACT: '{contactID}',
    GETAPI_ACCOUNTUSER: 'users/{userID}',



    GET_PROJECTSEARCH: 'dashboard/projectsearch?field1={field1}&type1={type1}&text1={text1}&field2={field2}&type2={type2}&text2={text2}&reportTypes={reportTypes}',

    GET_REPORTTYPES: 'reports/reporttypes',

    GET_PROJECTSEARCHFIELDS: 'projectsearch/fields',

    GET_FOLDERS: '{projectGuid}/documents',

    GET_FOLDER_FILES: '?fileRequestJson={fileRequestJson}',

    UPLOAD_FILES: '?fileRequest={fileRequest}',

    DELETE_FILES: '{fileguid}'


});; // https://github.com/Gillardo/bootstrap-ui-datetime-picker
// Version: 1.1.0
// Released: 2015-05-28 
angular.module('ui.bootstrap.datetimepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.position'])
    .constant('uiDatetimePickerConfig', {
        dateFormat: 'yyyy-MM-dd HH:mm',
        enableDate: true,
        enableTime: true,
        todayText: 'Today',
        nowText: 'Now',
        clearText: 'Clear',
        closeText: 'Done',
        dateText: 'Date',
        timeText: 'Time',
        closeOnDateSelection: true,
        appendToBody: false,
        showButtonBar: true
    })
    .directive('datetimePicker', ['$compile', '$parse', '$document', '$timeout', '$position', 'dateFilter', 'dateParser', 'uiDatetimePickerConfig',
        function ($compile, $parse, $document, $timeout, $position, dateFilter, dateParser, uiDatetimePickerConfig) {
            return {
                restrict: 'A',
                require: 'ngModel',
                scope: {
                    isOpen: '=?',
                    enableDate: '=?',
                    enableTime: '=?',
                    todayText: '@',
                    nowText: '@',
                    dateText: '@',
                    timeText: '@',
                    clearText: '@',
                    closeText: '@',
                    dateDisabled: '&'
                },
                link: function (scope, element, attrs, ngModel) {
                    var dateFormat = uiDatetimePickerConfig.dateFormat,
                        currentDate,
                        closeOnDateSelection = angular.isDefined(attrs.closeOnDateSelection) ? scope.$parent.$eval(attrs.closeOnDateSelection) : uiDatetimePickerConfig.closeOnDateSelection,
                        appendToBody = angular.isDefined(attrs.datepickerAppendToBody) ? scope.$parent.$eval(attrs.datepickerAppendToBody) : uiDatetimePickerConfig.appendToBody;

                    scope.showButtonBar = angular.isDefined(attrs.showButtonBar) ? scope.$parent.$eval(attrs.showButtonBar) : uiDatetimePickerConfig.showButtonBar;

                    // determine which pickers should be available. Defaults to date and time
                    scope.enableDate = angular.isDefined(scope.enableDate) ? scope.enableDate : uiDatetimePickerConfig.enableDate;
                    scope.enableTime = angular.isDefined(scope.enableTime) ? scope.enableTime : uiDatetimePickerConfig.enableTime;

                    // default picker view
                    scope.showPicker = scope.enableDate ? 'date' : 'time';

                    // default text
                    scope.todayText = scope.todayText || 'Today';
                    scope.nowText = scope.nowText || 'Now';
                    scope.clearText = scope.clearText || 'Clear';
                    scope.closeText = scope.closeText || 'Close';
                    scope.dateText = scope.dateText || 'Date';
                    scope.timeText = scope.timeText || 'Time';

                    scope.getText = function (key) {
                        return scope[key + 'Text'] || uiDatetimePickerConfig[key + 'Text'];
                    };

                    attrs.$observe('datetimePicker', function (value) {
                        dateFormat = value || uiDatetimePickerConfig.dateFormat;
                        ngModel.$render();
                    });

                    // popup element used to display calendar
                    var popupEl = angular.element('' +
                        '<div date-picker-wrap ng-show="showPicker == \'date\'">' +
                        '<div datepicker></div>' +
                        '</div>' +
                        '<div time-picker-wrap ng-show="showPicker == \'time\'">' +
                        '<div timepicker style="margin:0 auto"></div>' +
                        '</div>');

                    // get attributes from directive
                    popupEl.attr({
                        'ng-model': 'date',
                        'ng-change': 'dateSelection()'
                    });

                    function cameltoDash(string) {
                        return string.replace(/([A-Z])/g, function ($1) {
                            return '-' + $1.toLowerCase();
                        });
                    }

                    // datepicker element
                    var datepickerEl = angular.element(popupEl.children()[0]);
                    if (attrs.datepickerOptions) {
                        angular.forEach(scope.$parent.$eval(attrs.datepickerOptions), function (value, option) {
                            datepickerEl.attr(cameltoDash(option), value);
                        });
                    }

                    // timepicker element
                    var timepickerEl = angular.element(popupEl.children()[1]);
                    if (attrs.timepickerOptions) {
                        angular.forEach(scope.$parent.$eval(attrs.timepickerOptions), function (value, option) {
                            timepickerEl.attr(cameltoDash(option), value);
                        });
                    }

                    // set datepickerMode to day by default as need to create watch
                    // this gets round issue#5 where by the highlight is not shown
                    if (!attrs['datepickerMode']) attrs['datepickerMode'] = 'day';

                    scope.watchData = {};
                    angular.forEach(['minDate', 'maxDate', 'datepickerMode'], function (key) {
                        if (attrs[key]) {
                            var getAttribute = $parse(attrs[key]);

                            scope.$parent.$watch(getAttribute, function (value) {
                                scope.watchData[key] = value;
                            });
                            datepickerEl.attr(cameltoDash(key), 'watchData.' + key);

                            // Propagate changes from datepicker to outside
                            if (key === 'datepickerMode') {
                                var setAttribute = getAttribute.assign;
                                scope.$watch('watchData.' + key, function (value, oldvalue) {
                                    if (value !== oldvalue) {
                                        setAttribute(scope.$parent, value);
                                    }
                                });
                            }
                        }
                    });

                    if (attrs.dateDisabled) {
                        datepickerEl.attr('date-disabled', 'dateDisabled({ date: date, mode: mode })');
                    }

                    function isDateDisabled(dt) {
                        return attrs.dateDisabled && angular.isDefined(dt) && scope.dateDisabled({
                            date: dt,
                            mode: scope.watchData['datepickerMode']
                        });
                    }

                    function parseDate(viewValue) {
                        if (!viewValue) {
                            ngModel.$setValidity('date', true);
                            return null;
                        } else if (angular.isDate(viewValue) && !isNaN(viewValue)) {
                            ngModel.$setValidity('date', true);
                            return viewValue;
                        } else if (angular.isString(viewValue)) {
                            var date = dateParser.parse(viewValue, dateFormat) || new Date(viewValue);

                            if (isNaN(date)) {
                                ngModel.$setValidity('date', false);
                                return undefined;
                            } else {
                                ngModel.$setValidity('date', true);
                                return date;
                            }
                        } else {
                            ngModel.$setValidity('date', false);
                            return undefined;
                        }
                    }
                    ngModel.$parsers.unshift(parseDate);

                    // Inner change
                    scope.dateSelection = function (dt) {
                        // check which picker is being shown, if its date, all is fine and this is the date
                        // we will use, if its the timePicker but enableDate = true, we need to merge
                        // the values, else timePicker will reset the date
                        if (scope.enableDate && scope.enableTime && scope.showPicker === 'time') {
                            if (currentDate && currentDate !== null && (scope.date !== null || dt || dt != null)) {
                                // dt will not be undefined if the now or today button is pressed
                                if (dt && dt != null) {
                                    currentDate.setHours(dt.getHours());
                                    currentDate.setMinutes(dt.getMinutes());
                                    currentDate.setSeconds(dt.getSeconds());
                                    currentDate.setMilliseconds(dt.getMilliseconds());
                                    dt = new Date(currentDate);
                                } else {
                                    currentDate.setHours(scope.date.getHours());
                                    currentDate.setMinutes(scope.date.getMinutes());
                                    currentDate.setSeconds(scope.date.getSeconds());
                                    currentDate.setMilliseconds(scope.date.getMilliseconds());
                                }

                            }
                        }

                        if (angular.isDefined(dt)) {
                            scope.date = dt;
                        }

                        // store currentDate
                        currentDate = scope.date;

                        ngModel.$setViewValue(scope.date);
                        ngModel.$render();

                        if (closeOnDateSelection) {
                            // do not close when using timePicker
                            if (scope.showPicker != 'time') {
                                // if time is enabled, swap to timePicker
                                if (scope.enableTime) {
                                    scope.showPicker = 'time';
                                } else {
                                    scope.isOpen = false;
                                    element[0].focus();
                                }
                            }
                        }

                    };

                    element.bind('input change keyup', function () {
                        scope.$apply(function () {
                            scope.date = ngModel.$modelValue;
                        });
                    });

                    // Outer change
                    ngModel.$render = function () {
                        var date = ngModel.$viewValue ? parseDate(ngModel.$viewValue) : null;
                        var display = date ? dateFilter(date, dateFormat) : '';
                        element.val(display);
                        scope.date = date;
                    };

                    var documentClickBind = function (event) {
                        if (scope.isOpen && event.target !== element[0]) {
                            scope.$apply(function () {
                                scope.isOpen = false;
                            });
                        }
                    };

                    var keydown = function (evt, noApply) {
                        scope.keydown(evt);
                    };
                    element.bind('keydown', keydown);

                    scope.keydown = function (evt) {
                        if (evt.which === 27) {
                            evt.preventDefault();

                            if (scope.isOpen) {
                                evt.stopPropagation();
                            }
                            scope.close();
                        } else if (evt.which === 40 && !scope.isOpen) {
                            scope.isOpen = true;
                        }
                    };

                    scope.$watch('isOpen', function (value) {
                        if (value) {
                            scope.$broadcast('datepicker.focus');

                            scope.position = appendToBody ? $position.offset(element) : $position.position(element);
                            scope.position.top = scope.position.top + element.prop('offsetHeight');

                            $document.bind('mousedown', documentClickBind);
                        } else {
                            $document.unbind('mousedown', documentClickBind);
                        }
                    });

                    scope.isTodayDisabled = function () {
                        return isDateDisabled(new Date());
                    };

                    scope.select = function (date) {

                        if (date === 'today' || date == 'now') {
                            var now = new Date();
                            if (angular.isDate(ngModel.$modelValue)) {
                                date = new Date(ngModel.$modelValue);
                                date.setFullYear(now.getFullYear(), now.getMonth(), now.getDate());
                                date.setHours(now.getHours(), now.getMinutes(), now.getSeconds(), now.getMilliseconds());
                            } else {
                                date = now;
                            }
                        }

                        scope.dateSelection(date);
                    };

                    scope.close = function () {
                        scope.isOpen = false;
                        element[0].focus();
                    };

                    scope.changePicker = function (e) {
                        scope.showPicker = e;
                    };

                    var $popup = $compile(popupEl)(scope);
                    // Prevent jQuery cache memory leak (template is now redundant after linking)
                    popupEl.remove();

                    if (appendToBody) {
                        $document.find('body').append($popup);
                    } else {
                        element.after($popup);
                    }

                    scope.$on('$destroy', function () {
                        $popup.remove();
                        element.unbind('keydown', keydown);
                        $document.unbind('mousedown', documentClickBind);
                    });
                }
            };
        }])

.directive('datePickerWrap', function () {
    return {
        restrict: 'EA',
        replace: true,
        transclude: true,
        templateUrl: 'template/datetime-picker.html',
        link: function (scope, element, attrs) {
            element.bind('mousedown', function (event) {
                event.preventDefault();
                event.stopPropagation();
            });
        }
    };
})

.directive('timePickerWrap', function () {
    return {
        restrict: 'EA',
        replace: true,
        transclude: true,
        templateUrl: 'template/datetime-picker.html',
        link: function (scope, element, attrs) {
            element.bind('mousedown', function (event) {
                event.preventDefault();
                event.stopPropagation();
            });
        }
    };
});
angular.module('ui.bootstrap.datetimepicker').run(['$templateCache', function ($templateCache) {
    'use strict';

    $templateCache.put('template/datetime-picker.html',
        "<ul class=\"dropdown-menu dropdown-menu-left\" ng-style=\"{display: (isOpen && 'block') || 'none', top: position.top+'px', left: position.left+'px'}\" style=left:inherit ng-keydown=keydown($event)><li style=\"padding:0 5px 5px 5px\" class=datetime-picker><div ng-transclude></div></li><li ng-if=showButtonBar style=padding:5px><span class=\"btn-group pull-left\" style=margin-right:10px><button ng-if=\"showPicker == 'date'\" type=button class=\"btn btn-sm btn-info\" ng-click=\"select('today')\" ng-disabled=isTodayDisabled()>{{ getText('today') }}</button> <button ng-if=\"showPicker == 'time'\" type=button class=\"btn btn-sm btn-info\" ng-click=\"select('now')\" ng-disabled=isTodayDisabled()>{{ getText('now') }}</button> <button type=button class=\"btn btn-sm btn-danger\" ng-click=select(null)>{{ getText('clear') }}</button></span> <span class=\"btn-group pull-right\"><button ng-if=\"showPicker == 'date' && enableTime\" type=button class=\"btn btn-sm btn-default\" ng-click=\"changePicker('time')\">{{ getText('time')}}</button> <button ng-if=\"showPicker == 'time' && enableDate\" type=button class=\"btn btn-sm btn-default\" ng-click=\"changePicker('date')\">{{ getText('date')}}</button> <button type=button class=\"btn btn-sm btn-success\" ng-click=close()>{{ getText('close') }}</button></span></li></ul>"
    );

}]);; // define module
angular.module('LenderProjectCreation', ['ngFileUpload', 'ui.router.state', 'ui.bootstrap']);

// routers
angular.module('LenderProjectCreation').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');
        $stateProvider.state('quickCreateLenderProj', {
            'url': '/QuickLenderProjectSetup',
            'controller': 'LenderFormCtrl as main',
            'templateUrl': 'app/modules/LenderProjectCreation/views/lender_form.html',
            'resolve': {
                'synchronousObj': ['FetchDataFactory',
                    function (fetchData_svc) {

                        return fetchData_svc.getPreFormRenderData();
                    }
                ]

            }
        })
    }
]);;
angular.module('LenderProjectCreation').controller('LenderAddPropertyInfoCtrl', ['$scope', '$log', '$modal', function ($scope, $log, $modal) {

    var addpropertyinfoControllerLogger = $log.getInstance('LenderAddPropertyInfoCtrl');

    addpropertyinfoControllerLogger.info("addpropertyinfo controller reached");
    //this.propertyTypes = $scope.main.obj[2].propertyTypes;
    //this.transactionTypes = $scope.main.obj[6].transactionTypes;
    this.propTypeChanged = function (propTypeChanged) {

        console.log("option changed " + propTypeChanged);
        propTypeChanged === "Other..." ? this.showOption = true : this.showOption = false;
    }


    this.showLatLonHelp = function () {
        var modalInstance = $modal.open({
            templateUrl: 'app/modules/LenderProjectCreation/views/lender_helpLatLon.html',
            scope: $scope,
            controller: LatLonHelpController,
            size: 1

        })
    }

    var LatLonHelpController = function ($scope, $modalInstance) {
        $scope.CancelDelete = function () {
            $modalInstance.close()
        }
    }

}]);;
angular.module('LenderProjectCreation').controller('LenderAttachmentCtrl', ['$scope', '$log', 'Upload', function ($scope, $log, Upload) {

    var self = this;

    $scope.$parent.$parent.main.submitData = $scope.$parent.$parent.main.submitData || {};
    self.data = $scope.$parent.$parent.main.submitData;

    self.attachmentFiles = [];
    self.UploadSuccessMsg = "";
    self.UploadErrorMsg = "";
    self.IncorrectFormat = "";
    self.isUploadErrorMsg = false;

    //  var attachmentsControllerLogger = $log.getInstance('LenderProjectCreation.LenderAttachmentCtrl');

    //  attachmentsControllerLogger.info("attachments controller reached");

    //    $scope.$watch('files', function() {
    //        $scope.upload($scope.files);
    //    });
    // set default directive values
    // Upload.setDefaults( {ngf-keep:false ngf-accept:'image/*', ...} );
    this.Upload = function () {
        self.UploadErrorMsg = "";
        self.isUploadErrorMsg = false;

        var files = $scope.files;
        if (!files || files.length <= 0) {
            self.isUploadErrorMsg = true;
            self.UploadErrorMsg += "Please attach files before trying to upload.";
            return;
        }
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            Upload.upload({
                url: 'https://angular-file-upload-cors-srv.appspot.com/upload',
                //                    fields: {
                //                        'username': $scope.username
                //                    },
                file: file
            }).progress(function (evt) {
                var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);
            }).success(function (data, status, headers, config) {
                //console.log('file ' + config.file.name + 'uploaded. Response: ' + JSON.stringify(data));
                self.attachmentFiles.push({
                    name: data.result[0].name,
                    size: data.result[0].size
                });
            }).error(function (data, status, headers, config) {
                //console.log('error status: ' + status);
                self.isUploadErrorMsg = true;
                self.UploadErrorMsg += "Failed to upload file '" + config.file.name + "'. Status: " + status + ".\n";
            })
        }

    };

    this.RemoveAttachment = function (name) {
        removeFileFromCollection(name);
    };

    var removeFileFromCollection = function (name) {
        if (!self || !self.attachmentFiles) return;
        for (var i = 0; i < self.attachmentFiles.length; i++) {
            var file = self.attachmentFiles[i];
            if (file.name == name) {
                self.attachmentFiles.splice(i, 1);
            }
        }
    }

    File.prototype.convertToBase64 = function (callback) {
        var file = this;
        var FR = new FileReader();
        FR.onload = function (e) {
            var base64 = removeNoiseFromDataUrlOfBase64(e.target.result);
            callback(base64, file);
        };
        FR.readAsDataURL(this);
    };

    function removeNoiseFromDataUrlOfBase64(dataUrl) {
        return dataUrl.indexOf("base64") >= 0 ? dataUrl.split("base64,")[1] : dataUrl;
    }

    function convertAttachedFilesToBase64() {
        if (!$scope.files || !$scope.files.length) {
            return;
        } else {
            self.attachmentFilesExists = true;
        }

        var files = $scope.files;
        for (var i = 0, completedCount = 0; i < files.length; i++) {
            var file = files[i];
            file.convertToBase64(function (base64, attachedFile) {
                var attach = angular.copy(attachedFile);
                attach.base64 = base64;
                self.attachmentFiles.push(attach);
                completedCount++;
                if (completedCount == files.length) {
                    // callback invoked via non-angular code (FileReader.onload)
                    // need to apply changes to scope
                    $scope.$apply();
                    // set attachments to parent submit object
                    setSubmitDataAttachmentsFromLocal();
                }
            });
        }

        // clear files after processing
        $scope.files = [];
    }

    $scope.$watchCollection("files", function () {
        convertAttachedFilesToBase64();
    });

    function setSubmitDataAttachmentsFromLocal() {
        self.data.attachments = [];
        angular.forEach(self.attachmentFiles, function (attachment) {
            var obj = {
                fileName: attachment.name,
                base64: attachment.base64
            }
            self.data.attachments.push(obj);
        });
    }


 }]);;
angular.module('LenderProjectCreation').controller('LenderEmailContactsCtrl', ['$scope', '$log', '$modalInstance', '$http', 'notificationObj', 'ContactAPIService', 'BASEURL', function ($scope, $log, $modalInstance, $http, notificationObj, ContactAPIService, BASEURL) {

    var self = this;
    // pagination
    self.currentPage = 1;
    self.numPerPage = 5;
    self.totalItems = 0;
    // data structures
    self.ContactArr = [];
    self.filtered = [];

    self.companyId = BASEURL.companyGUID;
    init();

    function init() {
        getContactData();
    }

    function getContactData(enforceLive) {
        ContactAPIService.getContacts(self.companyId, enforceLive).then(function (data) {
            bind(data);
        });
    }

    function bind(data) {
        if (data.length > 0) {

            self.ContactArr = data;
            self.totalItems = self.ContactArr.length;
        }
    }



    this.paginate = function (value) {
        var begin, end, index;
        begin = (self.currentPage - 1) * self.numPerPage;
        end = begin + self.numPerPage;
        index = self.filtered.indexOf(value);
        return (begin <= index && index < end);
    };

    this.Cancel = function () {
        $modalInstance.close();
    };

    this.DoneSelection = function () {
        //notificationObj.toContacts
        //notificationObj.ccContacts
        notificationObj.to.contacts = [];
        notificationObj.cc.contacts = [];
        for (var i = 0; i < self.ContactArr.length; i++) {
            var contact = self.ContactArr[i];
            if (contact.toSelected) {
                notificationObj.to.contacts.push(contact);
            }
            if (contact.ccSelected) {
                notificationObj.cc.contacts.push(contact);
            }
        }
        $modalInstance.close();
    };

}]);;
angular.module('LenderProjectCreation').controller('LenderEmailNotificationCtrl', ['$scope', '$log', '$modal', function ($scope, $log, $modal) {

    /*var emailNotificationControllerLogger = $log.getInstance('emailNotificationController');

    emailNotificationControllerLogger.info("attachments controller reached");*/

    $scope.$emit('showButtons');

    this.sendNotification = function () {

        /*if(!$scope.main.parentEmailNotification.sendMail){
			$scope.main.parentEmailNotification.to = "";
			$scope.main.parentEmailNotification.CC = "";
			$scope.main.parentEmailNotification.message = "";
		}*/

    }

    this.emailTo = function (form) {

        if (form.To.$error.email) {
            emailNotificationControllerLogger.info("emailto field entered wrong");
            $('#divEmailTo').addClass('has-error');

        } else {
            $('#divEmailTo').removeClass('has-error');

        }
    }

    this.emailCC = function (form) {

        if (form.CC.$error.email) {
            emailNotificationControllerLogger.info("emailcc field entered wrong");
            $('#divEmailCC').addClass('has-error');

        } else {
            $('#divEmailCC').removeClass('has-error');

        }
    }

    this.ShowEmailHelp = function (size) {
        var modalInstance = $modal.open({
            templateUrl: 'app/modules/LenderProjectCreation/views/lender_helpEmailConsultant.html',
            scope: $scope,
            controller: EmailHelpController,
            size: size

        })
    }
    var EmailHelpController = function ($scope, $modalInstance) {
        $scope.CancelDelete = function () {
            $modalInstance.close()
        }

        $scope.ShowAccessHelp = function () {
            $scope.CancelDelete();
            showAccessHelp();
        }
    }

    function showAccessHelp(size) {
        var modalInstance = $modal.open({
            templateUrl: 'app/modules/LenderProjectCreation/views/lender_helpAccess.html',
            scope: $scope,
            controller: AccessHelpController,
            size: size
        })
    }
    var AccessHelpController = function ($scope, $modalInstance) {
        $scope.CancelDelete = function () {
            $modalInstance.close()
        }
    }


    var self = this;
    self.notifications = $scope.$parent.$parent.main.submitData.notification;

    self.emailNotificationObj = {
        from: {
            name: "Mr. Appraiser Gabberty"
        },
        to: {
            contacts: [],
            display: null
        },
        cc: {
            contacts: [],
            display: null
        },
        message: {
            text: ""
        }
    };

    this.ShowFindContact = function () {
        var modalInstance = $modal.open({
            templateUrl: 'app/modules/LenderProjectCreation/views/lender_emailContacts.html',
            scope: $scope,
            controller: 'LenderEmailContactsCtrl as emailContacts',
            size: 'lg',
            windowClass: 'app-modal-window',

            resolve: {
                notificationObj: function () {
                    return self.emailNotificationObj;
                }
            }
        });

        modalInstance.result.then(function () {
            //console.log(JSON.stringify(self.emailNotificationObj));

            var to = self.emailNotificationObj.to;
            if (to.contacts && to.contacts.length > 0) {
                var toval = stringifyContactColl(to.contacts);
                //if (to.display) {
                //    to.display += ", " + toval;
                //} else {
                to.display = toval;
                //}
            }

            var cc = self.emailNotificationObj.cc;
            if (cc.contacts && cc.contacts.length > 0) {
                var ccval = stringifyContactColl(cc.contacts);
                //if (cc.display) {
                //    cc.display += ", " + ccval;
                //} else {
                cc.display = ccval;
                //}
            }

            self.notifications.emailTo = self.emailNotificationObj.to.display;
            self.notifications.emailCC = self.emailNotificationObj.cc.display;

            //console.log(JSON.stringify(self.emailNotificationObj));
        });
    };

    function stringifyContactColl(coll) {
        if (!coll || coll.length <= 0) return "";

        var val = coll[0].email;
        for (var i = 1; i < coll.length; i++) {
            val += ", " + coll[i].email;
        }
        return val;
    }



}]);;
angular.module('LenderProjectCreation').controller('LenderFindContactCtrl', ['$scope', '$log', '$modalInstance', '$http', 'contactObj', 'ContactAPIService', 'BASEURL',
function ($scope, $log, $modalInstance, $http, contactObj, ContactAPIService, BASEURL) {

        $scope.possibleTimes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];

        // $scope.time = time;


        var self = this;
        self.companyId = BASEURL.companyGUID;
        self.currentPage = 1;
        self.numPerPage = 5;
        self.CompanyContactsArr = [];
        self.totalItems = 0;
        $scope.selectedTab = 1;
        init();

        self.newContact = {};


        function init() {
            //$http.get('app/modules/ProjectCreation/sampleJson/Contacts.js').success(function (data) {
            //    if (data.length > 0) {

            //        self.CompanyContactsArr = data;
            //        self.totalItems = self.CompanyContactsArr.length;
            //    }
            //});


            getContactData();
        }

        function getContactData(enforceLive) {
            ContactAPIService.getContacts(self.companyId, enforceLive).then(function (data) {
                bind(data);
            });
        }

        function bind(data) {
            if (data.length > 0) {

                self.CompanyContactsArr = data;
                self.totalItems = self.CompanyContactsArr.length;
            }
        }



        this.paginate = function (value) {
            var begin, end, index;
            begin = (self.currentPage - 1) * self.numPerPage;
            end = begin + self.numPerPage;
            index = self.filtered.indexOf(value);
            return (begin <= index && index < end);
        };
        this.CancelDelete = function () {

            //console.log("return value: " + $scope.hour);
            //console.log(time);
            //$modalInstance.close($scope.hour);
            $modalInstance.close();
        }

        this.FindContactClick = function () {


            $scope.selectedTab = 1;

        }

        this.AddContactClick = function () {
            $scope.selectedTab = 2;
        }
        this.ContactSelected = function (contact) {
            var c = contact.FirstName + contact.LastName;
            console.log(c);
            var objContactSelected = {

                contactName: contact.firstName + " " + contact.lastName,
                companyName: contact.companyName || "",
                address: contact.address,
                city: contact.city,
                state: contact.state,
                zip: contact.zipCode,

                contactID: contact.contactID,
                phone: contact.phone,
                fax: contact.fax,
                email: contact.email

                //FirstName: contact.FirstName == null ? "" : contact.FirstName,
                //LastName: contact.LastName == null ? "" : contact.LastName,


                //Phone: contact.Phone == null ? "" : contact.Phone,
                //Fax: "",
                //Email: contact.EmailAddress == null ? "" : contact.EmailAddress

            };

            contactObj.client = objContactSelected;
            localStorage.setItem('selectedCompanyContactDetails', objContactSelected);
            $modalInstance.close();

        }

        this.SubmitContact = function () {

            //var companyContactList = "";

            //var newAddedContact = {

            //    FirstName: this.FirstName == null ? "" : this.FirstName,
            //    LastName: this.LastName == null ? "" : this.LastName,
            //    CompanyName: this.CompanyName == null ? "" : this.CompanyName,
            //    Address: this.Address == null ? "" : this.Address,
            //    City: this.City == null ? "" : this.City,
            //    State: this.State == null ? "" : this.State,
            //    Zip: this.ZipCode == null ? "" : this.ZipCode,
            //    Phone: this.Phone == null ? "" : this.Phone,
            //    Fax: this.Fax == null ? "" : this.Fax,
            //    Email: this.Email == null ? "" : this.Email

            //}

            //var companyContactList = {

            //    FirstName: this.FirstName == null ? "" : this.FirstName,
            //    LastName: this.LastName == null ? "" : this.LastName,
            //    Company: this.CompanyName == null ? "" : this.CompanyName,
            //    EmailAddress: this.Email == null ? "" : this.Email,
            //    Phone: this.Phone == null ? "" : this.Phone
            //}
            //self.CompanyContactsArr.push(companyContactList);
            //ClearFields();

            var contact = self.newContact;
            ContactAPIService.add(contact).then(function (result) {
                ClearFields();
                getContactData(true);
            }, function (error) {});
        }
        this.Reset = function () {
            ClearFields();
        }

        function ClearFields() {

            self.FirstName = "";
            self.LastName = "";
            self.CompanyName = "";
            self.Address = "";
            self.City = "";
            self.State = "";
            self.ZipCode = "";
            self.Phone = "";
            self.Fax = "";
            self.Email = "";

            self.newContact = {};
        }


        // edit contact
        self.editSelected = false;
        // contact selected for edit
        // used for clearing user changes
        self.contactSelectedToEdit = {};
        // hold user changes
        self.editedContact = {};

        self.EditContact = function (contact) {
            self.editSelected = true;
            self.contactSelectedToEdit = contact;
            copyContactSelectedToEditToEdited();
        }
        self.ResetEditChanges = function () {
            copyContactSelectedToEditToEdited();
        }
        self.SubmitEdit = function () {
            var contact = self.editedContact;
            ContactAPIService.update(contact.contactID, contact).then(function (result) {
                getContactData(true);
            }, function (error) {});
        }
        self.CancelEdit = function () {
            clearEditObjects();
        }

        // helpers
        function clearEditObjects() {
            self.contactSelectedToEdit = null;
            self.editedContact = null;
            self.editSelected = false;
        }

        function copyContactSelectedToEditToEdited() {
            copyObj(self.contactSelectedToEdit, self, 'editedContact');
        }

        function copyObj(original, copyObjContainer, property) {
            copyObjContainer[property] = angular.copy(original);
        }

}]);;
angular.module('LenderProjectCreation').controller('LenderFormCtrl', ['$scope', '$timeout', 'synchronousObj', 'PostDataFactory', '$log', '$location', 'ProjectStartupAPI', '$filter', 'BASEURL', function ($scope, $timeout, synchronousObj, postData_svc, $log, $location, ProjectStartupAPI, $filter, BASEURL) {

    var companyId = BASEURL.companyGUID;

    var self = this;

    // self.reports_requestBidsCompanyIDs=[];
    // self.reports_assignConsultantsCompanyID=[];

    self.loadData = {

        reportTypes: [],
        transactionTypes: {}, // string array
        propertyTypes: {}, // string array
        accessTo: {
            organizationOptions: [],
            mortgageBrokerOptions: [],
            thirdPartyOptions: []
        },
        consultants: []
    };

    self.submitData = {
        companyGUID: companyId,
        /* draftDueDate: new Date(),
         finalDueDate: new Date(),*/
        property: {},
        reports: [],
        mortgageBroker: {},
        siteContact: {},

        accessParties: [],
        // helper for accessParties
        accessCollector: {},

        notification: {}
    };

    ProjectStartupAPI.getInfo(companyId).then(function (result) {
        // simple parse
        self.loadData.transactionTypes = result.transactionTypes;
        self.loadData.propertyTypes = result.propertyTypes;


        // parse report types
        for (var i = 0; i < result.templates.length; i++) {
            var template = result.templates[i];

            var reportTypeVal = template.reportType;

            var reportType = null;
            for (var j = 0; j < self.loadData.reportTypes.length; j++) {
                var existing = self.loadData.reportTypes[j];
                if (existing.title == reportTypeVal) {
                    reportType = existing;
                    break;
                }
            }
            if (!reportType) {
                reportType = {
                    title: reportTypeVal,
                    templates: [],
                    libraries: []
                };
                self.loadData.reportTypes.push(reportType);
            }

            reportType.templates.push(template);
        }
        // parse report consultants
        if (result.relatedCompanies && result.relatedCompanies.length) {
            for (var i = 0; i < result.relatedCompanies.length; i++) {
                var related = result.relatedCompanies[i];

                var option = {
                    name: related.name,
                    accessType: "company",
                    companyID: related.companyID

                };

                if (related.functions && related.functions.length > 0 && related.functions.indexOf('Consultant') >= 0) {
                    self.loadData.consultants.push(option);
                }
            }
        }

        if (result.libraries && result.libraries.length) {
            for (var i = 0; i < result.libraries.length; i++) {
                var library = result.libraries[i];
                var reportTypeVal = library.reportType;
                var reportType = null;
                for (var j = 0; j < self.loadData.reportTypes.length; j++) {
                    var existing = self.loadData.reportTypes[j];
                    if (existing.title == reportTypeVal) {
                        reportType = existing;
                        break;
                    }
                }
                if (!reportType) continue;

                reportType.libraries.push(library);
            }
        }

        // parse access to options
        // 1. offices
        if (result.offices && result.offices.length) {
            for (var i = 0; i < result.offices.length; i++) {
                var office = result.offices[i];
                var option = {
                    name: 'Everyone in the ' + office.name + ' office',
                    accessType: "office",
                    officeID: office.officeID
                };
                self.loadData.accessTo.organizationOptions.push(option);
            }
        }
        // 2. teams
        if (result.teams && result.teams.length) {
            for (var i = 0; i < result.teams.length; i++) {
                var team = result.teams[i];
                var option = {
                    name: 'Everyone in the ' + team.name,
                    accessType: "team",
                    teamID: team.teamID
                };
                self.loadData.accessTo.organizationOptions.push(option);
            }
        }
        // 3. relatedCompanies
        if (result.relatedCompanies && result.relatedCompanies.length) {
            for (var i = 0; i < result.relatedCompanies.length; i++) {
                var related = result.relatedCompanies[i];

                var option = {
                    name: related.name,
                    accessType: "company",
                    companyID: related.companyID
                };

                if (related.functions && related.functions.length > 0 && related.functions.indexOf('Client') >= 0) {
                    self.loadData.accessTo.mortgageBrokerOptions.push(option);
                }
            }
        }
    });


    this.countries = ['Albania', 'Andorra',
        'Antarctica', 'Armenia', 'Azerbaijan'
    ];

    $scope.$on('showButtons', function () {

        self.lastDivLoaded = true;
    });

    self.showDisplayMsg = function (msg, type) {
        self.serviceResponseAlert = true;
        self.serviceResponseText = msg;
        self.msgType = 'alert-' + (type || 'danger');
    }

    self.CreateProject = function (form) {
        if (!form || form.$invalid) {
            self.showDisplayMsg('Invalid Form Submission');
            return;
        }


        var userInput = angular.copy(self.submitData);

        self.submitData.property.reports = [];

        for (var r in self.submitData.reports) {
            var val = self.submitData.reports[r];
            if (!val || !val.selected) continue;

            self.submitData.reports[r].bidCompanyIDs = [];

            if (self.submitData.reports[r].bidCompanys != undefined && self.submitData.reports[r].bidCompanys != "" && self.submitData.reports[r].bidCompanys != null) {


                for (var i = 0; i < self.submitData.reports[r].bidCompanys.length; i++) {


                    self.submitData.reports[r].bidCompanyIDs.push(self.submitData.reports[r].bidCompanys[i].companyID);
                }

            }

            console.log("final report content : " + JSON.stringify(self.submitData.reports[r].content));
            delete self.submitData.reports[r].bidCompanys;
            if (self.submitData.reports[r].content == "request") {
                delete self.submitData.reports[r].companyID;
                //self.submitData.reports[r].companyID="";
                self.submitData.reports[r].outToBid = 1;
            } else {
                delete self.submitData.reports[r].bidDeadline; //="";
                delete self.submitData.reports[r].bidCompanyIDs; //=[];
                self.submitData.reports[r].outToBid = 0;
            }
            self.submitData.reports[r].templateID = r;

            self.submitData.property.reports.push(self.submitData.reports[r]);
        }

        self.submitData.accessParties = [];
        for (var p in self.submitData.accessCollector) {
            var accessor = self.submitData.accessCollector[p];
            if (!accessor.selected) continue;

            self.submitData.accessParties.push(accessor.val);
        }

        //        self.submitData.bidCompanyIDs = [];
        //        if (self.reports_requestBidsCompanyIDs != null && self.reports_requestBidsCompanyIDs != undefined && self.reports_requestBidsCompanyIDs != "") {
        //            for (var i = 0; i < self.reports_requestBidsCompanyIDs.length; i++) {
        //                console.log("ccccc: " + JSON.stringify(self.reports_requestBidsCompanyIDs[i]));
        //
        //                self.submitData.bidCompanyIDs.push(self.reports_requestBidsCompanyIDs[i].companyID);
        //            }
        //        }


        self.submitData.property.siteContact = self.submitData.siteContact;
        var postData = angular.copy(self.submitData);
        postData.locations = [];
        postData.locations.push(self.submitData.property);

        if (postData && postData.mortgageBroker) {
            if (postData.mortgageBroker.state && postData.mortgageBroker.state.name) {
                postData.mortgageBroker.state = postData.mortgageBroker.state.name;
            }
            if (postData.mortgageBroker.country && postData.mortgageBroker.country.name) {
                postData.mortgageBroker.country = postData.mortgageBroker.country.name;
            }
        }
        if (postData && postData.locations && postData.locations.length) {
            var site = postData.locations[0];
            if (site.state && site.state.name) {
                site.state = site.state.name;
            }
            if (site.country && site.country.name) {
                site.country = site.country.name;
            }
        }

        angular.forEach(postData.locations[0].reports, function (r) {
            delete r.selected;
        });

        postData.draftDueDate = $filter('date')(postData.draftDueDate, "yyyy-MM-dd hh:mm:ss");
        postData.finalDueDate = $filter('date')(postData.finalDueDate, "yyyy-MM-dd hh:mm:ss");
        if (postData.notification) {
            if (postData.notification.sendEmailNotification) {
                postData.notification.sendEmailNotification = 1;
            } else {
                postData.notification.sendEmailNotification = 0;
            }
        }

        delete postData.accessCollector;
        delete postData.siteContact;
        delete postData.reports;
        delete postData.property;

        ProjectStartupAPI.postData(companyId, postData).then(function (result) {
            self.showDisplayMsg('Project created successfully', 'success');
            self.submitData = userInput;
        }, function (error) {
            self.showDisplayMsg(error);
            self.submitData = userInput;
        });

    }

    this.cancelCreateProject = function () {
        formControllerLogger.info("cancel button clicked");
        $scope.$broadcast('show-errors-reset');
        $location.path("app/modules/LandingPage/views/CreateProjectMenu.html");
    }



}]);;
angular.module('LenderProjectCreation').controller('LenderGrantAccessCtrl', ['$scope', '$log', '$modal', function ($scope, $log, $modal) {

    var grantAccessControllerLogger = $log.getInstance('LenderGrantAccessCtrl');

    grantAccessControllerLogger.info("grantAccessController controller reached");


    this.ShowAccessHelp = function (size) {
        var modalInstance = $modal.open({
            templateUrl: 'app/modules/LenderProjectCreation/views/lender_helpAccess.html',
            scope: $scope,
            controller: AccessHelpController,
            size: size

        })
    }

    var AccessHelpController = function ($scope, $modalInstance) {
        $scope.CancelDelete = function () {
            $modalInstance.close()
        }
    }
}]);;
angular.module('LenderProjectCreation').controller('LenderMortgageBankerCtrl', ['$log', '$modal', '$scope', function ($log, $modal, $scope) {

    var self = this;
    $scope.$parent.$parent.main.submitData.mortgageBroker = $scope.$parent.$parent.main.submitData.mortgageBroker || {};
    self.data = $scope.$parent.$parent.main.submitData;

    var mortgageBankerControllerLogger = $log.getInstance('LenderMortgageBankerCtrl');

    mortgageBankerControllerLogger.info("mortgageBanker controller reached");





}]);;
angular.module('LenderProjectCreation').controller('LenderProjectInfoCtrl', ['$scope', '$log', '$modal', function ($scope, $log, $modal) {

    var self = this;
    //self.isDraftDateOpen = false;
    //self.isFinalDateOpen = false;

    //self.DraftDatePickerFocus = function(){
    //    self.isDraftDateOpen = true;
    //}

    //self.FinalDatePickerFocus = function(){
    //    self.isFinalDateOpen = true;
    //}

    var projectinfoControllerLogger = $log.getInstance('LenderProjectInfoCtrl');

    projectinfoControllerLogger.info("projectinfo controller reached");

    //this.draftDue = function() {
    //    //console.log("scope draft date ");
    //}

    //this.finalDue = function() {
    //    //console.log("scope final date ");
    //}

    $scope.ShowProjectTips = function (size) {


        var modalInstance = $modal.open({
            templateUrl: 'ProjectTips.html',
            scope: $scope,
            controller: ProjectTipsController,
            size: size

        })

    }


    var ProjectTipsController = function ($scope, $modalInstance) {



        $scope.CancelDelete = function () {

            $modalInstance.close()
        }

    }

    //$scope.dates = {
    //    date1: new Date(),
    //    date2: new Date()
    //};

    $scope.open = {
        date1: false,
        date2: false,
    };

    // Disable weekend selection
    $scope.disabled = function (date, mode) {
        return (mode === 'day' && (new Date().toDateString() == date.toDateString()));
    };

    $scope.dateOptions = {
        showWeeks: false,
        startingDay: 1
    };

    $scope.timeOptions = {
        readonlyInput: true,
        showMeridian: false
    };

    $scope.openCalendar = function (e, date) {
        e.preventDefault();
        e.stopPropagation();

        $scope.open[date] = true;
    };

    // watch date4 and date5 to calculate difference
    $scope.$watch(function () {
        return $scope.dates;
    }, function () {

    }, true);

}]);;
angular.module('LenderProjectCreation').controller('LenderPropertyInfoCtrl', ['$log', '$scope', function ($log, $scope) {

    var propertyinfoControllerLogger = $log.getInstance('LenderPropertyInfoCtrl');

    propertyinfoControllerLogger.info("LenderPropertyInfoCtrl controller reached");


}]);;
angular.module('LenderProjectCreation').controller('LenderReportSelectionCtrl', ['$scope', '$log', '$modal', function ($scope, $log, $modal) {

    //var reportSelectionControllerLogger = $log.getInstance('reportSelectionController');

    //reportSelectionControllerLogger.info("reportSelection controller reached");

    //var templateReportTypes = [];
    //var outputArrayForReportTpes = [];
    //var x = {};
    //this.obj = {};
    //this.template = {};
    //$scope.object = {};
    ////this.templates = [];

    //this.langLibrary = $scope.main.obj[0].libraries;
    //$scope.templates = $scope.main.obj[5].templates;



    //$scope.dynamicarrObj = {};
    //$scope.globalarr = [];

    //$scope.globallangobj = {};


    //init();

    //function init() {

    //    getTemplates($scope.main.obj[5].templates, getUniqueReportTypes);

    //}

    //function getLangLib() {
    //    try {
    //        for (var i = 0; i < $scope.reportTypes.length; i++) {

    //            $scope.globallangobj[i] = [];
    //            for (var j = 0; j < $scope.main.obj[0].libraries.length; j++) {
    //                if ($scope.main.obj[0].libraries[j].reportType == $scope.reportTypes[i]) {
    //                    $scope.globallangobj[i].push($scope.main.obj[0].libraries[j]);
    //                }
    //            }
    //        }
    //    } catch (e) {
    //        reportSelectionoControllerLogger.error(e);
    //    }

    //}

    //function getUniqueReportTypes(inputArray) {
    //    try {
    //        for (var i = 0; i < inputArray.length; i++) {
    //            if ((jQuery.inArray(inputArray[i], outputArrayForReportTpes)) == -1) {
    //                outputArrayForReportTpes.push(inputArray[i]);
    //            }
    //        }
    //        return outputArrayForReportTpes;
    //    } catch (e) {
    //        reportSelectionoControllerLogger.error(e);
    //    }
    //}


    //function getTemplates() {
    //    try {

    //        for (var i = 0; i < $scope.main.obj[5].templates.length; i++) {
    //            templateReportTypes.push($scope.main.obj[5].templates[i].reportType);
    //        }
    //        $scope.reportTypes = getUniqueReportTypes(templateReportTypes);
    //        getLangLib();


    //        for (var i = 0; i < $scope.reportTypes.length; i++) {
    //            $scope.dynamicarrObj[i] = [];
    //            for (var j = 0; j < $scope.main.obj[5].templates.length; j++) {

    //                if ($scope.main.obj[5].templates[j].reportType == $scope.reportTypes[i]) {


    //                    $scope.dynamicarrObj[i].push($scope.main.obj[5].templates[j]);



    //                }


    //            }
    //            $scope.globalarr.push($scope.dynamicarrObj[i]);

    //        }

    //        addLangToTemplates();
    //    } catch (e) {
    //        reportSelectionoControllerLogger.error(e);
    //    }


    //}

    //function addLangToTemplates() {
    //    try {
    //        for (var i = 0; i < $scope.reportTypes.length; i++) {
    //            for (var j = 0; j < $scope.globalarr[i].length; j++) {
    //                $scope.globalarr[i][j].langarr = $scope.globallangobj[i];
    //            }
    //        }
    //    } catch (e) {
    //        reportSelectionoControllerLogger.error(e);
    //    }



    //}

    //this.chkboxName = [];

    //this.chkboxChecked = function (template, index) {
    //    try {
    //        if ($scope.main.parentReportSelection.template[template.templateID])
    //            $scope.main.parentReportSelection.indexArr.push(template.templateID);
    //        else {

    //            for (var i = 0; i < $scope.main.parentReportSelection.indexArr.length; i++) {

    //                if ($scope.main.parentReportSelection.indexArr[i] == template.templateID) {

    //                    $scope.main.parentReportSelection.indexArr.splice(i, 1);
    //                }
    //            }


    //        }
    //    } catch (e) {
    //        reportSelectionoControllerLogger.error(e);
    //    }



    //}

    //this.langChanged = function (value) {


    //}


    this.ShowFeeHelp = function (size) {
        var modalInstance = $modal.open({
            templateUrl: 'app/modules/LenderProjectCreation/views/lender_helpFee.html',
            scope: $scope,
            controller: FeeHelpController,
            size: size

        })
    }

    var FeeHelpController = function ($scope, $modalInstance) {
        $scope.CancelDelete = function () {
            $modalInstance.close()
        }
    }


    /*date config*/
    $scope.dates = {
        today: new Date()
    };

    $scope.open = {
        date1: false
    };

    // Disable weekend selection
    $scope.disabled = function (date, mode) {
        return (mode === 'day' && (new Date().toDateString() == date.toDateString()));
    };

    $scope.dateOptions = {
        showWeeks: false,
        startingDay: 1
    };

    $scope.timeOptions = {
        readonlyInput: true,
        showMeridian: false
    };

    $scope.openCalendar = function (e, date) {
        e.preventDefault();
        e.stopPropagation();

        $scope.open[date] = true;
    };

    // watch date4 and date5 to calculate difference
    $scope.$watch(function () {
        return $scope.dates;
    }, function () {

    }, true);

    /*ends here*/
}]);;
angular.module('LenderProjectCreation').controller('LenderSiteContactInfoCtrl', ['$log', '$scope', function ($log, $scope) {

    var sitecontactinfoControllerLogger = $log.getInstance('LenderSiteContactInfoCtrl');

    sitecontactinfoControllerLogger.info("sitecontactinfo controller reached");

}]);;
angular.module('LenderProjectCreation').service('ContactAPIService', ['$http', 'UrlColl', '$q', 'APIFactory', 'BASEURL', function ($http, urlColl, $q, APIFactory, BASEURL) {

    var self = this;
    this.contacts = [];
    var test = [];

    var getContactServiceCall = function (companyId, enforceLive) {
        if ((this.contacts && this.contacts.length) > 0 && (!enforceLive)) {
            var defer = $q.defer();
            defer.resolve(this.contacts);
            return defer.promise;
        }



        var uri = BASEURL.LENDERPROJECTCREATION_CONTACTS + urlColl.getCompanyContacts;
        var params = {
            companyID: companyId
        };
        return APIFactory.get(uri, params).then(function (data) {

            return self.contacts = data.contacts;
        });


    };


    var addContactServiceCall = function (contact) {
        var uri = BASEURL.LENDERPROJECTCREATION_CONTACTS + urlColl.addContact;
        return APIFactory.post(uri, contact).then(function (results) {
            clearData();
        });

        //        return $http({
        //            method: 'POST',
        //            url: uri,
        //            data: contact,
        //            header: {
        //                'Content-Type': 'application/json',
        //                'Cache-Control': 'no-cache, no-store, must-revalidate',
        //                'Pragma': 'no-cache',
        //                'Expires': 0
        //            }
        //        }).then(function (results) {
        //             console.log("oooooo: "+JSON.stringify(results));
        //            var retVal = parseServiceRespForError(results);
        //            clearData();
        //            return retVal;
        //        });
    }

    // contact should be the same as post/add call
    var editContactServiceCall = function (contactID, contact) {
        var uri = BASEURL.LENDERPROJECTCREATION_CONTACTS + urlColl.editContact;


        var params = {
            contactID: contactID
        };
        return APIFactory.put(uri, contact, params).then(function (results) {
            clearData();

        });

        //        return $http({
        //            method: 'PUT',
        //            url: uri,
        //            data: contact,
        //            header: {
        //                'Content-Type': 'application/json',
        //                'Cache-Control': 'no-cache, no-store, must-revalidate',
        //                'Pragma': 'no-cache',
        //                'Expires': 0
        //            }
        //        }).then(function (results) {
        //            var retVal = parseServiceRespForError(results);
        //            clearData();
        //            return retVal;
        //        });
    }


    // helpers
    var parseServiceRespForError = function (rawResp) {
        var data = rawResp.data;
        var result = data.result;
        //if (!result || !result.success) throw new Error("error message here");
        return result;
    }

    var clearData = function () {
        this.contacts = null;
    }



    this.getContacts = getContactServiceCall;
    this.add = addContactServiceCall;
    this.update = editContactServiceCall;
}]);;
angular.module('LenderProjectCreation').factory('FetchDataFactory', ['$http', '$q', 'Urls', '$log', 'BASEURL', function ($http, $q, Urls, $log, BASEURL) {

    try {
        var fetchDataFactoryLogger = $log.getInstance('fetchDataFactory');

        fetchDataFactoryLogger.info(Urls.getFormData);
        var fetchData = {};
        //var staticPath = 'static_data/';
        return {

            getPreFormRenderData: function () {

                /*getLibrariesUrl  = staticPath + 'getLibraries.js';
			getOfficesUrl = staticPath + 'getOffices.js';
			getPropertyTypesUrl = staticPath + 'getPropertyTypes.js';
			getRelatedCompaniesUrl = staticPath + 'getRelatedCompanies.js';
			getTeamsUrl = staticPath + 'getTeams.js';
			getTemplatesUrl = staticPath + 'getTemplates.js';
			getTransactionTypesUrl = staticPath + 'getTransactionTypes.js';*/

                getLibrariesUrl = BASEURL.LENDERPROJECTCREATION + Urls.getLibraries;
                getOfficesUrl = BASEURL.LENDERPROJECTCREATION + Urls.getOffices;
                getPropertyTypesUrl = BASEURL.LENDERPROJECTCREATION + Urls.getPropertyTypes;
                getRelatedCompaniesUrl = BASEURL.LENDERPROJECTCREATION + Urls.getRelatedCompanies;
                getTeamsUrl = BASEURL.LENDERPROJECTCREATION + Urls.getTeams;
                getTemplatesUrl = BASEURL.LENDERPROJECTCREATION + Urls.getTemplates;
                getTransactionTypesUrl = BASEURL.LENDERPROJECTCREATION + Urls.getTransactionTypes;


                var promiseA = $http.get(getLibrariesUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("libraries fetched");
                    return result.data;
                }, function (error) {

                    fetchDataFactoryLogger.error(error.statusText);
                });

                var promiseB = $http.get(getOfficesUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("Offices fetched");
                    return result.data;
                }, function (error) {
                    fetchDataFactoryLogger.error(error.statusText);
                });

                var promiseC = $http.get(getPropertyTypesUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("PropertyTypes fetched");
                    return result.data;
                }, function (error) {
                    fetchDataFactoryLogger.error(error.statusText);
                });

                var promiseD = $http.get(getRelatedCompaniesUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("RelatedCompanies fetched");
                    return result.data;
                }, function (error) {
                    fetchDataFactoryLogger.error(error.statusText);
                });

                var promiseE = $http.get(getTeamsUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("Teams fetched");
                    return result.data;
                }, function (error) {
                    fetchDataFactoryLogger.error(error.statusText);
                });

                var promiseF = $http.get(getTemplatesUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("Templates fetched");
                    return result.data;
                }, function (error) {
                    fetchDataFactoryLogger.error(error.statusText);
                });

                var promiseG = $http.get(getTransactionTypesUrl, {

                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (result) {
                    fetchDataFactoryLogger.info("TransactionTypes fetched");
                    return result.data;
                }, function (error) {
                    fetchDataFactoryLogger.error(error.statusText);
                });

                this.promise = $q.all([promiseA, promiseB, promiseC, promiseD, promiseE, promiseF, promiseG]).then(function (data) {
                    return data;

                });

                return this.promise;

            }
        }
    } catch (e) {
        fetchDataFactoryLogger.info("error in fetching records from service");
        fetchDataFactoryLogger.error(e);
    }

    return fetchData;

}]);;
angular.module('LenderProjectCreation').factory('LenderProjectStartupAPIFactory', ['$http', 'Urls', 'APIFactory', 'BASEURL', function ($http, urlColl, APIFactory, BASEURL) {

    // helpers
    var parseServiceRespForError = function (rawResp) {
        var data = rawResp.data;
        var result = data.result;
        if (!result || !result.success) throw new Error(result.messages);
        return result;
    }

    return {
        getData: function (companyId) {
            var uri = BASEURL.LENDERPROJECTCREATION_PROJECTSTARTUP + urlColl.getProjectStartupFormData;
            var params = {
                companyID: companyId
            };
            return APIFactory.get(uri, params);
            //var uri = urlColl.getProjectStartupFormData + companyId;
            //            var uri = 'app/modules/LenderProjectCreation/sampleJson/ProjectStartup.js';
            //            return $http({
            //                method: 'GET',
            //                url: uri,
            //                header: {
            //                    'Content-Type': 'application/json',
            //                    'Cache-Control': 'no-cache, no-store, must-revalidate',
            //                    'Pragma': 'no-cache',
            //                    'Expires': 0
            //                }
            //            }).then(function (results) {
            //                return results.data;
            //            }, function (error) {
            //                console.log('error: ' + error);
            //            });
        },

        postData: function (companyId, data) {
            var uri = BASEURL.LENDERPROJECTCREATION_POSTSINGLESITEPROJECT + urlColl.postSingleSiteProjectFormData + companyId;
            return $http({
                method: 'POST',
                url: uri,
                data: data,
                header: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (results) {
                //var retVal = parseServiceRespForError(results);
                //return retVal;
                return results.data;
            });
        }
    }
}]);
angular.module('LenderProjectCreation').factory('PostDataFactory', ['$http', 'Urls', '$log', 'BASEURL', function ($http, Urls, $log, BASEURL) {

    try {
        var postDataFactoryLogger = $log.getInstance('postDataFactory');

        postDataFactoryLogger.info("service to post data reached");
        var postData = {};

        var path = BASEURL.LENDERPROJECTCREATION + Urls.postProjectCreationData;

        postData.submitData = function (data) {

            console.log("response post service ");
            return $http.post(path, data).then(
                function (results) {

                    return results.data;
                },
                function (error) {

                    postDataFactoryLogger.error(error.statusText);

                });


        }
    } catch (e) {
        postDataFactoryLogger.info("error in posting data service");
        postDataFactoryLogger.error("e");
    }






    return postData;

}]);;
angular.module('LenderProjectCreation').constant('Urls', {
    getLibraries: 'libraries/1',
    getOffices: 'offices/1',
    getPropertyTypes: 'propertytypes',
    getRelatedCompanies: 'relatedcompanies/1',
    getTeams: 'teams/1',
    getTemplates: 'templates/1/projectSetup',
    getTransactionTypes: 'transactiontypes',

    postProjectCreationData: 'project',



    getProjectStartupFormData: '{companyID}',
    postSingleSiteProjectFormData: '',

    getCompanyContacts: 'search/{companyID}',
    addContact: '',
    editContact: '{contactID}',

    postLogJSON: "logger/log"

});; // define module
angular.module('OrderPlacedOnEDR', ['ui.router.state', 'ui.bootstrap']);

// routers
angular.module('OrderPlacedOnEDR').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');
        $stateProvider.state('orderPlacedOnEDR', {
            'url': '/OrderPlacedOnEDR',
            'templateUrl': 'app/modules/OrderPlacedOnEDR/views/Order-placed.html',
            'resolve': {
                'synchronousObj': ['FetchDataFactory',
                    function (fetchData_svc) {

                        return fetchData_svc.getPreFormRenderData();
                    }
                ]

            }
        })
    }
]);; // define module
angular.module('PortfolioCreation', ['ngFileUpload', 'ui.router.state', 'ui.multiselect']);

// routers
angular.module('PortfolioCreation').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {

        $urlRouterProvider.otherwise('/PortfolioCreation');
        $urlRouterProvider.when('/PortfolioCreation', '/PortfolioCreation/ProjectInformation');


        $stateProvider.state('PortfolioCreation', {
            'url': '/PortfolioCreation',
            //  abstract: true,
            'controller': 'PortfolioCreationCtrl as portfolio',
            'templateUrl': 'app/modules/PortfolioCreation/views/PortfolioCreation.html'
        }).
        state('PortfolioCreation.ProjectInformation', {
            'url': '/ProjectInformation',
            'templateUrl': 'app/modules/PortfolioCreation/views/portfolio.ProjectInformation.html'
                // ,'controller': 'PortProjectInformation as policyparam'
        }).
        state('PortfolioCreation.ReportInformation', {
            'url': '/ReportInformation',
            'templateUrl': 'app/modules/PortfolioCreation/views/portfolio.ReportInformation.html'
                // ,'controller': 'PortProjectInformation as policyparam'
        }).
        state('PortfolioCreation.FeeInformation', {
            'url': '/FeeInformation',
            'templateUrl': 'app/modules/PortfolioCreation/views/portfolio.FeeInformation.html'
                // ,'controller': 'PortProjectInformation as policyparam'
        }).
        state('PortfolioCreation.GrantAccess', {
            'url': '/GrantAccess',
            'templateUrl': 'app/modules/PortfolioCreation/views/portfolio.GrantAccess.html'
                // ,'controller': 'PortProjectInformation as policyparam'
        }).
        state('PortfolioCreation.Email', {
            'url': '/Email',
            'templateUrl': 'app/modules/PortfolioCreation/views/portfolio.Email.html'
                // ,'controller': 'PortProjectInformation as policyparam'
        }).
        state('PortfolioCreation.ConfirmProjectInfo', {
            url: '/ConfirmProjectInformation',
            templateUrl: 'app/modules/PortfolioCreation/views/portfolio.ConfirmProjectInfo.html'
        }).
        state('PortfolioCreation.Attachments', {
            url: '/Attachments',
            templateUrl: 'app/modules/PortfolioCreation/views/portfolio.Attachments.html'
                // , 'controller': 'portfolioAttachmentCtrl as portfolioAttachments'
        }).
        state('PortfolioCreation.UploadSiteSpreadSheet', {
            url: '/UploadSites',
            templateUrl: 'app/modules/PortfolioCreation/views/portfolio.PropertyUpload.html'
        }).
        state('PortfolioCreation.AddLocation', {
            url: '/AddLocation',
            templateUrl: 'app/modules/PortfolioCreation/views/portfolio.AddLocation.html'
        }).
        state('PortfolioCreation.UploadedSitesReportSelection', {
            url: '/UploadedSitesReportSelection',
            templateUrl: 'app/modules/PortfolioCreation/views/portfolio.UploadedSitesReportSelection.html'
        }).
        state('PortfolioCreation.SetupSuccess', {
            url: '/SetupSuccess',
            templateUrl: 'app/modules/PortfolioCreation/views/portfolio.successmessage.html'
        }).
        state('PortfolioCreation.UploadedSiteDetails', {
                url: '/UploadedSiteDetails',
                templateUrl: 'app/modules/PortfolioCreation/views/portfolio.UploadedSiteDetails.html'
            })
            .
        state('PortfolioCreation.AddReport', {
            url: '/AddReport',
            templateUrl: 'app/modules/PortfolioCreation/views/AddReport.html'
        })
    }
]);;
angular.module('ui.multiselect', [])

//from bootstrap-ui typeahead parser
.factory('optionParser', ['$parse', function ($parse) {

    //                      00000111000000000000022200000000000000003333333333333330000000000044000
    var TYPEAHEAD_REGEXP = /^\s*(.*?)(?:\s+as\s+(.*?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+(.*)$/;

    return {
        parse: function (input) {

            var match = input.match(TYPEAHEAD_REGEXP),
                modelMapper, viewMapper, source;
            if (!match) {
                throw new Error(
                    "Expected typeahead specification in form of '_modelValue_ (as _label_)? for _item_ in _collection_'" +
                    " but got '" + input + "'.");
            }

            return {
                itemName: match[3],
                source: $parse(match[4]),
                viewMapper: $parse(match[2] || match[1]),
                modelMapper: $parse(match[1])
            };
        }
    };
  }])

.directive('multiselect', ['$parse', '$document', '$compile', 'optionParser',


    function ($parse, $document, $compile, optionParser) {
        return {
            restrict: 'E',
            require: 'ngModel',
            link: function (originalScope, element, attrs, modelCtrl) {

                var exp = attrs.options,

                    parsedResult = optionParser.parse(exp),
                    isMultiple = attrs.multiple ? true : false,
                    required = false,
                    scope = originalScope.$new(),
                    changeHandler = attrs.change || angular.noop;


                scope.items = [];

                var header = attrs.header;

                scope.header = 'Select Report Requested';
                if (attrs.header != undefined) {
                    scope.header = attrs.header;
                }
                scope.placeHolder = 'Search Report Requested';
                if (attrs.placeholder != undefined) {
                    scope.placeHolder = attrs.placeholder;
                }

                scope.multiple = isMultiple;
                scope.disabled = false;

                originalScope.$on('$destroy', function () {
                    scope.$destroy();
                });

                var popUpEl = angular.element('<multiselect-popup></multiselect-popup>');

                //required validator
                if (attrs.required || attrs.ngRequired) {
                    required = true;
                }
                attrs.$observe('required', function (newVal) {
                    required = newVal;
                });

                //watch disabled state
                scope.$watch(function () {
                    return $parse(attrs.disabled)(originalScope);
                }, function (newVal) {
                    scope.disabled = newVal;
                });

                //watch single/multiple state for dynamically change single to multiple
                scope.$watch(function () {
                    return $parse(attrs.multiple)(originalScope);
                }, function (newVal) {
                    isMultiple = newVal || false;
                });

                //watch option changes for options that are populated dynamically
                scope.$watch(function () {
                    return parsedResult.source(originalScope);
                }, function (newVal) {
                    if (angular.isDefined(newVal))
                        parseModel();
                }, true);

                //watch model change
                scope.$watch(function () {
                    return modelCtrl.$modelValue;
                }, function (newVal, oldVal) {
                    //when directive initialize, newVal usually undefined. Also, if model value already set in the controller
                    //for preselected list then we need to mark checked in our scope item. But we don't want to do this every time
                    //model changes. We need to do this only if it is done outside directive scope, from controller, for example.
                    if (angular.isDefined(newVal)) {
                        markChecked(newVal);
                        scope.$eval(changeHandler);
                    }
                    getHeaderText();
                    modelCtrl.$setValidity('required', scope.valid());
                }, true);

                function parseModel() {
                    scope.items.length = 0;
                    var model = parsedResult.source(originalScope);
                    if (!angular.isDefined(model)) return;
                    for (var i = 0; i < model.length; i++) {
                        var local = {};
                        local[parsedResult.itemName] = model[i];
                        scope.items.push({
                            label: parsedResult.viewMapper(local),
                            model: model[i],
                            checked: false
                        });
                    }
                }

                parseModel();

                element.append($compile(popUpEl)(scope));

                function getHeaderText() {
                    if (is_empty(modelCtrl.$modelValue)) {
                        if (attrs.header != undefined) return scope.header = attrs.header;
                        return scope.header = 'Select Report Requested';
                    }
                    if (isMultiple) {
                        scope.header = modelCtrl.$modelValue.length + ' ' + 'selected';
                    } else {
                        var local = {};
                        local[parsedResult.itemName] = modelCtrl.$modelValue;

                        scope.header = parsedResult.viewMapper(local);
                    }
                }

                function is_empty(obj) {
                    if (!obj) return true;
                    if (obj.length && obj.length > 0) return false;

                    for (var prop in obj)
                        if (obj[prop]) return false;

                    return true;
                };

                scope.valid = function validModel() {
                    if (!required) return true;
                    var value = modelCtrl.$modelValue;
                    return (angular.isArray(value) && value.length > 0) || (!angular.isArray(value) && value != null);
                };

                function selectSingle(item) {
                    if (item.checked) {
                        scope.uncheckAll();
                    } else {
                        scope.uncheckAll();
                        item.checked = !item.checked;
                    }
                    setModelValue(false);
                }

                function selectMultiple(item) {
                    item.checked = !item.checked;
                    setModelValue(true);
                }

                function setModelValue(isMultiple) {
                    var value;

                    if (isMultiple) {
                        value = [];
                        angular.forEach(scope.items, function (item) {
                            if (item.checked) value.push(item.model);
                        })
                    } else {
                        angular.forEach(scope.items, function (item) {
                            if (item.checked) {
                                value = item.model;
                                return false;
                            }
                        })
                    }
                    modelCtrl.$setViewValue(value);
                }

                function markChecked(newVal) {
                    var EditVal = localStorage.getItem("Edit");
                    console.log();
                    if (!angular.isArray(newVal)) {
                        angular.forEach(scope.items, function (item) {
                            if (angular.equals(item.model, newVal)) {
                                item.checked = true;
                                return false;
                            }
                        });
                    } else {
                        angular.forEach(newVal, function (i) {
                            angular.forEach(scope.items, function (item) {
                                if (EditVal == "true") {
                                    if (angular.equals(item.model.formID, i.form_id)) {
                                        item.checked = true;
                                    }

                                } else {

                                    if (angular.equals(item.model, i)) {
                                        item.checked = true;
                                    }
                                }


                            });
                        });
                    }

                }

                scope.checkAll = function () {
                    if (!isMultiple) return;
                    angular.forEach(scope.items, function (item) {
                        item.checked = true;
                    });
                    setModelValue(true);
                };

                scope.uncheckAll = function () {
                    angular.forEach(scope.items, function (item) {
                        item.checked = false;
                    });
                    setModelValue(true);
                };

                scope.select = function (item) {
                    if (isMultiple === false) {
                        selectSingle(item);
                        scope.toggleSelect();
                    } else {
                        selectMultiple(item);
                    }
                }
            }
        };
    }])


.directive('multiselectPopup', ['$document', function ($document) {
    return {
        restrict: 'E',
        scope: false,
        replace: true,
        templateUrl: './app/modules/PortfolioCreation/views/multiselect.html',
        link: function (scope, element, attrs) {

            scope.isVisible = false;

            scope.toggleSelect = function () {
                if (element.hasClass('open')) {
                    element.removeClass('open');
                    $document.unbind('click', clickHandler);
                } else {
                    element.addClass('open');
                    $document.bind('click', clickHandler);
                    scope.focus();
                }
            };

            function clickHandler(event) {
                if (elementMatchesAnyInArray(event.target, element.find(event.target.tagName)))
                    return;
                element.removeClass('open');
                $document.unbind('click', clickHandler);
                scope.$apply();
            }

            scope.focus = function focus() {
                var searchBox = element.find('input')[0];
                searchBox.focus();
            }

            var elementMatchesAnyInArray = function (element, elementArray) {
                for (var i = 0; i < elementArray.length; i++)
                    if (element == elementArray[i])
                        return true;
                return false;
            }
        }
    }
  }]);;
angular.module('PortfolioCreation').controller('PortfolioAddLocationCtrl', ['$scope', '$filter', '$modalInstance', 'modalDataContainer', '$timeout', 'getCountriesAPI', 'getStatesAPI', function ($scope, $filter, $modalInstance, modalDataContainer, $timeout, getCountriesAPI, getStatesAPI) {

    var self = this;


    init();



    function getStates(code) {
        getStatesAPI.get(code).then(function (result) {
            self.states = result;

        });
    }


    function init() {
        self.location = modalDataContainer.location;
        getCountries();
    }

    function setSelectedCountry() {

        if (modalDataContainer.location) {
            var selectedCountry = $filter("filter")(self.countries, {
                name: modalDataContainer.location.country
            })[0];
            if (selectedCountry) {

                self.selectedCountry = selectedCountry;
            } else {
                self.selectedCountry = {
                    code: "US",
                    isStateProvDataAvailable: true,
                    name: "United States"
                }
            }
        } else {
            self.selectedCountry = {
                code: "US",
                isStateProvDataAvailable: true,
                name: "United States"
            }
        }
        self.editCountry();

    }

    function getCountries() {
        getCountriesAPI.get().then(function (result) {
            self.countries = result;
            setSelectedCountry(self.countries);

        })
    }


    self.editCountry = function () {
        if (self.selectedCountry.isStateProvDataAvailable)
            getStates(self.selectedCountry.code);
    }

    self.serviceResponseAlert = false;
    self.action = modalDataContainer.action;
    if (self.action == 'Add') {
        self.title = 'Add Location to Portfolio';
        self.location = {};
    } else {

        self.title = 'Edit Location';
        self.location = angular.copy(modalDataContainer.location);
        self.state = modalDataContainer.location.state;

        if (self.location.reports) {
            self.location.poNumber = self.location.reports[0].poNumber;
        }
    }

    self.from = null;


    self.AddSite = function (form) {

        self.serviceResponseAlert = false;
        if (form && form.$invalid) {
            self.serviceResponseText = "Invalid Form Submission";
            self.serviceResponseAlert = true;
            // processError('Invalid Form Submission');
            var inputElements = document.getElementsByName(form.$name);
            angular.element(inputElements).find(':input[required],multiselect[required]').trigger('blur');
            return;
        }

        //var portfolio = $scope.portfolio;
        //var data = portfolio.submitData;

        //data.locationCount = data.locationCount + 1;
        //data.locations[data.locationCount] = self.location;

        self.location.country = self.selectedCountry;

        modalDataContainer.location = self.location;


        //$state.go(portfolio.previousState);
        $modalInstance.close();
    }

    self.Cancel = function () {
        //var portfolio = $scope.portfolio;
        //$state.go(portfolio.previousState);

        $modalInstance.close();
    }

    $scope.close = function () {
        $modalInstance.close();
    }


    $timeout(function () {
        if (self.state) {
            $("#state option").filter(function (index) {
                return $(this).text() === self.state;
            }).attr('selected', 'selected');

        }

    }, 1000);


            }]);;
angular.module('PortfolioCreation').controller('PortfolioAttachmentCtrl', ['$scope', '$log', 'Upload', '$timeout', '$window', function ($scope, $log, Upload, $timeout, $window) {

    $scope.portfolio.currentSection = $scope.portfolio.sectionCollection.AttachDocuments;

    var self = this;
    self.attachmentFiles = [];
    self.UploadSuccessMsg = "";
    self.UploadErrorMsg = "";
    self.IncorrectFormat = "";
    self.isUploadErrorMsg = false;
    self.serviceResponseAlert = false;
    /*var attachmentsControllerLogger = $log.getInstance('PortfolioCreation.portfolioAttachmentCtrl');

    attachmentsControllerLogger.info("attachments controller reached");*/

    $("#ulnavigation .active").removeClass('active');
    $("#ulnavigation #Attachments").addClass('active');

    $scope.fnconvertsize = function (sizeinbytes) {

        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        if (sizeinbytes == 0)
            var convertedsize = '0 Byte';
        var i = parseInt(Math.floor(Math.log(sizeinbytes) / Math.log(1024)));
        convertedsize = Math.round(sizeinbytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
        return convertedsize;
    }

    function loadData() {
        var project = angular.copy($scope.portfolio.project);
        if (!project.attachments || !project.attachments.length) return;

        self.formattedAttachments = angular.copy(project.attachments);
        var attachments = project.attachments;

        self.attachmentFiles = attachments;
        angular.forEach(self.attachmentFiles, function (file) {
            file.name = file.fileName;
            if (file.base64) {
                var inputfilesize = window.localStorage.getItem("inputfilesize");
                file.size = $scope.fnconvertsize(inputfilesize);
            }

        });
    }
    loadData();

    File.prototype.convertToBase64 = function (callback) {
        var file = this;
        var FR = new FileReader();
        FR.onload = function (e) {
            var base64 = removeNoiseFromDataUrlOfBase64(e.target.result);
            callback(base64, file);
        };
        FR.readAsDataURL(this);
    };

    function removeNoiseFromDataUrlOfBase64(dataUrl) {
        return dataUrl.indexOf("base64") >= 0 ? dataUrl.split("base64,")[1] : dataUrl;
    }

    function convertAttachedFilesToBase64() {
        if (!$scope.files || !$scope.files.length) {
            return;
        } else {
            self.attachmentFilesExists = true;
        }

        var files = $scope.files;
        for (var i = 0, completedCount = 0; i < files.length; i++) {
            var file = files[i];
            file.convertToBase64(function (base64, attachedFile) {

                var attach = angular.copy(attachedFile);
                attach.base64 = base64;
                attach.size = $scope.fnconvertsize(attach.size);
                self.attachmentFiles.push(attach);
                completedCount++;
                if (completedCount == files.length) {
                    // callback invoked via non-angular code (FileReader.onload)
                    // need to apply changes to scope
                    $scope.$apply();
                    // set attachments to parent submit object
                    setSubmitDataAttachmentsFromLocal();
                }
            });
        }

        // clear files after processing
        $scope.files = [];
    }

    $scope.$watchCollection("files", function () {
        convertAttachedFilesToBase64();
    });
    /*self.submitToAttachFiles = function () {
        convertAttachedFilesToBase64();
    }*/



    function setSubmitDataAttachmentsFromLocal() {
        self.formattedAttachments = [];
        angular.forEach(self.attachmentFiles, function (attachment) {
            var obj = {
                fileName: attachment.name,
                base64: attachment.base64,
                attachmentGUID: attachment.attachmentGUID,
                description: attachment.description
            }
            self.formattedAttachments.push(obj);
        });
    }

    //    $scope.$watch('files', function() {
    //        $scope.upload($scope.files);
    //    });
    // set default directive values
    // Upload.setDefaults( {ngf-keep:false ngf-accept:'image/*', ...} );
    this.upload = function () {
        self.UploadErrorMsg = "";
        self.isUploadErrorMsg = false;

        var files = $scope.files;

        if (!files || files.length <= 0) {

            self.isUploadErrorMsg = true;
            self.UploadErrorMsg += "Please attach files before trying to upload.";
            return;
        }
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            Upload.upload({
                url: 'https://angular-file-upload-cors-srv.appspot.com/upload',
                //                    fields: {
                //                        'username': $scope.username
                //                    },
                file: file
            }).progress(function (evt) {
                var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);
            }).success(function (data, status, headers, config) {
                //console.log('file ' + config.file.name + 'uploaded. Response: ' + JSON.stringify(data));
                self.attachmentFiles.push({
                    name: data.result[0].name,
                    size: data.result[0].size
                });

                console.log("successssssssssssssss");
                self.serviceResponseAlert = true;
                self.responseType = 'success';
                self.serviceResponseText = "File uploaded successfully.";
            }).error(function (data, status, headers, config) {
                //console.log('error status: ' + status);
                self.isUploadErrorMsg = true;
                self.UploadErrorMsg += "Failed to upload file '" + config.file.name + "'. Status: " + status + ".\n";
            })
        }

    };

    this.removeAttachment = function (index) {
        removeFileFromCollection(index);
    };

    var removeFileFromCollection = function (index) {
        if (!self || !self.attachmentFiles) return;
        self.attachmentFiles.splice(index, 1);
        /* for (var i = 0; i < self.attachmentFiles.length; i++) {
             var file = self.attachmentFiles[i];
             if (index == i) {
                
             }
         }
         */

        // update data modal
        setSubmitDataAttachmentsFromLocal();
    }


    self.enableAttachedFileEdit = function (file, index) {
        file.editDesc = true;
        $timeout(function () {
            var inputFieldId = "fileDesc_" + index;
            var element = $window.document.getElementById(inputFieldId);
            if (element)
                element.focus();
        });
    };

    // empty main getSubmitData
    // to need to submit data in this view
    var main = $scope.portfolio;
    main.getSubmitData = function () {
        var data = angular.copy($scope.portfolio.project);
        data.attachments = self.formattedAttachments;

        if (data.attachments && data.attachments.length)
            for (var i = 0; i < data.attachments.length; i++) {
                var item = data.attachments[i];
                delete item.description;
            }

        return data;
    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }

}]);;
angular.module('PortfolioCreation').controller('PortfolioConfirmInfoCtrl', ['$scope', '$modal', '$filter', '$timeout', function ($scope, $modal, $filter, $timeout) {

    $scope.portfolio.currentSection = $scope.portfolio.sectionCollection.ConfirmProjectInformation;
    var self = this;


    $("#ulnavigation .active").removeClass('active');
    $("#ulnavigation #ConfirmProjectInformation").addClass('active');

    self.projectInfo = {};
    self.editProjectInfo = {};
    self.tableArr = [];
    var loadData = function () {
        var portfolioObj = $scope.portfolio;
        var loadedData = portfolioObj.loadData;
        var data = angular.copy(portfolioObj.project);

        if (data) {
            self.projectInfo.name = data.name;
            self.projectInfo.draftDueDate = data.draftDueDate.split(' ')[0];
            self.projectInfo.finalDueDate = data.finalDueDate.split(' ')[0];
            self.projectInfo.comments = data.comments;
            self.projectInfo.client = data.client;
            self.editProjectInfo = angular.copy(self.projectInfo);

            var locations = data.locations;

            for (var i = 0; i < locations.length; i++) {
                var loc = locations[i];
                loc.reportsArray = [];
                loc.contactObj = loc.siteContact;
                loc.locationObj = {
                    name: loc.name,
                    propertyNumber: loc.propertyNumber,
                    address1: loc.address1,
                    address2: loc.address2,
                    city: loc.city,
                    state: loc.state,
                    zip: loc.zip,
                    propertyType: loc.propertyType,
                    county: loc.county,
                    latitude: loc.latitude,
                    longitude: loc.longitude,
                    acreage: loc.acreage,
                    numBuildings: loc.numBuildings,
                    transactionType: loc.transactionType
                };
                if (loc.reports) {

                    for (var j = 0; j < loc.reports.length; j++) {
                        var temp = loc.reports[j];

                        if (temp.templateID) {
                            var loadedTemplates = loadedData.templates;
                            for (var k = 0; k < loadedTemplates.length; k++) {
                                if (loadedTemplates[k].templateID == temp.templateID) {
                                    temp.templateObj = loadedTemplates[k];
                                    break;
                                }
                            }
                        }

                        if (temp.companyID) {
                            var loadedCompanies = loadedData.relatedCompanies;
                            for (var k = 0; k < loadedCompanies.length; k++) {
                                if (portfolioObj.filterCompanyBy(loadedCompanies[k], 'Consultant') && loadedCompanies[k].companyID == temp.companyID) {
                                    temp.consultantObj = loadedCompanies[k];
                                    break;
                                }
                            }
                        }

                        if (temp.libraryID) {
                            var loadedLibraries = loadedData.libraries;
                            for (var k = 0; k < loadedLibraries.length; k++) {
                                if (loadedLibraries[k].libraryID == temp.libraryID) {
                                    temp.libraryObj = loadedLibraries[k];
                                    break;
                                }
                            }
                        }

                        loc.reportsArray.push(temp);
                    }
                    delete loc.reports;
                }

                self.tableArr.push(loc);
            }
        }
    };

    loadData();

    self.resetProjectInfo = function () {
        self.tableArr = [];
        loadData();
        //self.editProjectInfo = angular.copy(self.projectInfo);
    }

    self.updateProjectInfo = function () {
        var current = $scope.portfolio.getSubmitData;

        $scope.portfolio.getSubmitData = function () {
            return self.editProjectInfo;
        }
        $scope.portfolio.Submit();

        $scope.portfolio.getSubmitData = current;
    }


    self.deleteSite = function (siteRowIndex) {
        self.tableArr.splice(siteRowIndex, 1);
    }

    self.deleteReport = function (siteRowIndex, reportRowIndex) {
        /*var data = $scope.portfolio.project;
        data.locations[locationIndex].reportTemplates.splice(reportTemplateIndex, 1);*/

        angular.forEach(self.tableArr, function (site, siteIndex) {
            if (siteIndex == siteRowIndex) {
                site.reportsArray.splice(reportRowIndex, 1);
            }
        });
    }


    //Site information edit 
    self.editSiteInfo = function (row, rowIndex) {
        openEditSiteInfoPopup(row, rowIndex);
    }

    function openEditSiteInfoPopup(data, rowIndex) {

        $scope.modalObjContainer = {
            data: angular.copy(data),
            rowIndex: rowIndex,
            filterByContains: $scope.portfolio.filterByContains,
            edited: false
        };

        var modalInstance = $modal.open({
            templateUrl: 'editSiteInfo.html',
            scope: $scope,
            controller: editSiteInfoCtrl,
            size: 0
        });

        modalInstance.result.then(function () {

            if ($scope.modalObjContainer && $scope.modalObjContainer.edited) {
                /*// load fresh data
                loadData();*/


                var editedData = $scope.modalObjContainer.data;
                var rowIndex = $scope.modalObjContainer.rowIndex;

                self.tableArr[rowIndex] = angular.copy(editedData);
                /*var row = self.tableArr[rowIndex];
                
                 row.fee = editedData.fee;
                 row.locationObj = editedData.locationObj;
                 row.contactObj = editedData.contactObj;
                 row.templateObj = editedData.templateObj;
                 row.consultantObj = editedData.consultantObj;*/
            }
        });
    }

    var editSiteInfoCtrl = function ($scope, $modalInstance) {
        var portfolio = $scope.portfolio;
        var loadedData = $scope.portfolio.loadData;
        var project = portfolio.project;

        if ($scope.modalObjContainer.data.templateObj)
            for (var i = 0; i < loadedData.templates.length; i++) {
                if ($scope.modalObjContainer.data.templateObj.templateID == loadedData.templates[i].templateID) {
                    $scope.modalObjContainer.data.templateObj = loadedData.templates[i];
                    break;
                }
            }


        if ($scope.modalObjContainer.data.libraryObj)
            for (var i = 0; i < loadedData.libraries.length; i++) {
                if ($scope.modalObjContainer.data.libraryObj.libraryID == loadedData.libraries[i].libraryID) {
                    $scope.modalObjContainer.data.libraryObj = loadedData.libraries[i];
                    break;
                }
            }
        if ($scope.modalObjContainer.data.consultantObj)
            for (var i = 0; i < loadedData.relatedCompanies.length; i++) {
                if ($scope.modalObjContainer.data.consultantObj.companyID == loadedData.relatedCompanies[i].companyID) {
                    $scope.modalObjContainer.data.consultantObj = loadedData.relatedCompanies[i];
                    break;
                }
            }

        $scope.Cancel = function () {
            $modalInstance.close();
        }

        $scope.showDisplayMsg = function (msg) {
            $scope.serviceResponseAlert = true;
            $scope.serviceResponseText = msg;
            $scope.msgType = 'alert-danger';
        }
        $scope.EditSiteInfo = function (form) {

            if (!form || form.$invalid) {
                $scope.showDisplayMsg('Invalid Form Submission');
                var inputElements = document.getElementsByName(form.$name);
                angular.element(inputElements).find(':input').trigger('blur');

            } else {
                $scope.modalObjContainer.edited = true;

                // make service call
                // and update model of parent
                $modalInstance.close();
            }
        }
    }



    //Report information edit
    self.editReportInfo = function (row, siterowIndex, rowIndex) {
        openEditReportInfoPopup(row, siterowIndex, rowIndex);
    }

    function openEditReportInfoPopup(data, siterowIndex, rowIndex) {
        $scope.modalObjContainer = {
            data: angular.copy(data),
            rowIndex: rowIndex,
            siterowIndex: siterowIndex,
            filterByContains: $scope.portfolio.filterByContains,
            edited: false
        };

        var modalInstance = $modal.open({
            templateUrl: 'editReportInfo.html',
            scope: $scope,
            controller: editReportInfoCtrl,
            size: 0
        });

        modalInstance.result.then(function () {

            if ($scope.modalObjContainer && $scope.modalObjContainer.edited) {
                /*// load fresh data
                loadData();*/


                var editedData = $scope.modalObjContainer.data;
                var rowIndex = $scope.modalObjContainer.rowIndex;
                var siterowIndex = $scope.modalObjContainer.siterowIndex;

                self.tableArr[siterowIndex].reportsArray[rowIndex] = angular.copy(editedData);

                /*var row = self.tableArr[rowIndex];
                
                 row.fee = editedData.fee;
                 row.locationObj = editedData.locationObj;
                 row.contactObj = editedData.contactObj;
                 row.templateObj = editedData.templateObj;
                 row.consultantObj = editedData.consultantObj;*/
            }
        });
    }

    var editReportInfoCtrl = function ($scope, $modalInstance) {
        var portfolio = $scope.portfolio;
        var loadedData = $scope.portfolio.loadData;
        var project = portfolio.project;


        if ($scope.modalObjContainer.data.templateObj)
            for (var i = 0; i < loadedData.templates.length; i++) {
                if ($scope.modalObjContainer.data.templateObj.templateID == loadedData.templates[i].templateID) {
                    $scope.modalObjContainer.data.templateObj = loadedData.templates[i];
                    break;
                }
            }


        if ($scope.modalObjContainer.data.libraryObj)
            for (var i = 0; i < loadedData.libraries.length; i++) {
                if ($scope.modalObjContainer.data.libraryObj.libraryID == loadedData.libraries[i].libraryID) {
                    $scope.modalObjContainer.data.libraryObj = loadedData.libraries[i];
                    break;
                }
            }
        if ($scope.modalObjContainer.data.consultantObj)
            for (var i = 0; i < loadedData.relatedCompanies.length; i++) {
                if ($scope.modalObjContainer.data.consultantObj.companyID == loadedData.relatedCompanies[i].companyID) {
                    $scope.modalObjContainer.data.consultantObj = loadedData.relatedCompanies[i];
                    break;
                }
            }

        $scope.Cancel = function () {
            $modalInstance.close();
        }

        $scope.EditReportInfo = function (form) {
            $scope.modalObjContainer.edited = true;

            // make service call
            // and update model of parent
            $modalInstance.close();
        }
    }



    var main = $scope.portfolio;
    main.getSubmitData = function () {
        var arr = self.tableArr;

        var toSubmitLocationsData = [];
        if (arr && arr.length) {
            for (var i = 0; i < arr.length; i++) {
                var row = arr[i];
                var site = row.locationObj;
                var contact = row.contactObj;

                // var toSubmitSite = null;
                /*  for (var j = 0; j < toSubmitLocationsData.length; j++) {
                      var loc = toSubmitLocationsData[j];
                      if (loc.propertyNumber == site.propertyNumber) {
                          toSubmitSite = loc;
                          break;
                      }
                  }*/
                //if (!toSubmitSite) {
                var toSubmitSite = site;
                toSubmitSite.siteContact = contact;
                toSubmitSite.reports = [];
                toSubmitLocationsData.push(toSubmitSite);
                // }
                for (var reportIndex = 0; reportIndex < row.reportsArray.length; reportIndex++) {


                    var template = row.reportsArray[reportIndex];
                    var report = angular.copy(template);

                    var consultant = report.consultantObj;
                    var library = report.libraryObj;
                    if (consultant && consultant.companyID) {
                        report.companyID = consultant.companyID;
                    }
                    if (library && library.libraryID) {
                        report.libraryID = library.libraryID;
                    }

                    var fee = report.fee;
                    var poNumber = report.poNumber;
                    var projectNo = report.projectNumber;
                    report.fee = fee;
                    report.poNumber = poNumber;
                    report.projectNumber = projectNo;

                    report.taskedCompanyID = report.ownerCompanyID;
                    report.taskedCompanyGUID = report.ownerCompanyGUID;


                    // delete others properties
                    delete report.companyDefaultTemplate;
                    delete report.dashboard;
                    delete report.defaults;
                    delete report.description;
                    delete report.isMobile;
                    delete report.name;
                    delete report.ownerCompanyGUID;
                    delete report.ownerCompanyID;
                    delete report.reportType;
                    delete report.sections;
                    delete report.shortName;
                    delete report.templateVersion;
                    delete report.reportTypeValue;
                    delete report.tableOfContent;

                    toSubmitSite.reports.push(report);
                }
            }

            var data = angular.copy($scope.portfolio.project);

            // data.locations = toSubmitLocationsData;
            data.name = self.editProjectInfo.name;

            data.draftDueDate = $filter('date')(self.editProjectInfo.draftDueDate, "yyyy-MM-dd hh:mm:ss");
            data.finalDueDate = $filter('date')(self.editProjectInfo.finalDueDate, "yyyy-MM-dd hh:mm:ss");
            data.comments = self.editProjectInfo.comments;
            data.client = self.editProjectInfo.client;

            return data;
        }
    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }


    $scope.open = {
        draftDate: false,
        finalDate: false,
    };

    // Disable weekend selection
    $scope.disabled = function (date, mode) {
        return (mode === 'day' && (new Date().toDateString() == date.toDateString()));
    };

    $scope.dateOptions = {
        showWeeks: false,
        startingDay: 1
    };

    $scope.timeOptions = {
        readonlyInput: true,
        showMeridian: false
    };

    $scope.openCalendar = function (e, date) {
        e.preventDefault();
        e.stopPropagation();

        $scope.open[date] = true;
    };

    // watch date4 and date5 to calculate difference
    $scope.$watch(function () {
        return $scope.dates;
    }, function () {

    }, true);






    $scope.dropDown_click = function () {

        var height = $('#prjConfirmDiv').prop("scrollHeight") + 40;
        $timeout(function () {
            $("body").animate({
                scrollTop: height
            }, "slow");
            $("prjConfirmDiv").animate({
                scrollTop: height
            }, "slow");
        }, 7000);
    };

 }]);;
angular.module('PortfolioCreation').controller('PortfolioCreationCtrl', ['$scope', '$rootScope', 'ProjectStartupAPI', '$state', 'PortfolioCreationStateNavigation', 'BASEURL', 'ParcelUI.Resources', function ($scope, $rootScope, ProjectStartupAPI, $state, PortfolioCreationStateNavigation, BASEURL, ParcelUI_Resources) {

    $scope.nextButtonText = "Next";


    var self = this;
    self.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;

    var companyId = BASEURL.companyGUID;
    var userId = BASEURL.userGUID;

    self.stateNavigation = PortfolioCreationStateNavigation;

    self.serviceResponseAlert = false;
    self.serviceResponseText = "";
    self.responseType = 'info'; //warning, info, success, danger
    self.closeWarning = function () {
        self.serviceResponseAlert = false;
    }
    self.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }
    self.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    self.getServiceReponseAlertClass = function () {
        return 'alert-' + self.responseType;
    }

    self.loadData = {
        // obj definitions below
        //template -> {
        //"templateID" : 1,
        //    "reportType" : "PhaseI",
        //    "name" : "AAI/05 Phase I Template",
        //    "ownerCompanyID":1218,
        //    "shortName":"AAI/05",
        //    "description":"A template that I made one day.",
        //    "isMobile":0,
        //    "templateVersion":27
        //}
        //library -> {
        //    "libraryID":129,
        //    "name":"JP Morgan Phase I Language",
        //    "reportType":"PhaseI",
        //    "ownerCompanyID":1218,
        //    "description":"The default language to use for JP Morgan jobs.",
        //    "isMobile":0
        //}
        //reportTypes -> {
        //    title: '',
        //    templates: [],
        //    libraries: []
        //}
        reportTypes: [],
        transactionTypes: {}, // string array
        propertyTypes: {}, // string array
        accessTo: {
            organizationOptions: [],
            clientOptions: [],
            thirdPartyOptions: []
        },
        currentUser: {
            email: 'self@employer.com'
        }
    };

    self.loadData.grantAccessGrps = [];
    self.loadData.accessParties = [];

    self.addSiteMethodTypes = {
        manual: 'manual',
        upload: 'upload'
    };

    self.addSiteMethod = self.addSiteMethodTypes.manual;

    var userId = BASEURL.userGUID;
    var userDetailsArray = JSON.parse(localStorage.getItem("userdetails"));
    ProjectStartupAPI.getAccountUser(userId).then(function (userResult) {
        self.loadData.currentUser = userResult.users[0];

        var companyOption = {
            name: 'Everyone in the ' + self.loadData.currentUser.companyName + ' company',
            accessType: "COMPANY",
            companyGUID: self.loadData.currentUser.companyGUID
        };

        self.loadData.grantAccessGrps.push(companyOption);
    });


    loadData(companyId);

    function loadData(companyId) {

        self.waitingProcessResources.promise = null;
        self.waitingProcessResources.promise = ProjectStartupAPI.getInfo(companyId, userId).then(function (result) {
            // simple parse
            self.loadData.transactionTypes = result.transactionTypes;
            self.loadData.propertyTypes = result.propertyTypes;

            self.loadData.templates = sortJSON(result.templates, 'name', 'ASC');
            self.loadData.libraries = result.libraries;

            self.loadData.teams = result.teams;
            self.loadData.offices = result.offices;
            self.loadData.relatedCompanies = result.relatedCompanies;

            // parse access to options



            if (result.relatedCompanies && result.relatedCompanies.length) {
                for (var i = 0; i < result.relatedCompanies.length; i++) {
                    var relatedCompany = result.relatedCompanies[i];
                    // only accept related companies with function as 'Client'
                    if (!relatedCompany.functions || relatedCompany.functions.indexOf('Client') < 0) continue;

                    var grp = {
                        name: 'Everyone in the ' + relatedCompany.name + ' company',
                        companyGUID: relatedCompany.companyGUID,
                        accessType: 'COMPANY'
                    }
                    self.loadData.grantAccessGrps.push(grp);
                }
            }

            if (result.offices && result.offices.length) {
                for (var i = 0; i < result.offices.length; i++) {
                    var office = result.offices[i];
                    var grp = {
                        name: 'Everyone in the ' + office.officeName + ' office',
                        officeGUID: office.companyOfficeGUID,
                        accessType: 'OFFICE'
                    }
                    self.loadData.grantAccessGrps.push(grp);
                }
            }

            if (result.teams && result.teams.length) {
                for (var i = 0; i < result.teams.length; i++) {
                    var team = result.teams[i];
                    var grp = {
                        name: 'Everyone in the ' + team.name + ' team',
                        teamGUID: team.teamGUID,
                        accessType: 'TEAM'
                    }
                    self.loadData.grantAccessGrps.push(grp);
                }
            }

            var userOption = {
                name: 'Yourself only',
                accessType: "USER",
                userGUID: userId
            };

            self.loadData.grantAccessGrps.push(userOption);


        });
    }


    function sortJSON(data, key, sort) {
        return data.sort(function (a, b) {
            var x = a[key];
            var y = b[key];
            if (sort === 'ASC') {
                return ((x < y) ? -1 : ((x > y) ? 1 : 0));
            }
            if (sort === 'DESC') {
                return ((x > y) ? -1 : ((x < y) ? 1 : 0));
            }
        });
    }
    self.filterCompanyBy = function (company, fnName) {
        return company && company.functions && company.functions.indexOf(fnName) >= 0;
    }

    self.filterByContains = function (prop, val) {
        return function (item) {
            return item[prop].indexOf(val) >= 0;
        }
    }

    self.currentSection = '';
    self.sectionCollection = {
        projectInformation: "ProjectInformation",
        reportInformation: "ReportInformation",
        feeInformation: "FeeInformation",
        attachDocuments: "AttachDocuments",
        grantAccess: "GrantAccess",
        confirmProjectInformation: "ConfirmProjectInformation",
        emailProjectInformation: "EmailProjectInformation"
    };


    // this is called on Submit

    // to be overridden by child state controllers to set data
    self.getSubmitData = function () {}
    self.getProjectData = function () {
        return self.getSubmitData();
    }

    self.setResponseProjectData = function (projectData) {
            self.project = projectData;
            self.clearErrorDisplay();
        }
        /* self.submitData = function(myform) {
             if (myform && myform.$invalid) return;

             var submitData = self.getSubmitData();

             if (!submitData) return;

             var currentProject = self.project;
             if (self.currentSection == self.sectionCollection.projectInformation && !currentProject) {
                 PortfolioCreationAPI.post(companyId, submitData).then(function(responseData) {
                     self.project = responseData;
                 });
             } else {
                 // this is only for mock 
                 // TODO: delete below line when working with real service implementation
                 var projectID = submitData.projectID || 1;
                 PortfolioCreationAPI.put(projectID, submitData).then(function(data) {
                     self.project = data;
                 });
             }
         }*/

}]);;
angular.module('PortfolioCreation').controller('PortfolioEmailCtrl', ['$scope', '$log', 'Upload', '$modal', function ($scope, $log, Upload, $modal) {

    $scope.portfolio.currentSection = $scope.portfolio.sectionCollection.EmailProjectInformation;
    var self = this;

    $("#ulnavigation .active").removeClass('active');
    $("#ulnavigation #Email").addClass('active');
    var main = $scope.portfolio;
    main.getSubmitData = function () {

        main.clearErrorDisplay();

        var data = angular.copy($scope.portfolio.project);
        data.notification = {
            emailCC: self.emailCC,
            emailBody: self.emailBody
        };
        return data;
    };

    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }

    self.ShowFindContact = function () {

        var modalInstance = $modal.open({
            templateUrl: 'app/modules/ProjectCreation/views/emailContacts.html',
            scope: $scope,
            controller: 'EmailContactsCtrl as emailContacts',
            size: 'lg',
            windowClass: 'app-modal-window'
        });

        modalInstance.result.then(function (emailObj) {

            if (emailObj.emailCC && emailObj.emailCC.length > 0) {
                if (angular.isArray(emailObj.emailCC)) {
                    if (self.emailCC) {
                        self.emailCC = self.emailCC.concat(emailObj.emailCC);
                    } else {
                        self.emailCC = emailObj.emailCC;
                    }
                } else {
                    if (!self.emailCC) {
                        self.emailCC = '';
                    }
                    if (self.emailCC == '') {
                        self.emailCC = emailObj.emailCC;
                    } else {
                        self.emailCC = self.emailCC.trim() == '' ? emailObj.emailCC : self.emailCC + "," + emailObj.emailCC;
                    }
                }
            }
        });
    };

}]);;
angular.module('PortfolioCreation').controller('PortfolioFeeInfoCtrl', ['$scope', '$state', function ($scope, $state) {

    var self = this;
    $scope.portfolio.currentSection = $scope.portfolio.sectionCollection.FeeInformation;

    self.tableArr = [];

    $("#ulnavigation .active").removeClass('active');
    $("#ulnavigation #FeeInformation").addClass('active');

    var loadData = function () {
        var loadedData = $scope.portfolio.loadData;
        var locations = angular.copy($scope.portfolio.project.locations);
        if (locations) {
            for (var i = 0; i < locations.length; i++) {
                var loc = locations[i];

                var propNo = loc.propertyNumber;
                var address = loc.address1;

                if (loc.reports) {
                    for (var j = 0; j < loc.reports.length; j++) {
                        var temp = loc.reports[j];

                        temp.locationIndex = i;
                        temp.propertyNumber = propNo;
                        temp.address = address;

                        temp.name = loc.name;
                        temp.propertyTypeGUID = loc.propertyTypeGUID;
                        temp.country = loc.country;
                        temp.city = loc.city;
                        temp.state = loc.state;
                        temp.zip = loc.zip;
                        temp.county = loc.county;
                        temp.latitude = loc.latitude;
                        temp.longitude = loc.longitude;
                        temp.transactionTypeGUID = loc.transactionTypeGUID;
                        temp.siteContact = loc.siteContact;

                        for (var k = 0; k < loadedData.templates.length; k++) {
                            var local = loadedData.templates[k];
                            if (local.templateID == temp.templateID) {
                                temp.reportType = local.reportType;
                                break;
                            }
                        }
                        self.tableArr.push(temp);
                    }
                }
            }
        }
    };

    var copyNestedObjToRemoveRef = function () {
        var locations = angular.copy($scope.portfolio.project.locations);
        if (locations) {
            for (var i = 0; i < locations.length; i++) {
                var loc = locations[i];

                var templateColl = [];
                if (loc.reports) {
                    for (var j = 0; j < loc.reports.length; j++) {
                        var temp = loc.reports[j];

                        // clone report template object to avoid having duplicate entries
                        // duplicate entries will break the ng-repeat
                        var clone = angular.copy(temp);

                        // need to override consultant with original val
                        // to bind selected value
                        clone.consultant = temp.consultant;

                        templateColl.push(clone);
                    }
                    delete loc.reportTemplates;
                    loc.reportTemplates = templateColl;
                }
            }
        }
    }

    // declare init and call
    var init = function () {
        copyNestedObjToRemoveRef();
        loadData();
    }
    init();


    var main = $scope.portfolio;
    main.getSubmitData = function () {

        var locationContainer = {};
        for (var i = 0; i < self.tableArr.length; i++) {
            var row = self.tableArr[i];

            locationContainer[row.locationIndex] = locationContainer[row.locationIndex] || {
                propertyNumber: row.propertyNumber,
                address1: row.address,
                name: row.name,
                propertyTypeGUID: row.propertyTypeGUID,
                country: row.country,
                city: row.city,
                state: row.state,
                zip: row.zip,
                county: row.county,
                latitude: row.latitude,
                longitude: row.longitude,
                transactionTypeGUID: row.transactionTypeGUID,
                siteContact: row.siteContact,
                reports: []
            };
            var currentLocation = locationContainer[row.locationIndex];

            var report = {
                templateID: row.templateID,
                templateGUID: row.templateGUID,
                languageLibraryGUID: row.languageLibraryGUID,
                taskedCompanyID: row.consultant ? row.consultant.companyGUID : null,
                projectNumber: row.projectNumber,
                poNumber: row.poNumber,
                fee: row.fee,
                templateVersionGUID: row.templateVersionGUID
            };
            currentLocation.reports.push(report);
        }

        var locationColl = [];
        for (var index in locationContainer) {
            locationColl.push(locationContainer[index]);
        }

        var data = angular.copy($scope.portfolio.project);
        data.locations = locationColl;
        return data;
    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }

    $scope.fillDown = function (paramfee, paramPrjNumber) {
        angular.forEach(self.tableArr, function (tblobj) {

            if (paramfee != '') {
                tblobj.fee = paramfee;
            }
            if (paramPrjNumber != '') {
                tblobj.projectNumber = paramPrjNumber;
            }
        });
    }

}]);;
angular.module('PortfolioCreation').controller('PortfolioGrantAccessCtrl', ['$scope', '$log', 'Upload', function ($scope, $log, Upload) {

    $scope.portfolio.currentSection = $scope.portfolio.sectionCollection.GrantAccess;
    var self = this;

    $("#ulnavigation .active").removeClass('active');
    $("#ulnavigation #grantAccessId").addClass('active');

    var loadData = function () {
        if (!$scope.portfolio.project || !$scope.portfolio.project.accessParties || !$scope.portfolio.project.accessParties[0]) return;
        self.accessParty = $scope.portfolio.project.accessParties[0];
        var grps = $scope.portfolio.loadData.grantAccessGrps;
        for (var i = 0; i < grps.length; i++) {
            var group = grps[i];
            if (self.accessParty.accessType == group.accessType) {
                if ((self.accessParty.accessType == 'OFFICE' && self.accessParty.officeGUID == group.officeGUID) ||
                    (self.accessParty.accessType == 'TEAM' && self.accessParty.teamGUID == group.teamGUID)) {
                    self.accessParty = group;
                    break;
                }
            }
        }
    };

    loadData();

    var main = $scope.portfolio;
    main.getSubmitData = function () {

        var data = angular.copy($scope.portfolio.project);
        data.accessParties = [self.accessParty];
        angular.forEach(data.accessParties, function (accessparty) {
            delete accessparty.name;
        });
        return data;
    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }

}]);;
angular.module('PortfolioCreation').controller('PortfolioProjectInfoController', ['$scope', '$state', '$filter', function ($scope, $state, $filter) {
    var self = this;


    $("#ulnavigation .active").removeClass('active');
    $("#ulnavigation #projectInformationId").addClass('active');

    $scope.portfolio.currentSection = $scope.portfolio.sectionCollection.projectInformation;
    self.serviceResponseAlert = false;
    $scope.open = {
        draftDate: false,
        finalDate: false,
    };

    // Disable weekend selection
    $scope.disabled = function (date, mode) {
        return false; // (mode === 'day' && (new Date().toDateString() == date.toDateString()));
    };

    $scope.dateOptions = {
        showWeeks: false,
        startingDay: 1
    };

    $scope.timeOptions = {
        readonlyInput: true,
        showMeridian: false
    };

    $scope.openCalendar = function (e, date) {
        e.preventDefault();
        e.stopPropagation();

        $scope.open[date] = true;
    };

    // watch date4 and date5 to calculate difference
    $scope.$watch(function () {
        return $scope.dates;
    }, function () {

    }, true);



    self.data = $scope.portfolio.project || {
        addSiteMethod: $scope.portfolio.addSiteMethodTypes.manual,
        client: {}
    };


    if ($scope.portfolio.project) {
        self.data.addSiteMethod = $scope.portfolio.addSiteMethod;
        if ($scope.portfolio.project.draftDueDate) {
            // var tempDraftDueDate = new Date($scope.portfolio.project.draftDueDate);
            var tempDraftDueDate = $filter('date')($scope.portfolio.project.draftDueDate, "yyyy-MM-dd hh:mm:ss");
            $scope.portfolio.project.draftDueDate = tempDraftDueDate.split(' ')[0];

        }

        if ($scope.portfolio.project.finalDueDate) {

            var tempFinalDueDate = $filter('date')($scope.portfolio.project.finalDueDate, "yyyy-MM-dd hh:mm:ss");
            $scope.portfolio.project.finalDueDate = tempFinalDueDate.split(' ')[0];
        }
    }

    // over-write main method
    var main = $scope.portfolio;
    main.getSubmitData = function () {

        self.data.draftDueDate = $filter('date')(self.data.draftDueDate, "yyyy-MM-dd hh:mm:ss");
        self.data.finalDueDate = $filter('date')(self.data.finalDueDate, "yyyy-MM-dd hh:mm:ss");
        $scope.portfolio.addSiteMethod = self.data.addSiteMethod;
        return self.data;
    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {

        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }



    $('body').keydown(function (event) {

        if (event.keyCode == 9) {
            $('#draftDate').next('.dropdown-menu.dropdown-menu-left.ng-pristine.ng-valid.ng-valid-date-disabled').hide();
            $('#finalDate').next('.dropdown-menu.dropdown-menu-left.ng-pristine.ng-valid.ng-valid-date-disabled').hide();
        }
    });

    $('body').mouseup(function (event) {
        var target = event.toElement || event.relatedTarget || event.originalEvent.target;
        switch (target.attributes.id.value) {
            case 'draftDate':
                $('#draftDate').next('.dropdown-menu.dropdown-menu-left.ng-pristine.ng-valid.ng-valid-date-disabled').show();
                if (event.keyCode == 46 || event.keyCode == 9 || event.keyCode == 8) {
                    $('#draftDate').next('.dropdown-menu.dropdown-menu-left.ng-pristine.ng-valid.ng-valid-date-disabled').hide();
                }
                break;
            case 'finalDate':
                $('#finalDate').next('.dropdown-menu.dropdown-menu-left.ng-pristine.ng-valid.ng-valid-date-disabled').show();
                break;

            default:
        }
    });

    //$('#finalDate').val();

    /*$('#draftDate').datepicker().on('changeDate', function (ev) {
        $('#draftDate').datepicker('hide');
        $('#finalDate').focus();

    });
    */

    // $('#finalDate').datepicker().on('changeDate', function (ev) {
    //   $('#finalDate').datepicker('hide');
    //  $("#projectcomments").focus();

    // });

}]);
angular.module('PortfolioCreation').controller('PortfolioReportInformationController', ['$scope', '$log', '$state', '$modal', '$compile', function ($scope, $log, $state, $modal, $compile) {


    if ($scope.portfolio.addSiteMethod == $scope.portfolio.addSiteMethodTypes.manual) {
        if ($scope.portfolio.project && $scope.portfolio.project.locations && $scope.portfolio.project.locations.length) {
            $state.go('PortfolioCreation.UploadedSiteDetails');
        }
    } else if ($scope.portfolio.project && $scope.portfolio.addSiteMethod == $scope.portfolio.addSiteMethodTypes.upload) {
        $state.go('PortfolioCreation.UploadSiteSpreadSheet');
    }

    $("#ulnavigation .active").removeClass('active');
    $("#ulnavigation #ReportInformation").addClass('active');


    var self = this;
    self.locationCount = 0;
    self.poNumber = '';

    $scope.portfolio.currentSection = $scope.portfolio.sectionCollection.reportInformation;

    if ($scope.portfolio.project.locations) {
        self.locations = angular.copy($scope.portfolio.project.locations);
        self.locationCount = self.locations.length + 1;
        self.locations.push({
            siteContact: {}
        });

    } else {
        self.locations = [{
            siteContact: {}
    }];
    }


    var main = $scope.portfolio;
    main.getSubmitData = function () {
        var locations = angular.copy(self.locations);
        for (var i = 0; i < locations.length; i++) {
            var location = locations[i];

            if (location && location.country && location.country.name) {
                location.country = location.country.name;
            }
            if (location && location.state && location.state.name) {
                location.state = location.state.name;
            }

            if (location.reports) {
                for (var j = 0; j < location.reports.length; j++) {
                    var report = location.reports[j];
                    var valid = {
                        templateID: report.templateID,
                        templateGUID: report.templateGUID,
                        taskedCompanyID: report.ownerCompanyID,
                        templateVersionGUID: report.templateVersionGUID,
                        taskedCompanyGUID: report.ownerCompanyGUID,
                        poNumber: self.poNumber

                    };
                    location.reports[j] = valid;
                }
            }
        }

        var p = $scope.portfolio;
        var data = angular.copy(p.project);
        data.locations = locations;
        data.addSiteMethod = $scope.portfolio.addSiteMethod;
        return data;
    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }

    self.addAnotherSite = function () {

        self.locationCount = self.locationCount + 1;
        self.locations.push({
            siteContact: {}
        });
    }

}]);;
angular.module('PortfolioCreation').controller('PortfolioSuccessMessageCtrl', ['$scope', '$state', '$location', 'BASEURL', function ($scope, $state, $location, BASEURL) {

    var self = this;
    var portfolio = $scope.portfolio;
    var project = portfolio.project;


    $scope.viewDashBoardURL = "#projectDashboard?projectGuid=" + project.projectGUID + "&accountGuid=" + BASEURL.accountGUID + "&companyGuid=" + BASEURL.companyGUID;

    $scope.addAnotherProject = function () {

        $scope.portfolio.project = {};
        $scope.portfolio.project.client = {};
        $state.go('PortfolioCreation.ProjectInformation');
        $("#projectInformationId").addClass('active');

    }




}]);
angular.module('PortfolioCreation').controller('PortfolioUploadedSiteDetailsCtrl', ['$scope', '$modal', '$state', function ($scope, $modal, $state) {

    var self = this;
    var main = $scope.portfolio;

    $("#ulnavigation .active").removeClass('active');
    $("#ulnavigation #ReportInformation").addClass('active');
    var existingProjectData = main.project;
    self.data = angular.copy(existingProjectData);

    self.siteDetails = [];

    var parseLoadData = function () {
        var locations = self.data ? self.data.locations : null;

        if (locations && locations.length) {
            var cloned = angular.copy(locations);
            for (var i = 0; i < cloned.length; i++) {
                var loc = cloned[i];

                var toPush = parseIntoBindObj(loc, loc.siteContact, i);
                if (toPush.reports) {
                    toPush.poNumber = toPush.reports[0].poNumber;
                    toPush.projectNumber = toPush.reports[0].projectNumber
                }

                self.siteDetails.push(toPush);
            }
        }

        //var pushbindObj = function (location, index, contact) {
        //    var toPush = parseIntoBindObj(location, contact, index);
        //    self.siteDetails.push(toPush);
        //}
        //executeFnOnReportTemplates(locations, null, pushbindObj, commonContact);
    }

    var parseIntoBindObj = function (location, contact, index) {
        var temp = angular.copy(location);
        temp.latitude = temp.latitude == 0 ? '0.0000' : temp.latitude;
        temp.longitude = temp.longitude == 0 ? '0.0000' : temp.longitude;
        temp.index = index;
        temp.contact = contact.name;
        temp.phone = contact.phone;
        temp.fax = contact.fax;
        temp.email = contact.email;
        return temp;

        /*return {
            index: index,
            projectNumber: location.projectNumber,
            propertyNumber: location.propertyNumber,
            name: location.name,
            address1: location.address1,
            address2: location.address2,
            city: location.city,
            state: location.state,
            zip: location.zip,
            country: location.country,
            county: location.county,
            latitude: location.latitude,
            longitude: location.longitude,
            contact: contact.name,
            phone: contact.phone,
            fax: contact.fax,
            email: contact.email,
            poNumber: location.poNumber,
            transactionType: location.transactionType,
            reports: location.reports
        };*/
    }



    var clearScreenData = function () {
        self.siteDetails = [];
    }
    var init = function () {
        clearScreenData();
        parseLoadData();
    }

    init();

    main.getSubmitData = function () {

        var p = main;
        var data = angular.copy(p.project);
        angular.forEach(self.data.locations, function (loc) {
            if (loc.reports) {
                angular.forEach(loc.reports, function (report) {
                    report.poNumber = loc.poNumber;
                    report.projectNumber = loc.projectNumber;
                });
                if (loc.reports.length == 1) {
                    if (!loc.reports[0].templateGUID) {
                        delete loc.reports;
                    }
                }
            }
            if (angular.isObject(loc.state)) {
                var stateName = loc.state.name;
                delete loc.state
                loc.state = stateName;
            }

            if (angular.isObject(loc.country)) {
                var countryName = loc.country.name;
                delete loc.country
                loc.country = countryName;
            }
            delete loc.projectNumber;
            delete loc.poNumber;
        });

        data.locations = self.data.locations;
        return data;
    }

    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }



    self.deleteSite = function (site) {
        var locations = self.data.locations;
        locations.splice(site.index, 1);
        init();
    }

    self.editSite = function (site) {
        //$state.go('PortfolioCreation.AddLocation');

        self.editModalDataContainer = {
            location: site,
            action: 'Edit',
            index: site.index
        };

        var modalInstance = $modal.open({
            templateUrl: 'app/modules/PortfolioCreation/views/portfolio.AddLocation.html',
            scope: $scope,
            controller: 'PortfolioAddLocationCtrl as addLocation',
            size: 'lg',
            windowClass: 'app-modal-window',
            resolve: {
                modalDataContainer: function () {

                    return self.editModalDataContainer;
                }
            }
        });

        modalInstance.result.then(function () {
            /*data.locations[self.editModalDataContainer.index] = self.editModalDataContainer.location;
            init();*/

            var edited = self.editModalDataContainer.location;

            if (edited) {
                /*data.locationCount = data.locationCount + 1;
                data.locations[data.locationCount] = self.modalDataContainer.location;*/

                var editedLoc = angular.copy(edited);
                editedLoc = {
                    propertyNumber: edited.propertyNumber,
                    name: edited.name,
                    address1: edited.address1,
                    address2: edited.address2,
                    city: edited.city,
                    state: edited.state,
                    zip: edited.zip,
                    propertyType: edited.propertyType,
                    country: edited.country,
                    latitude: edited.latitude,
                    longitude: edited.longitude,
                    acreage: edited.acreage,
                    numBuildings: edited.numBuildings,
                    transactionType: edited.transactionType,
                    poNumber: edited.poNumber,
                    projectNumber: edited.projectNumber,
                    /*"reports":[{
                      "templateID":101,
                      "libraryID":102,
                      "companyID":153,
                      "projectNumber":"",
                      "poNumber":"",
                      "fee":""
                    }],*/
                    siteContact: {
                        name: edited.contact,
                        phone: edited.phone,
                        fax: edited.fax,
                        email: edited.email
                    }
                }
                self.data.locations[self.editModalDataContainer.index] = editedLoc;
                init();
            }

        });
    }


    //angular.isObject(edited.state) ? angular.edited.state.name : edited.state
    self.addNewLocation = function () {
        //$state.go('PortfolioCreation.AddLocation');
        self.modalDataContainer = {
            location: null,
            action: 'Add'
        };

        var modalInstance = $modal.open({
            templateUrl: 'app/modules/PortfolioCreation/views/portfolio.AddLocation.html',
            scope: $scope,
            controller: 'PortfolioAddLocationCtrl as addLocation',
            size: 'lg',
            windowClass: 'app-modal-window',
            resolve: {
                modalDataContainer: function () {
                    return self.modalDataContainer;
                }
            }
        });

        modalInstance.result.then(function () {

            var added = self.modalDataContainer.location;
            if (added) {
                /*data.locationCount = data.locationCount + 1;
                data.locations[data.locationCount] = self.modalDataContainer.location;*/

                var newLoc = {
                    propertyNumber: added.propertyNumber,
                    name: added.name,
                    address1: added.address1,
                    address2: added.address2,
                    city: added.city,
                    state: added.state,
                    zip: added.zip,
                    propertyType: added.propertyType,
                    country: added.country,
                    latitude: added.latitude,
                    longitude: added.longitude,
                    acreage: added.acreage,
                    numBuildings: added.numBuildings,
                    transactionType: added.transactionType,
                    poNumber: added.poNumber,
                    /*"reports":[{
                      "templateID":101,
                      "libraryID":102,
                      "companyID":153,
                      "projectNumber":"",
                      "poNumber":"",
                      "fee":""
                    }],*/
                    siteContact: {
                        name: added.contact,
                        phone: added.phone,
                        fax: added.fax,
                        email: added.email
                    }
                }

                self.data.locations.push(newLoc);
                init();
            }
        });
    };

    self.deleteAllSites = function () {
        self.siteDetails = [];
        self.data.locations = [];
        $state.go('PortfolioCreation.UploadSiteSpreadSheet');
    };


            }]);;
angular.module('PortfolioCreation').controller('ReportInfoCtrl', ['$scope', 'Upload', '$state', function ($scope, Upload, $state) {

    if ($scope.portfolio.project && $scope.portfolio.project.locations && $scope.portfolio.project.locations.length) {
        $state.go('PortfolioCreation.UploadedSiteDetails');
    }

    $("#ulnavigation .active").removeClass('active');
    $("#ulnavigation #ReportInformation").addClass('active');

    //    $scope.$watch('files', function() {
    //        $scope.upload($scope.files);
    //    });
    // set default directive values
    // Upload.setDefaults( {ngf-keep:false ngf-accept:'image/*', ...} );
    //this.Upload = function () {
    //    self.UploadErrorMsg = "";
    //    self.isUploadErrorMsg = false;

    //    var files = $scope.files;
    //    if (!files || files.length <= 0) {
    //        self.isUploadErrorMsg = true;
    //        self.UploadErrorMsg += "Please attach files before trying to upload.";
    //        return;
    //    }
    //    for (var i = 0; i < files.length; i++) {
    //        var file = files[i];
    //        Upload.upload({
    //            url: 'https://angular-file-upload-cors-srv.appspot.com/upload',
    //            //                    fields: {
    //            //                        'username': $scope.username
    //            //                    },
    //            file: file
    //        }).progress(function (evt) {
    //            var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
    //            console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);
    //        }).success(function (data, status, headers, config) {
    //            //console.log('file ' + config.file.name + 'uploaded. Response: ' + JSON.stringify(data));
    //            self.attachmentFiles.push({
    //                name: data.result[0].name,
    //                size: data.result[0].size
    //            });
    //        }).error(function (data, status, headers, config) {
    //            //console.log('error status: ' + status);
    //            self.isUploadErrorMsg = true;
    //            self.UploadErrorMsg += "Failed to upload file '" + config.file.name + "'. Status: " + status + ".\n";
    //        })
    //    }

    //};

    //this.RemoveAttachment = function (name) {
    //    removeFileFromCollection(name);
    //};

    //var removeFileFromCollection = function (name) {
    //    if (!self || !self.attachmentFiles) return;
    //    for (var i = 0; i < self.attachmentFiles.length; i++) {
    //        var file = self.attachmentFiles[i];
    //        if (file.name == name) {
    //            self.attachmentFiles.splice(i, 1);
    //        }
    //    }
    //}

    var main = $scope.portfolio;
    main.getSubmitData = function () {
        self.UploadErrorMsg = "";
        self.isUploadErrorMsg = false;

        var files = self.attachmentFiles;
        if (!files || files.length <= 0) {
            self.isUploadErrorMsg = true;
            self.UploadErrorMsg += "Please attach files before trying to upload.";
            return;
        }

        var file = files[0];
        var project = angular.copy($scope.portfolio.project);
        project.inputFile = file.base64;

        if (!project.attachments || !project.attachments.length) {
            project.attachments = [];
        }

        var obj = {
            fileName: file.name,
            base64: file.base64
        }
        project.attachments.push(obj);
        return project;
    };

    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }

    $scope.$watchCollection("files", function () {
        convertAttachedFilesToBase64();
    });

    self.attachmentFiles = [];

    function convertAttachedFilesToBase64() {
        if (!$scope.files || !$scope.files.length) {
            return;
        } else {
            self.uploadSpreadSheetExists = true;
        }


        var files = $scope.files;
        self.attachmentFiles = [];
        for (var i = 0, completedCount = 0; i < files.length; i++) {
            var file = files[i];
            file.convertToBase64(function (base64, attachedFile) {
                window.localStorage.setItem("inputfilesize", attachedFile.size);
                var attach = angular.copy(attachedFile);
                attach.base64 = base64;
                self.attachmentFiles.push(attach);
                /*completedCount++;
                if (completedCount == files.length) {
                    // callback invoked via non-angular code (FileReader.onload)
                    // need to apply changes to scope
                    $scope.$apply();
                    // set attachments to parent submit object
                    setSubmitDataAttachmentsFromLocal();
                }*/
            });
        }
    }

    // convert file to base64
    File.prototype.convertToBase64 = function (callback) {
        var file = this;
        var FR = new FileReader();
        FR.onload = function (e) {
            var base64 = removeNoiseFromDataUrlOfBase64(e.target.result);
            callback(base64, file);
        };
        FR.readAsDataURL(this);
    };

    function removeNoiseFromDataUrlOfBase64(dataUrl) {
        return dataUrl.indexOf("base64") >= 0 ? dataUrl.split("base64,")[1] : dataUrl;
    }

}]);;
angular.module('PortfolioCreation').controller('UploadedSitesReportSelectionCtrl', ['$scope', function ($scope) {
    var self = this;
    var portfolio = $scope.portfolio;
    var project = portfolio.project;

    self.data = {
        locations: []
    };


    $("#ulnavigation .active").removeClass('active');
    $("#ulnavigation #ReportInformation").addClass('active');

    var loadData = function () {
        if (project.locations && project.locations.length) {
            for (var i = 0; i < project.locations.length; i++) {
                var location = project.locations[i];
                var clone = angular.copy(location);
                self.data.locations.push(clone);
            }
        }
    }
    loadData();

    portfolio.getSubmitData = function () {
        var locations = angular.copy(self.data.locations);
        for (var i = 0; i < locations.length; i++) {
            var location = locations[i];
            if (location.reports) {

                for (var j = 0; j < location.reports.length; j++) {
                    var report = location.reports[j];
                    var valid = {
                        taskedCompanyID: report.ownerCompanyID,
                        taskedCompanyGUID: report.ownerCompanyGUID,
                        templateID: report.templateID,
                        templateGUID: report.templateGUID,
                        templateVersionGUID: report.templateVersionGUID,
                        libraryID: report.libraryID,
                        libraryGUID: report.libraryGUID,
                        projectNumber: report.projectNumber,
                        poNumber: report.poNumber,
                        fee: report.fee
                    };
                    location.reports[j] = valid;
                }
            }
            delete location.poNumber;
        }

        var p = $scope.portfolio;
        var data = angular.copy(p.project);
        data.locations = locations;
        return data;
    }

    portfolio.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    portfolio.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }


    self.fillReportAndTransactionDown = function (reports, transaction) {

        angular.forEach(self.data.locations, function (location) {

            location.reports = [];
            location.reports = reports;
            location.transactionTypeGUID = transaction;
        });

    }

}]);
angular.module('PortfolioCreation').directive('activeClass', ['$location', '$state', function ($location, $state) {

    return {
        restrict: 'A',

        link: function (scope, elem, attr) {

            // default page for any step
            // redirect to default on page load
            if ($state.current.name != "PortfolioCreation.ProjectInformation" && $state.current.name != "LenderPortfolioCreation.ProjectInformation") {
                if ($state.current.name.startsWith("PortfolioCreation")) {
                    $state.go("PortfolioCreation.ProjectInformation");
                } else if ($state.current.name.startsWith("LenderPortfolioCreation")) {
                    $state.go("LenderPortfolioCreation.ProjectInformation");
                }
                if (attr.urlparams == "/PortfolioCreation/ProjectInformation") {
                    elem.removeClass("disabled");
                    elem.addClass("active");
                } else {
                    elem.removeClass("active");
                    elem.addClass("disabled");
                }
            } else {
                if (String($location.path()) === String(attr.urlparams)) {
                    elem.removeClass("disabled");
                    elem.addClass("active");
                } else {
                    elem.removeClass("active");
                    elem.addClass("disabled");
                }
            }

            elem.bind('click', function () {
                if (!elem.attr('status') || (elem.attr('status') != "completed" && elem.attr('status') != 'current')) return;

                elem.removeClass('disabled');
                elem.addClass('active');

                //elem.nextAll().addClass('disabled');
                elem.siblings().removeClass('active');

                if (attr.urlparams == '/PortfolioCreation/ProjectInformation') {

                    angular.element('#previousStep').hide();
                    angular.element('#cancelThisProject_bottombtn').hide();
                    angular.element('#cancelThisProject_topbtn').show();
                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.ProjectInformation');

                } else if (attr.urlparams == '/PortfolioCreation/ReportInformation' || attr.urlparams == '/PortfolioCreation/UploadSites' || attr.urlparams == '/PortfolioCreation/UploadedSiteDetails' || attr.urlparams == '/PortfolioCreation/UploadedSitesReportSelection') {

                    angular.element('#previousStep').show();
                    angular.element('#cancelThisProject_bottombtn').show();
                    angular.element('#cancelThisProject_topbtn').hide();
                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.ReportInformation');

                } else if (attr.urlparams == '/PortfolioCreation/FeeInformation') {

                    angular.element('#previousStep').show();
                    angular.element('#cancelThisProject_bottombtn').show();
                    angular.element('#cancelThisProject_topbtn').hide();
                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.FeeInformation');

                } else if (attr.urlparams == '/PortfolioCreation/Attachments') {

                    angular.element('#previousStep').show();
                    angular.element('#cancelThisProject_bottombtn').show();
                    angular.element('#cancelThisProject_topbtn').hide();
                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.Attachments');

                } else if (attr.urlparams == '/PortfolioCreation/GrantAccess') {

                    angular.element('#previousStep').show();
                    angular.element('#cancelThisProject_bottombtn').show();
                    angular.element('#cancelThisProject_topbtn').hide();
                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.GrantAccess');
                } else if (attr.urlparams == '/PortfolioCreation/ConfirmProjectInformation') {
                    angular.element('#previousStep').show();
                    angular.element('#cancelThisProject_bottombtn').show();
                    angular.element('#cancelThisProject_topbtn').hide();
                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.ConfirmProjectInfo');
                } else if (attr.urlparams == '/PortfolioCreation/Email') {
                    angular.element('#previousStep').show();
                    angular.element('#cancelThisProject_bottombtn').show();
                    angular.element('#cancelThisProject_topbtn').hide();
                    scope.nextButtonText = "Finish";

                    $state.go('PortfolioCreation.Email');
                }

            });

        }
    }


}]);



angular.module('PortfolioCreation').directive('shiftNext', ['$location', '$state', function ($location, $state) {

    return {
        restrict: 'A',
        link: function (scope, elem, attr) {

            if ($location.path() == '/PortfolioCreation/Email') {

                scope.nextButtonText = "Finish";

            }
            elem.bind('click', function () {

                var myform = scope.portfolio.submitForm;
                if (myform && myform.$invalid) return;

                angular.element('#ulnavigation li.active').attr('status', 'completed');

                if ($location.path() == '/PortfolioCreation/ProjectInformation') {
                    $state.go('PortfolioCreation.ReportInformation');

                    angular.element('#previousStep').show();
                    angular.element('#cancelThisProject_bottombtn').show();
                    angular.element('#cancelThisProject_topbtn').hide();

                } else if ($location.path() == '/PortfolioCreation/ReportInformation' || $location.path() == '/PortfolioCreation/UploadSites' || $location.path() == '/PortfolioCreation/UploadedSiteDetails' || $location.path() == '/PortfolioCreation/UploadedSitesReportSelection') {

                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.FeeInformation');
                } else if ($location.path() == '/PortfolioCreation/FeeInformation') {

                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.Attachments');
                } else if ($location.path() == '/PortfolioCreation/Attachments') {

                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.GrantAccess');
                } else if ($location.path() == '/PortfolioCreation/GrantAccess') {

                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.ConfirmProjectInfo');
                } else if ($location.path() == '/PortfolioCreation/ConfirmProjectInformation') {

                    scope.nextButtonText = "Finish";
                    $state.go('PortfolioCreation.Email');
                }


                var nxt = angular.element('#ulnavigation li.active').next();
                nxt.addClass('active');
                nxt.removeClass('disabled');
                nxt.attr('status', 'current');
                angular.element('#ulnavigation li.active').prev().removeClass('active');

            })
        }
    }

}]);

angular.module('PortfolioCreation').directive('shiftPrevious', ['$location', '$state', function ($location, $state) {

    return {
        restrict: 'A',
        link: function (scope, elem, attr) {

            if ($location.path() == '/PortfolioCreation/ProjectInformation') {
                angular.element('#previousStep').hide();
                angular.element('#cancelThisProject_bottombtn').hide();
                angular.element('#cancelThisProject_topbtn').show();

            } else {

                angular.element('#previousStep').show();

            }
            elem.bind('click', function () {

                if ($location.path() == '/PortfolioCreation/ReportInformation' || $location.path() == '/PortfolioCreation/UploadSites' || $location.path() == '/PortfolioCreation/UploadedSiteDetails' || $location.path() == '/PortfolioCreation/UploadedSitesReportSelection') {
                    $state.go('PortfolioCreation.ProjectInformation');
                    scope.nextButtonText = "Next";
                    angular.element('#previousStep').hide();
                    angular.element('#cancelThisProject_bottombtn').hide();
                    angular.element('#cancelThisProject_topbtn').show();
                } else if ($location.path() == '/PortfolioCreation/FeeInformation') {

                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.ReportInformation');
                } else if ($location.path() == '/PortfolioCreation/Attachments') {

                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.FeeInformation');
                } else if ($location.path() == '/PortfolioCreation/GrantAccess') {

                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.Attachments');
                } else if ($location.path() == '/PortfolioCreation/ConfirmProjectInformation') {

                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.GrantAccess');
                } else if ($location.path() == '/PortfolioCreation/Email') {

                    scope.nextButtonText = "Next";
                    $state.go('PortfolioCreation.ConfirmProjectInfo');
                }

                angular.element('#ulnavigation li.active').prev().addClass('active');
                angular.element('#ulnavigation li.active').next().removeClass('active');

            });

            /*var previousDisableAttr = attr["previousClickDisable"];
            scope.$watch(previousDisableAttr, function(val) {
                scope.previousClickDisable = val;
            });*/
        }
    }

}]);




angular.module('PortfolioCreation').directive('cancelProject', ['$location', '$state', function ($location, $state) {

    return {
        restrict: 'A',
        link: function (scope, elem, attr) {

            if ($location.path() == '/PortfolioCreation/ProjectInformation') {
                angular.element('#cancelThisProject_topbtn').show();
                angular.element('#cancelThisProject_bottombtn').hide();
            } else {


                angular.element('#cancelThisProject_topbtn').hide();
                angular.element('#cancelThisProject_bottombtn').show();
            }

            /*var previousDisableAttr = attr["previousClickDisable"];
            scope.$watch(previousDisableAttr, function(val) {
                scope.previousClickDisable = val;
            });*/
        }
    }

}]);;
angular.module('PortfolioCreation').constant('PortfolioCreationStateNavigation', {
    'PortfolioCreation.ProjectInformation': {
        nextState: 'PortfolioCreation.ReportInformation'
    },
    'PortfolioCreation.ReportInformation': {
        nextState: 'PortfolioCreation.FeeInformation'
    },
    'PortfolioCreation.UploadSiteSpreadSheet': {
        nextState: 'PortfolioCreation.UploadedSiteDetails',
        hasSuccessiveSection: true
    },
    'PortfolioCreation.UploadedSiteDetails': {
        nextState: 'PortfolioCreation.UploadedSitesReportSelection',
        hasSuccessiveSection: true
    },
    'PortfolioCreation.UploadedSitesReportSelection': {
        nextState: 'PortfolioCreation.FeeInformation'
    },
    'PortfolioCreation.FeeInformation': {
        nextState: 'PortfolioCreation.Attachments'
    },
    'PortfolioCreation.Attachments': {
        nextState: 'PortfolioCreation.GrantAccess'
    },
    'PortfolioCreation.GrantAccess': {
        nextState: 'PortfolioCreation.ConfirmProjectInfo'
    },
    'PortfolioCreation.ConfirmProjectInfo': {
        nextState: 'PortfolioCreation.Email'
    },
    'PortfolioCreation.Email': {
        nextState: 'PortfolioCreation.SetupSuccess'
    }
});
angular.module('PortfolioCreation').directive('nextStep', ['$location', '$state', function ($location, $state) {

    return {
        restrict: 'A',
        scope: {
            getSubmitProjectData: '&',
            form: '=',
            currentProjectData: '=',
            responseReceiver: '&',
            buttonText: '=',
            stateNavigation: '=',
            errorHandler: '&',
            disableStepWise: '='
        },
        template: '<button id="nextButton" class="btn btn-md btn-primary pull-right" type="button" ng-click="submitPortfolioProject()" ng-disabled="disableStepWise"> {{buttonText}} </button>',
        replace: true,
        controller: ['$scope', '$state', 'ParcelUI.Resources', 'ProjectStartupAPI', function ($scope, $state, ParcelUI_Resources, ProjectStartupAPI) {

            $scope.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;
            $scope.disableStepWise = false;

            var PortfolioCreationStateNavigation = $scope.stateNavigation;
            // save $state as scope property
            // to make it accessible in scope methods
            $scope.state = $state;
            $scope.buttonText = "Next";
            // submit project data
            $scope.submitPortfolioProject = function () {
                // form validation

                if ($scope.form && $scope.form.$invalid) {
                    processError('Invalid Form Submission');
                    var inputElements = document.getElementsByName($scope.form.$name);
                    angular.element(inputElements).find(':input[required],multiselect[required]').trigger('blur');
                    return;
                }

                // state information
                var currentState = $scope.state.current.name;
                var currentStateNavigation = PortfolioCreationStateNavigation[currentState];
                var nextState = currentStateNavigation.nextState;


                // retrieve project data from current child controller
                var toSubmitProjectData = $scope.getSubmitProjectData();

                if (!toSubmitProjectData) {
                    navigationHandler(null, currentState, currentStateNavigation, nextState, null);
                    return;
                }

                var companyId = 12;
                var projectID = toSubmitProjectData.projectGUID;
                var addSiteMethod = toSubmitProjectData.addSiteMethod;
                delete toSubmitProjectData.addSiteMethod;

                var servicePromise = currentState == "PortfolioCreation.Email" || currentState == "LenderPortfolioCreation.ConfirmProjectInfo" ? ProjectStartupAPI.postData(companyId, toSubmitProjectData) : currentState == 'PortfolioCreation.ProjectInformation' || currentState == 'LenderPortfolioCreation.ProjectInformation' ? ProjectStartupAPI.postDraft(companyId, toSubmitProjectData) : ProjectStartupAPI.putDraft(projectID, toSubmitProjectData);


                $scope.waitingProcessResources.promise = null;
                $scope.waitingProcessResources.promise = servicePromise;

                $scope.disableStepWise = true;

                servicePromise.then(function (responseData) {
                    if (currentState == "PortfolioCreation.ProjectInformation" || currentState == "LenderPortfolioCreation.ProjectInformation") {

                        responseData.addSiteMethod = addSiteMethod;
                    }
                    navigationHandler(responseData, currentState, currentStateNavigation, nextState, toSubmitProjectData);
                }, function (error) {

                    processError(error);
                }).finally(function () {
                    $scope.disableStepWise = false;
                });
            }

            var processError = function (error) {
                var errorMsg = error;
                $scope.errorHandler({
                    errorMsg: errorMsg
                });
            }

            var navigationHandler = function (responseData, currentState, currentStateNavigation, defaultNextState, dataRetrievedForSubmit) {

                var nextState = defaultNextState;

                if (currentState == 'PortfolioCreation.ProjectInformation' || currentState == 'LenderPortfolioCreation.ProjectInformation') {
                    // return response

                    var receivedProjectData = responseData;

                    // NOTE: for mock purposes, removing locations from response
                    if (receivedProjectData) {
                        var temp = angular.copy(receivedProjectData);
                        receivedProjectData = temp;
                        //receivedProjectData.locations = null;//Commented by Yogesh 
                        processServiceResponseData(receivedProjectData);
                    }

                    var portfolioType = currentState.split('.')[0];
                    // special cases for step 1

                    if (responseData.addSiteMethod == 'upload') {
                        if (receivedProjectData && receivedProjectData.locations && receivedProjectData.locations.length) {
                            // where sites have already been added
                            // screen to display added sites with add/edit actions
                            nextState = portfolioType + '.UploadedSiteDetails';
                        } else if (dataRetrievedForSubmit && dataRetrievedForSubmit.addSiteMethod == 'upload') {
                            // case where sites are not added
                            // and option to upload spreadsheet selected by user
                            nextState = portfolioType + '.UploadSiteSpreadSheet';
                        }
                    }
                } else {
                    // return response
                    var receivedProjectData = responseData
                    if (receivedProjectData) {
                        processServiceResponseData(receivedProjectData);
                    }

                    if (currentState == "PortfolioCreation.ReportInformation" && $scope.currentProjectData && $scope.currentProjectData.locations && $scope.currentProjectData.locations.length) {
                        nextState = 'PortfolioCreation.UploadedSiteDetails';
                    } else if ((currentState == 'LenderPortfolioCreation.ReportInformation' || currentState == 'LenderPortfolioCreation.UploadedSitesReportSelection') && $scope.currentProjectData && $scope.currentProjectData.outToBid) {
                        nextState = 'LenderPortfolioCreation.SelectEnvironmentalConsultant';
                    }
                }
                changeToNextState(currentStateNavigation, nextState);
            }

            var processServiceResponseData = function (receivedProjectData) {
                $scope.responseReceiver({
                    projectData: receivedProjectData
                });
            }

            var changeToNextState = function (currentStateNavigation, nextState) {
                if (!currentStateNavigation.hasSuccessiveSection) {
                    // update status for current step
                    var currentActive = angular.element('#ulnavigation li.active');
                    currentActive.attr('status', 'completed');
                    // make next step active
                    var nextElem = currentActive.next();
                    nextElem.addClass('active');
                    nextElem.removeClass('disabled');
                    nextElem.attr('status', 'current');
                    // make current inactive
                    currentActive.removeClass('active');
                }
                $state.go(nextState);
                if (nextState == 'PortfolioCreation.Email' || nextState == 'LenderPortfolioCreation.ConfirmProjectInfo') {
                    $scope.buttonText = "Finish";
                } else {
                    $scope.buttonText = "Next";
                }

                angular.element('#cancelThisProject_topbtn').hide();
                angular.element('#cancelThisProject_bottombtn').show()
                angular.element('#previousStep').show();
            }
        }]
    }

}]);;
angular.module('PortfolioCreation').service('PortfolioCreationAPI', ['APIFactory', 'PortfolioCreationUrlColl', function (APIFactory, PortfolioCreationUrlColl) {

    var self = this;
    self.apiType = {
        type: 'real', //'mock',
        get: {
            mock: PortfolioCreationUrlColl.MockGETAPI,
            real: PortfolioCreationUrlColl.GETAPI
        },
        post: {
            mock: PortfolioCreationUrlColl.POSTAPI,
            real: PortfolioCreationUrlColl.POSTAPI
        },
        put: {
            mock: PortfolioCreationUrlColl.PUTAPI,
            real: PortfolioCreationUrlColl.PUTAPI
        }
    };

    self.samplePOSTResponse = null;
    var loadSamplePOST = function () {
        var url = PortfolioCreationUrlColl.MockPOSTAPI;
        APIFactory.get(url).then(function (results) {
            self.samplePOSTResponse = results.project;
        })
    }
    if (self.apiType.type == 'mock') {
        loadSamplePOST();
    }

    var parseResponse = function (result) {
        if (self.apiType.type == 'mock') {
            return self.samplePOSTResponse;
        } else {
            return result.project;
        }
    }

    var parseError = function (error) {
        if (self.apiType.type == 'mock') {
            return self.samplePOSTResponse;
        } else {
            throw error;
        }
    }




    this.get = function (companyId) {
        var url = this.apiType.get[this.apiType.type];
        var queryParams = {
            companyID: companyId
        }
        return APIFactory.get(url, queryParams);
    };

    // POST data to create Project
    // response should return Id    
    this.post = function (companyId, project) {
        var url = this.apiType.post[this.apiType.type];
        var queryParams = {
            companyID: companyId
        }

        var postData = {
            project: project
        };

        return APIFactory.post(url, postData, queryParams).then(function (result) {
            return parseResponse(result);
        }, function (error) {
            return parseError(error);
        });
    }

    // incremental PUT to update Project (identified via ProjectId)
    // response should contain Project data to display, if required on view
    this.put = function (projectId, projectData) {
        var url = this.apiType.put[this.apiType.type];
        var queryParams = {
            projectID: projectId
        }

        var putData = {
            project: projectData
        };

        return APIFactory.put(url, putData, queryParams).then(function (result) {
            return parseResponse(result);
        }, function (error) {
            return parseError(error);
        });
    }
}]);;
angular.module('PortfolioCreation').constant('PortfolioCreationUrlColl', {

    MockGETAPI: 'app/modules/ProjectCreation/sampleJson/ProjectStartup.js',
    GETAPI: 'http://private-e494f-parcelprojectstartup.apiary-mock.com/projectstartup/{companyID}',

    POSTAPI: 'http://private-e494f-parcelprojectstartup.apiary-mock.com/projectstartup/{companyID}',
    MockPOSTAPI: 'app/modules/PortfolioCreation/sampleJson/postResponse.js',

    PUTAPI: 'http://private-e494f-parcelprojectstartup.apiary-mock.com/projectstartup/{projectID}'
}); // define module
angular.module('LenderPortfolioCreation', ['ui.router.state', 'ui.multiselect']);

// routers
angular.module('LenderPortfolioCreation').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {

        $urlRouterProvider.otherwise('/LenderPortfolioCreation');
        $urlRouterProvider.when('/LenderPortfolioCreation', '/LenderPortfolioCreation/ProjectInformation');

        var baseViewsFolder = 'app/modules/LenderPortfolioCreation/views/';
        $stateProvider.state('LenderPortfolioCreation', {
                url: '/LenderPortfolioCreation',
                templateUrl: baseViewsFolder + 'LenderPortfolioCreation.html',
                controller: 'LenderPortfolioCreationCtrl as lenderPortfolio',
                abstract: true
            })
            .state('LenderPortfolioCreation.ProjectInformation', {
                url: '/ProjectInformation',
                templateUrl: baseViewsFolder + 'lenderportfolio.ProjectInformation.html'
            })
            .state('LenderPortfolioCreation.ReportInformation', {
                url: '/ReportInformation',
                templateUrl: baseViewsFolder + 'lenderportfolio.ReportInformation.html'
            })
            .state('LenderPortfolioCreation.UploadSiteSpreadSheet', {
                url: '/UploadSites',
                templateUrl: baseViewsFolder + 'lenderportfolio.UploadSites.html'
            })
            .state('LenderPortfolioCreation.UploadedSiteDetails', {
                url: '/UploadedSiteDetails',
                templateUrl: baseViewsFolder + 'lenderportfolio.UploadedSiteDetails.html'
            })
            .state('LenderPortfolioCreation.AddLocation', {
                url: '/AddLocation',
                templateUrl: baseViewsFolder + 'lenderportfolio.AddLocation.html'
            })
            .state('LenderPortfolioCreation.UploadedSitesReportSelection', {
                url: '/UploadedSitesReportSelection',
                templateUrl: baseViewsFolder + 'lenderportfolio.UploadedSitesReportSelection.html'
            })
            .state('LenderPortfolioCreation.SelectEnvironmentalConsultant', {
                url: '/SelectEnvironmentalConsultant',
                templateUrl: baseViewsFolder + 'lenderportfolio.SelectEnvConsultant.html'
            })
            .state('LenderPortfolioCreation.SelectConsultantWithFee', {
                url: '/SelectConsultantWithFee',
                templateUrl: baseViewsFolder + 'lenderportfolio.SelectConsultantWithFee.html'
            })
            .state('LenderPortfolioCreation.Attachments', {
                url: '/Attachments',
                templateUrl: baseViewsFolder + 'lenderportfolio.Attachments.html'
            })
            .state('LenderPortfolioCreation.GrantAccess', {
                url: '/GrantAccess',
                templateUrl: baseViewsFolder + 'lenderportfolio.GrantAccess.html'
            })
            .state('LenderPortfolioCreation.ConfirmProjectInfo', {
                url: '/ConfirmProjectInformation',
                templateUrl: baseViewsFolder + 'lenderportfolio.ConfirmProjectInfo.html'
            })
            .state('LenderPortfolioCreation.Success', {
                url: '/Success',
                templateUrl: baseViewsFolder + 'lenderportfolio.successmessage.html'
            });
    }
]);;
angular.module('PortfolioCreation').controller('LenderPortfolioAddLocationCtrl', ['$scope', '$modalInstance', 'modalDataContainer', function ($scope, $modalInstance, modalDataContainer) {

    var self = this;
    var main = $scope.lenderPortfolio;
    var existingProjectData = main.project;
    var loadedData = main.loadData;

    self.action = modalDataContainer.action;
    if (self.action == 'Add') {
        self.title = 'Add Location to Portfolio';
        self.location = {};
    } else {
        self.title = 'Edit Location';
        self.location = angular.copy(modalDataContainer.location);
    }

    self.from = null;

    self.addSite = function () {
        modalDataContainer.location = self.location;
        $modalInstance.close();
    }

    self.cancel = function () {
        $modalInstance.close();
    }

}]);;
angular.module('PortfolioCreation').controller('LenderPortfolioAttachmentCtrl', ['$scope', '$log', 'Upload', function ($scope, $log, Upload) {

    var self = this;
    var main = $scope.lenderPortfolio;

    self.attachmentFiles = [];
    self.UploadSuccessMsg = "";
    self.UploadErrorMsg = "";
    self.IncorrectFormat = "";
    self.isUploadErrorMsg = false;



    function loadData() {
        var project = angular.copy(main.project);
        if (!project.attachments || !project.attachments.length) return;

        self.formattedAttachments = angular.copy(project.attachments);
        var attachments = project.attachments;
        self.attachmentFiles = attachments;
        angular.forEach(self.attachmentFiles, function (file) {
            file.name = file.fileName;
        });
    }
    loadData();

    File.prototype.convertToBase64 = function (callback) {
        var file = this;
        var FR = new FileReader();
        FR.onload = function (e) {
            var base64 = removeNoiseFromDataUrlOfBase64(e.target.result);
            callback(base64, file);
        };
        FR.readAsDataURL(this);
    };

    function removeNoiseFromDataUrlOfBase64(dataUrl) {
        return dataUrl.indexOf("base64") >= 0 ? dataUrl.split("base64,")[1] : dataUrl;
    }

    function convertAttachedFilesToBase64() {
        if (!$scope.files || !$scope.files.length) {
            return;
        } else {
            self.attachmentFilesExists = true;
        }

        var files = $scope.files;
        for (var i = 0, completedCount = 0; i < files.length; i++) {
            var file = files[i];
            file.convertToBase64(function (base64, attachedFile) {
                var attach = angular.copy(attachedFile);
                attach.base64 = base64;
                self.attachmentFiles.push(attach);
                completedCount++;
                if (completedCount == files.length) {
                    // callback invoked via non-angular code (FileReader.onload)
                    // need to apply changes to scope
                    $scope.$apply();
                    // set attachments to parent submit object
                    setSubmitDataAttachmentsFromLocal();
                }
            });
        }

        // clear files after processing
        $scope.files = [];
    }

    $scope.$watchCollection("files", function () {
        convertAttachedFilesToBase64();
    });

    function setSubmitDataAttachmentsFromLocal() {
        self.formattedAttachments = [];
        angular.forEach(self.attachmentFiles, function (attachment) {
            var obj = {
                fileName: attachment.name,
                base64: attachment.base64,
                attachmentGUID: attachment.attachmentGUID
            }
            self.formattedAttachments.push(obj);
        });
    }


    //    $scope.$watch('files', function() {
    //        $scope.upload($scope.files);
    //    });
    // set default directive values
    // Upload.setDefaults( {ngf-keep:false ngf-accept:'image/*', ...} );
    this.upload = function () {
        self.UploadErrorMsg = "";
        self.isUploadErrorMsg = false;

        var files = $scope.files;

        if (!files || files.length <= 0) {

            self.isUploadErrorMsg = true;
            self.UploadErrorMsg += "Please attach files before trying to upload.";
            return;
        }
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            Upload.upload({
                url: 'https://angular-file-upload-cors-srv.appspot.com/upload',
                //                    fields: {
                //                        'username': $scope.username
                //                    },
                file: file
            }).progress(function (evt) {
                var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);
            }).success(function (data, status, headers, config) {
                //console.log('file ' + config.file.name + 'uploaded. Response: ' + JSON.stringify(data));
                self.attachmentFiles.push({
                    name: data.result[0].name,
                    size: data.result[0].size
                });
            }).error(function (data, status, headers, config) {
                //console.log('error status: ' + status);
                self.isUploadErrorMsg = true;
                self.UploadErrorMsg += "Failed to upload file '" + config.file.name + "'. Status: " + status + ".\n";
            })
        }

    };

    this.removeAttachment = function (name) {
        removeFileFromCollection(name);
    };

    var removeFileFromCollection = function (name) {
        if (!self || !self.attachmentFiles) return;
        for (var i = 0; i < self.attachmentFiles.length; i++) {
            var file = self.attachmentFiles[i];
            if (file.name == name) {
                self.attachmentFiles.splice(i, 1);
            }
        }

        // update data modal
        setSubmitDataAttachmentsFromLocal();
    }

    // empty main getSubmitData
    // to need to submit data in this view    
    main.getSubmitData = function () {
        var data = angular.copy(main.project);
        data.attachments = self.formattedAttachments;
        return data;
    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }

}]);;
angular.module('LenderPortfolioCreation').controller('LenderPortfolioConfirmInfoCtrl', ['$scope', '$state', '$modal', '$filter', function ($scope, $state, $modal, $filter) {

    var self = this;
    var main = $scope.lenderPortfolio;

    self.projectInfo = {};
    self.editProjectInfo = {};
    self.tableArr = [];

    var loadData = function () {
        var portfolioObj = main;
        var loadedData = portfolioObj.loadData;
        var data = portfolioObj.project;

        if (data) {
            self.projectInfo.name = data.name;
            self.projectInfo.draftDueDate = data.draftDueDate;
            self.projectInfo.finalDueDate = data.finalDueDate;
            self.projectInfo.comments = data.comments;
            self.projectInfo.client = data.client;
            self.editProjectInfo = angular.copy(self.projectInfo);

            var locations = data.locations;

            for (var i = 0; i < locations.length; i++) {
                var loc = locations[i];

                if (loc.reports) {
                    for (var j = 0; j < loc.reports.length; j++) {
                        var temp = loc.reports[j];

                        if (temp.templateID) {
                            var loadedTemplates = loadedData.templates;
                            for (var k = 0; k < loadedTemplates.length; k++) {
                                if (loadedTemplates[k].templateID == temp.templateID) {
                                    temp.templateObj = loadedTemplates[k];
                                    break;
                                }
                            }
                        }

                        if (temp.companyID) {
                            var loadedCompanies = loadedData.relatedCompanies;
                            for (var k = 0; k < loadedCompanies.length; k++) {
                                if (portfolioObj.filterCompanyBy(loadedCompanies[k], 'Consultant') && loadedCompanies[k].companyID == temp.companyID) {
                                    temp.consultantObj = loadedCompanies[k];
                                    break;
                                }
                            }
                        }

                        if (temp.libraryID) {
                            var loadedLibraries = loadedData.libraries;
                            for (var k = 0; k < loadedLibraries.length; k++) {
                                if (loadedLibraries[k].libraryID == temp.libraryID) {
                                    temp.libraryObj = loadedLibraries[k];
                                    break;
                                }
                            }
                        }

                        temp.contactObj = loc.siteContact;
                        temp.locationObj = {
                            name: loc.name,
                            propertyNumber: loc.propertyNumber,
                            address1: loc.address1,
                            address2: loc.address2,
                            city: loc.city,
                            state: loc.state,
                            zip: loc.zip,
                            propertyType: loc.propertyType,
                            county: loc.county,
                            latitude: loc.latitude,
                            longitude: loc.longitude,
                            acreage: loc.acreage,
                            numBuildings: loc.numBuildings,
                            transactionType: loc.transactionType
                        };

                        self.tableArr.push(temp);
                    }
                }
            }
        }
    };

    loadData();


    self.resetProjectInfo = function () {
        self.editProjectInfo = angular.copy(self.projectInfo);
    }
    self.updateProjectInfo = function () {
        var current = main.getSubmitData;

        main.getSubmitData = function () {
            return self.editProjectInfo;
        }
        main.Submit();

        main.getSubmitData = current;
    }


    self.deleteReport = function (row, deleteSite) {
        var arr = self.tableArr;
        if (!deleteSite) {
            var pos = arr.indexOf(row);
            arr.splice(pos, 1);
        } else {
            var site = row.locationObj;
            var siteId = site.propertyNumber;

            var notToDeletRow = [];
            for (var i = 0; i < arr.length; i++) {
                var local = arr[i];
                var localSite = local.locationObj;
                var localSiteId = localSite.propertyNumber;
                if (localSiteId != siteId) {
                    notToDeletRow.push(local);
                }
            }
            self.tableArr = notToDeletRow;

        }
    }

    self.editSiteInfo = function (row, rowIndex) {
        openEditSiteInfoPopup(row, rowIndex);
    }

    function openEditSiteInfoPopup(data, rowIndex) {
        $scope.modalObjContainer = {
            data: angular.copy(data),
            rowIndex: rowIndex,
            filterByContains: main.filterByContains,
            edited: false
        };

        var modalInstance = $modal.open({
            templateUrl: 'editSiteInfo.html',
            scope: $scope,
            controller: editSiteInfoCtrl,
            size: 0
        });

        modalInstance.result.then(function () {

            if ($scope.modalObjContainer && $scope.modalObjContainer.edited) {
                /*// load fresh data
                loadData();*/

                var editedData = $scope.modalObjContainer.data;
                var rowIndex = $scope.modalObjContainer.rowIndex;

                self.tableArr[rowIndex] = angular.copy(editedData);
                /*var row = self.tableArr[rowIndex];
                
                row.fee = editedData.fee;
                row.locationObj = editedData.locationObj;
                row.contactObj = editedData.contactObj;
                row.templateObj = editedData.templateObj;
                row.consultantObj = editedData.consultantObj;*/
            }
        });
    }

    var editSiteInfoCtrl = function ($scope, $modalInstance) {
        var portfolio = main;
        var loadedData = portfolio.loadData;
        var project = portfolio.project;

        if ($scope.modalObjContainer.data.templateObj)
            for (var i = 0; i < loadedData.templates.length; i++) {
                if ($scope.modalObjContainer.data.templateObj.templateID == loadedData.templates[i].templateID) {
                    $scope.modalObjContainer.data.templateObj = loadedData.templates[i];
                    break;
                }
            }


        if ($scope.modalObjContainer.data.libraryObj)
            for (var i = 0; i < loadedData.libraries.length; i++) {
                if ($scope.modalObjContainer.data.libraryObj.libraryID == loadedData.libraries[i].libraryID) {
                    $scope.modalObjContainer.data.libraryObj = loadedData.libraries[i];
                    break;
                }
            }
        if ($scope.modalObjContainer.data.consultantObj)
            for (var i = 0; i < loadedData.relatedCompanies.length; i++) {
                if ($scope.modalObjContainer.data.consultantObj.companyID == loadedData.relatedCompanies[i].companyID) {
                    $scope.modalObjContainer.data.consultantObj = loadedData.relatedCompanies[i];
                    break;
                }
            }

        $scope.cancel = function () {
            $modalInstance.close();
        }

        $scope.editSiteInfo = function () {
            $scope.modalObjContainer.edited = true;
            // make service call
            // and update model of parent
            $modalInstance.close();
        }
    }



    main.getSubmitData = function () {
        var arr = self.tableArr;

        var toSubmitLocationsData = [];
        if (arr && arr.length) {
            for (var i = 0; i < arr.length; i++) {
                var row = arr[i];
                var site = row.locationObj;
                var contact = row.contactObj;
                var consultant = row.consultantObj;
                var template = row.templateObj;
                var library = row.libraryObj;

                var toSubmitSite = null;
                for (var j = 0; j < toSubmitLocationsData.length; j++) {
                    var loc = toSubmitLocationsData[j];
                    if (loc.propertyNumber == site.propertyNumber) {
                        toSubmitSite = loc;
                        break;
                    }
                }
                if (!toSubmitSite) {
                    var toSubmitSite = site;
                    toSubmitSite.siteContact = contact;
                    toSubmitSite.reports = [];
                    toSubmitLocationsData.push(toSubmitSite);
                }

                var report = angular.copy(template);
                if (consultant && consultant.companyID) {
                    report.companyID = consultant.companyID;
                }
                if (library && library.libraryID) {
                    report.libraryID = library.libraryID;
                }

                var fee = row.fee;
                var poNumber = row.poNumber;
                var projectNo = row.projectNumber;
                report.fee = fee;
                report.poNumber = poNumber;
                report.projectNumber = projectNo;

                report.taskedCompanyID = report.ownerCompanyID;
                report.taskedCompanyGUID = report.ownerCompanyGUID;
                // delete others properties
                delete report.companyDefaultTemplate;
                delete report.dashboard;
                delete report.defaults;
                delete report.description;
                delete report.isMobile;
                delete report.name;
                delete report.ownerCompanyGUID;
                delete report.ownerCompanyID;
                delete report.reportType;
                delete report.sections;
                delete report.shortName;
                delete report.templateVersion;
                delete report.reportTypeValue;

                toSubmitSite.reports.push(report);
            }

            var data = angular.copy(main.project);
            data.locations = toSubmitLocationsData;
            data.name = self.editProjectInfo.name;
            data.draftDueDate = $filter('date')(self.editProjectInfo.draftDueDate, "yyyy-mm-dd hh:mm:ss");
            data.finalDueDate = $filter('date')(self.editProjectInfo.finalDueDate, "yyyy-mm-dd hh:mm:ss");
            data.comments = self.editProjectInfo.comments;
            data.client = self.editProjectInfo.client;

            return data;
        }
    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }


    $scope.open = {
        draftDate: false,
        finalDate: false,
    };

    // Disable weekend selection
    $scope.disabled = function (date, mode) {
        return (mode === 'day' && (new Date().toDateString() == date.toDateString()));
    };

    $scope.dateOptions = {
        showWeeks: false,
        startingDay: 1
    };

    $scope.timeOptions = {
        readonlyInput: true,
        showMeridian: false
    };

    $scope.openCalendar = function (e, date) {
        e.preventDefault();
        e.stopPropagation();

        $scope.open[date] = true;
    };

    // watch date4 and date5 to calculate difference
    $scope.$watch(function () {
        return $scope.dates;
    }, function () {

    }, true);



}]);;
angular.module('LenderPortfolioCreation').controller('LenderPortfolioCreationCtrl', ['$scope', 'ProjectStartupAPI', 'LenderPortfolioCreationStateNavigation', 'BASEURL', function ($scope, ProjectStartupAPI, LenderPortfolioCreationStateNavigation, BASEURL) {

    var self = this;

    $scope.nextButtonText = "Next";
    self.stateNavigation = LenderPortfolioCreationStateNavigation;

    var companyId = BASEURL.companyGUID;
    self.addSiteMethodTypes = {
        manual: 'manual',
        upload: 'upload'
    };
    self.addSiteMethod = self.addSiteMethodTypes.manual;

    self.loadData = {
        // obj definitions below
        //template -> {
        //"templateID" : 1,
        //    "reportType" : "PhaseI",
        //    "name" : "AAI/05 Phase I Template",
        //    "ownerCompanyID":1218,
        //    "shortName":"AAI/05",
        //    "description":"A template that I made one day.",
        //    "isMobile":0,
        //    "templateVersion":27
        //}
        //library -> {
        //    "libraryID":129,
        //    "name":"JP Morgan Phase I Language",
        //    "reportType":"PhaseI",
        //    "ownerCompanyID":1218,
        //    "description":"The default language to use for JP Morgan jobs.",
        //    "isMobile":0
        //}
        //reportTypes -> {
        //    title: '',
        //    templates: [],
        //    libraries: []
        //}
        reportTypes: [],
        transactionTypes: {}, // string array
        propertyTypes: {}, // string array
        accessTo: {
            organizationOptions: [],
            clientOptions: [],
            thirdPartyOptions: []
        },
        currentUser: {
            email: 'self@employer.com'
        }
    };

    function loadData(companyId) {
        ProjectStartupAPI.getInfo(companyId).then(function (result) {
            // simple parse
            self.loadData.transactionTypes = result.transactionTypes;
            self.loadData.propertyTypes = result.propertyTypes;

            self.loadData.templates = result.templates;
            self.loadData.libraries = result.libraries;

            self.loadData.teams = result.teams;
            self.loadData.offices = result.offices;
            self.loadData.relatedCompanies = result.relatedCompanies;

            // parse access to options
            self.loadData.grantAccessGrps = [];
            for (var i = 0; i < result.relatedCompanies.length; i++) {
                var relatedCompany = result.relatedCompanies[i];
                // only accept related companies with function as 'Client'
                if (!relatedCompany.functions || relatedCompany.functions.indexOf('Client') < 0) continue;

                var grp = {
                    name: relatedCompany.name,
                    companyID: relatedCompany.companyID,
                    accessType: 'company'
                }
                self.loadData.grantAccessGrps.push(grp);
            }
            for (var i = 0; i < result.offices.length; i++) {
                var office = result.offices[i];
                var grp = {
                    name: office.name,
                    officeID: office.officeID,
                    accessType: 'office'
                }
                self.loadData.grantAccessGrps.push(grp);
            }
            for (var i = 0; i < result.teams.length; i++) {
                var team = result.teams[i];
                var grp = {
                    name: team.name,
                    teamID: team.teamID,
                    accessType: 'team'
                }
                self.loadData.grantAccessGrps.push(grp);
            }

        });
    }
    loadData(companyId);

    self.filterByContains = function (prop, val) {
        return function (item) {
            return item[prop].indexOf(val) >= 0;
        }
    }
    self.filterCompanyBy = function (company, fnName) {
        return company && company.functions && company.functions.indexOf(fnName) >= 0;
    }

    // this is called on Submit
    // to be overridden by child state controllers to set data
    self.getSubmitData = function () {}
    self.getProjectData = function () {
        return self.getSubmitData();
    }

    self.setResponseProjectData = function (projectData) {
        self.project = projectData;
    }

    self.serviceResponseAlert = false;
    self.serviceResponseText = "";
    self.responseType = 'info'; //warning, info, success, danger
    self.closeWarning = function () {
        self.serviceResponseAlert = false;
    }
    self.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }
    self.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }

}]);;
angular.module('PortfolioCreation').controller('LenderPortfolioGrantAccessCtrl', ['$scope', '$log', 'Upload', function ($scope, $log, Upload) {

    var self = this;
    var main = $scope.lenderPortfolio;
    var projectData = main.project;
    var loadedData = main.loadData;

    var loadData = function () {
        if (!projectData || !projectData.accessParties || !projectData.accessParties.length || !projectData.accessParties[0]) return;

        self.accessParty = projectData.accessParties[0];
        var grps = loadedData.grantAccessGrps;
        for (var i = 0; i < grps.length; i++) {
            var group = grps[i];
            if (self.accessParty.accessType == group.accessType) {
                if ((self.accessParty.accessType == 'office' && self.accessParty.officeID == group.officeID) ||
                    (self.accessParty.accessType == 'team' && self.accessParty.teamID == group.teamID)) {
                    self.accessParty = group;
                    break;
                }
            }
        }
    };
    loadData();

    main.getSubmitData = function () {
        var data = angular.copy(main.project);
        data.accessParties = [self.accessParty];
        return data;
    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }

}]);;
angular.module('LenderPortfolioCreation').controller('LenderPortfolioProjectInformationCtrl', ['$scope', '$filter', function ($scope, $filter) {
    var self = this;

    var main = $scope.lenderPortfolio;
    self.data = main.project || {
        addSiteMethod: main.addSiteMethodTypes.manual,
        client: {},
        /*draftDueDate: new Date(),
        finalDueDate: new Date(),
        bidDeadline: new Date()*/
    };

    main.getSubmitData = function () {
        self.data.draftDueDate = $filter('date')(self.data.draftDueDate, "yyyy-MM-dd hh:mm:ss");
        self.data.finalDueDate = $filter('date')(self.data.finalDueDate, "yyyy-MM-dd hh:mm:ss");

        self.data.bidDeadline = $filter('date')(self.data.bidDeadline, "yyyy-MM-dd hh:mm:ss");

        // IMP: API does not support property
        // TODO: discuss if required
        delete self.data.outToBid;
        delete self.data.bidDeadline;

        return self.data;
    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }


    self.open = {
        draftDate: false,
        finalDate: false,
        bidDeadline: false
    };

    // Disable weekend selection
    self.disabled = function (date, mode) {
        return (mode === 'day' && (new Date().toDateString() == date.toDateString()));
    };

    self.dateOptions = {
        showWeeks: false,
        startingDay: 1
    };

    self.timeOptions = {
        readonlyInput: true,
        showMeridian: false
    };

    self.openCalendar = function (e, date) {
        e.preventDefault();
        e.stopPropagation();

        self.open[date] = true;
    };

    // watch date4 and date5 to calculate difference
    $scope.$watch(function () {
        return self.dates;
    }, function () {

    }, true);



}]);;
angular.module('PortfolioCreation').controller('LenderPortfolioReportInformationController', ['$scope', '$log', '$state', '$modal', function ($scope, $log, $state, $modal) {

    var self = this;
    var main = $scope.lenderPortfolio;
    var existingProjectData = main.project;
    var loadedData = main.loadData;

    if (existingProjectData && existingProjectData.locations && existingProjectData.locations.length) {
        $state.go('LenderPortfolioCreation.UploadedSiteDetails');
    } else if (main.project.addSiteMethod == main.addSiteMethodTypes.upload) {
        $state.go('LenderPortfolioCreation.UploadSiteSpreadSheet');
    }


    self.locations = [{
        siteContact: {}
    }];
    self.locationCount = 0;


    main.getSubmitData = function () {
        var locations = angular.copy(self.locations);
        for (var i = 0; i < locations.length; i++) {
            var location = locations[i];
            if (location.reports) {
                for (var j = 0; j < location.reports.length; j++) {
                    var report = location.reports[j];
                    var valid = {
                        templateID: report.templateID,
                        templateGUID: report.templateGUID,
                        taskedCompanyID: report.ownerCompanyID,
                        taskedCompanyGUID: report.ownerCompanyGUID,
                        poNumber: location.poNumber
                    };
                    location.reports[j] = valid;
                }
            }
            delete location.poNumber;
        }

        var p = main;
        var data = angular.copy(p.project);
        data.locations = locations;
        return data;
    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }

    self.addAnotherSite = function () {
        self.locationCount = self.locationCount + 1;
        self.locations.push({
            siteContact: {}
        });
    }

}]);;
angular.module('LenderPortfolioCreation').controller('LenderPortfolioUploadPropertyCtrl', ['$scope', 'Upload', function ($scope, Upload) {

    if ($scope.lenderPortfolio.project && $scope.lenderPortfolio.project.locations && $scope.lenderPortfolio.project.locations.length) {
        $state.go('LenderPortfolioCreation.UploadedSiteDetails');
    }

    //    $scope.$watch('files', function() {
    //        $scope.upload($scope.files);
    //    });
    // set default directive values
    // Upload.setDefaults( {ngf-keep:false ngf-accept:'image/*', ...} );
    //this.Upload = function () {
    //    self.UploadErrorMsg = "";
    //    self.isUploadErrorMsg = false;

    //    var files = $scope.files;
    //    if (!files || files.length <= 0) {
    //        self.isUploadErrorMsg = true;
    //        self.UploadErrorMsg += "Please attach files before trying to upload.";
    //        return;
    //    }
    //    for (var i = 0; i < files.length; i++) {
    //        var file = files[i];
    //        Upload.upload({
    //            url: 'https://angular-file-upload-cors-srv.appspot.com/upload',
    //            //                    fields: {
    //            //                        'username': $scope.username
    //            //                    },
    //            file: file
    //        }).progress(function (evt) {
    //            var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
    //            console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);
    //        }).success(function (data, status, headers, config) {
    //            //console.log('file ' + config.file.name + 'uploaded. Response: ' + JSON.stringify(data));
    //            self.attachmentFiles.push({
    //                name: data.result[0].name,
    //                size: data.result[0].size
    //            });
    //        }).error(function (data, status, headers, config) {
    //            //console.log('error status: ' + status);
    //            self.isUploadErrorMsg = true;
    //            self.UploadErrorMsg += "Failed to upload file '" + config.file.name + "'. Status: " + status + ".\n";
    //        })
    //    }

    //};

    //this.RemoveAttachment = function (name) {
    //    removeFileFromCollection(name);
    //};

    //var removeFileFromCollection = function (name) {
    //    if (!self || !self.attachmentFiles) return;
    //    for (var i = 0; i < self.attachmentFiles.length; i++) {
    //        var file = self.attachmentFiles[i];
    //        if (file.name == name) {
    //            self.attachmentFiles.splice(i, 1);
    //        }
    //    }
    //}

    var main = $scope.lenderPortfolio;
    main.getSubmitData = function () {
        self.UploadErrorMsg = "";
        self.isUploadErrorMsg = false;

        var files = self.attachmentFiles;
        if (!files || files.length <= 0) {
            self.isUploadErrorMsg = true;
            self.UploadErrorMsg += "Please attach files before trying to upload.";
            return;
        }

        var file = files[0];
        var project = angular.copy(main.project);
        project.inputFile = file.base64;
        return project;
    };
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }

    $scope.$watchCollection("files", function () {
        convertAttachedFilesToBase64();
    });

    self.attachmentFiles = [];

    function convertAttachedFilesToBase64() {
        if (!$scope.files || !$scope.files.length) {
            return;
        } else {
            self.uploadSpreadSheetExists = true;
        }

        var files = $scope.files;
        self.attachmentFiles = [];
        for (var i = 0, completedCount = 0; i < files.length; i++) {
            var file = files[i];
            file.convertToBase64(function (base64, attachedFile) {
                var attach = angular.copy(attachedFile);
                attach.base64 = base64;
                self.attachmentFiles.push(attach);
                /*completedCount++;
                if (completedCount == files.length) {
                    // callback invoked via non-angular code (FileReader.onload)
                    // need to apply changes to scope
                    $scope.$apply();
                    // set attachments to parent submit object
                    setSubmitDataAttachmentsFromLocal();
                }*/
            });
        }
    }

    // convert file to base64
    File.prototype.convertToBase64 = function (callback) {
        var file = this;
        var FR = new FileReader();
        FR.onload = function (e) {
            var base64 = removeNoiseFromDataUrlOfBase64(e.target.result);
            callback(base64, file);
        };
        FR.readAsDataURL(this);
    };

    function removeNoiseFromDataUrlOfBase64(dataUrl) {
        return dataUrl.indexOf("base64") >= 0 ? dataUrl.split("base64,")[1] : dataUrl;
    }

}]);;
angular.module('PortfolioCreation').controller('LenderPortfolioUploadedSiteDetailsCtrl', ['$scope', '$modal', function ($scope, $modal) {

    var self = this;
    var main = $scope.lenderPortfolio;
    var existingProjectData = angular.copy(main.project);
    var loadedData = main.loadData;

    self.siteDetails = [];
    self.data = angular.copy(existingProjectData);

    var parseLoadData = function () {
        var locations = self.data ? self.data.locations : null;

        if (locations && locations.length) {
            var cloned = angular.copy(locations);
            for (var i = 0; i < cloned.length; i++) {
                var loc = cloned[i];

                var toPush = parseIntoBindObj(loc, loc.siteContact, i);
                self.siteDetails.push(toPush);
            }
        }


        //var pushbindObj = function (location, index, contact) {
        //    var toPush = parseIntoBindObj(location, contact, index);
        //    self.siteDetails.push(toPush);
        //}
        //executeFnOnReportTemplates(locations, null, pushbindObj, commonContact);
    }
    var parseIntoBindObj = function (location, contact, index) {
        var temp = angular.copy(location);
        temp.index = index;
        temp.contact = contact.name;
        temp.phone = contact.phone;
        temp.fax = contact.fax;
        temp.email = contact.email;
        return temp;

        /*return {
            index: index,
            projectNumber: location.projectNumber,
            propertyNumber: location.propertyNumber,
            name: location.name,
            address1: location.address1,
            address2: location.address2,
            city: location.city,
            state: location.state,
            zip: location.zip,
            country: location.country,
            county: location.county,
            latitude: location.latitude,
            longitude: location.longitude,
            contact: contact.name,
            phone: contact.phone,
            fax: contact.fax,
            email: contact.email,
            poNumber: location.poNumber,
            transactionType: location.transactionType
        };*/
    }



    var clearScreenData = function () {
        self.siteDetails = [];
    }
    var init = function () {
        clearScreenData();
        parseLoadData();
    }

    init();

    main.getSubmitData = function () {
        var p = main;
        var data = angular.copy(p.project);
        data.locations = self.data.locations;
        return data;
    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }



    self.deleteSite = function (site) {
        var locations = self.data.locations;
        locations.splice(site.index, 1);
        init();
    }

    self.editSite = function (site) {
        //$state.go('PortfolioCreation.AddLocation');
        self.editModalDataContainer = {
            location: site,
            action: 'Edit',
            index: site.index
        };

        var modalInstance = $modal.open({
            templateUrl: 'app/modules/LenderPortfolioCreation/views/lenderportfolio.AddLocation.html',
            scope: $scope,
            controller: 'LenderPortfolioAddLocationCtrl as addLocation',
            size: 'lg',
            windowClass: 'app-modal-window',
            resolve: {
                modalDataContainer: function () {
                    return self.editModalDataContainer;
                }
            }
        });

        modalInstance.result.then(function () {
            /*data.locations[self.editModalDataContainer.index] = self.editModalDataContainer.location;
            init();*/

            var edited = self.editModalDataContainer.location;
            if (edited) {
                /*data.locationCount = data.locationCount + 1;
                data.locations[data.locationCount] = self.modalDataContainer.location;*/
                var editedLoc = {
                    propertyNumber: edited.propertyNumber,
                    name: edited.name,
                    address1: edited.address1,
                    address2: edited.address2,
                    city: edited.city,
                    state: edited.state,
                    zip: edited.zip,
                    propertyType: edited.propertyType,
                    county: edited.county,
                    latitude: edited.latitude,
                    longitude: edited.longitude,
                    acreage: edited.acreage,
                    numBuildings: edited.numBuildings,
                    transactionType: edited.transactionType,
                    /*"reports":[{
                      "templateID":101,
                      "libraryID":102,
                      "companyID":153,
                      "projectNumber":"",
                      "poNumber":"",
                      "fee":""
                    }],*/
                    siteContact: {
                        name: edited.contact,
                        phone: edited.phone,
                        fax: edited.fax,
                        email: edited.email
                    }
                }
                self.data.locations[self.editModalDataContainer.index] = editedLoc;
                init();
            }

        });
    }

    self.addNewLocation = function () {
        //$state.go('PortfolioCreation.AddLocation');
        self.modalDataContainer = {
            location: null,
            action: 'Add'
        };

        var modalInstance = $modal.open({
            templateUrl: 'app/modules/LenderPortfolioCreation/views/lenderportfolio.AddLocation.html',
            scope: $scope,
            controller: 'LenderPortfolioAddLocationCtrl as addLocation',
            size: 'lg',
            windowClass: 'app-modal-window',
            resolve: {
                modalDataContainer: function () {
                    return self.modalDataContainer;
                }
            }
        });

        modalInstance.result.then(function () {
            var added = self.modalDataContainer.location;
            if (added) {
                /*data.locationCount = data.locationCount + 1;
                data.locations[data.locationCount] = self.modalDataContainer.location;*/
                var newLoc = {
                    propertyNumber: added.propertyNumber,
                    name: added.name,
                    address1: added.address1,
                    address2: added.address2,
                    city: added.city,
                    state: added.state,
                    zip: added.zip,
                    propertyType: added.propertyType,
                    county: added.county,
                    latitude: added.latitude,
                    longitude: added.longitude,
                    acreage: added.acreage,
                    numBuildings: added.numBuildings,
                    transactionType: added.transactionType,
                    /*"reports":[{
                      "templateID":101,
                      "libraryID":102,
                      "companyID":153,
                      "projectNumber":"",
                      "poNumber":"",
                      "fee":""
                    }],*/
                    siteContact: {
                        name: added.contact,
                        phone: added.phone,
                        fax: added.fax,
                        email: added.email
                    }
                }
                self.data.locations.push(newLoc);
                init();
            }
        });
    }

}]);;
angular.module('PortfolioCreation').controller('LenderUploadedSitesReportSelectionCtrl', ['$scope', function ($scope) {

    var self = this;
    var portfolio = $scope.lenderPortfolio;
    var project = portfolio.project;

    self.data = {
        locations: []
    };

    var loadData = function () {
        if (project.locations && project.locations.length) {
            for (var i = 0; i < project.locations.length; i++) {
                var location = project.locations[i];
                var clone = angular.copy(location);
                self.data.locations.push(clone);
            }
        }
    }
    loadData();

    portfolio.getSubmitData = function () {
        var locations = angular.copy(self.data.locations);
        for (var i = 0; i < locations.length; i++) {
            var location = locations[i];
            if (location.reports) {
                for (var j = 0; j < location.reports.length; j++) {
                    var report = location.reports[j];
                    var valid = {
                        taskedCompanyID: report.ownerCompanyID,
                        taskedCompanyGUID: report.ownerCompanyGUID,
                        templateID: report.templateID,
                        templateGUID: report.templateGUID,
                        libraryID: report.libraryID,
                        libraryGUID: report.libraryGUID,
                        projectNumber: report.projectNumber,
                        poNumber: report.poNumber,
                        fee: report.fee
                    };
                    location.reports[j] = valid;
                }
            }
            delete location.poNumber;
        }

        var p = portfolio;
        var data = angular.copy(p.project);
        data.locations = locations;
        return data;
    }
    portfolio.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    portfolio.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }

}]);
angular.module('LenderPortfolioCreation').controller('LenderPortfolioSelectConsultantWithFeeCtrl', ['$scope', '$state', function ($scope, $state) {
    var self = this;
    var main = $scope.lenderPortfolio;
    self.existingProjectData = angular.copy(main.project);
    var loadedData = main.loadData;
    if (self.existingProjectData.outToBid) {
        $state.go('LenderPortfolioCreation.SelectEnvironmentalConsultant');
        return;
    }

    self.reportArr = [];
    var loadData = function () {
        var locations = self.existingProjectData.locations;
        if (locations) {
            for (var i = 0; i < locations.length; i++) {
                var loc = locations[i];

                var propNo = loc.propertyNumber;
                var address = loc.address1;

                if (loc.reports) {
                    for (var j = 0; j < loc.reports.length; j++) {
                        var temp = loc.reports[j];

                        temp.locationIndex = i;
                        temp.reportIndex = j;
                        temp.propertyNumber = propNo;
                        temp.address = address;

                        temp.name = loc.name;
                        temp.propertyTypeGUID = loc.propertyTypeGUID;
                        temp.country = loc.country;
                        temp.city = loc.city;
                        temp.state = loc.state;
                        temp.zip = loc.zip;
                        temp.county = loc.county;
                        temp.latitude = loc.latitude;
                        temp.longitude = loc.longitude;
                        temp.transactionTypeGUID = loc.transactionTypeGUID;
                        temp.siteContact = loc.siteContact;

                        for (var k = 0; k < loadedData.templates.length; k++) {
                            var local = loadedData.templates[k];
                            if (local.templateID == temp.templateID) {
                                temp.reportType = local.reportType;
                                break;
                            }
                        }
                        self.reportArr.push(temp);
                    }
                }
            }
        }
    };
    var copyNestedObjToRemoveRef = function () {
        var locations = self.existingProjectData.locations;
        if (locations) {
            for (var i = 0; i < locations.length; i++) {
                var loc = locations[i];

                var templateColl = [];
                if (loc.reports) {
                    for (var j = 0; j < loc.reports.length; j++) {
                        var temp = loc.reports[j];

                        // clone report template object to avoid having duplicate entries
                        // duplicate entries will break the ng-repeat
                        var clone = angular.copy(temp);

                        // need to override consultant with original val
                        // to bind selected value
                        clone.consultant = temp.consultant;

                        templateColl.push(clone);
                    }
                    delete loc.reportTemplates;
                    loc.reportTemplates = templateColl;
                }
            }
        }
    }

    // declare init and call
    var init = function () {
        copyNestedObjToRemoveRef();
        loadData();
    }
    init();

    main.getSubmitData = function () {
        /*var arr = self.reportArr;
        if (arr && arr.length) {
            var resultLocations = self.existingProjectData ? angular.copy(self.existingProjectData.locations) : null;
            if (!resultLocations) return;

            for (var i = 0; i < arr.length; i++) {
                var item = arr[i];

                var local = resultLocations[item.locationIndex].reports[item.reportIndex];
                local.companyID = item.companyID;
                local.fee = item.fee;
            }

            var data = angular.copy(main.project);
            data.locations = resultLocations;
            return data;
        }*/


        var locationContainer = {};
        for (var i = 0; i < self.reportArr.length; i++) {
            var row = self.reportArr[i];

            locationContainer[row.locationIndex] = locationContainer[row.locationIndex] || {
                propertyNumber: row.propertyNumber,
                address1: row.address,
                name: row.name,
                propertyTypeGUID: row.propertyTypeGUID,
                country: row.country,
                city: row.city,
                state: row.state,
                zip: row.zip,
                county: row.county,
                latitude: row.latitude,
                longitude: row.longitude,
                transactionTypeGUID: row.transactionTypeGUID,
                siteContact: row.siteContact,
                reports: []
            };
            var currentLocation = locationContainer[row.locationIndex];

            var report = {
                templateID: row.templateID,
                templateGUID: row.templateGUID,
                libraryID: row.libraryID,
                taskedCompanyID: row.consultant ? row.consultant.companyID : null,
                projectNumber: row.projectNumber,
                poNumber: row.poNumber,
                fee: row.fee
            };
            currentLocation.reports.push(report);
        }

        var locationColl = [];
        for (var index in locationContainer) {
            locationColl.push(locationContainer[index]);
        }

        var data = angular.copy(main.project);
        data.locations = locationColl;
        return data;

    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }


}]);;
angular.module('LenderPortfolioCreation').controller('LenderPortfolioSelectEnvironmentalConsultantCtrl', ['$scope', function ($scope) {

    var self = this;
    var main = $scope.lenderPortfolio;

    self.bidCompanyIDs = main.project ? main.project.bidCompanyIDs : null;

    main.getSubmitData = function () {

        var arr = self.bidCompanyIDs;
        var idArr = [];
        if (arr && arr.length) {
            for (var i = 0; i < arr.length; i++) {
                var local = arr[i];

                var idVal = isNumber(local) ? local : local.companyID;
                idArr.push(idVal);
            }
        }
        return {
            bidCompanyIDs: idArr
        };
    }
    main.clearErrorDisplay = function () {
        self.serviceResponseAlert = false;
        self.serviceResponseText = "";
    }
    main.showServiceError = function (errorMsg) {
        self.serviceResponseAlert = true;
        self.responseType = 'danger';
        self.serviceResponseText = errorMsg;
    }


    function isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }
}]);;
angular.module('LenderPortfolioCreation').directive('activeClassLender', ['$location', '$state', function ($location, $state) {

    return {
        restrict: 'A',

        link: function (scope, elem, attr) {



            if (String($location.path()) === String(attr.urlparams)) {
                elem.removeClass("disabled");
                elem.addClass("active");

            } else {

                elem.removeClass("active");
                elem.addClass("disabled");
            }

            elem.bind('click', function () {
                if (!elem.attr('status') || (elem.attr('status') != "completed" && elem.attr('status') != 'current')) return;

                elem.removeClass('disabled');
                elem.addClass('active');

                //elem.nextAll().addClass('disabled');
                elem.siblings().removeClass('active');

                if (attr.urlparams == '/LenderPortfolioCreation/ProjectInformation') {

                    angular.element('#previousStep').hide();
                    scope.nextButtonText = "Next";
                    $state.go('LenderPortfolioCreation.ProjectInformation');

                } else if (attr.urlparams == '/LenderPortfolioCreation/ReportInformation') {

                    angular.element('#previousStep').show();
                    scope.nextButtonText = "Next";
                    $state.go('LenderPortfolioCreation.ReportInformation');

                } else if (attr.urlparams == '/LenderPortfolioCreation/FeeInformation') {

                    angular.element('#previousStep').show();
                    scope.nextButtonText = "Next";
                    $state.go('LenderPortfolioCreation.SelectConsultantWithFee');

                } else if (attr.urlparams == '/LenderPortfolioCreation/Attachments') {

                    angular.element('#previousStep').show();
                    scope.nextButtonText = "Next";
                    $state.go('LenderPortfolioCreation.Attachments');

                } else if (attr.urlparams == '/LenderPortfolioCreation/GrantAccess') {

                    angular.element('#previousStep').show();
                    scope.nextButtonText = "Next";
                    $state.go('LenderPortfolioCreation.GrantAccess');

                } else if (attr.urlparams == '/LenderPortfolioCreation/ConfirmProjectInformation') {
                    angular.element('#previousStep').show();
                    scope.nextButtonText = "Finish";
                    $state.go('LenderPortfolioCreation.ConfirmProjectInfo');

                }

            });

        }
    }


}]);



angular.module('LenderPortfolioCreation').directive('shiftPreviousLender', ['$location', '$state', function ($location, $state) {

    return {
        restrict: 'A',
        link: function (scope, elem, attr) {

            if ($location.path() == '/LenderPortfolioCreation/ProjectInformation') {
                angular.element('#previousStep').hide();
            } else {
                angular.element('#previousStep').show();
            }

            elem.bind('click', function () {

                if ($location.path() == '/LenderPortfolioCreation/ReportInformation' || $location.path() == '/LenderPortfolioCreation/UploadSites' || $location.path() == '/LenderPortfolioCreation/UploadedSiteDetails' || $location.path() == '/LenderPortfolioCreation/UploadedSitesReportSelection') {
                    $state.go('LenderPortfolioCreation.ProjectInformation');
                    scope.nextButtonText = "Next";
                    angular.element('#previousStep').hide();
                } else if ($location.path() == '/LenderPortfolioCreation/SelectEnvironmentalConsultant' || $location.path() == '/LenderPortfolioCreation/SelectConsultantWithFee') {

                    scope.nextButtonText = "Next";
                    $state.go('LenderPortfolioCreation.ReportInformation');
                } else if ($location.path() == '/LenderPortfolioCreation/Attachments') {

                    scope.nextButtonText = "Next";
                    $state.go('LenderPortfolioCreation.SelectConsultantWithFee');
                } else if ($location.path() == '/LenderPortfolioCreation/GrantAccess') {

                    scope.nextButtonText = "Next";
                    $state.go('LenderPortfolioCreation.Attachments');
                } else if ($location.path() == '/LenderPortfolioCreation/ConfirmProjectInformation') {

                    scope.nextButtonText = "Next";
                    $state.go('LenderPortfolioCreation.GrantAccess');
                }

                angular.element('#ulnavigation li.active').prev().addClass('active');
                angular.element('#ulnavigation li.active').next().removeClass('active');

            })
        }
    }

}]);;
angular.module('LenderPortfolioCreation').directive('preventClickIf', ['$parse', '$rootScope',
    function ($parse, $rootScope) {
        return {
            // this ensure eatClickIf be compiled before ngClick
            priority: 100,
            restrict: 'A',
            compile: function ($element, attr) {
                var fn = !attr.preventClickIf ? null : $parse(attr.preventClickIf);
                return {
                    pre: function link(scope, element) {
                        var preventClickFn = fn || function () {
                            var hasDisabledClass = element.hasClass('disabled') || element.parent().hasClass('disabled');
                            return hasDisabledClass;
                        }

                        var eventName = 'click';
                        element.on(eventName, function (event) {
                            var callback = function () {
                                if (preventClickFn(scope, {
                                        $event: event
                                    })) {
                                    // prevents ng-click to be executed
                                    event.stopImmediatePropagation();
                                    // prevents href 
                                    event.preventDefault();
                                    return false;
                                }
                            };
                            if ($rootScope.$$phase) {
                                scope.$evalAsync(callback);
                            } else {
                                scope.$apply(callback);
                            }
                        });
                    },
                    post: function () {}
                }
            }
        }
    }
]);;
angular.module('LenderPortfolioCreation').constant('LenderPortfolioCreationStateNavigation', {
    'LenderPortfolioCreation.ProjectInformation': {
        nextState: 'LenderPortfolioCreation.ReportInformation'
    },
    'LenderPortfolioCreation.ReportInformation': {
        nextState: 'LenderPortfolioCreation.SelectConsultantWithFee'
    },
    'LenderPortfolioCreation.UploadSiteSpreadSheet': {
        nextState: 'LenderPortfolioCreation.UploadedSiteDetails',
        hasSuccessiveSection: true
    },
    'LenderPortfolioCreation.UploadedSiteDetails': {
        nextState: 'LenderPortfolioCreation.UploadedSitesReportSelection',
        hasSuccessiveSection: true
    },
    'LenderPortfolioCreation.UploadedSitesReportSelection': {
        nextState: 'LenderPortfolioCreation.SelectConsultantWithFee'
    },
    'LenderPortfolioCreation.SelectEnvironmentalConsultant': {
        nextState: 'LenderPortfolioCreation.Attachments'
    },
    'LenderPortfolioCreation.SelectConsultantWithFee': {
        nextState: 'LenderPortfolioCreation.Attachments'
    },
    'LenderPortfolioCreation.Attachments': {
        nextState: 'LenderPortfolioCreation.GrantAccess'
    },
    'LenderPortfolioCreation.GrantAccess': {
        nextState: 'LenderPortfolioCreation.ConfirmProjectInfo'
    },
    'LenderPortfolioCreation.ConfirmProjectInfo': {
        nextState: 'LenderPortfolioCreation.Success'
    }
});; // define module
angular.module('ProjectDashboard', ['ui.router.state', 'ui.bootstrap', 'ui.select2', 'angularResizable']);

// routers

angular.module('ProjectDashboard').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');
        $urlRouterProvider.when('/Portfolio', '/Portfolio/Select?accountGuid&companyGuid');
        $stateProvider.state('projectDashboard', {
                'url': '/projectDashboard?projectGuid&accountGuid&companyGuid',
                'templateUrl': 'app/modules/ProjectDashboard/views/projectDashboard.html',
                'controller': 'ProjectDashboardController as projectDashboard'


            }).state('addProjectReport', {
                'url': '/addProjectReport?projectGuid&accountGuid&companyGuid&prevState',
                'templateUrl': 'app/modules/ProjectDashboard/views/addPropertyReport.html',
                'controller': 'AddReport as addReport',
                'resolve': {
                    companyDataForAddingReports: ['$stateParams', 'projectDashboardOperations', 'AuthFactory',
                                function ($stateParams, projectDashboardOperations, AuthFactory) {
                            var userGuid = AuthFactory.getUserDetailsFromStorage('USERGUID');
                            return projectDashboardOperations.getDataForAddingReports($stateParams.companyGuid, userGuid).
                            then(function (result) {
                                return result;
                            })

                    }]
                }

            }).state('grantAccess', {
                'url': '/grantAccess?projectGuid&accountGuid&companyGuid&prevState',
                'templateUrl': 'app/modules/ProjectDashboard/views/grantAccess.html',
                'controller': 'GrantAccess as grantAccess',
                'resolve': {
                    projectsList: ['$stateParams', 'projectDashboardOperations',
                                function ($stateParams, projectDashboardOperations) {

                            return projectDashboardOperations.getProjectListData().
                            then(function (result) {
                                return result;
                            })

                    }]
                }

            }).state('sendEmail', {
                'url': '/sendEmail?projectGuid&accountGuid&companyGuid',
                'templateUrl': 'app/modules/ProjectDashboard/views/sendEmail.html',
                'controller': 'SendEmail as sendEmail'


            }).state('projectMap', {
                'url': '/projectMap?projectGuid&accountGuid',
                'templateUrl': 'app/modules/ProjectDashboard/views/projectMap.html',
                'controller': 'ProjectMap as projectMap',
                'resolve': {
                    dashBoardData: ['$stateParams', 'projectDashboardOperations',
                                function ($stateParams, projectDashboardOperations) {
                            return projectDashboardOperations.getData($stateParams.projectGuid, $stateParams.accountGuid).
                            then(function (result) {
                                return result;
                            })
                    }]

                }
            }).state('showTOC', {
                'url': '/TOC?reportGuid&reportType',
                'templateUrl': 'app/modules/ProjectDashboard/views/dashboardTOC.html',
                'controller': 'DashoboardTOC as dashboardTOC'

            }).state('orderStatus', {
                'url': '/orderStatus?projectGuid&accountGuid&projectName',
                'templateUrl': 'app/modules/ProjectDashboard/views/orderStatus.html'

            }).state('appendixFileList', {
                'url': '/appendixFileList?reportGuid&sectionGuid',
                'templateUrl': 'app/modules/ProjectDashboard/views/appendixFileList.html',
                'controller': 'AppendixList as appendixList'
            }).state('portfolioSignatureTool', {
                'url': '/portfolioSignatureTool?projectGuid&accountGuid&companyGuid',
                'templateUrl': 'app/modules/ProjectDashboard/views/portfolioSignatureTool.html',
                'controller': 'PortfolioSignatureTool as portfolioSignatureTool'
            })
            .state('Portfolio', {
                'url': '/Portfolio',
                'abstract': true,
                'templateUrl': 'app/modules/ProjectDashboard/views/portfolio.navigation.html',
                'controller': 'PortfolioNavigation as portfolioNavigation',
                'resolve': {
                    accountGuid: ['$location', function ($location) {
                        var accountGuid = $location.search().accountGuid;
                        return accountGuid;
                }],
                    companyGuid: ['$location', function ($location) {
                        var companyGuid = $location.search().companyGuid;
                        return companyGuid;
                }],
                    projectGuid: ['$location', function ($location) {
                        var projectGuid = $location.search().projectGuid;
                        return projectGuid;

                }],
                    localStorageObject: ['projectDashboardOperations', function (projectDashboardOperations) {
                        if (localStorage.getItem('portfolioLocalStorageArray') == null || localStorage.getItem('portfolioLocalStorageArray') == undefined) {
                            return projectDashboardOperations.getLocalStorageObject().then(function (result) {
                                localStorage.setItem('portfolioLocalStorageArray',
                                    JSON.stringify(result.data));
                                return result.data;
                            })
                        } else {
                            return JSON.parse(localStorage.getItem('portfolioLocalStorageArray'));
                        }
                }]

                }
            }).state('Portfolio.Select', {
                'url': '/Select?projectGuid&accountGuid&companyGuid',
                'templateUrl': 'app/modules/ProjectDashboard/views/portfolio.steps.html',
                'controller': 'Portfolio as portfolio'
            }).state('Portfolio.SelectReports', {
                'url': '/Select/Reports?projectGuid&accountGuid&companyGuid',
                'templateUrl': 'app/modules/ProjectDashboard/views/portfolio.steps.html',
                'controller': 'Portfolio as portfolio'
            }).state('Portfolio.SelectReportsParts', {
                'url': '/Select/ReportsParts?projectGuid&accountGuid&companyGuid',
                'templateUrl': 'app/modules/ProjectDashboard/views/portfolio.steps.html',
                'controller': 'Portfolio as portfolio'
            }).state('Portfolio.Confirm', {
                'url': '/Confirm?projectGuid&accountGuid&companyGuid',
                'templateUrl': 'app/modules/ProjectDashboard/views/portfolio.steps.html',
                'controller': 'Portfolio as portfolio'
            })

    }
]);

angular.module('ProjectDashboard').run(['$rootScope', '$location', function ($rootScope, $location) {
    $rootScope.$on('$locationChangeStart', function (event, next, current) {


    });

    $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams, projectDashboardOperations) {

        if (fromState.controller != undefined && fromState.controller != "Portfolio as portfolio" && toState.controller === "Portfolio as portfolio") {
            var portfolioLocalStorageArray = JSON.parse(localStorage.getItem('portfolioLocalStorageArray'));
            if (portfolioLocalStorageArray != null) {
                portfolioLocalStorageArray[0].filterCriteria.value = "";
                portfolioLocalStorageArray[0].project = {};
                portfolioLocalStorageArray[1].selectionIndex.length = 0;
                portfolioLocalStorageArray[2].selectionIndex.length = 0;
                portfolioLocalStorageArray[3].text = "";
                localStorage.setItem('portfolioLocalStorageArray',
                    JSON.stringify(portfolioLocalStorageArray));
            }


        }

    });

}]);;
angular.module('ProjectDashboard').controller('AddReport', ['$state', '$stateParams', 'companyDataForAddingReports', '$scope', 'projectDashboardOperations', 'checkStatus', 'PhoneNumberValidator', '$state', 'checkStatus', function ($state, $stateParams, companyDataForAddingReports, $scope, projectDashboardOperations, checkStatus, PhoneNumberValidator, $state, checkStatus) {

    var self = this;
    self.grantAcesses = [];
    self.phoneCode = "+1";

    init();

    function init() {
        showGtoSiteButton();
        fillReportTypes();
        fillTransactionTypes();
        fillPropertyTypes();
        fillGrantAccess();
        setPortfolioName();
        getUSCountryObject();
        this.pid = $stateParams.PID;
    }

    self.gotoReportWriting = function () {
        $state.go('ReportAuthoring.Write', {
            projectGuid: localStorage.getItem('projectGuid'),
            reportGuid: localStorage.getItem('reportGuid')
        });
    }

    function showGtoSiteButton() {
        if ($stateParams.prevState === 'ReportWrite')
            self.ifIsFromReportWriting = true;
        else self.ifIsFromReportWriting = false;
    }

    function getUSCountryObject() {
        projectDashboardOperations.getCountryObject('US').then(function (response) {

            self.defaultCountryObject = response;
        })
    }

    function setPortfolioName() {
        projectDashboardOperations.getData($stateParams.projectGuid, $stateParams.accountGuid).
        then(function (response) {

            self.projectName = response.dashboard.desc.name;
        })
    }

    function fillReportTypes() {
        self.reportTypes = [];
        angular.forEach(companyDataForAddingReports.templates, function (template, index) {
            var obj = {};
            obj.templateGUID = template.templateGUID;
            obj.templateVersionGuid = template.templateVersionGUID;
            obj.templateName = template.name;
            self.reportTypes.push(obj);
        })
    }

    function fillTransactionTypes() {
        self.transactionTypes = companyDataForAddingReports.transactionTypes;
    }

    function fillPropertyTypes() {
        self.propertyTypes = companyDataForAddingReports.propertyTypes;
    }

    function fillGrantAccess() {
        self.offices = companyDataForAddingReports.offices;
        self.teams = companyDataForAddingReports.teams;
        self.companies = companyDataForAddingReports.companies;
        angular.forEach(self.offices, function (office) {
            self.grantAcesses.push(office);
        })
        angular.forEach(self.teams, function (team) {
            self.grantAcesses.push(team);
        })
        angular.forEach(self.companies, function (company) {
            self.grantAcesses.push(company);
        })

    }


    this.gotoProjectDashboard = function () {
        $state.go('projectDashboard', {
            projectGuid: $stateParams.projectGuid,
            accountGuid: $stateParams.accountGuid,
            companyGuid: $stateParams.companyGuid
        });

    }

    this.formatPhone = function () {
        self.phone = PhoneNumberValidator.format(self.phone);
    }

    this.clearDetails = function () {
        $state.reload();

    }

    this.mapAddress = function (obj) {
        var addressObject = {
            sitename: this.siteName,
            address: this.address,
            city: this.city,
            state: this.state.code,
            country: this.country.code,
            zipcode: this.zip
        }

        projectDashboardOperations.getLatLongFromGeocode(addressObject).then(function (response) {

            if (response.status != undefined && checkStatus.checkCodeInStatusArray(response.status, 'POST') || response.addressResults.addresses[0].length === 0) {

                addressMappingError(response.data.message.userMessage, obj);

            } else {
                //self.invalidAddress = false;
                self.latitude = response.addressResults.addresses[0].latitude;
                self.longitude = response.addressResults.addresses[0].longitude;
                if (typeof (obj) != undefined) {
                    obj.project.locations[0].latitude = self.latitude;
                    obj.project.locations[0].longitude = self.longitude;
                    callAddReportsService(obj);
                }
            }

        }, function (error) {

            addressMappingError("Invalid Adress", obj);
        })

    }


    function addressMappingError(text, obj) {

        self.showAlert = true;
        self.serviceMessage = text;
        self.latitude = "";
        self.longitude = "";
        addClassToAlertHtml("error");


        /*self.invalidAddress = true;
        self.googleErrorMessage = text;*/


    }




    this.saveReport = function (form) {
        self.showAlert = false;
        if (form.$invalid) {

            return;
        } else {
            var obj = {};
            obj.project = {};
            obj.project.generalInfo = {};
            obj.project.locations = [];
            obj.project.accessParties = [];
            var locationObject = {};
            locationObject.projectGuid = $stateParams.projectGuid;
            locationObject.propertyGuid = "";
            locationObject.propertyNumber = this.propertyNumber;
            //locationObject.propertyName = this.siteName;
            //locationObject.address = this.address;
            locationObject.name = this.siteName;
            locationObject.address = "";
            locationObject.address1 = this.address;
            locationObject.address2 = "";
            //locationObject.country = this.selectedCountry.name;
            //locationObject.state = this.selectedState.name;
            locationObject.country = this.country.name;
            locationObject.state = this.state.name === undefined ? this.state : this.state.name;
            locationObject.acreage = "";
            locationObject.numBuildings = "";
            locationObject.city = this.city;
            //locationObject.state = this.state.name;
            locationObject.zip = this.zip;
            locationObject.county = this.county;
            locationObject.propertyType = this.propType;
            locationObject.transactionType = this.transType;
            locationObject.latitude = this.latitude;
            locationObject.longitude = this.longitude;
            locationObject.siteContact = {};
            locationObject.siteContact.name = this.contact;
            locationObject.siteContact.phone = this.phone;
            locationObject.siteContact.fax = this.fax;
            locationObject.siteContact.email = this.email;
            locationObject.reports = [];
            angular.forEach(this.reportType, function (reportType) {
                var locationReportsObject = {};
                locationReportsObject.reportGuid = "";
                locationReportsObject.templateID = "";
                //locationReportsObject.companyID = "";
                locationReportsObject.fee = "";
                locationReportsObject.outToBid = "";
                locationReportsObject.poNumber = "";
                locationReportsObject.projectNumber = "";
                locationReportsObject.taskedCompanyID = "";
                locationReportsObject.languageLibraryGUID = "";
                locationReportsObject.templateGUID = reportType.templateGUID;
                locationReportsObject.templateVersionGUID = reportType.templateVersionGuid;
                locationObject.reports.push(locationReportsObject);
            })
            obj.project.locations.push(locationObject);
            obj.project.accessParties.push(this.grantAccess);

            //self.showAlert = true;

            if (typeof (this.latitude) === "undefined" || this.latitude === "" || typeof (this.longitude) === "undefined" || this.longitude === "") {
                this.mapAddress(obj);
            } else {
                callAddReportsService(obj);


            }

        }
    }


    function callAddReportsService(obj) {
        $scope.delay = 0;
        $scope.minDuration = 0;
        $scope.message = 'Please Wait...';
        $scope.backdrop = true;
        $scope.promise =
            projectDashboardOperations.addReportsToProperty(obj).then(function (result) {
                if (result.status != undefined && checkStatus.checkCodeInStatusArray(result.status, 'POST')) {
                    self.showAlert = true;
                    self.serviceMessage = result.data.message.userMessage;
                    addClassToAlertHtml("error");

                } else {
                    self.gotoProjectDashboard();
                    /*self.serviceMessage = "Report added successfully";
                    addClassToAlertHtml("success");*/

                }
            }, function (error) {
                self.showAlert = true;

                self.serviceMessage = "Something went wrong. Will be right back !!";
                addClassToAlertHtml("error");
            })
    }



    function addClassToAlertHtml(status) {
        if (status === "success") {
            angular.element('#alertAddReportsMsgDiv').addClass('alert-success');
            angular.element('#alertAddReportsMsgDiv').removeClass('alert-danger');
        } else {
            angular.element('#alertAddReportsMsgDiv').removeClass('alert-success');
            angular.element('#alertAddReportsMsgDiv').addClass('alert-danger');
        }
    }

    this.dismissAlert = function () {
        this.showAlert = false;
        this.serviceMessage = "";
    }






}]);
angular.module('ProjectDashboard').controller('AppendixList', ['$scope', '$stateParams', '$window', '$modal', 'reportGridDataOperations', 'checkStatus', '$sce', function ($scope, $stateParams, $window, $modal, reportGridDataOperations, checkStatus, $sce) {


    var self = this;

    init();

    function init() {
        self.reportGuid = $stateParams.reportGuid;
        self.sectionGuid = $stateParams.sectionGuid;
        self.filesArray = [];
        self.showAlert = false;
        self.displayDoc = false;

        getAppendixFiles();
    }

    function getAppendixFiles() {
        $scope.delay = 0;
        $scope.minDuration = 0;
        $scope.message = 'Please Wait...';
        $scope.backdrop = true;
        $scope.promise =
            reportGridDataOperations.getAppendixFiles(self.reportGuid, self.sectionGuid).
        then(function (response) {
            if (response.status != undefined && checkStatus.checkCodeInStatusArray(response.status, 'GET')) {
                self.showAlert = true;
                self.serviceMessage = response.data.message.userMessage;
            } else {
                self.showAlert = false;
                angular.forEach(response.files, function (file, index) {
                    // file.downloadURl = "http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_open_parameters.pdf";
                    self.filesArray.push(file);
                })
                angular.forEach(response.photos, function (photo, index) {
                    photo.downloadURL = "https://www.google.co.in/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&uact=8&ved=0ahUKEwifrKbsrdHKAhXCGz4KHeHdCFEQjRwIBw&url=http%3A%2F%2Fwww.gettyimages.com%2Fdetail%2Fnews-photo%2Fanthony-buonicore-ceo-of-environmental-data-resources-inc-news-photo%2F3179240&psig=AFQjCNE54TlrtqsIqSsBr6oijWwXYQw2TA&ust=1454237189612434";
                    self.filesArray.push(photo);
                })

            }

        });
    }

    this.dismissAlert = function () {
        self.showAlert = false;
        self.serviceMessage = "";
    }

    this.openDoc = function (appendixObject) {
        if (appendixObject.downloadURL == undefined) self.docUrl = appendixObject.downloadURl;
        else self.docUrl = appendixObject.downloadURL;
        self.displayDoc = true;

    }








}]);;
angular.module('ProjectDashboard').controller('ModalControllerForChangeReportStatus', function ($scope, $modalInstance) {

    var self = this;

    self.reportStatusArray = [

        "The work order has been created",
        "This report is undergoing data entry",
        "The report is currently in senior review",
        "The report is draf",
        "The environmental analysis is incomplete",
        "This report is final"

    ]
    $scope.reportID = $scope.reportID;
    $scope.reportIndex = $scope.index;
    $scope.reportStatus = $scope.reportStatus;

    $scope.index = angular.copy($scope.reportIndex);
    $scope.FINALIZE = "FINALIZE";

    $scope.reportStatus = $scope.reportStatusArray[$scope.reportIndex];

    /*minusButton();
    plusButton();*/
    checkMinus();
    checkPlus();

    function checkMinus() {
        if ($scope.index <= 0)
            $scope.minusButtonHide = true;
    }

    function checkPlus() {
        if ($scope.index >= 5)
            $scope.plusButtonHide = true;
    }

    $scope.minusbutton = function () {

        minusButton();
    }

    function minusButton() {
        if ($scope.index > 1) {
            $scope.minusButtonHide = false;
            $scope.plusButtonHide = false;
            $scope.index = parseInt($scope.index) - 1;

            $scope.reportStatus = $scope.reportStatusArray[$scope.index];

        } else if ($scope.index == 1) {
            $scope.minusButtonHide = true;
            $scope.index = parseInt($scope.index) - 1;

            $scope.reportStatus = $scope.reportStatusArray[$scope.index];
        } else
            $scope.minusButtonHide = true;
    }

    $scope.plusbutton = function () {
        plusButton();
    }

    function plusButton() {



        if ($scope.index < 3) {
            $scope.plusButtonHide = false;
            $scope.minusButtonHide = false;
            $scope.index = parseInt($scope.index) + 1;

            $scope.reportStatus = $scope.reportStatusArray[$scope.index];

        } else if ($scope.index == 3) {
            $scope.index = parseInt($scope.index) + 1;

            $scope.reportStatus = $scope.reportStatusArray[$scope.index];
            $scope.plusButtonHide = true;
        } else
            $scope.plusButtonHide = true;



    }

    $scope.finalizeReport = function () {
        if ($scope.FINALIZE == "FINALIZE") {
            $scope.reportStatus = $scope.reportStatusArray[5];
            $scope.FINALIZE = "UNFINALIZE";
            $scope.plusButtonHide = true;
            $scope.minusButtonHide = true;
        } else {
            $scope.FINALIZE = "FINALIZE";
            // $scope.reportStatus = $scope.reportStatusArray[4];
            $scope.reportStatus = $scope.reportStatusArray[3];
            $scope.plusButtonHide = false;
            $scope.minusButtonHide = false;

        }

    }

    $scope.closeAndUpdate = function () {
        var final;
        //update request so changes hve been made can reflets on dashboard
        if ($scope.FINALIZE == "FINALIZE")
            final = false;
        else
            final = true;

        $modalInstance.close();
    }

    $scope.close = function () {
        $modalInstance.close();
    }
});


;
angular.module('ProjectDashboard').controller('SendEmail', ['$scope', '$controller', 'reportGridDataOperations', '$modal', 'checkStatus', '$compile', function ($scope, $controller, reportGridDataOperations, $modal, checkStatus, $compile) {

    var self = this;

    init();

    function init() {
        self.toEmailCount = 0;
        self.to = [];
        self.cc = [];
        self.fromUserEmail = "shkumar@edrnet.com";
        initializeDataRole();
        self.blankEmailTo = false;
        self.toValidation = true;
        self.ccValidation = true;
    }

    function initializeDataRole() {

        $('.requiredToField').hide();
        $("input[data-role=tagsinput]").tagsinput({
            allowDuplicates: false,
            trimValue: true
        });
        var elem = angular.element('.bootstrap-tagsinput');
        $compile(elem)($scope);


    }



    $('input[data-role=tagsinput]').tagsinput({
        onTagExists: function (item, $tag) {
            $tag.hide().fadeIn();
        }
    });


    $('input[name=mailTo]').on('itemRemoved', function (event) {
        self.toEmailCount = self.toEmailCount - 1;
        var val = $('input[name=mailTo]').val();
        if (val === "") {
            $('.requiredToField').show();
            angular.element('.toEmailDiv').addClass('has-error');
            angular.element('.toEmailDiv').find('.bootstrap-tagsinput').addClass('tagsinput-invalid');
        }
    });


    $('input[name=mailTo]').on('itemAdded', function (event) {
        var elemTo = $('.tag')[self.toEmailCount];
        $(elemTo).addClass('tagTo');

        self.toEmailCount = self.toEmailCount + 1;
        $('.requiredToField').hide();
        angular.element('.toEmailDiv').removeClass('has-error');
        $('.bootstrap-tagsinput').removeClass('tagsinput-invalid');
        var isValidEmail = /\S+@\S+\.\S+/.test(event.item);
        if (!isValidEmail) {
            $('.tagTo').last().removeClass('label-info');
            $('.tagTo').last().addClass('label-danger');

        }
    });

    $('input[name=mailCC]').on('itemAdded', function (event) {
        $('.tag').last().addClass('tagCc');
        var isValidEmail = /\S+@\S+\.\S+/.test(event.item);
        if (!isValidEmail) {
            $('.tagCc').last().removeClass('label-info');
            $('.tagCc').last().addClass('label-danger');

        }
    });

    /*$('input').on('beforeItemAdd', function (event) {
        //var isValidEmail = /\S+@\S+\.\S+/.test(event.item);
        //if (!isValidEmail) event.cancel = true;


    });*/

    $('#tagsInputTextbox').bind('blur', function () {

        var val = $('input[name=mailTo]').val();

        if (val === "") {
            $('.requiredToField').show();
            angular.element('.toEmailDiv').addClass('has-error');
            angular.element('.toEmailDiv').find('.bootstrap-tagsinput').addClass('tagsinput-invalid');

        }
    })

    this.findContact = function () {
        var modalInstance = $modal.open({
            templateUrl: 'app/modules/ProjectCreation/views/emailContacts.html',
            scope: $scope,
            controller: 'EmailContactsCtrl as emailContacts',
            size: 'lg',
            windowClass: 'app-modal-window'
        });

        modalInstance.result.then(function (emailObj) {
            if (emailObj && emailObj.emailTo && emailObj.emailTo.length) {
                if (angular.isArray(emailObj.emailTo)) {
                    $('#requiredToField').hide();
                    angular.element('.toEmailDiv').removeClass('has-error');
                    $('.bootstrap-tagsinput').removeClass('tagsinput-invalid');
                    angular.forEach(emailObj.emailTo, function (email) {

                        $('input[name=mailTo]').tagsinput('add', email);
                    })


                }

            }
            if (emailObj && emailObj.emailCC && emailObj.emailCC.length) {
                if (angular.isArray(emailObj.emailCC)) {
                    angular.forEach(emailObj.emailCC, function (email) {

                        $('input[name=mailCC]').tagsinput('add', email);
                    })
                }
            }


        })


    }


    this.cancelDelete = function () {
        $('input[data-role=tagsinput]').tagsinput('removeAll');
        self.toEmailCount = 0;
        self.showAlert = false;
        //$('.requiredToField').show();
        //angular.element('.toEmailDiv').addClass('has-error');
        //angular.element('.toEmailDiv').find('.bootstrap-tagsinput').addClass('tagsinput-invalid');
        self.comments = "";
        self.executiveSummary = false;
        self.detailReport = false;
        self.subject = "";
        self.toValidation = true;
        self.ccValidation = true;

    }

    function checkEmailValidation(toEmailArray, ccEmailArray) {
        var valid = true;
        if (toEmailArray && toEmailArray.length > 0) {


            var emailPatternValidation = /\S+@\S+\.\S+/;
            for (var i = 0; i < toEmailArray.length; i++) {
                var isTOEmailValid = emailPatternValidation.test(toEmailArray[i]);
                if (!isTOEmailValid) {
                    valid = false;
                    self.toValidation = false;
                    //return valid;
                }
            }
        }

        if (ccEmailArray && ccEmailArray.length > 0) {
            for (var j = 0; j < ccEmailArray.length; j++) {
                var isCCEmailValid = emailPatternValidation.test(ccEmailArray[j]);
                if (!isCCEmailValid) {
                    valid = false;
                    self.ccValidation = false;
                    //return valid;
                }
            }
        }

        return valid;
    }

    this.submit = function (form) {
        if (form.$invalid || $('input[name=mailTo]').val() === "") {
            $('.requiredToField').show();

            angular.element('.toEmailDiv').addClass('has-error');
            angular.element('.toEmailDiv').find('.bootstrap-tagsinput').addClass('tagsinput-invalid');
            return;
        } else {
            self.toValidation = true;
            self.ccValidation = true;
            var toEmailArray = splitEmailString($('input[name=mailTo]').val());
            var ccEmailArray = splitEmailString($('input[name=mailCC]').val());
            var areEmailsValid = checkEmailValidation(toEmailArray, ccEmailArray);
            if (areEmailsValid == undefined || areEmailsValid) {
                self.showAlert = false;
                var obj = {
                    "assetGUID": "A0F5E294-B497-4C16-8FA4-5dfC9413530F",
                    "assetType": "cabinet",
                    "applicationGUID": "A0F5E294-B497-4C16-4EFA-79834FEAF",
                    "messages": []
                }
                var messageObject = {};
                messageObject.templateName = self.subject == undefined ? "" : self.subject,
                    messageObject.templateGUID = "A5BB0200-C206-45C2-849F-0050C409159B",
                    messageObject.messageType = "EMAIL";
                messageObject.from = self.fromUserEmail;

                messageObject.to = [];
                messageObject.cc = [];
                messageObject.bcc = [];


                messageObject.fields = [{
                        "fieldName": "message",
                        "fieldValue": self.comments == undefined ? "" : self.comments
                }
                ];

                angular.forEach(toEmailArray, function (email) {
                    messageObject.to.push(email);
                });
                angular.forEach(ccEmailArray, function (email) {
                    messageObject.cc.push(email);
                });
                obj.messages.push(messageObject);

                $scope.delay = 0;
                $scope.minDuration = 0;
                $scope.message = 'Please Wait...';
                $scope.backdrop = true;
                $scope.promise =

                    reportGridDataOperations.sendEmail(obj).then(function (response) {
                        self.showAlert = true;
                        if (response.status != undefined && checkStatus.checkCodeInStatusArray(response.status, 'POST')) {

                            self.serviceMessage = response.data.message === undefined ? "Sending email failed" : response.data.message.userMessage;
                            addClassToEmailAlert("error");


                        } else {


                            self.serviceMessage = "Email sent successfully";
                            addClassToEmailAlert("success");
                            self.cancelDelete();
                            self.showAlert = true;



                        }

                    }, function (error) {

                    })
            } else {
                self.serviceMessage = "";

                self.showAlert = true;
                if (self.ccValidation && !self.toValidation) self.serviceMessage = "Invalid email address in the 'To:' field";
                else if (self.toValidation && !self.ccValidation) self.serviceMessage = "Invalid email address in the 'CC:' field";
                else if (!self.toValidation && !self.ccValidation) {
                    self.serviceMessage = "Invalid email address in the 'To:' field. Invalid email address in the 'CC':' field";



                }
                //self.showAlert = true;
                //self.serviceMessage = "The message can't be sent because at least one recipient isn't valid."
                addClassToEmailAlert("error");
            }

        }
    }

    this.dismissAlert = function () {
        self.serviceMessage = "";
        self.showAlert = false;
    }

    function addClassToEmailAlert(status) {
        if (status === "success") {
            angular.element('#alertEmailMsgDiv').addClass('alert-success');
            angular.element('#alertEmailMsgDiv').removeClass('alert-danger');
        } else {
            angular.element('#alertEmailMsgDiv').removeClass('alert-success');
            angular.element('#alertEmailMsgDiv').addClass('alert-danger');
        }
    }

    function splitEmailString(emailString) {
        if (emailString != undefined && emailString.length > 0)
            return emailString.split(',');

    }
}]);;
angular.module('ProjectDashboard').controller('GrantAccess', ['projectsList', '$scope', 'projectDashboardOperations', 'checkStatus', '$state', 'accountMgmtAPI', '$stateParams', 'AuthFactory', 'accessMgmtAPI', function (projectsList, $scope, projectDashboardOperations, checkStatus, $state, accountMgmtAPI, $stateParams, AuthFactory, accessMgmtAPI) {

    var self = this;


    init();

    function init() {
        getProjects();
        getCompany();
        getRoles();
        getReports($stateParams.projectGuid);
        initialShowHideOfficeTab(); //show/hide span for office tab
        initialShowHideTeamTab(); //show.hide span for team tab
        self.offices = []; // office array
        self.childCompanies = []; // array for campanies which comes after selecting company
        self.companies = []; // parent company array
        self.users = []; // array for users which are selected after operations on tab
        self.searchedUsers = []; // array for users which comes after operation on second tab

        self.accessToUsersOnOfficeLevel = []; // array for users which comes after operation on first tab

        self.teamChildCompanies = [];
        self.selectedTeamCompany = [];
        self.selectedSavedTeam = [];
        self.selectedPreconfiguredTeam = [];
        self.searchedUserInOfficeCheckbox = {};
        self.selectUsers = {};
        self.searchedUserCheckbox = {};
        self.reportsCheckbox = {};
        self.searchUserResults = true;
    }

    function getRoles() {
        var userGuid = AuthFactory.getUserDetailsFromStorage('USERGUID');
        accessMgmtAPI.getRoles('bbc8bb95-f8d0-42aa-b053-00f187134f16', 'user').then(function (response) {
            self.roles = response;
        }, function (error) {

        })
    }


    function getProjects() {
        self.projects = projectsList.projects;
        self.selectedProject = self.projects[0].projectGUID;
    }

    function getCompany() {
        self.showAlertForCompany = false;
        accountMgmtAPI.getCompany('', '', "companies,offices", '', '').then(function (response) {
            self.companies = response.companies;
        }, function (error) {
            self.showAlertForCompany = true;
            self.serviceMessage = error;
        })
    }

    function getReports(projectGuid) {

        projectDashboardOperations.getProjectReports(projectGuid).then(function (response) {
            if (response.status != undefined && checkStatus.checkCodeInStatusArray(response.status, 'GET') || response.reports.length === 0) {
                self.showAlertForReports = true;
                self.serviceMessageForReport = response.data.message.userMessage;
            } else {
                self.reports = response.reports;
            }
        })
    }

    self.selectProject = function () {
        self.reports.length = 0;
        $state.go('grantAccess', {
            projectGuid: self.selectedProject
        }, {
            notify: false
        });
        getReports(self.selectedProject);
    }


    self.teamCompany = function () {
        self.showAlertForCompany = false;
        self.teamChildCompanies.length = 0;
        self.selectedTeamChildCompany = undefined;
        self.selectedSavedTeam = undefined;
        self.selectedPreconfiguredTeam = undefined;
        self.hasTeamChildCompany = false;
        self.hasSavedTeam = false;
        self.hasPreconfiguredTeam = false;
        initialShowHideTeamTab();

        if (!self.selectedTeamCompany) return;

        if (self.selectedTeamCompany && self.selectedTeamCompany.companies && self.selectedTeamCompany.companies.length > 0) {
            self.savedTeams.length = 0;
            self.preconfiguredTeams.length = 0;
            self.hasSavedTeam = false;
            self.hasPreconfiguredTeam = false;
            self.teamChildCompanies = self.selectedTeamCompany.companies;
            self.hasTeamChildCompany = true;
            angular.element('#spanTeamChildCompany').hide();
            angular.element('#selectTeamChildCompany').show();
        } else {
            checkForSavedTeams();
            angular.element('#spanTeamChildCompany').show();
            angular.element('#selectTeamChildCompany').hide();
        }

    }



    self.setCascadedCompany = function () {
        self.showAlertForCompany = false;
        self.childCompanies.length = 0;
        self.childCompany = undefined;
        self.office = undefined;
        self.hasCompany = false;
        self.hasOffice = false;
        initialShowHideOfficeTab();
        if (!self.selectedCompany1) return;

        if (self.selectedCompany1 && self.selectedCompany1.companies && self.selectedCompany1.companies.length > 0) {
            self.offices.length = 0;
            self.hasOffice = false;
            self.childCompanies = self.selectedCompany1.companies;
            self.hasCompany = true;
            angular.element('#spanCompany2').hide();
            angular.element('#selectCompany2').show();
        } else {
            checkForOffices();
            angular.element('#spanCompany2').show();
            angular.element('#selectCompany2').hide();
        }
    }

    self.setCascadedOffice = function () {
        self.showAlertForCompany = false;
        self.offices.length = 0;
        accountMgmtAPI.getOffice(self.childCompany, '', '', '').then(function (response) {
            if (response && response.offices && response.offices.length > 0) {
                self.hasOffice = true;
                self.offices = response.offices;
            } else {
                self.hasOffice = false;
                angular.element('#spanOffice').show();
                angular.element('#selectOffice').hide();
            }
        }, function (error) {
            self.showAlertForCompany = true;
            self.serviceMessage = error;
        })
    }

    function checkForOffices() {

        if (self.selectedCompany1 && self.selectedCompany1.offices && self.selectedCompany1.offices.length > 0) {
            self.offices.length = 0;
            self.hasOffice = true;
            self.offices = self.selectedCompany1.offices;
            angular.element('#selectOffice').show();
            angular.element('#spanOffice').hide();
        } else {
            angular.element('#spanOffice').show();
            angular.element('#selectOffice').hide();
        }
    }

    function checkForSavedTeams() {
        if (self.selectedTeamCompany && self.selectedTeamCompany.teams && self.selectedTeamCompany.teams.length > 0) {
            self.savedTeams.length = 0;
            self.hasSavedTeam = true;
            self.savedTeams = self.selectedTeamCompany.teams;
            angular.element('#selectSavedTeam').show();
            angular.element('#spanSavedTeam').hide();
        } else {
            angular.element('#spanSavedTeam').show();
            angular.element('#selectSavedTeam').hide();
        }
    }

    function initialShowHideOfficeTab() {
        angular.element('#spanCompany2').hide();
        angular.element('#spanOffice').hide();
        angular.element('#selectOffice').show();
        angular.element('#selectCompany2').show();
    }

    self.getUsersInOffice = function () {
        self.showAlertForCompany = false;
        if (!self.office) return;
        self.accessToUsersOnOfficeLevel.length = 0;
        accountMgmtAPI.getUser('', '', self.office, '', '', '', '', '').then(function (response) {
            if (response && response.users && response.users.length > 0) {
                self.accessToUsersOnOfficeLevel = response.users;
            } else {

            }
        }, function (error) {
            self.showAlertForCompany = true;
            self.serviceMessage = error;
        })
    }

    self.removeAllUsers = function () {
        self.users.length = 0;
    }

    self.selectAllUsers = function () {
        angular.forEach(self.users, function (user, index) {
            self.selectUsers[index] = true;
        })
    }

    self.unSelectAllUsers = function () {
        angular.forEach(self.users, function (user, index) {
            self.selectUsers[index] = false;
        })
    }

    self.searchUser = function () {
        self.searchedUsers.length = 0;

        if (!self.searchTerm) return;

        accountMgmtAPI.getUser('', '', '', '', '', '', self.searchTerm, '').then(function (response) {
            if (response && response.users && response.users.length > 0) {
                self.searchUserResults = true;
                self.searchedUsers = response.users;

            } else {
                self.searchUserResults = false;
            }
        }, function (error) {
            self.showAlertForCompany = true;
            self.serviceMessage = error;
        })
    }

    self.checkDefault = function (type) {
        if (type === 'user') {
            angular.forEach(self.searchedUsers, function (user, index) {
                self.searchedUserCheckbox[index] = true;
            })
        }
        if (type === 'office') {
            angular.forEach(self.accessToUsersOnOfficeLevel, function (user, index) {
                self.searchedUserInOfficeCheckbox[index] = true;
            })
        }
    }

    self.selectAllSearchedUsers = function (type) {
        if (type === 'user') {
            angular.forEach(self.searchedUsers, function (user, index) {
                self.searchedUserCheckbox[index] = true;
            })
        }
        if (type === 'office') {
            angular.forEach(self.accessToUsersOnOfficeLevel, function (user, index) {
                self.searchedUserInOfficeCheckbox[index] = true;
            })
        }
    }

    self.unSelectAllSearchedUsers = function (type) {
        if (type === 'user') {
            angular.forEach(self.searchedUsers, function (user, index) {
                self.searchedUserCheckbox[index] = false;
            })
        }
        if (type === 'office') {
            angular.forEach(self.accessToUsersOnOfficeLevel, function (user, index) {
                self.searchedUserInOfficeCheckbox[index] = false;
            })
        }
    }

    self.addSelectedUsers = function (type) {
        if (type === 'user') {
            for (var key in self.searchedUserCheckbox) {
                if (self.searchedUserCheckbox[key] === true) {
                    self.users.push(self.searchedUsers[key]);
                    self.searchedUserCheckbox[key] = false;
                    angular.element('#searchUserId' + key).addClass('disabled light-gray');
                }
            }
        }
        if (type === 'office') {
            for (var key in self.searchedUserInOfficeCheckbox) {
                if (self.searchedUserInOfficeCheckbox[key] === true) {
                    self.users.push(self.accessToUsersOnOfficeLevel[key]);
                    self.searchedUserInOfficeCheckbox[key] = false;
                    angular.element('#searchOfficeUserId' + key).addClass('disabled light-gray');
                }
            }
        }
    }

    self.selectAllReports = function () {
        angular.forEach(self.reports, function (report, index) {
            self.reportsCheckbox[index] = true;
        })
    }

    self.unSelectAllReports = function () {
        angular.forEach(self.reports, function (report, index) {
            self.reportsCheckbox[index] = false;
        })
    }

    self.removeUser = function (index) {
        self.users.splice(index, 1);
    }

    self.createNewTeam = function () {
        projectDashboardOperations.openPopUp($scope, 0, {}, "createTeam", true);
    }

    self.tabClicked = function (type) {

        /*self.offices.length = 0;
        self.childCompanies.length = 0;
        
        self.users.length = 0;
        self.searchedUsers.length = 0;
        self.accessToUsersOnOfficeLevel.length = 0;
        self.searchTerm = undefined;
        self.office = undefined;
        self.childCompany = undefined;
        selectedCompany1 = undefined;*/
    }

    self.setCascadedTeamCompany = function () {
        self.showAlertForCompany = false;
        self.childCompanies.length = 0;
        self.childCompany = undefined;
        self.office = undefined;
        self.hasCompany = false;
        self.hasOffice = false;
        initialShowHideOfficeTab();
        if (!self.selectedCompany1) return;

        if (self.selectedCompany1 && self.selectedCompany1.companies && self.selectedCompany1.companies.length > 0) {
            self.offices.length = 0;
            self.hasOffice = false;
            self.childCompanies = self.selectedCompany1.companies;
            self.hasCompany = true;
            angular.element('#spanCompany2').hide();
            angular.element('#selectCompany2').show();
        } else {
            checkForOffices();
            angular.element('#spanCompany2').show();
            angular.element('#selectCompany2').hide();
        }
    }

    function initialShowHideTeamTab() {
        angular.element('#spanTeamChildCompany').hide();
        angular.element('#selectTeamChildCompany').show();

        angular.element('#spanSavedTeam').hide();
        angular.element('#selectSavedTeam').show();

        angular.element('#spanPreConfiguredTeam').hide();
        angular.element('#selectPreConfiguredTeam').show();

    }

    self.setCascadedTeamCompany = function () {

    }


}])

angular.module('ProjectDashboard').controller('CreateTeam', ['$scope', function ($scope) {
    var self = this;

    this.confirm = function () {

    }

    this.cancel = function () {

    }
}]);
angular.module('ProjectDashboard').controller('OrderStatus', ['$scope', '$state', '$stateParams', 'projectDashboardOperations', '$window', '$timeout', 'checkStatus', function ($scope, $state, $stateParams, projectDashboardOperations, $window, $timeout, checkStatus) {

    var self = this;
    self.accountGuid = $stateParams.accountGuid;
    self.projectGuid = $stateParams.projectGuid;
    self.reportGuid = $stateParams.reportGuid;
    self.showAlert = false;

    init();

    function init() {
        self.edrOrderListArr = [];
        var currentRouteObj = $state.current;
        if (currentRouteObj.name === 'generalInformation' || currentRouteObj.name === 'ReportAuthoring.Setup' || currentRouteObj.name === "ReportAuthoring.Write") {
            self.projectOrders = false;
            getReportOrderData();
        } else {
            self.projectName = $stateParams.projectName;
            self.projectOrders = true;
            getProjectOrderData();
        }
    }


    function createDataTable() {
        $('#orderStatusDatatable').DataTable({
            order: [],
            processing: true,
            paging: false,
            info: false,
            filter: false,
            stateSave: true,
            columnDefs: [
                {
                    orderable: false,
                    targets: [4, 5, 6, 7, 8, 9, 10, 11]
                }

            ]
        });

    }


    function getProjectOrderData() {
        $scope.delay = 0;
        $scope.minDuration = 0;
        $scope.message = 'Please Wait...';
        $scope.backdrop = true;
        $scope.promise = projectDashboardOperations.getProjectOrderList(self.projectGuid).then(function (result) {
            if (result.status != undefined && checkStatus.checkCodeInStatusArray(result.status, 'GET')) {

                self.showAlert = true;
                self.serviceMessage = result.data.message === undefined ? "Something went wrong !!" : result.data.message.userMessage;
                addClassToAlertHtml("error");

            } else if (angular.isArray(result.orders)) {

                angular.forEach(result.orders, function (singleOrder) {
                    if (angular.isArray(singleOrder.properties)) {
                        createOrderArray(singleOrder);
                    }
                })
                $timeout(function () {
                    createDataTable();
                    $('[data-toggle="popover"]').popover();
                }, 1000);
            } else {
                self.showAlert = true;
                self.serviceMessage = "Something went wrong !!";
                addClassToAlertHtml("error");
            }
        })


    }

    function createOrderArray(data) {
        for (var i = 0; i < data.properties.length; i++) {
            var edrOrderListObj = {
                "address": "",
                "inquiryNo": "",
                "status": "",
                "packageOrdered": "",
                "radiusMapReportWithGeocheck": "",
                "radiusMapReport": "",
                "sanbornMap": "",
                "cityDirectoryAbstract": "",
                "aerialPhotoDecadePackage": "",
                "historicalTopMmap": "",
                "lienSearch": ""
            };

            edrOrderListObj.address = (data.properties[i].address != "" && data.properties[i].address != undefined && data.properties[i].address != null) ? data.properties[i].address : "";
            edrOrderListObj.inquiryNo = (data.properties[i].reports[0].inquiryNumber != "" && data.properties[i].reports[0].inquiryNumber != undefined && data.properties[i].reports[0].inquiryNumber != null) ? data.properties[i].reports[0].inquiryNumber : "";
            edrOrderListObj.status = (data.properties[i].reports[0].reportStatus != "" && data.properties[i].reports[0].reportStatus != undefined && data.properties[i].reports[0].reportStatus != null) ? data.properties[i].reports[0].reportStatus : "";
            edrOrderListObj.packageOrdered = (data.properties[i].reports[0].packageName != "" && data.properties[i].reports[0].packageName != undefined && data.properties[i].reports[0].packageName != null) ? data.properties[i].reports[0].packageName : "";
            edrOrderListObj.radiusMapReportWithGeocheck = (data.properties[i].radiusMapReportWithGeoCheck != "" && data.properties[i].radiusMapReportWithGeoCheck != undefined && data.properties[i].radiusMapReportWithGeoCheck != null) ? data.properties[i].radiusMapReportWithGeoCheck : "";
            edrOrderListObj.radiusMapReport = (data.properties[i].radiusMapReport != "" && data.properties[i].radiusMapReport != undefined && data.properties[i].radiusMapReport != null) ? data.properties[i].radiusMapReport : "";
            edrOrderListObj.sanbornMap = (data.properties[i].sanbornMapSearch != "" && data.properties[i].sanbornMapSearch != undefined && data.properties[i].sanbornMapSearch != null) ? data.properties[i].sanbornMapSearch : "";
            edrOrderListObj.cityDirectoryAbstract = (data.properties[i].cityDirectoryAbstract != "" && data.properties[i].cityDirectoryAbstract != undefined && data.properties[i].cityDirectoryAbstract != null) ? data.properties[i].cityDirectoryAbstract : "";
            edrOrderListObj.aerialPhotoDecadePackage = (data.properties[i].aerialPhotoDecadePackage != "" && data.properties[i].aerialPhotoDecadePackage != undefined && data.properties[i].aerialPhotoDecadePackage != null) ? data.properties[i].aerialPhotoDecadePackage : "";
            edrOrderListObj.historicalTopMmap = (data.properties[i].historicalTopoMap != "" && data.properties[i].historicalTopoMap != undefined && data.properties[i].historicalTopoMap != null) ? data.properties[i].historicalTopoMap : "";
            edrOrderListObj.lienSearch = (data.properties[i].lienSearch != "" && data.properties[i].lienSearch != undefined && data.properties[i].lienSearch != null) ? data.properties[i].lienSearch : "";

            self.edrOrderListArr.push(edrOrderListObj);
        }
    }

    function getReportOrderData() {
        $scope.delay = 0;
        $scope.minDuration = 0;
        $scope.message = 'Please Wait...';
        $scope.backdrop = true;
        $scope.promise =

            projectDashboardOperations.getReportOrderList(self.reportGuid)
            .then(function (data) {
                if (data.status != undefined && checkStatus.checkCodeInStatusArray(data.status, 'GET')) {
                    self.showAlert = true;
                    self.serviceMessage = result.data.message.userMessage;
                    addClassToAlertHtml("error");
                } else if (data.order && angular.isArray(data.order.properties)) {
                    createOrderArray(data.order);
                    $timeout(function () {
                        createDataTable();
                        $('[data-toggle="popover"]').popover();
                    }, 1000);

                } else {}
            });
    }
    self.showEDRStatusPage = function () {

        var promise = projectDashboardOperations.geEDRStatusPage();
        promise.then(function (data) {
            $window.open(data.transferUrl, '_blank');
        });
    }

    function addClassToAlertHtml(status) {
        if (status === "success") {
            angular.element('#alertOrderStatusMsgDiv').addClass('alert-success');
            angular.element('#alertOrderStatusMsgDiv').removeClass('alert-danger');
        } else {
            angular.element('#alertOrderStatusMsgDiv').removeClass('alert-success');
            angular.element('#alertOrderStatusMsgDiv').addClass('alert-danger');
        }
    }


 }]);
angular.module('ProjectDashboard').controller('Portfolio', ['$state', '$stateParams', '$scope', '$q', 'projectDashboardOperations', '$compile', '$timeout', 'localStorageObject', function ($state, $stateParams, $scope, $q, projectDashboardOperations, $compile, $timeout, localStorageObject) {

    var self = this;
    self.projectSearchCriteria = [];
    self.sampleTemplates = [];
    self.sampleReportsParts = [];
    self.sampleTemplateCheckbox = {};
    self.reportPartsModel = {};
    self.readDataCount = 0;
    self.readDataPage;
    //$scope.portfolioRequestID = $stateParams.portfolioRequestID;
    self.filterItem = "";
    self.showError = false;

    init();

    function init() {
        initializeSelect2CrossButton();
        self.projectSearchCriteria = [
            {
                'criteria': 'Unfinalized Projects',
                'value': 2
        }, {
                'criteria': 'Finalized Projects',
                'value': 3
        }, {
                'criteria': 'Projects Created in the last 90 days',
                'value': 4
        }, {
                'criteria': 'Projects created in ' + new Date().getFullYear(),
                'value': 5
        }, {
                'criteria': 'Projects created in ' + (new Date().getFullYear() - 1),
                'value': 6
        }, {
                'criteria': 'Projects with more than 2 reports',
                'value': 7
        }, {
                'criteria': 'Projects with more than 20 reports',
                'value': 8
        }];
        self.select = false;
        self.selectReports = false;
        self.selectReportsParts = false;
        //self.projectSelected = "";
        //routeAfterValidation();
        changeView();
        getLocalStorageObject();
    }

    function getLocalStorageObject() {

        self.portfolioLocalStorageArray = localStorageObject;


    }

    function initializeSelect2CrossButton() {
        $('abbr').on('click', function () {
            $('.select2-search-choice-close').css("display", "none");
        });
    }

    self.gotoProjectDashboard = function () {
        $state.go('projectDashboard', {
            projectGuid: $stateParams.projectGuid,
            accountGuid: $stateParams.accountGuid,
            companyGuid: $stateParams.companyGuid
        });

    }

    function changeView() {

        var stateName = $state.current.name;
        switch (stateName) {
            case 'Portfolio.Select':
                checkFormValidity(0);
                //self.select = true;
                break;
            case 'Portfolio.SelectReports':

                checkFormValidity(1);
                //self.selectReports = true;
                break;
            case 'Portfolio.SelectReportsParts':
                checkFormValidity(2);
                //self.selectReportsParts = true;
                break;
            default:
                $state.go('LandingPage');
                break;
        }
    }

    function checkFormValidity(linkIndex) {
        switch (linkIndex) {
            case 0:
                angular.element('#buttonPrevious').hide();
                if (!validateFirstStep()) {

                    angular.element('#portfolioUlNavigation li:eq(0)').addClass('active')
                        .siblings().removeClass('active').addClass('disabled');
                    self.select = true; // first view


                } else {

                    self.select = true; // first view
                    angular.element('#portfolioUlNavigation li:eq(0)').addClass('active')
                        .siblings().removeClass('active');
                    var isSecondStateValid = validateSecondStep();
                    if (isSecondStateValid) {
                        angular.element('#portfolioUlNavigation li:eq(0)').nextAll().removeClass('disabled');
                    } else {
                        angular.element('#portfolioUlNavigation li:eq(1)').nextAll().addClass('disabled');
                    }
                }

                break;
            case 1:
                if (!validateFirstStep()) {
                    angular.element('#buttonPrevious').hide();
                    angular.element('#portfolioUlNavigation li:eq(0)').addClass('active')
                        .siblings().removeClass('active').addClass('disabled');
                    self.select = true;

                } else {
                    getReports();
                    angular.element('#buttonPrevious').show();

                    angular.element('#portfolioUlNavigation li:eq(1)').addClass('active')
                        .siblings().removeClass('active').prev().removeClass('disabled');
                    self.selectReports = true;

                    var isSecondStateValid = validateSecondStep();
                    if (isSecondStateValid) {
                        angular.element('#portfolioUlNavigation li:eq(1)').nextAll().removeClass('disabled');
                    } else {
                        angular.element('#portfolioUlNavigation li:eq(1)').nextAll().addClass('disabled');
                    }

                }
                break;
            case 2:
                if (!validateFirstStep()) {
                    angular.element('#buttonPrevious').hide();
                    angular.element('#portfolioUlNavigation li:eq(0)').addClass('active')
                        .siblings().removeClass('active').addClass('disabled');
                    self.select = true;
                } else if (!validateSecondStep()) {
                    angular.element('#buttonPrevious').show();
                    angular.element('#portfolioUlNavigation li:eq(1)').addClass('active')
                        .siblings().removeClass('active').prev().removeClass('disabled');
                    angular.element('#portfolioUlNavigation li:eq(1)').nextAll().addClass('disabled');
                    self.selectReports = true;

                } else {
                    angular.element('#buttonPrevious').show();
                    angular.element('#portfolioUlNavigation li:eq(2)').addClass('active').removeClass('disabled')
                        .siblings().removeClass('active').removeClass('disabled');
                    self.selectReportsParts = true;

                }


                break;

        }
    }

    function validateSecondStep() {
        if (JSON.parse(localStorage.getItem('portfolioLocalStorageArray'))[1].selectionIndex.length > 0) {
            return true;
        } else return false;

    }

    function validateFirstStep() {
        if (JSON.stringify(JSON.parse(localStorage.getItem('portfolioLocalStorageArray'))[0].project) === '{}') return false;
        else return true;
    }

    function getReports() {
        var reportStatus = [];
        if (localStorage.getItem('portfolioLocalStorageArray') != undefined || localStorage.getItem('portfolioLocalStorageArray') != null) {
            var obj = JSON.parse(localStorage.getItem('portfolioLocalStorageArray'))[0];
            self.projectGUID = obj.project.projectGUID;
            $scope.delay = 0;
            $scope.minDuration = 0;
            $scope.message = 'Please Wait...';
            $scope.backdrop = true;
            $scope.promise = projectDashboardOperations.getProjectReports(self.projectGUID).then(function (response) {
                angular.forEach(response.reports, function (data) {
                    if (data.reportStatus != 'Final' && data.reportStatus != 'Non-Final')
                        reportStatus.push(data.reportStatus);
                })

                self.distinctReportStatus = getDistinctReportStatus(reportStatus);


                self.reports = response.reports;

            })
        }
    }



    function getDistinctReportStatus(reportStatusArray) {
        var u = {},
            a = [];
        for (var i = 0, l = reportStatusArray.length; i < l; ++i) {
            if (u.hasOwnProperty(reportStatusArray[i])) {
                continue;
            }
            a.push(reportStatusArray[i]);
            u[reportStatusArray[i]] = 1;
        }
        return a;
    }



    self.projectFilter = function (item) {
        $('.select2-chosen').text("Quick select a project");
        $('.select2-search-choice-close').css("display", "none");
        var obj = {};
        obj.value = item;
        self.portfolioLocalStorageArray[0].filterCriteria = obj;
        self.portfolioLocalStorageArray[0].project = {};
        localStorage.setItem('portfolioLocalStorageArray',
            JSON.stringify(self.portfolioLocalStorageArray));
        if (item === null) getProjects(item)
        else getProjects(item);
    }

    function getProjects(val) {
        if (val === 2) {
            self.filterItem = "UNFIN_PROJ";
        } else if (val === 3) {
            self.filterItem = "FIN_PROJ";
        } else if (val === 4) {
            self.filterItem = "LAST_90";
        } else if (val === 5) {
            self.filterItem = "CRE_CURYEAR";
        } else if (val === 6) {
            self.filterItem = "CRE_LASYEAR";
        } else if (val === 7) {
            self.filterItem = "MOR2_REP";
        } else if (val === 8) {
            self.filterItem = "MOR20_REP";
        } else {
            self.filterItem = "";
        }

        //$scope.projectListProvider.readData("", 1, 10);

    }

    self.setInitialCriteria = function () {
        if (localStorage.getItem('portfolioLocalStorageArray') != undefined || localStorage.getItem('portfolioLocalStorageArray') != null) {
            var obj = JSON.parse(localStorage.getItem('portfolioLocalStorageArray'))[0];
            self.searchCriteria = obj.filterCriteria.value;
        }


    }

    self.selectReport = function (index) {
        var returnedVal = checkAllReportsIfTrue();
        if (returnedVal) {
            angular.element('#portfolioUlNavigation li.active').next().removeClass('disabled');
        } else {
            angular.element('#portfolioUlNavigation li.active').next().addClass('disabled');
        }
        if (self.sampleTemplateCheckbox[index])

            self.portfolioLocalStorageArray[1].selectionIndex.push(index);

        else {
            angular.forEach(self.portfolioLocalStorageArray[1].selectionIndex, function (indexArray, count) {
                if (indexArray == index) {
                    self.portfolioLocalStorageArray[1].selectionIndex.splice(count, 1);
                }
            })
        }



        localStorage.setItem('portfolioLocalStorageArray', JSON.stringify(self.portfolioLocalStorageArray));


    }

    function checkAllReportsIfTrue() {
        for (var keys in self.sampleTemplateCheckbox)
            if (self.sampleTemplateCheckbox[keys]) return true;

        return false;
    }


    self.checkPreSelectedReport = function () {
        /*if (JSON.parse(localStorage.getItem('portfolioLocalStorageArray'))[1].selectionIndex.length > 0) {
            self.selected = true;
        }*/

        angular.forEach(self.portfolioLocalStorageArray[1].selectionIndex, function (indexArray, count) {
            self.sampleTemplateCheckbox[indexArray] = true;
        })
    }

    self.checkReportsOnCondition = function (status) {
        if (status === 'check-all') {
            self.portfolioLocalStorageArray[1].selectionIndex.length = 0;
            angular.forEach(self.reports, function (report, index) {
                self.sampleTemplateCheckbox[index] = true;
                self.portfolioLocalStorageArray[1].selectionIndex.push(index);
            })
            localStorage.setItem('portfolioLocalStorageArray', JSON.stringify(self.portfolioLocalStorageArray));
        } else if (status === 'uncheck-all') {
            uncheckAllReports();

        } else if (status === 'check-final') {
            self.portfolioLocalStorageArray[1].selectionIndex.length = 0;
            uncheckAllReports();
            angular.forEach(self.reports, function (report, index) {
                if (report.reportStatus === 'Final') {
                    self.sampleTemplateCheckbox[index] = true;
                    self.portfolioLocalStorageArray[1].selectionIndex.push(index);
                }

            })
            localStorage.setItem('portfolioLocalStorageArray', JSON.stringify(self.portfolioLocalStorageArray));

        } else if (status === 'check-nonfinal') {
            self.portfolioLocalStorageArray[1].selectionIndex.length = 0;
            uncheckAllReports();
            angular.forEach(self.reports, function (report, index) {
                if (report.reportStatus === 'Non-Final') {
                    self.sampleTemplateCheckbox[index] = true;
                    self.portfolioLocalStorageArray[1].selectionIndex.push(index);
                }

            })
            localStorage.setItem('portfolioLocalStorageArray', JSON.stringify(self.portfolioLocalStorageArray));

        } else {
            self.portfolioLocalStorageArray[1].selectionIndex.length = 0;
            uncheckAllReports();
            angular.forEach(self.reports, function (report, index) {
                if (report.reportStatus === status) {
                    self.sampleTemplateCheckbox[index] = true;
                    self.portfolioLocalStorageArray[1].selectionIndex.push(index);
                }

            })
            localStorage.setItem('portfolioLocalStorageArray', JSON.stringify(self.portfolioLocalStorageArray));

        }



    }


    self.selectReportParts = function (parentIndex, childIndex) {

        if (self.reportPartsModel[parentIndex + '' + childIndex]) {
            self.portfolioLocalStorageArray[2].selectionIndex.push(parentIndex + '' + childIndex);

        } else {
            angular.forEach(self.portfolioLocalStorageArray[2].selectionIndex, function (indexArray, count) {
                if (indexArray == parentIndex + '' + childIndex) {
                    self.portfolioLocalStorageArray[2].selectionIndex.splice(count, 1);
                }
            })
        }

        localStorage.setItem('portfolioLocalStorageArray', JSON.stringify(self.portfolioLocalStorageArray));

    }

    self.checkPreSelectedReportParts = function (parentIndex, childIndex) {
        if (self.sampleReportsParts[parentIndex].reportsParts[childIndex].value)
            self.reportPartsModel[parentIndex + '' + childIndex] = true;

        localStorage.setItem('portfolioLocalStorageArray', JSON.stringify(self.portfolioLocalStorageArray));

    }

    $scope.generateMarkUp = function (result) {
        var markup = "<div>";
        markup += "<div>" + result.name + "</div>";
        markup += "</div>";
        return markup;
    }

    $scope.displayProject = function (result) {
        if ($state.is('Portfolio.Select')) {

            if (JSON.stringify(JSON.parse(localStorage.getItem('portfolioLocalStorageArray'))[0].project) !== '{}' && JSON.stringify(result) === '{}') {
                angular.element('#portfolioUlNavigation li:eq(1)').removeClass('disabled');
                result = JSON.parse(localStorage.getItem('portfolioLocalStorageArray'))[0].project;

            }
            self.showError = false;
            $('.select2-chosen').text(result.name);
            // angular.element('.select2-choice').val(result.name);

            var obj = {};
            obj.name = result.name;
            obj.projectGUID = result.projectGUID;
            self.portfolioLocalStorageArray[0].project = obj;
            localStorage.setItem('portfolioLocalStorageArray',
                JSON.stringify(self.portfolioLocalStorageArray));
            /*if(JSON.stringify(result) === '{}') {
                
                self.showError = true;
            }
            else self.showError = false;*/
        }
    }

    $scope.projectListProvider = {
        readData: function (term, page, pageSize) {
            if (term != undefined) {

                if (self.readDataCount == 0) {
                    projectDashboardOperations.setTerm(term);
                    self.readDataCount = self.readDataCount + 1;
                    self.readDataPage = page - 1;
                } else {
                    if ($('.select2-input').val() == projectDashboardOperations.getTerm()) {
                        self.readDataPage = self.readDataPage + pageSize;
                    } else {
                        projectDashboardOperations.setTerm(term);
                        self.readDataPage = page - 1;
                    }

                }
            }
            var deferred = $q.defer();
            if (term == "") {
                if (self.filterItem == "") getAllProjectListData(page, pageSize, deferred);
                else getProjectsWithCriteria(page, pageSize, deferred);

            } else if (term != "") {

                if (self.filterItem == "") searchProjectWithoutCriteria(page, pageSize, deferred, term);
                else searchProjectWithCriteriaAndFilter(page, pageSize, deferred, term);



            }



            return deferred.promise;
        }
    };

    function searchProjectWithoutCriteria(page, pageSize, deferred, term) {
        projectDashboardOperations.getProjectSearchData({

                limit: pageSize,
                offset: (page * pageSize) - pageSize,
                projectName: term

            })
            .then(function (result) {


                deferred.resolve(result.projects);
            }, function (reason) {

                deferred.reject(reason);
            });
    }

    function searchProjectWithCriteriaAndFilter(page, pageSize, deferred, term) {
        projectDashboardOperations.getSearchedPortfolioProjects({

                limit: pageSize,
                offset: (page * pageSize) - pageSize,
                projectName: term,
                filterText: self.filterItem

            })
            .then(function (result) {


                deferred.resolve(result.projects);
            }, function (reason) {

                deferred.reject(reason);
            });

    }

    function getAllProjectListData(page, pageSize, deferred) {
        projectDashboardOperations.getProjectListData({

                limit: pageSize,
                offset: (page * pageSize) - pageSize
            })
            .then(function (result) {


                deferred.resolve(result.projects);
            }, function (reason) {

                deferred.reject(reason);
            });
    }

    function getProjectsWithCriteria(page, pageSize, deferred) {
        projectDashboardOperations.getProjectsForPortfolio({

            limit: pageSize,
            offset: (page * pageSize) - pageSize,
            filterText: self.filterItem
        }).
        then(function (response) {

            deferred.resolve(response.projects);


        }, function (error) {

            deferred.reject(reason);
        })
    }

    $scope.setInitialSelectedProject = function () {
        if (localStorage.getItem('portfolioLocalStorageArray') != undefined || localStorage.getItem('portfolioLocalStorageArray') != null) {
            var obj = JSON.parse(localStorage.getItem('portfolioLocalStorageArray'))[0];
            //angular.element('.select2-choice').val(obj.name); //self.searchCriteria = obj.filterCriteria.value;
            $('.select2-chosen').text(obj.name);
            $('.select2-search-choice-close').css("display", "block");
        } else {
            $('.select2-chosen').text("Quick select a project");
            $('.select2-search-choice-close').css("display", "none");
        }
    }

    $scope.$on('show-error-message', function (event, args) {

        if (args.obj === "firstStep") {
            self.showError = true;
            self.errorMessage = "Please select a project to proceed to next step";
        } else if (args.obj === "secondStep") {
            self.showError = true;
            self.errorMessage = "Please select a report to proceed to next step";
        }
    })

}]);
angular.module('ProjectDashboard').controller('PortfolioNavigation', ['$state', '$stateParams', '$scope', 'accountGuid', 'companyGuid', 'projectGuid', '$location', 'localStorageObject', function ($state, $stateParams, $scope, accountGuid, companyGuid, projectGuid, $location, localStorageObject) {




    // $scope.portfolioRequestID = portfolioRequestID;

    var stateName = $state.current.name;

    var self = this;
    this.localStorage = localStorageObject;


    self.redirectToSelectPortfolio = function (event) {
        var elem = $(event.target);

        $state.go('Portfolio.Select', {
            projectGuid: projectGuid,
            accountGuid: accountGuid,
            companyGuid: companyGuid
        });
    }

    self.redirectToSelectReports = function (event) {
        var elem = $(event.target);
        if (!validateFirstStep()) {
            $scope.$broadcast('show-error-message', {
                obj: 'firstStep'
            });
            $state.go('Portfolio.Select', {
                projectGuid: projectGuid,
                accountGuid: accountGuid,
                companyGuid: companyGuid
            });
        } else {

            $state.go('Portfolio.SelectReports', {
                projectGuid: projectGuid,
                accountGuid: accountGuid,
                companyGuid: companyGuid
            });
        }

    }

    self.redirectToSelectReportsParts = function (event) {
        var elem = $(event.target);
        if (!validateFirstStep()) {
            return;
        } else {
            if (!validateSecondStep()) {
                $scope.$broadcast('show-error-message', {
                    obj: 'secondStep'
                });
                $state.go('Portfolio.SelectReports', {
                    projectGuid: projectGuid,
                    accountGuid: accountGuid,
                    companyGuid: companyGuid
                });
            } else {

                $state.go('Portfolio.SelectReportsParts', {
                    projectGuid: projectGuid,
                    accountGuid: accountGuid,
                    companyGuid: companyGuid
                });
            }
        }


    }

    self.redirectToConfirm = function () {
        $state.go('Portfolio.Confirm', {
            projectGuid: projectGuid,
            accountGuid: accountGuid,
            companyGuid: companyGuid
        });
    }

    self.redirectToNextState = function () {
        var currentState = $state.current.name;
        if (currentState === 'Portfolio.Select') {
            var isFirstStepValid = validateFirstStep();
            if (isFirstStepValid) {
                $state.go('Portfolio.SelectReports', {
                    projectGuid: projectGuid,
                    accountGuid: accountGuid,
                    companyGuid: companyGuid
                });
            } else {
                $scope.$broadcast('show-error-message', {
                    obj: 'firstStep'
                });
                $state.go('Portfolio.Select', {
                    projectGuid: projectGuid,
                    accountGuid: accountGuid,
                    companyGuid: companyGuid
                });
            }
        } else if (currentState === 'Portfolio.SelectReports') {
            var isSecondStepValid = validateSecondStep();
            if (isSecondStepValid) {
                $state.go('Portfolio.SelectReportsParts', {
                    projectGuid: projectGuid,
                    accountGuid: accountGuid,
                    companyGuid: companyGuid
                });
            } else {
                $scope.$broadcast('show-error-message', {
                    obj: 'secondStep'
                });
                $state.go('Portfolio.SelectReports', {
                    projectGuid: projectGuid,
                    accountGuid: accountGuid,
                    companyGuid: companyGuid
                });
            }
        }
    }

    self.redirectToPreviousState = function () {
        var currentState = $state.current.name;
        if (currentState === 'Portfolio.SelectReports') {
            var isFirstStepValid = validateFirstStep();
            if (isFirstStepValid) {
                $state.go('Portfolio.Select', {
                    projectGuid: projectGuid,
                    accountGuid: accountGuid,
                    companyGuid: companyGuid
                });
            } else {
                $scope.$broadcast('show-error-message', {
                    obj: 'firstStep'
                });
                $state.go('Portfolio.SelectReports', {
                    projectGuid: projectGuid,
                    accountGuid: accountGuid,
                    companyGuid: companyGuid
                });
            }
        } else if (currentState === 'Portfolio.SelectReportsParts') {
            var isSecondStepValid = validateSecondStep();
            if (isSecondStepValid) {
                $state.go('Portfolio.SelectReports', {
                    projectGuid: projectGuid,
                    accountGuid: accountGuid,
                    companyGuid: companyGuid
                });
            } else {
                $scope.$broadcast('show-error-message', {
                    obj: 'secondStep'
                });
                $state.go('Portfolio.SelectReportsParts', {
                    projectGuid: projectGuid,
                    accountGuid: accountGuid,
                    companyGuid: companyGuid
                });
            }
        }
    }

    function validateFirstStep() {
        if (JSON.stringify(JSON.parse(localStorage.getItem('portfolioLocalStorageArray'))[0].project) === '{}') return false;
        else return true;
    }

    function validateSecondStep() {
        if (JSON.parse(localStorage.getItem('portfolioLocalStorageArray'))[1].selectionIndex.length === 0) return false;
        else return true;
    }

    this.dismissAlert = function () {
        self.showError = false;
        self.errorMessage = "";
    }


}]);
angular.module('ProjectDashboard').controller('PortfolioSignatureTool', ['$scope', '$state', '$window', 'projectDashboardOperations', '$stateParams', 'checkStatus', '$q', function ($scope, $state, $window, projectDashboardOperations, $stateParams, checkStatus, $q) {

    var self = this;


    init();

    function init() {
        self.showAlert = false;
        self.reportTypes = [];
        self.selectedReportType = {};
        getProjectSignOffData();
        self.templateCertificates = {};
        self.isSignedCert = [];
        self.isSignedSignature = [];
        self.certificatioText = [];
        self.currentUserGUID = "a0f5e294-b497-4c16-8fa4-526c9413530f";
        //replace (currentUserGUID) this by account guid
    }

    function getProjectSignOffData() {
        $scope.delay = 0;
        $scope.minDuration = 0;
        $scope.message = 'Please Wait...';
        $scope.backdrop = true;
        $scope.promise =
            projectDashboardOperations.getProjectSignOffData($stateParams.projectGuid, $stateParams.accountGuid).then(function (response) {
                if (response.status != undefined && checkStatus.checkCodeInStatusArray(response.status, 'GET')) {
                    self.serviceMessage = response.data.message === undefined ? "Unable to fetch records" : response.data.message.userMessage;
                    addClassToReportsAlerts("error", self.serviceMessage);
                    //self.displayIfRecords = false;
                } else if (response.reports.length == 0) {
                    self.serviceMessage = "No records found";
                    addClassToReportsAlerts("error", self.serviceMessage);
                } else {
                    self.showAlert = false;
                    if (self.selectedReportType && self.selectedReportType.hasOwnProperty("reportType"))
                        addClassToReportsAlerts("success", "Changes for report type: " + self.selectedReportType.reportType + " has been submited successfully");
                    fillReportTypes(response.reports);
                    self.reportSignoffData = response.reports;
                    fillReportDetails();
                }
            })
    }

    function fillReportTypes(reportTypesArray) {
        angular.forEach(reportTypesArray, function (report, index) {
            var reportTypeObj = {
                "reportType": report.reportType,
                "reportTypeGuid": report.reportTypeGuid
            }
            if (self.reportTypes.length > 0)
                var existReportType = self.reportTypes.filter(function (item, i) {
                    return item.reportTypeGuid == report.reportTypeGuid
                })[0];

            if (!existReportType) {
                self.reportTypes.push(reportTypeObj);
            }
        })
        if (self.reportTypes.length == 1) {
            self.selectedReportType = self.reportTypes[0];
            /*self.signatureHeaders = reportTypesArray[0].columns.filter(function(item,i){
                return item.type.toLowerCase=="signature"
            });*/
        }
    }

    self.setReportType = function () {
        //console.log(self.selectedReportType);
        if (self.selectedReportType) {
            fillReportDetails();
        }
    }

    function fillReportDetails() {
        if (self.selectedReportType.reportTypeGuid) {
            var reportTypeData = self.reportSignoffData.filter(function (reportItem, i) {
                return reportItem.reportTypeGuid == self.selectedReportType.reportTypeGuid;
            });
            self.portfolioSignatureDetails = angular.copy(reportTypeData);
            //Adding UserName
            angular.forEach(self.portfolioSignatureDetails, function (reportSignoff, index) {
                angular.forEach(reportSignoff.signatures, function (sign, signIndex) {
                    if (sign.signOffUser.userGUID && sign.signOffUser.userGUID == self.currentUserGUID)
                        sign.isChecked = true;
                    else
                        sign.isChecked = false;
                })
            })
            if (self.portfolioSignatureDetails.length > 0) {
                self.portfolioSignatureDetailsCopy = angular.copy(self.portfolioSignatureDetails);
                self.isSubmitSignoff = true;
            }
        } else
            self.isSubmitSignoff = false;
    }

    self.getCurrentCertificate = function (cert) {

        return cert.signatureType.toLowerCase() == "certification" && (cert.signOffUser.userGUID == self.currentUserGUID || !cert.signatureGuid)
            /* var currentSignature = reportSignatures.filter(function (item, i) {
                 return (item.signatureType.toLowerCase() == "certification" && (item.signOffUser.userGUID == self.currentUserGUID || !item.signatureGuid))
             }) //|| !item.signOffUser.userGUID
             return currentSignature;*/
    }

    self.updateSignedCertificate = function (event, signOffUser) {
        if (event.srcElement) elem = event.srcElement;
        else if (event.target) elem = event.target;
        if (elem.checked) {
            signOffUser.userName = "LoggedIn User";
            signOffUser.title = "Manager";
            signOffUser.userGUID = self.currentUserGUID;
            //get filtered signatures by type = "certification"
            //var signedUserExistIndex = signatures.map(function(x) {return x.signOffUser.userGUID; }).indexOf(self.currentUserGUID);
        } else {
            signOffUser.userName = "";
            signOffUser.title = "";
            signOffUser.userGUID = "";
        }
    }

    self.updateSignedSignature = function (event, signOffUser) {

        if (event.srcElement) elem = event.srcElement;
        else if (event.target) elem = event.target;
        //var signOffIndex = signatures.indexOf(sign);
        if (elem.checked) {
            signOffUser.userName = "LoggedIn User";
            signOffUser.title = "Manager";
            signOffUser.userGUID = self.currentUserGUID;
        } else {
            signOffUser.userName = "";
            signOffUser.title = "";
            signOffUser.userGUID = "";
        }
    }

    self.copyToAllSignatures = function (parentIndex, signIndex, currentSign) {
        angular.forEach(self.portfolioSignatureDetails, function (reportData, i) {
            if (!reportData.final) {
                var signOffIndex = reportData.signatures.map(function (x) {
                    return x.signOffType;
                }).indexOf(currentSign.signOffType);
                if (signOffIndex != undefined && signOffIndex >= 0) {
                    reportData.signatures[signOffIndex].signOffUser.userName = currentSign.signOffUser.userName;
                    reportData.signatures[signOffIndex].signOffUser.title = currentSign.signOffUser.title;
                    reportData.signatures[signOffIndex].signOffUser.userGUID = currentSign.signOffUser.userGUID;
                    reportData.signatures[signOffIndex].isChecked = currentSign.isChecked;
                }
            }
        })
    }

    self.copyToAllCertificates = function (parentIndex, currentCert) {
        if (currentCert) {
            angular.forEach(self.portfolioSignatureDetails, function (reportData, i) {
                /*var signOffIndex = reportData.signatures.findIndex(function (item) {
                        return (item.signatureType.toLowerCase() == currentCert.signatureType.toLowerCase() && (item.signOffUser.userGUID == self.currentUserGUID || (!item.signatureGuid && !item.signOffUser.userGUID)))
                    })*/

                var certifications = reportData.signatures.filter(function (certs) {
                    return certs.signatureType == currentCert.signatureType && (certs.signOffUser.userGUID == self.currentUserGUID || (!certs.signatureGuid && !certs.signOffUser.userGUID))
                })
                for (var j = 0; j < certifications.length; j++) {
                    var index = reportData.signatures.indexOf(certifications[j]);
                    if (index != undefined && index > -1) {
                        reportData.signatures[index].signOffUser.userName = currentCert.signOffUser.userName;
                        reportData.signatures[index].signOffUser.title = currentCert.signOffUser.title;
                        reportData.signatures[index].signOffUser.userGUID = currentCert.signOffUser.userGUID;
                        reportData.signatures[index].isChecked = currentCert.isChecked;
                    }
                }
            })
        }
    }

    function compareKeys(objA, objB) {
        var aKeys = Object.keys(objA).sort();
        var bKeys = Object.keys(objB).sort();
        return JSON.stringify(aKeys) === JSON.stringify(bKeys);
    }

    this.dismissAlert = function () {
        this.showAlert = false;
        this.serviceMessage = "";
    }

    function addClassToReportsAlerts(status, message) {
        self.showAlert = true;
        self.serviceMessage = message;
        if (status === "success") {
            angular.element('#alertMessageDiv').addClass('alert-success');
            angular.element('#alertMessageDiv').removeClass('alert-danger');
        } else {
            angular.element('#alertMessageDiv').removeClass('alert-success');
            angular.element('#alertMessageDiv').addClass('alert-danger');
        }
    }

    self.submitSignatures = function () {
        var arrPostSignOff = [];
        var arrPutSignOff = [];
        var arrDeleteSignOff = [];
        angular.forEach(self.portfolioSignatureDetails, function (report, index) {
                angular.forEach(report.signatures, function (sign, signIndex) {

                        //check if equal or not
                        var isEqual = compareObjs(sign.signOffUser, self.portfolioSignatureDetailsCopy[index].signatures[signIndex].signOffUser);

                        //Priviously Added SignOff(case of update)
                        if (self.portfolioSignatureDetailsCopy[index].signatures[signIndex] && self.portfolioSignatureDetailsCopy[index].signatures[signIndex].signatureGuid) {
                            //if previously exist update/delete Obj:
                            var delSignOff = {
                                "reportGUID": report.reportGuid,
                                "reportSignoffGUID": sign.reportSignoffGuid,
                            }

                            if (sign.signOffUser.userGUID) {
                                if (!isEqual) {
                                    arrPutSignOff.push(getRequestObj(sign, 'PUT'));
                                }

                                /*if (!angular.equals(sign.signOffUser, self.portfolioSignatureDetailsCopy[index].signatures[signIndex].signOffUser))
                                    arrPutSignOff.push(updateObj)*/

                            } else {
                                if (self.currentUserGUID == self.portfolioSignatureDetailsCopy[index].signatures[signIndex].signOffUser.userGUID)
                                    arrDeleteSignOff.push(delSignOff);
                                else
                                if (!isEqual)
                                    arrPutSignOff.push(getRequestObj(sign, 'PUT'));
                            }

                        } else {
                            //POST
                            if (sign.signOffUser.userGUID) {
                                if (sign.isChecked) {
                                    arrPostSignOff.push(getRequestObj(sign, 'POST'));
                                }
                            }
                            //Else of above case applies when userGUID for a signoff comes empty that should not happen
                            else {
                                if (!isEqual)
                                    arrPutSignOff.push(getRequestObj(sign, 'PUT'))
                            }

                        }
                    }) // end of foreach
            }) // end of foreach


        var requestDeleteObj = {
            "reportsignoffs": arrDeleteSignOff
        }
        var requestPostObj = {
            "signatures": arrPostSignOff
        }
        var requestPutObj = {
            "signatures": arrPutSignOff
        }

        var promises = [];
        if (arrDeleteSignOff.length > 0)
            promises.push(projectDashboardOperations.deleteProjectSignoffs(requestDeleteObj));

        if (arrPutSignOff.length > 0)
            promises.push(projectDashboardOperations.updateProjectSignoffs(requestPutObj));

        if (arrPostSignOff.length > 0)
            promises.push(projectDashboardOperations.createProjectSignoffs(requestPostObj));

        $q.all(promises).then(function (responses) {
            //case delete
            if (arrDeleteSignOff.length) {
                if (responses[0].status != undefined && checkStatus.checkCodeInStatusArray(responses[0].status, 'DELETE')) {
                    var erroMsg = responses[0].data.message ? responses[0].data.message.userMessage : "Sorry. We encountered a problem while processing your request."
                    addClassToReportsAlerts("error", erroMsg);
                } else
                    self.showAlert = false;

            }
            //case update
            if (arrPutSignOff.length) {
                var resp = responses[1] ? responses[1] : responses[0]
                if (resp.status != undefined && checkStatus.checkCodeInStatusArray(resp.status, 'PUT')) {
                    var erroMsg = resp.data.message ? resp.data.message.userMessage : "Sorry. We encountered a problem while processing your request."
                    addClassToReportsAlerts("error", erroMsg);
                } else {
                    self.showAlert = false;
                    //$state.reload();
                }
            }
            //case add
            if (arrPostSignOff.length) {
                var resp = responses[2] ? responses[2] : responses[1] ? responses[1] : responses[0];
                if (resp.status != undefined && checkStatus.checkCodeInStatusArray(resp.status, 'POST')) {
                    var erroMsg = resp.data.message ? resp.data.message.userMessage : "Sorry. We encountered a problem while processing your request."
                    addClassToReportsAlerts("error", erroMsg);
                } else {
                    self.showAlert = false;
                    //$state.reload();
                }
            }
            if (!self.showAlert) {
                getProjectSignOffData();
            }
        })

    }

    function getRequestObj(signOffObject, operation) {
        var signObject = {};
        if (operation == 'POST') {
            signObject.templateSignatureGuid = signOffObject.templateSignatureGuid;
            signObject.reportGuid = signOffObject.reportGuid;
        } else if (operation == 'PUT')
            signObject.signatureGuid = signOffObject.signatureGuid;

        signObject.certificationText = signOffObject.certificationText;
        signObject.digitalSignatureInPrintedReport = signOffObject.digitalSignatureInPrintedReport;
        signObject.showInPrintedReport = signOffObject.showInPrintedReport;
        signObject.signOffUser = {};
        signObject.signedOnBehalfOfUser = {};
        signObject.signedForUser = {};
        //signObject.signOffUser.userID = "";
        signObject.signOffUser.userGUID = signOffObject.signOffUser.userGUID;
        signObject.signOffUser.userName = signOffObject.signOffUser.userName;
        signObject.signOffUser.title = signOffObject.signOffUser.title;
        signObject.signOffUser.email = signOffObject.signOffUser.email;
        signObject.signOffUser.cellPhone = signOffObject.signOffUser.cellPhone;

        signObject.signedOnBehalfOfUser.userGUID = signOffObject.signedOnBehalfOfUser.userGUID;
        signObject.signedOnBehalfOfUser.userName = signOffObject.signedOnBehalfOfUser.userName;
        signObject.signedOnBehalfOfUser.title = signOffObject.signedOnBehalfOfUser.title;
        signObject.signedOnBehalfOfUser.email = signOffObject.signedOnBehalfOfUser.email;
        signObject.signedOnBehalfOfUser.cellPhone = signOffObject.signedOnBehalfOfUser.cellPhone;

        signObject.signedForUser.userGUID = signOffObject.signedForUser.userGUID;
        signObject.signedForUser.userName = signOffObject.signedForUser.userName;
        signObject.signedForUser.title = signOffObject.signedForUser.title;
        signObject.signedForUser.email = signOffObject.signedForUser.email;
        signObject.signedForUser.cellPhone = signOffObject.signedForUser.cellPhone;

        return signObject;
    }

    function compareObjs(objA, objB) {
        return angular.equals(objA, objB);
    }

    self.gotoProject = function () {
        $state.go('projectDashboard', {
                projectGuid: $stateParams.projectGuid,
                accountGuid: $stateParams.accountGuid,
                companyGuid: $stateParams.companyGuid
            })
            //$window.open("index.html#/selectProject", "_self", "width=800, height=1200,left=550");
    }

}]);;
angular.module('ProjectDashboard').controller('ProjectDashboardController', ['$state', '$stateParams', '$scope', '$timeout', 'projectDashboardOperations', '$q', '$modal', '$window', 'reportGridDataOperations', '$window', 'checkStatus', '$location', '$compile', function ($state, $stateParams, $scope, $timeout, projectDashboardOperations, $q, $modal, $window, reportGridDataOperations, $window, checkStatus, $location, $compile) {

    var self = this;
    self.totalProjectCount = 0;
    self.readDataCount = 0;
    self.parentTaskObj = {};



    init();

    function init() {
        self.accountGuid = $stateParams.accountGuid;
        self.projectGuid = $stateParams.projectGuid;
        self.companyGuid = $stateParams.companyGuid;
        //self.selectProjectMode = false;
        self.editMode = false;
        self.reportTypes = [];
        self.reportsTypesHeaderarray = [];
        self.reportTypeData = [];
        self.projectInfoObject = {};
        self.groupedGuidArray = [];
        self.groupedGuidObject = {};
        self.readDataCount = 0;
        self.readDataPage;
        self.taskStatus = {};
        self.isSigned = {};
        //getCommentHierarchy();
        getDashboardData(self.projectGuid, self.accountGuid);



        /*fillProjectDetails(dashBoardData.dashboard.desc);
         getReportTypes(dashBoardData.dashboard.desc.columnSets);
         getReportData(dashBoardData.dashboard.data);*/
        /* $timeout(function () {
         createDatatable();
         }, 1000)*/

    }

    function getCommentHierarchy() {
        var obj = {
            0: "General Comment",
            1: "Report Writer",
            2: "Senior Reviewer"

        }

        return obj;
    }

    function getDashboardData(projectGuid, accountGuid) {
        $scope.delay = 0;
        $scope.minDuration = 0;
        $scope.message = 'Please Wait...';
        $scope.backdrop = true;
        $scope.promise =
            projectDashboardOperations.getData(projectGuid, accountGuid).then(function (response) {
                self.copyProjectDetails = {};
                if (response && response.status != undefined && checkStatus.checkCodeInStatusArray(response.status, 'GET') || !response.dashboard) {
                    configureSelect2ForError();

                    self.showAlert = true;
                    self.serviceMessage = response.data.message === undefined ? "Unable to fetch records" : response.data.message.userMessage;

                    addClassToProjectUpdateAlert("error");
                    self.displayIfRecords = false;
                } else {
                    self.displayIfRecords = true;
                    self.showAlert = false;
                    self.dashboardData = response;

                    self.copyProjectDetails = angular.copy(response.dashboard.desc);
                    fillProjectDetails(response.dashboard.desc);
                    self.reportsTypesHeaderarray = response.dashboard.desc.columnSets;
                    getReportTypes(response.dashboard.desc.columnSets);
                    getReportData(response.dashboard.data);
                    $timeout(function () {
                        createDatatable(self.dashboardData);
                        configureSelect2ForSuccess();
                        $('[data-toggle="tooltip"]').tooltip();
                    }, 1000);
                }

            }, function (error) {

            })
    }

    function configureSelect2ForSuccess() {

        $('abbr').on('click', function () {

            $('.select2-search-choice-close').css("display", "none");



        });
    }

    function configureSelect2ForError() {
        $('.select2-chosen').text("Quick select a project"); //select2 error display
        $('.select2-search-choice-close').css("display", "none"); //select2 error display
        $('abbr').on('click', function () {

            $('.select2-search-choice-close').css("display", "none");



        });
    }


    function groupByGuid() {
        self.groupedGuidArray = _.groupBy(self.dashboardData.dashboard.data, function (d) {
            return d.reportTypeGuid;
        });
    }

    function fillProjectDetails(projectDetail) {
        self.reportsFinal = projectDetail.reportsFinal; // adding for cancel functionality
        self.reportsTotal = projectDetail.reportsTotal; // adding for cancel functionality
        self.projectName = projectDetail.name;

        $('.select2-chosen').text(self.projectName); // putting name in select2.js
        if (projectDetail.draftReportDue && projectDetail.draftReportDue.indexOf(':') > -1) {
            self.draftReportDue = convert(new Date(projectDetail.draftReportDue.substring(0, projectDetail.draftReportDue.length - 11)).toString());
        } else self.draftReportDue = convert(new Date(projectDetail.draftReportDue).toString());
        if (projectDetail.projectReportDue && projectDetail.projectReportDue.indexOf(':') > -1) {
            self.projectReportDue = convert(new Date(projectDetail.projectReportDue.substring(0, projectDetail.draftReportDue.length - 11)).toString());
        } else self.projectReportDue = convert(new Date(projectDetail.projectReportDue).toString());
        //self.draftReportDue = convert(new Date(projectDetail.draftReportDue).toString());
        //self.projectReportDue = convert(new Date(projectDetail.projectReportDue).toString());
        self.reportsFinalTotal = projectDetail.reportsFinal + '/' + projectDetail.reportsTotal;
    }

    function getReportTypes(columnHeaders) {
        angular.forEach(columnHeaders, function (columnSet, index) {
            self.reportTypes.push(columnSet);
        });
    }

    function getReportData(columnData) {
        angular.forEach(columnData, function (data, index) {
            self.reportTypeData.push(data);
        })
    }

    /*this.checkIfReportExists = function(reportGuid){
        angular.forEach(columnData, function (data, index) {
            if(data.reportTypeGuid === reportGuid)
            self.reportTypeData.push(data);
        })
    }*/

    this.selectProject = function () {
        angular.element('.select2-choice').val(self.projectName);
        //this.selectProjectMode = true;
    }

    this.cancelProjectSelection = function () {
        this.onEditOperation = false;
        //this.selectProjectMode = false;
    }

    this.dismissAlert = function () {
        this.showAlert = false;
        this.serviceMessage = "";
    }

    this.saveProjectDetails = function (form) {
        if (form.$invalid) {
            return;
        } else {


            this.onEditOperation = true;
            self.projectReportDue = convert(new Date(self.projectReportDue).toString());
            self.draftReportDue = convert(new Date(self.draftReportDue).toString());
            var projectReportDueDate = self.projectReportDue.replace('/', '-').replace('/', '-').split('-');
            var draftReportDue = self.draftReportDue.replace('/', '-').replace('/', '-').split('-');
            var projectDetailsObject = {
                "project": {
                    "name": self.projectName,
                    "draftDueDate": draftReportDue[2] + '-' + draftReportDue[0] + '-' + draftReportDue[1],
                    "finalDueDate": projectReportDueDate[2] + '-' + projectReportDueDate[0] + '-' + projectReportDueDate[1]
                }
            }
            projectDashboardOperations.updateProjectData(self.projectGuid, projectDetailsObject).then(function (result) {

                self.showAlert = true;
                if (result.status != undefined && result.status != 204) {
                    self.editMode = true;
                    self.serviceMessage = result.data.message.userMessage;
                    addClassToProjectUpdateAlert("error");
                } else {
                    self.copyProjectDetails.name = self.projectName;
                    /*convert(new Date(projectDetail.draftReportDue.substring(0,projectDetail.draftReportDue.length-11)).toString());*/
                    self.copyProjectDetails.draftReportDue = projectDetailsObject.project.draftDueDate;
                    self.copyProjectDetails.projectReportDue = projectDetailsObject.project.finalDueDate;
                    angular.element('.select2-choice').val(self.projectName);
                    self.editMode = false;
                    self.serviceMessage = "Project Information Updated";
                    addClassToProjectUpdateAlert("success");

                    $('.select2-chosen').text(self.projectName); // putting name in select2.js
                }
            }, function (error) {
                self.showAlert = true;
                addClassToProjectUpdateAlert("error");
                self.serviceMessage = "error";
            })
        }

    }

    function addClassToProjectUpdateAlert(status) {
        if (status === "success") {
            angular.element('#alertMsgDiv').addClass('alert-success');
            angular.element('#alertMsgDiv').removeClass('alert-danger');
        } else {
            angular.element('#alertMsgDiv').removeClass('alert-success');
            angular.element('#alertMsgDiv').addClass('alert-danger');
        }
    }

    this.cancelProjectEdit = function () {

        this.editMode = false;
        var obj = {};
        obj.name = self.copyProjectDetails.name;
        obj.projectReportDue = self.copyProjectDetails.projectReportDue;
        obj.draftReportDue = self.copyProjectDetails.draftReportDue;
        //obj.projectReportDue = convert(new Date(self.projectReportDue).toString());
        //obj.draftReportDue = convert(new Date(self.draftReportDue).toString());
        obj.reportsFinal = self.reportsFinal;
        obj.reportsTotal = self.reportsTotal;
        fillProjectDetails(obj);
    }

    $scope.generateMarkUp = function (result) {
        var markup = "<div>";
        markup += "<div>" + result.name + "</div>";
        markup += "</div>";
        return markup;
    }

    $scope.displayProject = function (result) {

        if (JSON.stringify(result) != "{}") {

            $('.select2-chosen').text(result.name);
            $('.select2-search-choice-close').css("display", "block");
            $state.go($state.current, {
                projectGuid: result.projectGUID,
                accountGuid: self.accountGuid,
                companyGuid: self.companyGuid
            }, {
                reload: true
            });
        } else {
            $('.select2-chosen').text(self.projectName);
            $('.select2-search-choice-close').css("display", "block");
        }
    }

    $scope.projectListProvider = {
        readData: function (term, page, pageSize) {
            if (term != undefined) {

                if (self.readDataCount == 0) {
                    projectDashboardOperations.setTerm(term);
                    self.readDataCount = self.readDataCount + 1;
                    self.readDataPage = page - 1;
                } else {
                    if ($('.select2-input').val() == projectDashboardOperations.getTerm()) {
                        self.readDataPage = self.readDataPage + pageSize;
                    } else {
                        projectDashboardOperations.setTerm(term);
                        self.readDataPage = page - 1;
                    }

                }
            }
            var deferred = $q.defer();
            if (term == "") {

                projectDashboardOperations.getProjectListData({

                        limit: pageSize,
                        offset: (page * pageSize) - pageSize
                    })
                    .then(function (result) {


                        deferred.resolve(result.projects);
                    }, function (reason) {

                        deferred.reject(reason);
                    });
            } else if (term != "") {


                projectDashboardOperations.getProjectSearchData({

                        limit: pageSize,
                        offset: (page * pageSize) - pageSize,
                        projectName: term

                    })
                    .then(function (result) {


                        deferred.resolve(result.projects);
                    }, function (reason) {

                        deferred.reject(reason);
                    });

            }



            return deferred.promise;
        }
    };



    function convert(str) {
        var mnths = {
            Jan: "01",
            Feb: "02",
            Mar: "03",
            Apr: "04",
            May: "05",
            Jun: "06",
            Jul: "07",
            Aug: "08",
            Sep: "09",
            Oct: "10",
            Nov: "11",
            Dec: "12"
        };
        date = str.split(" ");

        return [mnths[date[1]], date[2], date[3]].join("/");
    }

    this.editProject = function (project) {
        self.showAlert = false;
        this.editMode = true;
    }

    this.addReport = function () {

        $state.go('addProjectReport', {
            projectGuid: self.projectGuid,
            accountGuid: self.accountGuid,

            companyGuid: self.companyGuid,
            prevState: 'Dashboard'



        });
    }

    this.grantAccess = function () {

        this.grantAccessUrl = $state.href('grantAccess', {
            projectGuid: self.projectGuid,
            accountGuid: self.accountGuid,

            companyGuid: self.companyGuid,
            prevState: 'Dashboard'



        });

    }

    this.showProjectMap = function () {
        this.projectMapUrl = $state.href('projectMap', {
            projectGuid: self.projectGuid,
            accountGuid: self.accountGuid
        });

    }

    this.orderStatus = function () {
        this.orderStatusUrl = $state.href('orderStatus', {
            projectGuid: self.projectGuid,
            accountGuid: self.accountGuid,
            projectName: self.projectName
        });
    }

    this.portfolioDownload = function () {
        this.portfolioDownloadUrl = $state.href('Portfolio.Select', {
            projectGuid: self.projectGuid,
            accountGuid: self.accountGuid,
            companyGuid: self.companyGuid

        });
    }

    this.portfolioSignTool = function () {
        this.portfolioSignToolUrl = $state.href('portfolioSignatureTool', {
            projectGuid: self.projectGuid,
            accountGuid: self.accountGuid,
            companyGuid: self.companyGuid
        });
    }

    this.generateProjectDashboardPdf = function (event) {

        var newWindow = window.open("", "_blank");
        projectDashboardOperations.getPDF(self.projectGuid, self.accountGuid).then(function (result) {

            if (result.outputDocument) {
                newWindow.location.href = result.outputDocument;
            } else {
                $(newWindow.document.body).html("<h2>pdf not found</h2>");
                self.showAlert = true;
                addClassToProjectUpdateAlert("error");
                self.serviceMessage = "PDF not found.";
            }

        }, function (error) {
            self.showAlert = true;
            addClassToProjectUpdateAlert("error");

            self.serviceMessage = "error";

        })
    }

    this.checkIfSigned = function (signerName) {
        if (signerName != "") return true;
        else return false;
    }

    /* this.checkAccess = function () {
         return true;
     }*/

    this.checkUncheckAllTasks = function (val, tableIndex, taskHeaderIndex, reportTypeGuid) {
        self.parentTaskObj.tasks = [];

        angular.forEach(self.reportTypeData, function (data, index) {
            self.projectGuidForTasks = data.projectGuid;
            if (data.reportTypeGuid === reportTypeGuid) {
                angular.forEach(data.tasks, function (task, childIndex) {

                    if (childIndex === taskHeaderIndex) {
                        if (val) {
                            task.status = true;
                            updateBulkTask(true, task.taskGuid, task.labelMappingGuid, task.reportGuid);
                        } else {
                            task.status = false;
                            updateBulkTask(false, task.taskGuid, task.labelMappingGuid, task.reportGuid);
                        }
                    } else {
                        return;
                    }

                })


            }
        })
        updateTasks(self.parentTaskObj, self.projectGuidForTasks);

    }

    function updateBulkTask(status, taskGuid, labelMappingGuid, reportGuid) {
        var obj = {
            "taskGuid": taskGuid,
            "status": status,
            "labelMappingGuid": labelMappingGuid,
            "reportGuid": reportGuid
        }
        self.parentTaskObj.tasks.push(obj);

    }

    this.open = {
        date1: false,
        date2: false,
    };

    // Disable weekend selection
    this.disabled = function (date, mode) {
        return (mode === 'day' && (new Date().toDateString() == date.toDateString()));
    };

    this.dateOptions = {
        showWeeks: false,
        startingDay: 1,
        format: 'MM/dd/YYYY'
    };

    this.timeOptions = {
        readonlyInput: true,
        showMeridian: false
    };

    this.openCalendar = function (e, date) {
        e.preventDefault();
        e.stopPropagation();
        this.open[date] = true;
    };

    this.openCalendarOnFocus = function (e, currentTabDate, previousTabDate) {
        e.preventDefault();
        e.stopPropagation();
        if (this.open[previousTabDate]) {
            this.open[previousTabDate] = false;
        }
        this.open[currentTabDate] = true;
    };

    this.redirectToReports = function (reportGuid) {

        $state.go('ReportAuthoring.Write', {
            projectGuid: self.projectGuid,
            reportGuid: reportGuid
        });

    }

    this.changeReportStatus = function (reportGuid, reportTypeGuid, reportStatus, reportStatusGuid) {


        //var reportStatuses = projectDashboardOperations.getReportStatusArray();
        var resolveObj = {
            /*reportStatusArray: function () {
                return reportStatuses;

            },*/
            reportStatusObj: function () {
                var obj = {
                    reportGuid: reportGuid,
                    reportTypeGuid: reportTypeGuid,
                    reportStatus: reportStatus,
                    reportStatusGuid: reportStatusGuid,
                    reportStatusList: self.dashboardData.dashboard.desc.reportStatusList
                }
                return obj;

            }


        }

        projectDashboardOperations.openPopUp($scope, 0, resolveObj, "reportStatus", "static");


    }

    this.showSiteDetails = function (item) {
        self.showReportsAlert = false;
        reportGridDataOperations.getSiteInformation(item.reportGuid).then(function (result) {
            if (result.status != undefined && checkStatus.checkCodeInStatusArray(result.status, 'GET')) {
                addClassToReportsAlerts('error');
                self.showReportsAlert = true;
                self.serviceReportsMessage = result.data.message.userMessage;
            } else {
                self.showReportsAlert = false;
                var resolveObj = {
                    siteObj: function () {
                        var obj = {
                            reportGuid: item.reportGuid,
                            siteDetails: result

                        }
                        return obj;


                    }
                }
                projectDashboardOperations.openPopUp($scope, 0, resolveObj, "openSiteDetails", "static");
            }

        })

    }

    function addClassToReportsAlerts(status) {
        if (status === "success") {
            angular.element('#alertReportOperationsMsgDiv').addClass('alert-success');
            angular.element('#alertReportOperationsMsgDiv').removeClass('alert-danger');
        } else {
            angular.element('#alertReportOperationsMsgDiv').removeClass('alert-success');
            angular.element('#alertReportOperationsMsgDiv').addClass('alert-danger');
        }
    }

    this.dismissReportsAlert = function () {
        self.showReportsAlert = false;
        self.serviceReportsMessage = "";
    }

    this.deleteReport = function (reportGuid) {
        var resolveObj = {
            reportGuid: function () {

                return reportGuid;


            }
        }
        projectDashboardOperations.openPopUp($scope, 0, resolveObj, "deleteReport", true);
    }

    this.updateTaskStatus = function ($event, reportGuid, projectGuid, taskGuid, status, labelMappingGuid) {

        self.showReportsAlert = false;
        self.parentTaskObj.tasks = [];
        var obj = {
            "taskGuid": taskGuid,
            "status": status,
            "labelMappingGuid": labelMappingGuid,
            "reportGuid": reportGuid
        }
        self.parentTaskObj.tasks.push(obj);
        updateTasks(self.parentTaskObj, projectGuid);
    }

    function updateTasks(parentTaskObj, projectGuid) {
        reportGridDataOperations.updateTaskStatus(self.parentTaskObj, projectGuid).then(function (result) {
            if (result.status != undefined && checkStatus.checkCodeInStatusArray(result.status, 'PUT')) {
                addClassToReportsAlerts("error");

                self.serviceReportsMessage = result.data.message.userMessage;
            } else {
                addClassToReportsAlerts("success");
                self.serviceReportsMessage = "Task/Tasks status updated";
                //$state.reload();
            }
            self.showReportsAlert = true;

        }, function (error) {
            self.showReportsAlert = false;
        })
    }

    this.updateSignature = function (reportGuid, signatureObject, dataTableIndex, signatureIndex) {



        var count = 0;
        var id = "dataTable-" + dataTableIndex;
        var table = $('#' + id).DataTable();
        $('#' + id).find('tbody').on('click', 'td', function () {
            if (count == 0) {
                count = 1;
                var idx = table.cell(this).index().column;
                var title = table.column(idx).header();

                var resolveObj = {
                    resolveObj: function () {
                        var obj = {
                            reportGuid: reportGuid,
                            signatureObj: signatureObject,
                            signerType: title.innerText
                        }
                        return obj;
                    }
                }
                projectDashboardOperations.openPopUp($scope, 0, resolveObj, "reportSignOff", "static");
            }

        })



    }

    self.initSignature = function (signature, tableIndex, index, reportIndex) {
        if (signature.signerAccountGuid != null) {

            self.isSigned[tableIndex + '' + index + '' + reportIndex] = true;

        } else {

            self.isSigned[tableIndex + '' + index + '' + reportIndex] = false;
        }
    }

    self.showCheckBox = function (signatureObject, reportType) {
        if (signatureObject != undefined && signatureObject.label) {
            var signatureLabelsArray = [];
            angular.forEach(reportType.columns, function (column, index) {
                if (column.type === 'Signature') {
                    signatureLabelsArray.push(column.label.toLowerCase());
                }

            })

            if (signatureLabelsArray.indexOf(signatureObject.label.toLowerCase()) > -1) {
                return true;
            } else {
                return false;
            }


        } else {
            return false;
        }
    }

    function createDatatable(tableData) {
        for (var i = 0; i < tableData.dashboard.desc.columnSets.length; i++) {
            var columnDefs = [];
            var id = "dataTable-" + i;

            angular.forEach($("#" + id).find('thead tr th'), function (elem, index) {
                if ($(elem).hasClass('taskStatus')) {

                    var taskStatusColumnObj = {
                        targets: index,
                        orderable: false
                    }
                    columnDefs.push(taskStatusColumnObj);
                }
                if ($(elem).hasClass('signature')) {

                    var signatureColumnObj = {
                        targets: index,
                        orderable: false
                    }
                    columnDefs.push(signatureColumnObj);
                }
                if ($(elem).hasClass('comments')) {

                    var commentsColumnObj = {
                        targets: index,
                        orderable: false
                    }
                    columnDefs.push(commentsColumnObj);
                }
                if ($(elem).hasClass('reportRedirection')) {

                    var reportRedirectionColumnObj = {
                        targets: index,
                        orderable: false
                    }
                    columnDefs.push(reportRedirectionColumnObj);
                }
                if ($(elem).hasClass('email')) {

                    var emailColumnObj = {
                        targets: index,
                        orderable: false
                    }
                    columnDefs.push(emailColumnObj);
                }
                if ($(elem).hasClass('reportDeletion')) {

                    var reportDeletionObj = {
                        targets: index,
                        orderable: false
                    }
                    columnDefs.push(reportDeletionObj);
                }

            })

            var table = $("#" + id).DataTable({
                order: [],
                pageLength: 5,
                paging: false,
                info: false,
                filter: false,
                columnDefs: columnDefs,
                stateSave: true
            });

            /*if(table.data().length === 0){
               var datatableWrapperId = id + "_wrapper";
               $("#" + datatableWrapperId).parents('#reportsDiv').hide();
            }*/

        }
    }


    this.getAppendix = function (reportGuid, sectionGuid, count) {

        if (count > 0) {
            var link = "index.html#/appendixFileList?reportGuid=" + reportGuid + "&sectionGuid=" + sectionGuid;
            var name = "appendixwindow";
            openwindow(link, name, 500, 600);
        }
    }

    this.addPointerClass = function (appendice) {
        if (appendice.count > 0) {
            return "pointer";
        }
    }

    this.sendEmail = function () {
        this.sendEmailUrl = $state.href('sendEmail', {
            projectGuid: self.projectGuid,
            accountGuid: self.accountGuid,
            companyGuid: self.companyGuid
        });

    }




    $scope.$on('event:data-updated', function () {
        $state.reload();
    })

    $scope.$on('event:alert-message', function (status, message) {
        self.showAlert = true;
        self.serviceMessage = message;
        addClassToProjectUpdateAlert(status);
    })

    this.showCommentsInTOC = function (data) {
        var link = 'index.html#' + '/TOC?reportGuid=' + data.reportGuid + '&reportType=' + data.reportType;
        var name = "tocwindow";
        openwindow(link, name, 500, 600);
    }




    function openwindow(link, name, width, height) {
        $window.open(link, name, width = width, height = height);
    }

}])

angular.module('ProjectDashboard').controller('DeleteReportController', ['$scope', '$modalInstance', 'reportGridDataOperations', 'reportGuid', 'checkStatus', function ($scope, $modalInstance, reportGridDataOperations, reportGuid, checkStatus) {
    var self = this;

    this.cancelDelete = function () {
        $modalInstance.close();
    }
    this.confirmDelete = function () {

        reportGridDataOperations.deleteReports(reportGuid).then(function (result) {
            if (result.status != undefined && checkStatus.checkCodeInStatusArray(response.status, 'POST')) {
                self.serviceMessage = result.data.message.userMessage;
                self.exception = true;

            } else {

                self.exception = false;
                $modalInstance.close(true);


            }
        }, function (error) {

        })

    }
}])


angular.module('ProjectDashboard').controller('DashoboardTOC', ['$scope', 'ReportAuthoringAPI', '$stateParams', 'reportGridDataOperations', function ($scope, ReportAuthoringAPI, $stateParams, reportGridDataOperations) {
    var self = this;

    init();

    function init() {
        self.obj = {};
        getTOC();

    }

    function getTOC() {
        self.reportTypeName = $stateParams.reportType;
        $scope.delay = 0;
        $scope.minDuration = 0;
        $scope.message = 'Please Wait...';
        $scope.backdrop = true;
        $scope.promise =
            reportGridDataOperations.getTOC($stateParams.reportGuid, 'DEEP').then(function (response) {
                self.appendices = response.appendices;
                self.sections =
                    response.tableOfContent.sections;
                var first = response.tableOfContent.sections[0];
                self.obj.selectedSection = first.sectionGUID;
                self.selectedSection = first;

            })

        /*var promise = ReportAuthoringAPI.getToC($stateParams.reportGuid);
        return promise.then(function (tocSections) {
            self.sections =
                tocSections;
            var first = tocSections[0];
            self.obj.selectedSection = first.sectionID;
            self.selectedSection = first;
        });*/
    }
}])


;
angular.module('ProjectDashboard').controller('ProjectMap', ['$state', '$stateParams', 'dashBoardData', 'projectDashboardOperations', '$timeout', function ($state, $stateParams, dashBoardData, projectDashboardOperations, $timeout) {




    var self = this;
    init();


    function init() {
        self.addressArray = [];
        self.addresses = [];
        self.showFullAddress = {};
        self.latlongArray = [];
        getAddressArray();
        self.addresses = dashBoardData.dashboard.data;
    }


    function getAddressArray() {
        angular.forEach(dashBoardData.dashboard.data, function (singleAddress, index) {
            self.addressArray.push(singleAddress.address + " " + singleAddress.city + " " + singleAddress.state + " " + singleAddress.zipCode);
        })
        getLatLong(self.addressArray);
    }

    function callBack(coordinates, status) {
        if (status === google.maps.GeocoderStatus.OK) {
            createMarker(self.currentProcessedAddress, coordinates[0], coordinates[1]);
        } else if (status === google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {
            $timeout(function () {
                projectDashboardOperations.getLatitudeLongitude(self.currentProcessedAddress, callBack);
            }, 2000);
        }
    }


    function getLatLong(array) {
        self.mapObject = projectDashboardOperations.mapGlobalSettings(39.50, -98.35, 4, google.maps.MapTypeId.ROADMAP, "mapCanvas");
        angular.forEach(self.addressArray, function (address) {
            $timeout(function () {
                projectDashboardOperations.getLatitudeLongitude(address, function (coordinates, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        createMarker(address, coordinates[0], coordinates[1]);
                    }
                })
            }, 2000);


        })


    }


    function createMarker(address, lat, lng) {
        var contentString = address;
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(lat, lng),
            map: self.mapObject.map
        });


        google.maps.event.addListener(marker, 'click', function () {
            self.mapObject.infowindow.setContent(contentString);
            self.mapObject.infowindow.open(self.mapObject.map, marker);
        });
    }



}]);
angular.module('ProjectDashboard').controller('ReportSignOffController', ['$scope', '$modalInstance', 'resolveObj', 'reportGridDataOperations', 'checkStatus', function ($scope, $modalInstance, resolveObj, reportGridDataOperations, checkStatus) {

    var self = this;
    init();

    function init() {

        self.signOffType = resolveObj.signerType;
        if (resolveObj.signatureObj.signerAccountGuid === null) self.alreadySigned = false;
        else {

            self.name = resolveObj.signatureObj.signOffUser.userName;
            self.title = resolveObj.signatureObj.signOffUser.title;
            self.email = resolveObj.signatureObj.signOffUser.email;
            self.cellPhone = resolveObj.signatureObj.signOffUser.cellPhone;
            self.userGUID = resolveObj.signatureObj.signOffUser.userGUID;
            self.alreadySigned = true;
        }

    }

    this.close = function () {

        $modalInstance.close(true);

    }
    this.closeAndUpdate = function (form) {
        if (resolveObj.signatureObj.signerAccountGuid === null) createSignatures(form);
        else deleteUpdateSignatures(form);

    }

    function deleteUpdateSignatures(form) {
        if (form.$invalid) {

            return true;
        } else {
            if (self.updateSignatures == "2") {
                deleteSignature();
            } else if (self.updateSignatures == "3") {
                overrideSignature();
            }

        }
    }

    function deleteSignature() {
        reportGridDataOperations.deleteSignature(resolveObj.reportGuid, resolveObj.signatureObj.signatureGuid).then(function (result) {
            if (result.status != undefined && checkStatus.checkCodeInStatusArray(result.status, 'DELETE')) {
                self.showAlert = true;
                self.serviceMessage = result.data.message.userMessage;
                addClassToAlertHtml("error");
            } else {
                self.showAlert = false;
                $modalInstance.close(true);
            }
        }, function (error) {
            self.showAlert = true;
            addClassToAlertHtml("error");
            self.serviceMessage = "Couldnot delete signatures";
        })
    }

    function createObjectForService(operation) {
        var obj = {};
        obj.signatures = [];
        var signObject = {};


        signObject.digitalSignatureInPrintedReport = resolveObj.signatureObj.digitalSignatureInPrintedReport,
            signObject.showInPrintedReport = resolveObj.signatureObj.showInPrintedReport,
            signObject.signOffUser = {};
        signObject.signOffUser.userID = "";
        signObject.signOffUser.userGUID = "06D73813-64D3-49CB-88DB-013E13F96F11";
        signObject.signOffUser.userName = self.name;
        signObject.signOffUser.title = self.title;
        signObject.signOffUser.email = self.email;
        signObject.signOffUser.cellPhone = self.cellPhone;
        signObject.signedOnBehalfOfUser = {};
        signObject.signedForUser = {};

        if (operation === "PUT") {

            signObject.signatureGuid = resolveObj.signatureObj.signatureGuid;

        } else if (operation === "POST") {
            signObject.reportGuid = resolveObj.reportGuid;
            signObject.templateSignatureGuid = resolveObj.signatureObj.templateSignatureGuid;
        }

        obj.signatures.push(signObject);
        return obj;
    }

    function overrideSignature() {

        var obj = createObjectForService("PUT");
        /*var obj = {};
            obj.reportsignoffs = [];
            var signObject = {};
            signObject.reportSignoffGUID = resolveObj.signatureObj.signatureGuid;
            signObject.signOffUser = {};
            signObject.signOffUser.userID = "";
            signObject.signOffUser.userGUID = self.userGUID;//"06D73813-64D3-49CB-88DB-013E13F96F11";
            signObject.signOffUser.userName = self.name;
            signObject.signOffUser.title = self.title;
            signObject.signOffUser.email = self.email;
            signObject.signOffUser.cellPhone = self.cellPhone;
            signObject.signedOnBehalfOfUser = {};
            signObject.signedForUser = {};
            obj.reportsignoffs.push(signObject);*/
        reportGridDataOperations.updateSignature(obj).then(function (result) {
            if (result.status != undefined && checkStatus.checkCodeInStatusArray(result.status, 'PUT')) {
                self.showAlert = true;
                self.serviceMessage = result.data.message.userMessage;
                addClassToAlertHtml("error");
            } else {
                self.showAlert = false;
                $modalInstance.close(true);
            }
        }, function (error) {
            self.showAlert = true;
            addClassToAlertHtml("error");
            self.serviceMessage = "Couldnot update signatures";
        })
    }


    function createSignatures(form) {

        if (form.$invalid) {
            return true;
        } else {
            var obj = createObjectForService("POST");
            /*var obj = {};
            obj.signatures = [];
            var signObject = {};
            signObject.reportGuid = resolveObj.reportGuid;
            signObject.templateSignatureGuid = resolveObj.signatureObj.templateSignatureGuid,
            signObject.digitalSignatureInPrintedReport = resolveObj.signatureObj.digitalSignatureInPrintedReport,
            signObject.showInPrintedReport = resolveObj.signatureObj.showInPrintedReport,    
            signObject.signOffUser = {};
            signObject.signOffUser.userID = "";
            signObject.signOffUser.userGUID = "06D73813-64D3-49CB-88DB-013E13F96F11";
            signObject.signOffUser.userName = self.name;
            signObject.signOffUser.title = self.title;
            signObject.signOffUser.email = self.email;
            signObject.signOffUser.cellPhone = self.cellPhone;
            signObject.signedOnBehalfOfUser = {};
            signObject.signedForUser = {};
            obj.reportsignoffs.push(signObject);*/

            reportGridDataOperations.createSignature(obj).then(function (result) {
                if (result.status != undefined && checkStatus.checkCodeInStatusArray(result.status, 'POST')) {
                    self.showAlert = true;
                    self.serviceMessage = result.data.message.userMessage;
                    addClassToAlertHtml("error");
                } else {
                    self.showAlert = false;
                    $modalInstance.close(true);
                }
            }, function (error) {
                self.showAlert = true;
                addClassToAlertHtml("error");
                self.serviceMessage = "Couldnot update signatures";
            })
        }
    }


}]);;
angular.module('ProjectDashboard').controller('ReportStatusController', ['$scope', '$modalInstance', 'reportStatusObj', '$filter', 'reportGridDataOperations', function ($scope, $modalInstance, reportStatusObj, $filter, reportGridDataOperations) {

    var self = this;
    this.exception = false;
    init();

    function init() {
        self.reportStatusArray = reportStatusObj.reportStatusList;
        self.statusGUID = reportStatusObj.reportStatusGuid;
        changeStatusName();
        self.singleStatusObj = $filter('filter')(reportStatusObj.reportStatusList, {
            reportStatusShort: reportStatusObj.reportStatus
        });
        self.statusInLongForm = self.singleStatusObj[0].reportStatusLabel;
        buttonsShowHide();
    }

    function changeStatusName() {
        angular.forEach(self.reportStatusArray, function (status) {
            if (status.reportStatusShort === "WO") {
                status.reportStatusLabel = "The work order has been created";
            } else if (status.reportStatusShort === "DE") {
                status.reportStatusLabel = "The report is currently undergoing data entry";
            } else if (status.reportStatusShort === "SR") {
                status.reportStatusLabel = "The report is currently in senior review";
            } else if (status.reportStatusShort === "DR") {
                status.reportStatusLabel = "The report is draft";
            } else if (status.reportStatusShort === "EAI") {
                status.reportStatusLabel = "The environmental analysis is incomplete";
            } else if (status.reportStatusShort === "FIN") {
                status.reportStatusLabel = "This report is final";
            }
        })
    }

    this.previousStep = function () {
        var currentStepIndex = self.singleStatusObj[0].reportStatusRank;
        self.singleStatusObj = $filter('filter')(reportStatusObj.reportStatusList, {
            reportStatusRank: Number(currentStepIndex) - 1
        });
        self.statusInLongForm = self.singleStatusObj[0].reportStatusLabel;
        self.statusGUID = self.singleStatusObj[0].reportStatusGuid;
        buttonsShowHide();

    }

    this.nextStep = function () {
        var currentStepIndex = self.singleStatusObj[0].reportStatusRank;
        self.singleStatusObj = $filter('filter')(reportStatusObj.reportStatusList, {
            reportStatusRank: Number(currentStepIndex) + 1
        });
        self.statusInLongForm = self.singleStatusObj[0].reportStatusLabel;
        self.statusGUID = self.singleStatusObj[0].reportStatusGuid;
        buttonsShowHide();

    }

    this.finalizeUnfinalizeStatus = function () {
        if (self.finalizeOrUnfinalize === "FINALIZE") {
            self.singleStatusObj = $filter('filter')(reportStatusObj.reportStatusList, {
                reportStatusShort: "FIN"

            })
            self.finalizeOrUnfinalize = "UNFINALIZE"
        } else if (self.finalizeOrUnfinalize === "UNFINALIZE") {
            self.singleStatusObj = $filter('filter')(reportStatusObj.reportStatusList, {
                reportStatusShort: "DR"
            })
            self.finalizeOrUnfinalize = "FINALIZE"

        }


        self.statusInLongForm = self.singleStatusObj[0].reportStatusLabel;
        self.statusGUID = self.singleStatusObj[0].reportStatusGuid;
        buttonsShowHide();

    }

    this.closeAndUpdate = function () {

        projectDashboardOperations.updateReportStatus(self.singleStatusObj, reportStatusObj.reportGuid).then(function (result) {
            $modalInstance.close();

        }, function (error) {



        })

    }

    this.close = function () {
        $modalInstance.close();
    }

    function buttonsShowHide() {

        if (self.singleStatusObj[0].reportStatusRank === "0") {
            self.onFirstStep = true;
            self.finalizeOrUnfinalize = "FINALIZE";
        } else if (self.singleStatusObj[0].reportStatusRank === "5") {
            self.onFirstStep = true;
            self.onLastStep = true;
            self.finalizeOrUnfinalize = "UNFINALIZE";
        } else {
            self.finalizeOrUnfinalize = "FINALIZE";
            self.onFirstStep = false;
            self.onLastStep = false;
        }
    }

    this.closeAndUpdate = function () {

        var obj = {
            status: [{
                reportGuid: reportStatusObj.reportGuid,
                statusGuid: self.statusGUID
            }]
        }
        reportGridDataOperations.updateReportStatus(obj).then(function (result) {

            if (result.status != undefined && result.status != 204 && result.status != 200) {
                self.serviceMessage = result.data.message.userMessage;
                self.exception = true;

            } else {

                self.exception = false;
                $modalInstance.close(true);


            }
        }, function (error) {
            self.serviceMessage = "report status updation failed";
            $modalInstance.close(false);
        })


    }



    this.close = function () {
        $modalInstance.close();
    }

    /*this.closeReportStatus = function () {

        if(self.serviceMessage === "Site Details Updated"){
            $modalInstance.close(true);
        }
        else{
            $modalInstance.close(false);
        }
        
    }*/
}]);;
angular.module('ProjectDashboard').controller('SiteDetailsController', ['$scope', '$modalInstance', 'siteObj', 'reportGridDataOperations', 'checkStatus', 'projectDashboardOperations', 'getCountriesAPI', '$filter', 'getStatesAPI', 'PhoneNumberValidator', '$location', '$state', 'BASEURL', function ($scope, $modalInstance, siteObj, reportGridDataOperations, checkStatus, projectDashboardOperations, getCountriesAPI, $filter, getStatesAPI, PhoneNumberValidator, $location, $state, BASEURL) {

    var self = this;
    self.defaultView = true;
    self.showAlert = false;
    init();

    function init() {
        getCountries();

        if (siteObj.siteDetails)
            fillInformation(siteObj.siteDetails);
    }

    function setSelectedCountry() {
        //        var selectedCountry = $filter("filter")(self.countries,{
        //            name : siteObj.siteDetails.location.country
        //        })[0];
        var selectedCountry = _.filter(self.countries, function (element) {
            return element.name === siteObj.siteDetails.location.country;
        })[0];
        self.selectedCountry = selectedCountry;
    }

    function getCountries() {
        getCountriesAPI.get().then(function (result) {
            self.countries = result;

            setSelectedCountry(self.countries);
        })
    }

    this.formatPhone = function () {
        self.phone = PhoneNumberValidator.format(self.phone);
    }

    function fillInformation(obj) {
        if (obj.location) {
            self.propertyNumber = obj.location.propertyNumber;
            self.propertyName = obj.location.propertyName;
            self.address = obj.location.address1;
            self.city = obj.location.city;
            self.county = obj.location.county;
            self.state = obj.location.state;
            self.zipCode = obj.location.zip;
            self.country = obj.location.country;
            self.contactName = obj.location.siteContact.name;
            self.phone = obj.location.siteContact.phone;
            self.fax = obj.location.siteContact.fax;
            self.email = obj.location.siteContact.email;
        }
    }

    this.editCountry = function () {
        self.states = [];
        self.selectedState = undefined;
        self.selectedStateText = null;

        if (self.selectedCountry != null && self.selectedCountry.isStateProvDataAvailable)
            getStates(self.selectedCountry.code);
        else
            self.selectedStateText = null;

        $('#divState').find('#fieldValidationMsg').hide();
        $('#divState').removeClass('has-error');
    }


    function getStates(code) {
        getStatesAPI.get(code).then(function (result) {
            self.states = result;
            /*var filteredState = $filter("filter")(self.states, {
                name: siteObj.siteDetails.location.state
            })[0];*/
            var filteredState = _.filter(self.states, function (element) {
                return element.name === siteObj.siteDetails.location.state;
            })[0];
            if (filteredState)
                self.selectedState = filteredState;
            else
                self.selectedState = undefined;
        })
    }


    this.editSiteDetails = function () {
        self.showAlert = false;
        self.oldSiteDetails = angular.copy(siteObj.siteDetails);
        /*var filteredCountry = $filter("filter")(self.countries, {
                                name: siteObj.siteDetails.location.country
                            })[0];*/
        var filteredCountry = _.filter(self.countries, function (element) {
            return element.name === siteObj.siteDetails.location.country;
        })[0];
        self.selectedCountry = filteredCountry;
        if (filteredCountry && filteredCountry.isStateProvDataAvailable) {
            getStates(filteredCountry.code);
        } else {
            self.selectedStateText = self.oldSiteDetails.location.state;
        }
    }

    function addClassToAlertHtml(status) {
        if (status === "success") {
            angular.element('#alertSiteDetailsMsgDiv').addClass('alert-success');
            angular.element('#alertSiteDetailsMsgDiv').removeClass('alert-danger');
        } else {
            angular.element('#alertSiteDetailsMsgDiv').removeClass('alert-success');
            angular.element('#alertSiteDetailsMsgDiv').addClass('alert-danger');
        }
    }

    this.dismissAlert = function () {
        this.showAlert = false;
        this.serviceMessage = "";
    }

    this.submitChanges = function (form) {

        self.showAlert = false;
        if (!form || form.$invalid) {
            self.showAlert = true;
            self.defaultView = false;
            addClassToAlertHtml("error");
            self.serviceMessage = 'Invalid Form Submission';
            var inputElements = document.getElementsByName(form.$name);
            angular.element(inputElements).find(':input').trigger('blur');

            return;
        }

        siteObj.siteDetails.location.propertyNumber = self.propertyNumber;
        siteObj.siteDetails.location.propertyName = self.propertyName;
        siteObj.siteDetails.location.address1 = self.address;
        siteObj.siteDetails.location.city = self.city;
        siteObj.siteDetails.location.county = self.county;
        siteObj.siteDetails.location.state = self.selectedState === undefined ? self.selectedStateText : self.selectedState.name;
        siteObj.siteDetails.location.zip = self.zipCode;
        siteObj.siteDetails.location.country = self.selectedCountry.name;
        siteObj.siteDetails.location.siteContact.name = self.contactName;
        siteObj.siteDetails.location.siteContact.phone = self.phone;
        siteObj.siteDetails.location.siteContact.fax = self.fax;
        siteObj.siteDetails.location.siteContact.email = self.email;
        delete siteObj.siteDetails.metadata;
        delete siteObj.siteDetails.message;

        mapAddress(siteObj);

    }

    this.cancelChanges = function () {
        $('.error-text').remove();
        $('.has-error').removeClass('has-error');
        self.showAlert = false;
        fillInformation(self.oldSiteDetails);
        self.defaultView = true;
    }

    this.closeSiteDetails = function () {

        if (self.serviceMessage === "Site Details Updated") {
            $modalInstance.close(true);

            $state.go('projectDashboard', {
                projectGuid: $location.search().projectGuid,
                accountGuid: BASEURL.accountGUID,
                companyGuid: BASEURL.companyGUID
            });
        } else {
            $modalInstance.close(false);
        }

    }


    function mapAddress(siteObj) {
        var addressObject = {
            sitename: siteObj.siteDetails.location.propertyName,
            address: siteObj.siteDetails.location.address1,
            city: siteObj.siteDetails.location.city,
            state: siteObj.siteDetails.location.state,
            country: siteObj.siteDetails.location.country,
            zipcode: siteObj.siteDetails.location.zip
        }
        $scope.delay = 0;
        $scope.minDuration = 0;
        $scope.message = 'Please Wait...';
        $scope.backdrop = true;
        $scope.promise =
            projectDashboardOperations.getLatLongFromGeocode(addressObject).then(function (response) {

                if (response.status != undefined && checkStatus.checkCodeInStatusArray(response.status, 'POST') || response.addressResults.addresses[0].length === 0) {

                    addressMappingError(response.data.message.userMessage);

                } else {

                    siteObj.siteDetails.location.latitude = response.addressResults.addresses[0].latitude;
                    siteObj.siteDetails.location.longitude = response.addressResults.addresses[0].longitude;


                    callEditSiteService(siteObj);

                }

            }, function (error) {

                addressMappingError("Invalid Adress");
            })

    }

    function addressMappingError(text) {
        self.showAlert = true;
        self.defaultView = false;
        self.serviceMessage = text;
        addClassToAlertHtml("error");
    }

    function callEditSiteService(siteObj) {
        reportGridDataOperations.updateSiteInformation(siteObj.reportGuid, siteObj.siteDetails).then(function (result) {
            self.showAlert = true;

            if (result.status != undefined && checkStatus.checkCodeInStatusArray(result.status, 'PUT')) {
                self.serviceMessage = result.data.message.userMessage;
                addClassToAlertHtml("error");
                self.defaultView = false;
            } else {

                self.defaultView = true;
                self.serviceMessage = "Site Details Updated";
                fillInformation(result);
                addClassToAlertHtml("success");

            }
        }, function (error) {
            self.defaultView = false;
            self.showAlert = true;
            addClassToAlertHtml("error");

            self.serviceMessage = "error";
        })
    }



}]);;
angular.module('ProjectDashboard').directive('activeClassPortfolio', ['$location', function ($location) {
    return {
        restrict: 'A',
        link: function (scope, elem, attr) {
            var firstIndexUrl = angular.element('#portfolioUlNavigation').children().first().attr('active-class-portfolio');
            if (String($location.path()) === firstIndexUrl) angular.element('#buttonPrevious').hide();
            else angular.element('#buttonPrevious').show();
        }
    }
}])

angular.module('ProjectDashboard').directive('setAppendixTooltip', [function () {
    return {
        link: function (scope, elem, attr) {

            var appendiceCount = attr["appendiceIndexCount"];
            if (attr["appendixcount"] != "0") {
                switch (appendiceCount + 1) {
                    case 1:
                        elem.attr("title", "View files in appendix A:");
                        break;
                    case 2:
                        elem.attr("title", "View files in appendix B:");
                        break;
                    case 3:
                        elem.attr("title", "View files in appendix C:");
                        break;
                    case 4:
                        elem.attr("title", "View files in appendix D:");
                        break;
                    case 5:
                        elem.attr("title", "View files in appendix E:");
                        break;
                    case 6:
                        elem.attr("title", "View files in appendix F:");
                        break;
                    case 7:
                        elem.attr("title", "View files in appendix G:");
                        break;
                    case 8:
                        elem.attr("title", "View files in appendix H:");
                        break;
                    case 9:
                        elem.attr("title", "View files in appendix I:");
                        break;
                    case 10:
                        elem.attr("title", "View files in appendix J:");
                        break;
                    case 11:
                        elem.attr("title", "View files in appendix K:");
                        break;
                    default:
                        elem.attr("title", "View files in appendix");
                }

            }

        }
    }
}])

angular.module('ProjectDashboard').directive('setFlag', [function () {
    return {
        restrict: 'A',
        scope: {
            data: '='
        },
        link: function (scope, elem, attr) {


            var seniorReviewerCount = 0;
            var reportWriterCount = 0;
            var generalCount = 0;
            var addressedCount = 0;

            if (scope.data.commentStatus === 'UNADDRESSED') {
                for (var i = 0; i < scope.data.comments.length; i++) {
                    var srCommentStatus = checkForSeniorReviewerComment(scope.data.comments[i].commentType, scope.data.comments[i].addressed);
                    if (srCommentStatus) {

                        addFlagClass('red');
                        seniorReviewerCount = seniorReviewerCount + 1;
                        generateToolTip(seniorReviewerCount, "SR");
                        return;
                    } else if (!srCommentStatus) {
                        var rwCommentStatus = checkForReportWriterComment(scope.data.comments[i].commentType, scope.data.comments[i].addressed);
                        if (rwCommentStatus) {
                            addFlagClass('blue');
                            reportWriterCount = reportWriterCount + 1;
                            generateToolTip(reportWriterCount, "RW");
                            return;
                        } else if (!rwCommentStatus) {
                            var genCommentStatus = checkForGeneralComment(scope.data.comments[i].commentType, scope.data.comments[i].addressed);
                            if (genCommentStatus) {
                                addFlagClass('black');
                                generalCount = generalCount + 1;
                                generateToolTip(generalCount, "GEN");
                            }
                        }
                    }
                }

            } else if (scope.data.commentStatus === 'ADDRESSED') {
                addFlagClass('green');
                addressedCount = addressedCount + 1;
                generateToolTip(addressedCount, "ADD");
            }

            function generateToolTip(commentCount, role) {
                if (role == "SR") {
                    if (commentCount > 0) {
                        elem.attr("title", "There is at least" + " " + commentCount + " " + "outstanding senior reviewer comment in this report");
                    }
                } else if (role == "RW") {
                    if (commentCount > 0) {
                        elem.attr("title", "There is at least" + " " + commentCount + " " + "outstanding report writer comment in this report");

                    }
                } else if (role == "GEN") {
                    if (commentCount > 0) {
                        elem.attr("title", "There is at least" + " " + commentCount + " " + "outstanding general comment in this report");

                    }
                } else if (role == "ADD") {
                    if (commentCount > 0) {
                        elem.attr("title", "There is at least" + " " + commentCount + " " + "addressed comment in this report");

                    }
                }
            }

            function checkForSeniorReviewerComment(commentType, addressed) {
                if (commentType === 'Senior Reviewer' && !addressed) {
                    return true;
                } else {
                    return false;
                }
            }

            function checkForReportWriterComment(commentType, addressed) {
                if (commentType === 'Report Writer' && !addressed) {
                    return true;
                } else {
                    return false;
                }
            }

            function checkForGeneralComment(commentType, addressed) {
                if (commentType === 'General Comment' && !addressed) {
                    return true;
                } else {
                    return false;
                }
            }

            function addFlagClass(color) {
                if (color == "red") {
                    elem.addClass('text-danger');
                    elem.removeClass('blueFlag');
                    elem.removeClass('text-success');
                } else if (color == "blue") {
                    elem.addClass('blueFlag');
                    elem.removeClass('text-danger');
                    elem.removeClass('text-success');
                } else if (color == "black") {
                    elem.removeClass('blueFlag');
                    elem.removeClass('text-danger');
                    elem.removeClass('text-success');
                } else if (color == "green") {
                    elem.addClass('text-success');
                    elem.removeClass('text-danger');
                    elem.removeClass('blueFlag');
                }
            }

        }
    }
}])

angular.module('ProjectDashboard').directive('setSignatureTooltip', [function () {
    return {
        link: function (scope, elem, attr) {
            //console.log("signature " + attr["setSignatureTooltip"]);
            var signatureObject = JSON.parse(attr["setSignatureTooltip"]);
            if (signatureObject.signerAccountGuid != null) {
                elem.attr("title", "Signed by: " + signatureObject.signOffUser.userName);

            } else {
                elem.attr("title", "The " + signatureObject.label + " " + "has not signed the report");
            }
        }
    }
}])

angular.module('ProjectDashboard').directive('displayPopover', ['$location', '$state', function ($location, $state) {
    return {
        restrict: 'A',
        link: function (scope, elem, attr) {

            var column = attr.field;

            var orderStatusObject = JSON.parse(attr.displayPopover);

            switch (column) {
                case "packageOrdered":

                    if (orderStatusObject.packageOrdered || orderStatusObject.packageOrdered == "") {

                        if (orderStatusObject.packageOrdered.toLowerCase() === "shipped") {
                            textForDelivered();

                        } else if (orderStatusObject.packageOrdered === "InProduction") {
                            textForInProduction();
                        } else if (orderStatusObject.packageOrdered === "Shipped-NoCoverage") {
                            textForShippedNoCoverage();
                        } else {
                            textForNotOrdered();
                        }
                    }

                    break;

                case "radiusMapReportWithGeoCheck":
                    if (orderStatusObject.radiusMapReportWithGeocheck || orderStatusObject.radiusMapReportWithGeocheck == "") {

                        if (orderStatusObject.radiusMapReportWithGeocheck.toLowerCase() === "shipped") {
                            textForDelivered();

                        } else if (orderStatusObject.radiusMapReportWithGeocheck === "InProduction") {
                            textForInProduction();
                        } else if (orderStatusObject.radiusMapReportWithGeocheck === "Shipped-NoCoverage") {
                            textForShippedNoCoverage();
                        } else {
                            textForNotOrdered();
                        }
                    }

                    break;

                case "radiusMapReport":
                    if (orderStatusObject.radiusMapReport || orderStatusObject.radiusMapReport == "") {
                        if (orderStatusObject.radiusMapReport.toLowerCase() === "shipped") {
                            textForDelivered();

                        } else if (orderStatusObject.radiusMapReport === "InProduction") {
                            textForInProduction();
                        } else if (orderStatusObject.radiusMapReport === "Shipped-NoCoverage") {
                            textForShippedNoCoverage();
                        } else {
                            textForNotOrdered();
                        }
                    }

                    break;

                case "sanbornMap":
                    if (orderStatusObject.sanbornMap || orderStatusObject.sanbornMap == "") {

                        if (orderStatusObject.sanbornMap.toLowerCase() === "shipped") {
                            textForDelivered();

                        } else if (orderStatusObject.sanbornMap === "InProduction") {
                            textForInProduction();
                        } else if (orderStatusObject.sanbornMap === "Shipped-NoCoverage") {
                            textForShippedNoCoverage();
                        } else {
                            textForNotOrdered();
                        }
                    }

                    break;

                case "cityDirectoryAbstract":
                    if (orderStatusObject.cityDirectoryAbstract || orderStatusObject.cityDirectoryAbstract == "") {
                        if (orderStatusObject.cityDirectoryAbstract.toLowerCase() === "shipped") {
                            textForDelivered();

                        } else if (orderStatusObject.cityDirectoryAbstract === "InProduction") {
                            textForInProduction();
                        } else if (orderStatusObject.cityDirectoryAbstract === "Shipped-NoCoverage") {
                            textForShippedNoCoverage();
                        } else {
                            textForNotOrdered();
                        }
                    }
                    break;

                case "aerialPhoto":
                    if (orderStatusObject.aerialPhotoDecadePackage || orderStatusObject.aerialPhotoDecadePackage == "") {
                        if (orderStatusObject.aerialPhotoDecadePackage.toLowerCase() === "shipped") {
                            textForDelivered();

                        } else if (orderStatusObject.aerialPhotoDecadePackage === "InProduction") {
                            textForInProduction();
                        } else if (orderStatusObject.aerialPhotoDecadePackage === "Shipped-NoCoverage") {
                            textForShippedNoCoverage();
                        } else {
                            textForNotOrdered();
                        }
                    }
                    break;

                case "historicalTopoMap":
                    if (orderStatusObject.historicalTopMmap || orderStatusObject.historicalTopMmap == "") {
                        if (orderStatusObject.historicalTopMmap.toLowerCase() === "shipped") {
                            textForDelivered();

                        } else if (orderStatusObject.historicalTopMmap === "InProduction") {
                            textForInProduction();
                        } else if (orderStatusObject.historicalTopMmap === "Shipped-NoCoverage") {
                            textForShippedNoCoverage();
                        } else {
                            textForNotOrdered();
                        }
                    }
                    break;

                case "lienSearch":
                    if (orderStatusObject.lienSearch || orderStatusObject.lienSearch == "") {
                        if (orderStatusObject.lienSearch.toLowerCase() === "shipped") {
                            textForDelivered();

                        } else if (orderStatusObject.lienSearch === "InProduction") {
                            textForInProduction();
                        } else if (orderStatusObject.lienSearch === "Shipped-NoCoverage") {
                            textForShippedNoCoverage();
                        } else {
                            textForNotOrdered();
                        }


                    }
                    break;
            }





            function textForDelivered() {


                elem.attr("title", "Processing");
                elem.attr("data-content", "This product is being processed");

            }

            function textForShippedNoCoverage() {

                elem.attr("title", "Shipped-NoCoverage");
                elem.attr("data-content", "This product is Shipped-NoCoverage");

            }

            function textForNotOrdered() {

                elem.attr("title", "Not Ordered");
                elem.attr("data-content", "This product was not ordered");

            }



        }
    }
            }])


angular.module('ProjectDashboard').directive('embedContent', ['$sce', '$compile', '$timeout', function ($sce, $compile, $timeout) {
    return {
        restrict: 'A',
        scope: {
            appendixobject: '=',
            appendixlist: '='
        },

        link: function (scope, elem, attr) {
            elem.bind('click', function () {
                $('#embeddedUrl').remove();
                scope.appendixlist.displayDoc = true;

                if (scope.appendixobject.downloadURl == undefined)
                    scope.url = $sce.trustAsResourceUrl(scope.appendixobject.downloadURL);
                else
                    scope.url = $sce.trustAsResourceUrl(scope.appendixobject.downloadURl);

                var html = '<embed id="embeddedUrl"  ng-src = "{{url}}" style= "width:100%;height:100%"></embed>';
                var compiledHtml = $compile(html)(scope);
                $timeout(function () {
                    angular.element('#bottom-content').append(compiledHtml);
                }, 1000);
            })

        }
    }
}])

angular.module('ProjectDashboard').directive('resizer', function ($document) {

    return function ($scope, $element, $attrs) {

        $element.on('mousedown', function (event) {
            event.preventDefault();

            $document.on('mousemove', mousemove);
            $document.on('mouseup', mouseup);
        });

        function mousemove(event) {

            if ($attrs.resizer == 'vertical') {
                // Handle vertical resizer
                var x = event.pageX;

                if ($attrs.resizerMax && x > $attrs.resizerMax) {
                    x = parseInt($attrs.resizerMax);
                }

                $element.css({
                    left: x + 'px'
                });

                $($attrs.resizerLeft).css({
                    width: x + 'px'
                });
                $($attrs.resizerRight).css({
                    left: (x + parseInt($attrs.resizerWidth)) + 'px'
                });

            } else {
                // Handle horizontal resizer
                var y = window.innerHeight - event.pageY;

                $element.css({
                    bottom: y + 'px'
                });

                $($attrs.resizerTop).css({
                    bottom: (y + parseInt($attrs.resizerHeight)) + 'px'
                });
                $($attrs.resizerBottom).css({
                    height: y + 'px'
                });
            }
        }

        function mouseup() {
            $document.unbind('mousemove', mousemove);
            $document.unbind('mouseup', mouseup);
        }
    };
});;
angular.module('ProjectDashboard').factory('projectDashboardOperations', ['$http', '$log', 'getProjectDashboardUrls', '$modal', 'BASEURL', 'APIFactory', function ($http, $log, getProjectDashboardUrls, $modal, BASEURL, APIFactory) {

        var factory = {};

        var searchTerm = "";
        var reportStatus = [];


        function formatUrl(url, queryParams) {
            if (!queryParams) return url;

            for (var param in queryParams) {
                url = url.replace("{" + param + "}", queryParams[param]);
            }
            return url;
        };
        var getDashboardDataUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationGetProjectDetails;
        var updateProjectInformationUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationUpdateProjectDetails;
        var getAddReportsDataUrl = BASEURL.parcelPOC + getProjectDashboardUrls.getDataForAddingReports;
        var getProjectListUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationProjectList;
        var addReportsToProject = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationAddReportsToProject;
        var getProjectSearchUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationGetProjectSearchList;
        var getPDFUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationGetPdfList;
        var getProjectInPorfolioUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationGetPortfolioProjects;
        var getSearchedPortfolioProjectsUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationSearchedPortfolioProjects;
        var getProjectReports = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationGetProjectReports;
        var getTOCData = BASEURL.reportWritingPOC + getProjectDashboardUrls.realImplementationGetTOC;
        var localStorageObjectUrl = getProjectDashboardUrls.portfolioLocalStorageObject;
        var getReportOrderListUrl = BASEURL.EDR_ORDER + getProjectDashboardUrls.realImplementationGetReportOrdersList;
        var getProjectOrderListUrl = BASEURL.EDR_ORDER + getProjectDashboardUrls.realImplementationGetProjectOrdersList;
        var getEDRStatusPageUrl = BASEURL.GET_EDRSTATUSPAGE + getProjectDashboardUrls.realImplementationGetEDRStatusPage;
        var getSpecificCountryUrl = BASEURL.REPORTAUTHORING_GEODEV + getProjectDashboardUrls.realImpemenationSpecificCountryUrl;
        var getLatLongFromGeocodeUrl = BASEURL.REPORTAUTHORING_GEODEV + getProjectDashboardUrls.realImplementationGetLatLongUrl;
        var getProjectSignOffUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationGetProjectSignoff;
        var deleteProjectSignOffUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationDeleteReportSignOff;
        var updateProjectSignOffUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationUpdateSignatures;
        var addProjectSignOffUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationAddSignatures;
        var searchProjectReports = BASEURL.REPORTAUTHORING + getProjectDashboardUrls.realImplementationSearchProjectReports;

        factory.getCountryObject = function (countryCode) {
            var params = {
                code: countryCode
            }
            var uri = formatUrl(getSpecificCountryUrl, params);
            return $http.get(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {

                return response.data;
            }, function (error) {

                return error;
            });

        }

        factory.getLatLongFromGeocode = function (addressObject) {
            var params = {
                sitename: addressObject.sitename,
                address1: addressObject.address,
                city: addressObject.city,
                state: addressObject.state,
                country: addressObject.country,
                zipcode: addressObject.zipcode
            }
            var uri = formatUrl(getLatLongFromGeocodeUrl, params);
            return $http.get(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {

                return response.data;
            }, function (error) {

                return error;
            });

        }

        factory.geEDRStatusPage = function () {


            var uri = formatUrl(getEDRStatusPageUrl);

            return $http.get(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {

                return response.data;
            }, function (error) {

                return error;
            });

        }


        factory.getReportOrderList = function (reportGuid) {

            var params = {
                reportGuid: reportGuid
                    //reportGuid: '984F87C2-9FE9-4C99-9055-C7E308A477EA'
                    //reportGuid: 'B0FCB7AE-CBF6-11E5-B5C1-0E29ED3D2A45'
            }
            var uri = formatUrl(getReportOrderListUrl, params);

            return $http.get(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {

                return response.data;
            }, function (error) {

                return error;
            });

        }

        factory.getProjectOrderList = function (projectGuid) {

            var params = {
                projectGuid: projectGuid
            }
            var uri = formatUrl(getProjectOrderListUrl, params);
            /*var uri = "http://apidev.edrcore.com/edrorderingservice/edrorders/project/0DB016E2-92A4-11E5-8226-0E29ED3D2A45"*/

            return $http.get(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {

                return response.data;
            }, function (error) {

                return error;
            });

        }


        factory.getTOC = function (reportGuid) {
            var params = {
                reportGuid: 'A560B5D0-8CEF-11E5-8226-0E29ED3D2A45'
            }
            var uri = formatUrl(getTOCData, params);
            return $http.get(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {

                return response.data;
            }, function (error) {

                return error;
            });
        }

        factory.getLocalStorageObject = function () {
            return $http.get(localStorageObjectUrl).then(function (response) {
                return response;
            })
        }

        factory.getProjectReports = function (projectGuid) {
            var params = {
                projectGuid: projectGuid
            }
            var uri = formatUrl(getProjectReports, params);
            return $http.get(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {
                return response.data;
            }, function (error) {

                return error;
            });
        }

        factory.getProjectReportsWithPagination = function (obj) {
            var params = {
                projectGuid: obj.projectGuid,
                limit: obj.limit,
                offset: obj.offset,
                query: ''
            }

            if (obj.term != null) {
                params.query = obj.term
            }

            var uri = formatUrl(searchProjectReports, params);
            return $http.get(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {
                return response.data;
            }, function (error) {
                return error;
            });
        }

        factory.geCountriesData = function () {


            var uri = 'app/modules/SharedModules/countrySelect/geoLocationCountries.json';
            return $http.get(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {
                return response.data;
            }, function (error) {

                return error;
            });

        }

        factory.getStatesData = function (countryObject) {

            if (countryObject.code === 'US')
                var uri = 'app/modules/SharedModules/countrySelect/states/states_US.json';
            else if (countryObject.code === 'CA')
                var uri = 'app/modules/SharedModules/countrySelect/states/states_Canada.json';
            return $http.get(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {


                return response.data;

            }, function (error) {

                return error;
            });

        }


        factory.getProjectListData = function (obj) {

            if (obj) {
                var params = {
                    limit: obj.limit,
                    offset: obj.offset
                }
                var uri = formatUrl(getProjectListUrl, params);
            } else {
                var uri = getProjectListUrl.split('?')[0];
            }

            return $http.get(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {
                return response.data;
            }, function (error) {

                return error;
            });

        }


        factory.getProjectsForPortfolio = function (obj) {

            try {
                var params = {
                    limit: obj.limit,
                    offset: obj.offset,

                    filter: obj.filterText
                }
                var uri = formatUrl(getProjectInPorfolioUrl, params);

                return $http.get(uri, {
                    headers: {
                        'Content-Type': undefined,
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (response) {
                    var time = response.config.responseTimestamp - response.config.requestTimestamp;
                    console.log('The request took ' + (time / 1000) + ' seconds.');

                    return response.data;
                }, function (error) {

                    return error;
                });
            } catch (e) {

            }
        }


        factory.getProjectSearchData = function (obj) {
            try {
                var params = {
                    projectname: obj.projectName,
                    limit: obj.limit,
                    offset: obj.offset
                }

                var uri = formatUrl(getProjectSearchUrl, params);

                return $http.get(uri, {
                    headers: {
                        'Content-Type': undefined,
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (response) {
                    var time = response.config.responseTimestamp - response.config.requestTimestamp;
                    console.log('The request took ' + (time / 1000) + ' seconds.');

                    return response.data;
                }, function (error) {

                    return error;
                });
            } catch (e) {

            }
        };

        factory.getSearchedPortfolioProjects = function (obj) {
            try {
                var params = {
                    limit: obj.limit,
                    offset: obj.offset,
                    projectname: obj.projectName,
                    filter: obj.filterText

                }
                var uri = formatUrl(getSearchedPortfolioProjectsUrl, params);

                return $http.get(uri, {
                    headers: {
                        'Content-Type': undefined,
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (response) {
                    var time = response.config.responseTimestamp - response.config.requestTimestamp;
                    console.log('The request took ' + (time / 1000) + ' seconds.');

                    return response.data;
                }, function (error) {

                    return error;
                });
            } catch (e) {

            }
        };

        factory.updateProjectData = function (projectGuid, object) {
            return $http.put(updateProjectInformationUrl + projectGuid, object, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {
                return response.data;
            }, function (error) {

                return error;
            });

        }

        factory.updateReportStatus = function (object, reportGuid) {

            var status = [];
            status.push({
                'reportGuid': reportGuid,
                'statusGuid': object[0].reportStatusGuid,
                'isLocked': 0
            });
            var obj = {};
            obj.status = status;

            return $http.put('http://private-9f95d-parcelreportsapi.apiary-mock.com/reportstatus', obj, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {
                return response.data;
            }, function (error) {

                return error;
            });

        }
        factory.deleteReport = function (reportGuid) {



            return $http.delete('http://private-9f95d-parcelreportsapi.apiary-mock.com/reports/' + reportGuid, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {
                return response;
            }, function (error) {

                return error;
            });

        }



        factory.getData = function (projectGuid, accountGuid) {
            try {
                var params = {
                    projectGuid: projectGuid,
                    accountGuid: accountGuid
                }
                var uri = formatUrl(getDashboardDataUrl, params);

                return $http.get(uri, {
                    headers: {
                        'Content-Type': undefined,
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (response) {
                    var time = response.config.responseTimestamp - response.config.requestTimestamp;
                    console.log('The request took ' + (time / 1000) + ' seconds.');
                    reportStatus = response.data.dashboard.desc.reportStatusList;
                    return response.data;
                }, function (error) {

                    return error;
                });
            } catch (e) {

            }
        };

        factory.getReportStatusArray = function () {
            return reportStatus;
        }

        factory.setTerm = function (term) {
            searchTerm = term;
        }

        factory.getTerm = function (term) {
            return term;
        }


        factory.getAppendixFiles = function (reportID, sectionID) {
            try {

                return $http.get('http://private-2a2be-parcelappendixapi.apiary-mock.com/appendices/' + reportID + '/' + sectionID + '/files', {
                    headers: {
                        'Content-Type': undefined,
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (response) {

                    return response.data;
                }, function (error) {

                    return error;
                });
            } catch (e) {

            }
        };


        factory.getAppendixPhoto = function (reportID, sectionID) {
            try {

                return $http.get('http://private-2a2be-parcelappendixapi.apiary-mock.com/photos/' + self.reportID + '/' + self.sectionID, {
                    headers: {
                        'Content-Type': undefined,
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (response) {

                    return response;
                }, function (error) {

                    return error;
                });
            } catch (e) {

            }
        };


        factory.getLatitudeLongitude = function (address, callback) {

            geocoder = new google.maps.Geocoder();

            var coordinates;


            geocoder.geocode({
                address: address
            }, function (result, status) {
                console.log("API stats " + status)
                if (result != null && result.length != 0) {
                    coordinates = [result[0].geometry.location.lat(), result[0].geometry.location.lng()]
                    callback(coordinates, status);
                } else {
                    callback(["", ""], "Invalid Address");
                }

            })
        }

        factory.mapGlobalSettings = function (lat, lng, zoomlevel, mapType, elmentId) {

            var latlng = new google.maps.LatLng(lat, lng);
            var mapOptions = {
                zoom: zoomlevel,
                center: latlng,
                mapTypeId: mapType
            }
            var obj = {
                geocoder: new google.maps.Geocoder(),
                map: new google.maps.Map($("#mapCanvas")[0], mapOptions),
                bounds: new google.maps.LatLngBounds(),
                infowindow: new google.maps.InfoWindow({})
            }


            return obj;

        }


        factory.openPopUp = function ($scope, size, resolve, module, backdrop) {

            var modalInstance = $modal.open({
                templateUrl: getTemplate(module),

                controller: getController(module),

                size: size,
                resolve: resolve,
                backdrop: backdrop



            });

            modalInstance.result.then(function (result) {

                if (result)
                    $scope.$broadcast('event:data-updated');


            });
        }

        function getTemplate(module) {
            switch (module) {

                case "openSiteDetails":
                    return 'app/modules/ProjectDashboard/views/siteDetails.html'
                    break;
                case "sendEmail":
                    break;
                case "reportStatus":
                    return 'app/modules/ProjectDashboard/views/reportStatus.html'
                    break;
                case "deleteReport":
                    return 'app/modules/ProjectDashboard/views/deleteReport.html'
                    break;
                case "reportSignOff":
                    return 'app/modules/ProjectDashboard/views/reportSignOff.html'
                    break;
                case "findContact":
                    return 'app/modules/ProjectDashboard/views/findContact.html'
                    break;
                case "createTeam":
                    return 'app/modules/ProjectDashboard/views/createTeam.html'
                    break;

            }
        }

        function getController(module) {
            switch (module) {

                case "openSiteDetails":
                    return 'SiteDetailsController as siteDetails'
                    break;
                case "sendEmail":
                    break;
                case "reportStatus":
                    return 'ReportStatusController as reportStatus'
                    break;
                case "deleteReport":
                    return 'DeleteReportController as deleteReport'
                    break;
                case "reportSignOff":
                    return 'ReportSignOffController as reportSignOff'
                    break;
                case "findContact":
                    return 'FindContact as findContact'
                    break;
                case 'createTeam':
                    return 'CreateTeam as createTeam'
                    break;

            }
        }

        factory.getPDF = function (projectGuid, accountGuid) {
            try {

                var params = {
                    projectGuid: projectGuid,
                    accountGuid: accountGuid
                }
                var uri = formatUrl(getPDFUrl, params);
                return $http.get(uri, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (response) {

                    return response.data;
                }, function (error) {

                    return error;
                });
            } catch (e) {

            }
        };



        factory.getDataForAddingReports = function (companyGuid, userGuid) {
            try {
                var params = {
                    companyGUID: companyGuid,
                    userGUID: userGuid
                }
                var uri = formatUrl(getAddReportsDataUrl, params);

                return $http.get(uri, {
                    headers: {
                        'Content-Type': undefined,
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (response) {
                    var time = response.config.responseTimestamp - response.config.requestTimestamp;
                    console.log('The request took ' + (time / 1000) + ' seconds.');
                    //reportStatus = response.data.dashboard.desc.reportStatusList;
                    return response.data;
                }, function (error) {

                    return error;
                });
            } catch (e) {

            }
        };

        factory.addReportsToProperty = function (object) {
            return $http.post(addReportsToProject, object, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {
                return response.data;
            }, function (error) {

                return error;
            });

        }

        //Project SignOff
        factory.getProjectSignOffData = function (projectGuid, accountGuid) {
            try {
                var params = {
                    projectGuid: projectGuid
                        //accountGuid: accountGuid
                }
                var uri = formatUrl(getProjectSignOffUrl, params);

                return $http.get(uri, {
                    headers: {
                        'Content-Type': undefined,
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (response) {
                    var time = response.config.responseTimestamp - response.config.requestTimestamp;
                    console.log('The request took ' + (time / 1000) + ' seconds.');
                    //reportStatus = response.data.dashboard.desc.reportStatusList;
                    return response.data;
                }, function (error) {

                    return error;
                });
            } catch (e) {

            }
        };

        factory.createProjectSignoffs = function (requestData) {
            try {

                var uri = formatUrl(addProjectSignOffUrl);
                return $http.post(uri, requestData, {
                    //data: requestData,
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (response) {
                    return response.data;
                }, function (error) {

                    return error;
                });
            } catch (e) {

            }
        }

        factory.updateProjectSignoffs = function (requestData) {
            try {

                var uri = formatUrl(updateProjectSignOffUrl);
                return $http.put(uri, requestData, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (response) {


                    return response.data;
                }, function (error) {

                    return error;
                });
            } catch (e) {

            }
        }

        factory.deleteProjectSignoffs = function (requestData) {
            try {
                var uri = formatUrl(deleteProjectSignOffUrl);
                return $http.delete(uri, {
                    data: requestData,
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': 0
                    }
                }).then(function (response) {
                    return response.data;
                }, function (error) {

                    return error;
                });
            } catch (e) {

            }
        }

        factory.createTeam = function () {

            }
            //End Project SignOff

        return factory;
}
]);;
angular.module('ProjectDashboard').factory('reportGridDataOperations', ['$http', '$log', 'getProjectDashboardUrls', 'BASEURL', function ($http, $log, getProjectDashboardUrls, BASEURL) {

    var factory = {};



    function formatUrl(url, queryParams) {
        if (!queryParams) return url;

        for (var param in queryParams) {
            url = url.replace("{" + param + "}", queryParams[param]);
        }
        return url;
    };
    var getSiteDetailsUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationGetSiteDetils;
    var updateSiteDetailsUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationUpdatesiteDetails;
    var updateReportStatusUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationUpdateReportStatus;
    var getReportSignatureUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplemetationGetSignatureDetails;
    var getDeleteReportsUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplemetationDeleteReports;
    var updateTaskDetailsUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationUpdateTasks;
    var signatureUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationSignatures;
    var createSignatureUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationAddSignatures;
    var updateSignatureUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationUpdateSignatures;
    var deleteSignatureUrl = BASEURL.parcelPOC + getProjectDashboardUrls.realImplementationDeleteSignatures;
    var getAppendicesContent = BASEURL.appendicesPOC + getProjectDashboardUrls.realImplementationGetAppendices;
    var getTOCData = BASEURL.reportWritingPOC + getProjectDashboardUrls.realImplementationGetTOC;
    var sendEmailUrl = BASEURL.messagingServicePOC +
        getProjectDashboardUrls.realImplementationSendMail;

    factory.sendEmail = function (obj) {

        return $http.post(sendEmailUrl, obj, {
            headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': 0
            }
        }).then(function (response) {

            return response.data;
        }, function (error) {

            return error;
        });
    }
    factory.getTOC = function (reportGuid, depth) {
        var params = {
            reportGuid: '67ACF400-BB4E-11E5-B5C1-0E29ED3D2A45',
            depth: depth
        }
        var uri = formatUrl(getTOCData, params);
        return $http.get(uri, {
            headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': 0
            }
        }).then(function (response) {

            return response.data;
        }, function (error) {

            return error;
        });
    }

    factory.getAppendixFiles = function (reportGuid, sectionGuid) {
        try {
            var params = {
                reportGuid: reportGuid,
                sectionGuid: sectionGuid
            }
            var uri = formatUrl(getAppendicesContent, params);
            return $http.get(uri, {
                headers: {
                    'Content-Type': undefined,
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {


                return response.data;
            }, function (error) {

                return error;
            });
        } catch (e) {

        }
    }

    factory.getSiteInformation = function (reportGuid) {
        try {
            var params = {
                reportGuid: reportGuid
            }
            var uri = formatUrl(getSiteDetailsUrl, params);
            return $http.get(uri, {
                headers: {
                    'Content-Type': undefined,
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {


                return response.data;
            }, function (error) {

                return error;
            });
        } catch (e) {

        }
    }

    factory.updateSiteInformation = function (reportGuid, obj) {
        try {
            var params = {
                reportGuid: reportGuid
            }
            var uri = formatUrl(updateSiteDetailsUrl, params);
            return $http.put(uri, obj, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {


                return response.data;
            }, function (error) {

                return error;
            });
        } catch (e) {

        }
    }

    factory.updateReportStatus = function (obj) {
        try {

            return $http.put(updateReportStatusUrl, obj, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {


                return response.data;
            }, function (error) {

                return error;
            });
        } catch (e) {

        }
    }


    factory.getReportSignatureDetail = function (reportGuid, reportSignOffGuid) {
        try {

            var params = {
                reportGUID: reportGuid,
                reportsignoffguid: reportSignOffGuid
            }
            var uri = formatUrl(getReportSignatureUrl, params);
            return $http.get(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {


                return response.data;
            }, function (error) {

                return error;
            });
        } catch (e) {

        }
    }



    factory.deleteReports = function (reportGuid) {
        try {
            var params = {
                reportGUID: reportGuid
            }
            var uri = formatUrl(getDeleteReportsUrl, params);
            return $http.delete(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {
                return response.data;
            }, function (error) {
                return error;
            });
        } catch (e) {

        }
    }

    factory.updateTaskStatus = function (obj, projectGuid) {
        try {
            var params = {
                projectGuid: projectGuid

            }
            var uri = formatUrl(updateTaskDetailsUrl, params);
            return $http.put(uri, obj, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {


                return response.data;
            }, function (error) {

                return error;
            });
        } catch (e) {

        }
    }

    factory.createSignature = function (signatureObject) {
        try {


            return $http.post(signatureUrl, signatureObject, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {


                return response.data;
            }, function (error) {

                return error;
            });
        } catch (e) {

        }

    }

    factory.updateSignature = function (obj) {
        try {

            return $http.put(updateSignatureUrl, obj, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {


                return response.data;
            }, function (error) {

                return error;
            });
        } catch (e) {

        }
    }

    factory.deleteSignature = function (reportGuid, signatureGuid) {
        try {
            var params = {
                reportGuid: reportGuid,
                reportsignoffguid: signatureGuid
            }
            var uri = formatUrl(deleteSignatureUrl, params);
            return $http.delete(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {


                return response.data;
            }, function (error) {

                return error;
            });
        } catch (e) {

        }
    }


    return factory;
}]);;
angular.module('ProjectDashboard').constant('getProjectDashboardUrls', {

    mockImplementationGetProjectDetails: 'app/modules/ProjectDashboard/sampleJson/projectDashboardJSON.js.js',
    realImplementationGetProjectDetails: 'dashboard/project/{projectGuid}/{accountGuid}',
    mockImplementationUpdateProjectDetails: '',
    realImplementationUpdateProjectDetails: 'projects/',
    mockImplementationGetsiteDetails: 'reports/',
    realImplementationGetSiteDetils: 'reports/{reportGuid}/location',
    mockImplementationUpdatesiteDetails: 'reports/',
    realImplementationUpdatesiteDetails: 'reports/{reportGuid}/location',
    realImplementationUpdateReportStatus: 'reportstatus/',
    realImplemetationGetSignatureDetails: 'reports/{reportGUID}/signoffs/?reportsignoffguid={reportsignoffguid}',
    realImplemetationDeleteReports: 'reports/{reportGUID}',
    getDataForAddingReports: 'projectstartup/{companyGUID}/{userGUID}',
    realImplementationUpdateTasks: 'dashboard/tasks/{projectGuid}',
    realImplementationProjectList: 'projects?limit={limit}&offset={offset}',
    realImplementationAddReportsToProject: 'addreporttoproject',

    realImplementationGetProjectSearchList: 'projects?projectName={projectname}&limit={limit}&offset={offset}',
    realImplementationGetPdfList: 'dashboard/project/{projectGuid}/{accountGuid}?outputType=PDF',
    realImplementationAddSignatures: 'reports/signoffs',
    realImplementationUpdateSignatures: 'reports/signoffs',
    realImplementationSignatures: 'reports/signoffs/',

    realImplementationDeleteSignatures: 'reports/{reportGuid}/signoffs/{reportsignoffguid}',
    realImplementationGetPortfolioProjects: 'projects?filter={filter}&limit={limit}&offset={offset}',
    realImplementationSearchedPortfolioProjects: 'projects?filter={filter}&projectName={projectname}&limit={limit}&offset={offset}',
    realImplementationGetProjectReports: 'projects/{projectGuid}/reports',
    realImplementationGetTOC: 'tableofcontents?reportGUID={reportGuid}&depth={depth}',
    portfolioLocalStorageObject: 'app/modules/ProjectDashboard/staticdata/localStorageObject.js',
    realImplementationGetAppendices: 'appendices/{reportGuid}/{sectionGuid}/content',
    realImplementationGetReportOrdersList: 'order/{reportGuid}',
    realImplementationGetProjectOrdersList: 'project/{projectGuid}',
    realImplementationGetEDRStatusPage: 'edrorders/order/orderGuid/transferUrl',
    realImplementationSendMail: 'messages/',
    realImpemenationSpecificCountryUrl: 'countries/{code}',
    realImplementationGetLatLongUrl: 'addresses?sitename={sitename}&address1={address1}&city={city}&state={state}&country={country}&zipcode={zipcode}',

    realImplementationGetProjectSignoff: 'reports/signoffs/project/{projectGuid}',
    mockImplementationGetProjectSignoffJSON: 'app/modules/ProjectDashboard/staticdata/projectSignoffJSON.js',
    realImplementationDeleteReportSignOff: 'reports/signoffs',
    realImplementationSearchProjectReports: 'projects/{projectGuid}?query={query}&limit={limit}&offset={offset}',
})


; // define module
angular.module('ReportAuthoring', ['ui.router.state', 'ui.bootstrap', 'ui.tinymce', 'xeditable', 'angularFileUpload', 'ui.sortable', 'ngSanitize', 'ngFileUpload']);

// routers
angular.module('ReportAuthoring').config(['$stateProvider', '$urlRouterProvider', 'AppendixTools',
    function ($stateProvider, $urlRouterProvider, AppendixTools) {
        $urlRouterProvider.otherwise('/');

        var baseViewsFolder = 'app/modules/ReportAuthoring/views/';

        $stateProvider.state('edrPortfolioOrder', {
                url: '/EDRPortfolioOrder?projectGuid',
                templateUrl: baseViewsFolder + 'edrPortfolioOrder.html',
                controller: "EDRPortfolioOrderController as portfolioOrderController",
                data: {
                    pageTitle: "EDR Portfolio Order"
                },
                resolve: {
                    portfolioData: function ($stateParams, projectDashboardOperations) {
                        return projectDashboardOperations.getProjectReports($stateParams.projectGuid).then(function (response) {
                            return response;
                        });
                    },
                    edrPackages: function (BASEURL, edrOrderAPI) {
                        return edrOrderAPI.getPortfolioProducts(BASEURL.companyGUID_GI).then(function (resp) {
                            return (resp.portfolioProducts != undefined) ? resp.portfolioProducts : [];
                        });
                    }
                }
            })
            .state('ReportAuthoring', {
                url: '/ReportAuthoring?projectGuid&reportGuid&siteID',
                templateUrl: baseViewsFolder + 'simplifiedReport.html'
            })
            .state('ReportAuthoring.Setup', {
                url: '/Setup',
                templateUrl: baseViewsFolder + 'setup.html'
            })
            .state('ReportAuthoring.Appendices', {
                url: '/Appendices',
                templateUrl: baseViewsFolder + 'appendices.html'
            })
            .state('ReportAuthoring.Sign', {
                url: '/Sign',
                templateUrl: baseViewsFolder + 'sign.html'
            })
            .state('ReportAuthoring.Assemble', {
                url: '/Assemble',
                templateUrl: baseViewsFolder + 'assemble.html'
            })
            .state('ReportAuthoring.Write', {
                url: '/Write?sectionGuid',
                // url: '/Write',
                templateUrl: baseViewsFolder + 'reportWrite.html'
                    //            ,
                    //                resolve: {
                    //
                    //                    reportingObject: function () {
                    //
                    //                        return ['', '']
                    //                    }
                    //                }

            })
            .state('generalInformation', {
                url: '/GeneralInformation?sectionGuid&projectGuid&reportGuid',
                templateUrl: baseViewsFolder + 'generalInformationForm.html',
                controller: "generalInformationFormController as generalInformationForm",
                data: {
                    pageTitle: "General Information / PARCEL"
                }
            })
            .state('llpQuestionnaire', {
                url: '/llpQuestionnaire',
                templateUrl: AppendixTools["appendixtools/questionnaire"].templateUrl,
                controller: AppendixTools["appendixtools/questionnaire"].controller,
                params: {
                    modalData: {
                        refreshAfter: false
                    }
                }
            })
            .state('adaChecklist', {
                url: '/adaChecklist',
                templateUrl: AppendixTools["appendixtools/addADAChecklist"].templateUrl,
                controller: AppendixTools["appendixtools/addADAChecklist"].controller,
                params: {
                    modalData: {
                        refreshAfter: false
                    }
                }
            })
            .state('ReportAuthoring.CostTable', {
                url: '/RecommendationSummary?SiteId&tableType&packageId&tableId',
                templateUrl: function ($stateParams) {
                    return 'app/modules/ReportAuthoring/directives/costTables/reports/' + $stateParams.tableType + '/' + $stateParams.tableType + 'TableView.html';
                },
                controller: 'CostTablesListController as recommendationSummary',
                'resolve': {
                    tableData: ['$http', '$stateParams', 'ReportAuthoringAPI', function ($http, $stateParams, ReportAuthoringAPI) {

                        return ReportAuthoringAPI.getCostTableData($stateParams.SiteId, $stateParams.packageId, $stateParams.tableId).then(function (result) {
                            console.log("result " + JSON.stringify(result));

                            return result;
                        })

                    }]
                }
            })
            .state('projectDocs', {
                'url': '/projectDocuments?projectGuid&companyGuid',
                'controller': 'ProjectDocumentsController',
                'templateUrl': 'app/modules/ProjectCreation/views/projectDocuments.html'
            })
        }]);
angular.module('ReportAuthoring').run(function (editableOptions) {
    editableOptions.theme = 'bs3';
});

angular.module('ReportAuthoring').constant('PerformedOperation', {
    ADD: 'ADD',
    EDIT: 'EDIT',
    REORDER: 'REORDER',
    DEFAULTINSERT: 'DEFAULTINSERT',
    DELETE: 'DELETE',
    DELETETABLE: 'DELETETABLE'
});;
angular.module('ReportAuthoring').directive('associatePhotos', ['associatePhotosAPI', '$rootScope', '$window', 'BASEURL', 'ReportAuthoringAPI', 'AppendixAPI', '$stateParams', function (associatePhotosAPI, $rootScope, $window, BASEURL, ReportAuthoringAPI, AppendixAPI, $stateParams) {
    return {
        restrict: 'A',
        replace: true,
        transclude: false,

        templateUrl: 'app/modules/ReportAuthoring/directives/associatePhotos/associatePhotosView.html',
        scope: {
            data: '=apData'
        },

        controller: ['$scope', '$modal', function ($scope, $modal) {
            $scope.associatePhotosEnabled = $scope.data ? $scope.data.enabled : false;
            $scope.associatedImages = $scope.data && $scope.data.associated ? $scope.data.associated : [];

            $scope.reportID = $stateParams.reportGuid;


            $scope.getImageCollection = function (reportID, sectionGUID) {
                var promise = associatePhotosAPI.getImageColl(reportID, sectionGUID);
                promise.then(function (collection) {
                    $scope.imageColl = collection;
                    createImageColl(collection);
                    setSelectedInColl($scope.associatedImages, $scope.imageColl);

                }, function (error) {
                    //alert('Error in getting images' + error);

                });
            }

            function createImageColl(collections) {
                var arrCollections = [];
                var collection = {};
                angular.forEach(collections, function (item, index) {

                    $scope.imageColl[index].url = BASEURL.REPORTAUTHORING_APPENDICES_COREFILES + '/files/' + item.fileGuid + '/stream';
                    $scope.imageColl[index].name = $scope.imageColl[index].caption;
                });
                //return arrCollections;
            }
            $scope.getAssociatedImages = function () {
                var promise = associatePhotosAPI.getImageColl();
                promise.then(function (collection) {
                    $scope.imageColl = collection;
                    setSelectedInColl($scope.associatedImages, $scope.imageColl);

                }, function (error) {
                    //alert('Error in getting images' + error);
                });
            }
            var setSelectedInColl = function (selectedList, coll) {
                if (!coll || !coll.length) return;
                if (!selectedList || !selectedList.length) return;

                for (var i = 0; i < coll.length; i++) {
                    var local = coll[i];
                    for (var j = 0; j < selectedList.length; j++) {
                        var selected = selectedList[j];
                        if (local.url == selected.url) {
                            coll[i] = selectedList[j];
                            coll[i].selected = true;
                            break;
                        }
                    }
                }
            }

            $scope.duplicateRow = function () {
                console.log("sd");
            }

            $scope.enableRename = function (associatedImg) {
                associatedImg.renameAction = true;
                associatedImg.renamed = associatedImg.name;
            }
            $scope.cancelRename = function (associatedImg) {
                associatedImg.renameAction = false;
            }


            $scope.renameImg = function (associatedImg, index) {
                console.log($scope.$parent);
                console.log($scope.$parent.contentValues.associatPhotos.associated)
                var breakLoop = false;
                $scope.$parent.contentValues.associatPhotos.associated[index].name = associatedImg.renamed;
                associatedImg.name = associatedImg.renamed;

                var data = {
                    "formSectionData": [
                        {
                            "sectionGUID": $scope.$parent.sectionGUID,
                            "sectionData": {
                                "contentValues": $scope.$parent.contentValues

                            }
							   }]
                };


                ReportAuthoringAPI.updateSection($scope.reportID, $scope.$parent.sectionGUID, data)


                associatedImg.renameAction = false;
            }

            $scope.getImageCollectionForAllSection = function () {


                var appendixTocPhotoSections = JSON.parse($window.sessionStorage.getItem("appendixTocPhotoSections"));
                angular.forEach(appendixTocPhotoSections.appendixsectionGuidlist, function (secGuid) {

                    $scope.getImageCollection($scope.reportID, secGuid);
                });
            }

            var init = function () {

                /*var appendixTocPhotoSections=JSON.parse($window.sessionStorage.getItem("appendixTocPhotoSections"));
                angular.forEach(appendixTocPhotoSections.appendixsectionGuidlist,function(secGuid)
                			   {
*/
                var appendixTocPhotoSections = JSON.parse($window.sessionStorage.getItem("appendixTocPhotoSections"));
                angular.forEach(appendixTocPhotoSections.appendixsectionGuidlist, function (secGuid) {


                    $scope.getImageCollection($scope.reportID, secGuid);
                });
            }

            var init = function () {
                $scope.getImageCollectionForAllSection();
            }
            init();

            $scope.selectImages = function () {
                $scope.selectImgAction = true;
                $scope.modalContainer = {
                    selectedImgs: $scope.associatedImages
                };

                var modalInstance = $modal.open({
                    templateUrl: 'associateImageAction.html',
                    scope: $scope,
                    controller: selectImagesController,
                    size: 'lg',
                    windowClass: 'app-modal-window',
                    resolve: {
                        selectedImages: function () {
                            return $scope.associatedImages;
                        }
                    }
                });

                modalInstance.result.then(function () {
                    //$scope.associatedImages = result;
                })
            }

            var selectImagesController = function ($scope, $modalInstance, selectedImages) {
                console.log(selectedImages)
                $scope.refreshPhotos = function () {
                    //$scope.getImageCollection($scope.reportID, $scope.tempsectionGUID);
                    $scope.getImageCollectionForAllSection();

                };

                $scope.close = function () {
                    $modalInstance.close();
                }

                $scope.saveAssociations = function () {

                    var saveAssociatedImageColl = [];

                    selectedImages.splice(0, selectedImages.length);
                    angular.forEach($scope.imageColl, function (imgObject) {

                        if (imgObject.selected) {
                            var saveAssociatedImageObj = {};
                            saveAssociatedImageObj.name = imgObject.name;
                            saveAssociatedImageObj.url = imgObject.url;
                            saveAssociatedImageColl.push(saveAssociatedImageObj);
                            selectedImages.push(imgObject);
                        }

                    });

                    $scope.$parent.$parent.contentValues.associatPhotos.associated = saveAssociatedImageColl;
                    var data = {
                        "formSectionData": [
                            {
                                "sectionGUID": $scope.$parent.$parent.sectionGUID,
                                "sectionData": {
                                    "contentValues": $scope.$parent.$parent.contentValues

                                }
							   }]
                    };


                    ReportAuthoringAPI.updateSection($scope.reportID, $scope.$parent.$parent.sectionGUID, data)

                    $modalInstance.close();
                };

            }


        }]
    }
}]);

/*
angular.module('ReportAuthoring').directive('clInlineEdit', function() {
    return {
        restrict: 'A',
        scope: {
            clModelData: '=',
            clValPlaceholder: '@',
            clExpStyle: '@'
        },
        transclude: true,
        replace: true,
        template: '<div><style>.inline-edit {    border: 0px;    outline: 0px;    margin: 0px 0px 3px 0px;    background-color: transparent;    box-shadow: inset 0 0px 0px rgba(0,0,0,.075);}.inline-edit:hover {        background-color: #fff;    }.inline-edit:focus {        background-color: #fff;    box-shadow: inset 0px 1px 1px rgba(0,0,0,0.075), 0px 0px 8px rgba(102,175,233,0.6)}</style><input type="text" ng-model="clModelData" placeholder="{{clValPlaceholder}}" class="form-control inline-edit" ng-transclude /></div>',
        link: function(scope, elem, attr) {
            elem[0].style.cssText = attr.clExpStyle;
        }
    };
});*/
;
angular.module('ReportAuthoring').factory('associatePhotosAPI', ['APIFactory', 'BASEURL', 'AppendicesUrlCollection', function (APIFactory, BASEURL, AppendicesUrlCollection) {
    return {
        getImageColl: function (reportID, sectionGUID) {

            var url = BASEURL.appendicesPOC + AppendicesUrlCollection.GETAPI_APPENDIXPHOTOS;
            var params = {
                reportID: reportID,
                sectionGUID: sectionGUID
            };
            return APIFactory.get(url, params).then(function (results) {
                //return results;
                return results.photos;
            })
        },

        get: function (id, sectionId) {


            var url = "app/modules/ReportAuthoring/directives/associatePhotos/sampleJson/associated_{id}_{sectionId}.json";
            var queryParams = {
                id: id,
                sectionId: sectionId
            };
            return APIFactory.get(url, queryParams).then(function (response) {
                return response;
            });
        }
    }
}]);
angular.module('ReportAuthoring').directive('addRecommendation', [function () {
    return {
        restrict: 'A',
        replace: true,
        transclude: false,

        template: '<ng-include src="getTemplateUrl()"/>',
        scope: {
            costTable: '=',
            someCtrlFn: '&callbackFn'
        },

        link: function ($scope, element, attrs) {
            $scope.someCtrlFn({
                arg1: 22
            });
            $scope.getTemplateUrl = function () {
                var templateUrl = 'app/modules/ReportAuthoring/directives/costTables/addRecommendation/recommendationDefault.html';
                return templateUrl;

            }
        },
        controller: ['$scope', '$modal', '$attrs', 'commonFunctionsService', 'defaultFunctionsService', 'freddieMacFunctionsService', 'emgFunctionsService', 'fannieFunctionsService', 'atcFunctionsService', 'sharedService', function ($scope, $modal, $attrs, commonFunctionsService, defaultFunctionsService, freddieMacFunctionsService, emgFunctionsService, fannieFunctionsService, atcFunctionsService, sharedService) {

            $scope.commonFunctionsService = commonFunctionsService;
            init();

            function init() {
                var templateUrl = "";

                $scope.recommendationHeader = $scope.costTable.recommendationHeader;
                getTemplateUrl();
            }

            function getTemplateUrl() {
                templateUrl = sharedService.getTemplateUrl($scope.costTable.type);
            }
            $scope.addRecomendation = function () {

                var modalContainer = {
                    refreshAfter: false,
                    addRecommendationObject: $scope.costTable
                }

                var modalInstance = $modal.open({
                    templateUrl: templateUrl,
                    controller: recommendationPopUpController,
                    size: 'lg',

                    resolve: {
                        dataContainer: function () {
                            return modalContainer;
                        }
                    }
                });

                modalInstance.result.then(function () {

                });
            };

            var recommendationPopUpController = function ($rootScope, $scope, $modalInstance, dataContainer) {

                $scope.commonFunctionsService = commonFunctionsService;
                $scope.recommendation = {};
                $scope.yearlyDistribution = 12;
                $scope.costSpread = {};
                $scope.calculateObj = {};


                $scope.recommendation.recommendationTypes = dataContainer.addRecommendationObject.recommendationTypes;
                $scope.recommendation.groupTypes = dataContainer.addRecommendationObject.groupTypes;
                $scope.recommendation.units = dataContainer.addRecommendationObject.unit;
                $scope.recommendation.conditions = dataContainer.addRecommendationObject.condition;
                $scope.recommendation.actions = dataContainer.addRecommendationObject.action;
                $scope.sectionId = dataContainer.addRecommendationObject.sectionId;

                $scope.addUpdateRecommendation = function () {
                    var newRecommendationobj;

                    switch (dataContainer.addRecommendationObject.type) {
                        case 'displayATC':
                            newRecommendationobj = atcFunctionsService.createRecommendationObject($scope, dataContainer.addRecommendationObject.recommendationHeader);
                            break;
                        case 'displayDefault':
                            newRecommendationobj = defaultFunctionsService.createRecommendationObject($scope, dataContainer.addRecommendationObject.recommendationHeader);
                            break;
                        case 'displayEMG':
                            newRecommendationobj = emgFunctionsService.createRecommendationObject($scope, dataContainer.addRecommendationObject.recommendationHeader);
                            break;
                        case 'displayFannie':
                            newRecommendationobj = fannieFunctionsService.createRecommendationObject($scope, dataContainer.addRecommendationObject.recommendationHeader);
                            break;
                        case 'displayFreddie2015':
                            newRecommendationobj = freddieMacFunctionsService.createRecommendationObject($scope, dataContainer.addRecommendationObject.recommendationHeader);
                            break;
                        case 'displayHUD':

                            break;
                    }

                    $rootScope.$emit('add-recommendationIn-List', {
                        newRecommendation: newRecommendationobj
                    });

                    $scope.close();
                }

                $scope.showCalculator = function (element) {

                    commonFunctionsService.showCalculator($scope);
                }

                $scope.close = function () {
                    $modalInstance.close();
                }

                $scope.showSplitQtyUnit = function () {
                    commonFunctionsService.showSplitQtyUnit($scope);
                }

                $scope.hideSplitQtyUnit = function () {
                    commonFunctionsService.hideSplitQtyUnit();

                }
                $scope.splitsQtyUnits = function () {

                    var unitCost = $scope.recommendation.unitCost;
                    var immedCost = ($scope.costSpread['immed'] = $scope.costSpread['immed'] || {}).val
                    var totalCost = $scope.recommendation.totalCost;

                    if (isNaN(immedCost)) {
                        immedCost = 0;

                    }
                    var reserveCost = totalCost - immedCost;

                    if (unitCost > 0) {
                        var immedQty = immedCost / unitCost;
                        var reserveQty = reserveCost / unitCost;
                        $scope.recommendation.immediateQty = immedQty;
                        $scope.recommendation.reserveQty = reserveQty;
                    }
                    angular.element("a[rel=splitpopover]").popover('hide');
                }


            }
        }]
    }
}]);;
angular.module('ReportAuthoring').factory('atcFunctionsService', ['$filter', function ($filter) {
    var factory = {};
    var recommendationObject = {};
    factory.fillPriorities = function ($scope, dataContainer) {
        if (dataContainer.completeRecommendationObject[0].immed != undefined && dataContainer.completeRecommendationObject[0].immed.include) {
            $scope.costSpread['immed'] = dataContainer.completeRecommendationObject[0].immed;
        }
        if (dataContainer.completeRecommendationObject[0].shortTerm != undefined && dataContainer.completeRecommendationObject[0].shortTerm.include) {
            $scope.costSpread['shortTerm'] = dataContainer.completeRecommendationObject[0].shortTerm;
        }

        if (dataContainer.completeRecommendationObject[0].immedRequired != undefined && dataContainer.completeRecommendationObject[0].immedRequired.include) {
            $scope.immedRequired = dataContainer.completeRecommendationObject[0].immedRequired;
        }
        if (dataContainer.completeRecommendationObject[0].immedRecommended != undefined && dataContainer.completeRecommendationObject[0].immedRecommended.include) {
            $scope.immedRecommended = dataContainer.completeRecommendationObject[0].immedRecommended;
        }
    }


    factory.fillConstantValues = function (self, tableData) {
        self.evalPeriod = tableData.reserveTableConstantValues.evaluationPeriod;
        self.squareFootage = tableData.reserveTableConstantValues.totalSquareFootage;
        self.unInflated = tableData.reserveTableConstantValues.reservePerSFPerYearUninflated;
        self.inflated = tableData.reserveTableConstantValues.reservePerSFPerYearInflated;
        self.totalUninflatedYearWise = tableData.reserveTableConstantValues.totalUninflatedYearWise;
        self.inflationFactorYearWise = tableData.reserveTableConstantValues.inflationFactorYearWise;
        self.totalInflatedYearWise = tableData.reserveTableConstantValues.totalInflatedYearWise;
        self.totalInflated = tableData.reserveTableConstantValues.totalInflated;
        self.totalUninflated = tableData.reserveTableConstantValues.totalUninflated;
    }

    factory.createRecommendationObject = function (self, recommendationHeader) {

        var obj = {};
        obj.recommendationHeader = recommendationHeader;
        obj.recType = self.recommendation.recType.value == "other_" ? {
            value: self.recommendation.recType.value,
            name: self.recommendation.otherRecommendationType
        } : self.recommendation.recType;


        obj.name = self.recommendation.recType.value == "other_" ? self.recommendation.otherRecommendationType : self.recommendation.recType.name;


        obj.eul = self.recommendation.eul;
        obj.eff = self.recommendation.eff;
        obj.rul = self.recommendation.rul;
        obj.quantity = self.recommendation.quantity;
        obj.unit = self.recommendation.unit;
        obj.unitCost = self.recommendation.unitCost;
        obj.cycleReplacement = self.recommendation.cycleReplacement;
        obj.replacePercent = self.recommendation.replacePercent;
        obj.totalCost = self.recommendation.totalCost;
        obj.unallocatedCost = self.recommendation.unallocatedCost;
        if (self.costSpread['immed'].include != undefined && self.costSpread['immed'].include) {
            obj.immed = {};

            obj.immed = self.costSpread['immed'];
            obj.immed.name = "immed";
        }
        if (self.costSpread['shortTerm'].include != undefined && self.costSpread['shortTerm'].include) {
            obj.shortTerm = {};

            obj.shortTerm = self.costSpread['shortTerm'];
            obj.shortTerm.name = "shortTerm";
        }
        if (self.recommendation.immedRequired != undefined && self.recommendation.immedRequired.include) {
            obj.immedRequired = {};

            obj.immedRequired = self.recommendation.immedRequired;
            obj.immedRequired.name = "immedRequired";
        }
        if (self.recommendation.immedRecommended != undefined && self.recommendation.immedRecommended.include) {
            obj.immedRecommended = {};

            obj.immedRecommended = self.recommendation.immedRecommended;
            obj.immedRecommended.name = "immedRecommended";
        }
        obj.yearlyCostSpread = [];
        for (i = 1; i <= self.yearlyDistribution; i++) {
            var x = "yr" + "_" + i;
            if (self.costSpread[x].include != undefined && self.costSpread[x].include) {
                obj.yearlyCostSpread.push(self.costSpread[x]);
                obj.yearlyCostSpread[obj.yearlyCostSpread.length - 1].label = i;
            }
        }
        obj.criticalComments = self.recommendation.criticalComments;
        obj.conditionComments = self.recommendation.conditionComments;

        obj.condition = ["E", "P"];
        obj.action = ["CR", "PR"];
        obj.sectionId = self.sectionId;

        return obj;

    }




    /*
      
    factory.fillOtherDetails = function ($scope,dataContainer){
        $scope.recommendation = dataContainer.completeRecommendationObject[0];
        $scope.recommendation.recommendationTypes = dataContainer.recommendationTypes;

        var selectedRecomendationTypeArr = $filter('filter')(dataContainer.recommendationTypes, {
            name: dataContainer.completeRecommendationObject[0].name
        });


        if (selectedRecomendationTypeArr.length == 0) {
            $scope.recommendation.recType = {
                value: "other_"
            };
            $scope.recommendation.otherRecommendationType = dataContainer.completeRecommendationObject[0].name;
        } else {
            $scope.recommendation.recType = {
                value: selectedRecomendationTypeArr[0].value,
                name: selectedRecomendationTypeArr[0].name
            };

        }
    }
    
    factory.fillYearlyDistribution = function($scope,dataContainer){
        angular.forEach(dataContainer.completeRecommendationObject[0].yearlyCostSpread, function (yearWiseCost, index) {
            $scope.costSpread["yr_" + yearWiseCost.label] = yearWiseCost;
        });
    }
    
    factory.isNumber = function (n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    factory.getNumberArr = function (num) {
        var numVal = parseInt(num);
        return new Array(num);
    }

    
    
    factory.calculateTotalSpreadCost = function ($scope) {
        var valContainer = $scope.costSpread;
        var total = 0;
        for (var spreadFactorLabel in valContainer) {
            var spreadFactor = valContainer[spreadFactorLabel];
            var val = spreadFactor.val;
            var parsedIntVal = parseInt(val);
            if (!parsedIntVal) continue;
            total = total + parsedIntVal;
        }
        return total;
    }

    factory.checkAll = function ($scope) {
        var valContainer = $scope.costSpread;
        for (var spreadFactorLabel in valContainer) {
            if (checkIfSpreadLabelYearly(spreadFactorLabel)) {
                var spreadFactor = valContainer[spreadFactorLabel];
                spreadFactor.include = true;
            }
        }
    }
    factory.uncheckAll = function ($scope) {
        var valContainer = $scope.costSpread;
        for (var spreadFactorLabel in valContainer) {
            if (checkIfSpreadLabelYearly(spreadFactorLabel)) {
                var spreadFactor = valContainer[spreadFactorLabel];
                spreadFactor.include = false;
            }
        }
    }

    function checkIfSpreadLabelYearly(label) {
        return label.startsWith('yr_') // label.startsWith('yr_')
    }
    
     factory.spreadCost = function ($scope) {
        var valContainer = $scope.costSpread;
        var includedCount = 0;
        for (var spreadFactorLabel in valContainer) {
            var spreadFactor = valContainer[spreadFactorLabel];
            var isIncluded = spreadFactor.include;
            if (isIncluded) {
                includedCount++;
            }

            spreadFactor.val = "";
        }

        var totalCost = $scope.recommendation.totalCost;
        var spread = parseInt(totalCost / includedCount);
        var remainder = totalCost % includedCount;

        for (var spreadFactorLabel in valContainer) {
            var spreadFactor = valContainer[spreadFactorLabel];
            var isIncluded = spreadFactor.include;
            if (isIncluded) {
                var toAssign = spread;

                if (remainder) {
                    toAssign++;
                    remainder--;
                }
                spreadFactor.val = toAssign;
            } else {
                spreadFactor.val = "";
            }
        }
    }
    
      factory.fillYearsInTableHeader = function(self,tableData){
        var yearlySpread = tableData.recommendations.evaluationPeriod;
        for (var i = 0; i < yearlySpread; i++) {
            self.years.push(i + 1);
        }
  
    
  
    factory.storeRecommendation = function (obj){
        recommendationObject = obj;
    }
    
    factory.getRecommendation = function (){
        return recommendationObject;
    }
      */

    return factory;
}]);
angular.module('ReportAuthoring').controller('AtcRecommendationController', ['$scope', '$modalInstance', 'ReportAuthoringAPI', 'dataContainer', '$filter', '$rootScope', 'commonFunctionsService', 'atcFunctionsService', function ($scope, $modalInstance, ReportAuthoringAPI, dataContainer, $filter, $rootScope, commonFunctionsService, atcFunctionsService) {

    $scope.commonFunctionsService = commonFunctionsService;

    $scope.yearlyDistribution = 8;
    $scope.calculateObj = {};
    $scope.recommendation = {};
    $scope.costSpread = {};

    function init() {
        if (!$scope.recommendation) return;

        atcFunctionsService.fillPriorities($scope, dataContainer);
        commonFunctionsService.fillOtherDetails($scope, dataContainer);
        commonFunctionsService.fillYearlyDistribution($scope, dataContainer);
    }

    init();

    $scope.addUpdateRecommendation = function () {
        var updateRecommendationobj = {};
        updateRecommendationobj = atcFunctionsService.createRecommendationObject($scope, '');
        var result = ReportAuthoringAPI.addUpdateRecommendation(updateRecommendationobj);
        if (result) {
            $scope.$emit('update-recommendationIn-List', {
                updateRecommendation: updateRecommendationobj
            });
        }
        $scope.close();

    }

    $scope.showCalculator = function (element) {

        commonFunctionsService.showCalculator($scope);
    }

    $scope.close = function () {
        $modalInstance.close();
    }


}]);;
angular.module('ReportAuthoring').directive('atcRecommendationList', ['$rootScope', '$filter', '$timeout', function ($rootScope, $filter, $timeout) {
    return {
        restrict: 'A',
        replace: true,
        transclude: true,
        scope: {
            costTable: '=',
            alertData: '='
        },

        templateUrl: 'app/modules/ReportAuthoring/directives/costTables/atc/recommendationListView.html',


        controller: ['$scope', '$timeout', '$modal', '$attrs', 'ParcelUI.Resources', 'commonFunctionsService', function ($scope, $timeout, $modal, $attrs, ParcelUI_Resources, commonFunctionsService) {
            $scope.sectionId = $scope.costTable.sectionId;
            $scope.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;


            $scope.putBgColor = function (item, index, odd, even) {

                if (index == 0) {
                    item.bgColor = "grey";
                    return "grey";
                } else {
                    if (item.name == "") {
                        if ($scope.tableRows[index - 1].bgColor == "grey") {
                            item.bgColor = "grey";
                            return "grey";
                        }

                        if ($scope.tableRows[index - 1].bgColor == "white") {
                            item.bgColor = "white";
                            return "white";
                        }


                    } else {
                        if ($scope.tableRows[index - 1].bgColor == "grey") {
                            item.bgColor = "white";
                            return "white";
                        }

                        if ($scope.tableRows[index - 1].bgColor == "white") {
                            item.bgColor = "grey";
                            return "grey";
                        }

                    }
                }

            }

            init();

            function init() {
                $scope.atcHeaders = $scope.costTable.listHeaders;

                //create tables

                $scope.tableItems = [];
                if ($scope.costTable.data.length > 0) {
                    $scope.tableItems = $scope.costTable.data;
                }

                $scope.recommendationHeader = $scope.costTable.recommendationHeader;
                $scope.recommendationTypes = $scope.costTable.recommendationTypes;
                $scope.units = $scope.costTable.unit;
                fillListTable({}, "default");
            }

            function fillListTable(obj, operation) {
                $scope.tableRows = [];

                if (JSON.stringify(obj) === '{}' && operation === "default")
                    fillListView($scope.tableItems);
                else if (JSON.stringify(obj) !== '{}' && operation === "update")
                    fillListView($scope.tableItems);
                else if (JSON.stringify(obj) !== '{}' && operation === "insert") {

                    $scope.tableItems = [];
                    if ($scope.recommendationHeader === obj.recommendationHeader) {
                        if ($scope.costTable.data.length > 0) {
                            $scope.tableItems = $scope.costTable.data[0].recommendation;
                        }
                        $scope.tableItems.push(obj);
                        fillListView($scope.tableItems);
                    } else {
                        $scope.tableItems = $scope.costTable.data[0].recommendation;
                        fillListView($scope.tableItems);
                    }
                }

            }

            function fillListView(tableItems) {
                angular.forEach(tableItems, function (tableItem, index) {
                    $scope.check = false;

                    /*
                    if (tableItem.critical != undefined && tableItem.critical.include) {
                        var criticalObj = addColumnsToListView(tableItem, tableItem.critical);
                        $scope.check = true;
                        $scope.tableRows.push(criticalObj);


                    }
                    if (tableItem.priority90Days != undefined &&
                        tableItem.priority90Days.include) {
                        var priority90DaysObj =
                            addColumnsToListView(tableItem, tableItem.priority90Days);
                        $scope.check = true;
                        $scope.tableRows.push(priority90DaysObj);

                    }
                    if (tableItem.priority != undefined && tableItem.priority.include) {
                        var priorityObj = addColumnsToListView(tableItem, tableItem.priority);
                        $scope.check = true;
                        $scope.tableRows.push(priorityObj);


                    }*/

                    if (tableItem.shortTerm != undefined && tableItem.shortTerm.include) {
                        var shortTermObj = addColumnsToListView(tableItem, tableItem.shortTerm);
                        $scope.check = true;
                        shortTermObj.sectionId = tableItem.sectionId;
                        $scope.tableRows.push(shortTermObj);


                    }

                    if (tableItem.immed != undefined && tableItem.immed.include) {
                        var immedObj = addColumnsToListView(tableItem, tableItem.immed);
                        $scope.check = true;
                        immedObj.sectionId = tableItem.sectionId;
                        $scope.tableRows.push(immedObj);


                    }

                    if (tableItem.immedRequired != undefined && tableItem.immedRequired.include) {
                        $scope.immedRequired = tableItem.immedRequired;
                    }
                    if (tableItem.immedRecommended != undefined && tableItem.immedRecommended.include) {
                        $scope.immedRecommended = tableItem.immedRecommended;
                    }


                    if (tableItem.yearlyCostSpread.length > 0) {
                        angular.forEach(tableItem.yearlyCostSpread,
                            function (costSplitPerYear, index) {
                                var obj = addSplitCostColumnsToList(tableItem, costSplitPerYear);
                                $scope.check = true;
                                obj.sectionId = tableItem.sectionId;
                                $scope.tableRows.push(obj);
                                //$scope.count = $scope.count + 1;
                                //$scope.check = true;
                            })


                    }
                })
            }

            function addSplitCostColumnsToList(tableItem, costSplitPerYear) {

                var obj = {};

                obj.name = $scope.check ? "" : tableItem.name;
                obj.eul = $scope.check ? "" : tableItem.eul;
                obj.eff = $scope.check ? "" : tableItem.eff;
                obj.rul = $scope.check ? "" : tableItem.rul;
                obj.quantity = $scope.check ? "" : tableItem.quantity;
                obj.unit = $scope.check ? "" : tableItem.unit;
                obj.unitCost = $scope.check ? "" : tableItem.unitCost;
                obj.cycleReplacement = $scope.check ? "" : tableItem.cycleReplacement;
                obj.replacePercent = $scope.check ? "" : tableItem.replacePercent;
                obj.unallocatedCost = $scope.check ? "" : tableItem.unallocatedCost;
                obj.year = costSplitPerYear.label;
                obj.cost = costSplitPerYear.val;
                obj.criticalComments = $scope.check ? "" : tableItem.criticalComments;
                obj.conditionComments = $scope.check ? "" : tableItem.conditionComments;
                obj.recommendationId = $scope.check ? "" : tableItem.recommendationId;
                obj.sectionId = $scope.check ? "" : tableItem.sectionId;
                return obj;


            }

            function addColumnsToListView(tableItem, costObj) {
                var obj = {};
                //if($scope.check) obj.class = "same" + $scope.count;
                obj.name = $scope.check ? "" : tableItem.name;
                obj.eul = $scope.check ? "" : tableItem.eul;
                obj.eff = $scope.check ? "" : tableItem.eff;
                obj.rul = $scope.check ? "" : tableItem.rul;
                obj.unit = $scope.check ? "" : tableItem.unit;
                obj.unitCost = $scope.check ? "" : tableItem.unitCost;
                obj.cycleReplacement = $scope.check ? "" : tableItem.cycleReplacement;
                obj.replacePercent = $scope.check ? "" : tableItem.replacePercent;
                obj.unallocatedCost = $scope.check ? "" : tableItem.unallocatedCost;
                obj.sectionId = $scope.check ? "" : tableItem.sectionId;
                obj.year = costObj.name;
                obj.cost = costObj.val
                obj.recommendationId = $scope.check ? "" : tableItem.recommendationId;
                return obj;
            }

            function getImmediateNotBlankName(index, event) {
                return $(event.target).parents('table tbody tr').eq(index).children().first().text();
            }

            function openPopUp() {
                var modalContainer = {
                    refreshAfter: false,
                    recommendationName: $scope.recommendationName,
                    completeRecommendationObject: $.grep($scope.tableItems, function (item) {
                        return item.name === $scope.recommendationName;
                    }),
                    group: $scope.group,
                    groupTypes: $scope.groupTypes,
                    recommendationTypes: $scope.recommendationTypes,
                    sectionId: $scope.sectionId,
                    units: $scope.units
                }

                var modalInstance = $modal.open({
                    templateUrl: 'app/modules/ReportAuthoring/directives/costTables/atc/recommendationView.html',
                    controller: 'AtcRecommendationController',
                    size: 'lg',
                    resolve: {
                        dataContainer: function () {
                            return modalContainer;
                        }
                    }
                });

                modalInstance.result.then(function () {


                });
            }

            $scope.editRecommendation = function (recommendationData, index, firstClick, elem) {


                if (firstClick == 1) var elem = $(elem.target).parents('tr');


                var text = elem.children().children().first().text();
                //var text = recommendationData.name;
                if (text != "") {
                    $scope.recommendationName = text;
                    openPopUp();
                } else {
                    elem = elem.prev();

                    $scope.editRecommendation(recommendationData, index, 0, elem);
                }


            }

            $rootScope.$on('add-recommendationIn-List', function (event, args) {
                if ($scope.sectionId == args.newRecommendation.sectionId) {
                    var copyRecommendation = angular.copy(args.newRecommendation);

                    var tableName = $attrs.$$element.parent('div').attr('ng-repeat').split('.')[1]
                    var data = {
                        submitType: 'ADD',
                        propName: tableName,
                        data: copyRecommendation
                    }

                    var promise = commonFunctionsService.updateRecommedation($scope, data);

                    $scope.waitingProcessResources.promise = null;
                    $scope.waitingProcessResources.promise = promise;
                    promise.then(function () {
                        fillListTable(copyRecommendation, "insert");
                        $scope.alertData.status = 'show';
                        $scope.alertData.message = ParcelUI_Resources.messagesResources.saved_Success;
                        $scope.alertData.type = 'success';
                    });
                }
            });

            $rootScope.$on('update-recommendationIn-List', function (event, args) {

                if ($scope.sectionId == args.updateRecommendation.sectionId) {
                    var copyRecommendation = angular.copy(args.updateRecommendation);

                    var tableName = $attrs.$$element.parent('div').attr('ng-repeat').split('.')[1]

                    var data = {
                        submitType: 'UPDATE',
                        propName: tableName,
                        data: copyRecommendation
                    }

                    var promise = commonFunctionsService.updateRecommedation($scope, data);

                    $scope.waitingProcessResources.promise = null;
                    $scope.waitingProcessResources.promise = promise;
                    promise.then(function () {
                        updateListTable(copyRecommendation);

                        $scope.alertData.status = 'show';
                        $scope.alertData.message = ParcelUI_Resources.messagesResources.updated_Success;
                        $scope.alertData.type = 'success';
                    });
                }
            });


            function updateListTable(obj) {
                if (obj === undefined) return;
                else {
                    angular.forEach($scope.tableItems, function (item, index) {
                        console.log("compare while update " + item.name);
                        console.log("compare while update " + obj.name);
                        if (item.name == obj.name) {
                            $scope.tableItems[index] = obj;
                            fillListTable(obj, "update");
                        }
                    })

                }
            }

            $scope.deleteRecommendation = function (recommendationData) {

                var modalInstance = $modal.open({
                    template: function (elem, attr) {
                        var html = '';
                        html += "<div class='modal-header'>";
                        html += "<h4 class='modal-title'>Confirmation</div>";;
                        html += "</div>";
                        html += "<div class='modal-body'>";
                        html += "<p class='alert alert-danger'>Do you want to delete this record?</p>";
                        html += "</div>";
                        html += "<div class='modal-footer'>";
                        html += "<button ng-click='cancel()' class='btn btn-default'> No </button>";
                        html += "<button ng-click='ok()' class='btn btn-primary'> Yes </button>";
                        html += "</div>";
                        return html;
                    },
                    controller: ['$scope', '$modalInstance', function ($scope, $modalInstance) {
                        $scope.ok = function () {

                            $modalInstance.close(true);
                        };

                        $scope.cancel = function () {

                            $modalInstance.close(false);
                        };
                    }],
                    size: 'md',
                    resolve: {

                    }
                });

                modalInstance.result.then(function (action) {
                    // console.log(action)
                    if (action) {

                        var isSuccess = ReportAuthoringAPI.deleteRecommendation("5555", "14", "19", recommendationData.recommendationId);

                        //  var isDelete = true;

                        if (isSuccess) {
                            $scope.alertData.status = 'show';
                            $scope.alertData.message = ParcelUI_Resources.messagesResources.deleted_Success;
                            $scope.alertData.type = 'success';

                            var recommendation = $filter('filter')($scope.costTable.data[0].recommendation, {
                                name: recommendationData.name
                            }, true)[0];

                            var recommendationIndex = $scope.costTable.data[0].recommendation.indexOf(recommendation);
                            $scope.costTable.data[0].recommendation.splice(recommendationIndex, 1);
                            fillListTable({}, "default");

                        }
                    }


                });
            }

        }]
    }
}]);;
angular.module('ReportAuthoring').factory('defaultFunctionsService', ['$filter', function ($filter) {

    //Declare objects here
    var factory = {};
    var recommendationObject = {};


    //Start methods implementation here
    factory.fillPriorities = function ($scope, dataContainer) {
        if (dataContainer.completeRecommendationObject[0].immed != undefined && dataContainer.completeRecommendationObject[0].immed.include) {
            $scope.costSpread['immed'] = dataContainer.completeRecommendationObject[0].immed;
        }

    }


    factory.fillConstantValues = function (self, tableData) {
        self.evalPeriod = tableData.reserveTableConstantValues.evaluationPeriod;
        self.squareFootage = tableData.reserveTableConstantValues.totalSquareFootage;
        self.unInflated = tableData.reserveTableConstantValues.reservePerSFPerYearUninflated;
        self.inflated = tableData.reserveTableConstantValues.reservePerSFPerYearInflated;
        self.totalUninflatedYearWise = tableData.reserveTableConstantValues.totalUninflatedYearWise;
        self.inflationFactorYearWise = tableData.reserveTableConstantValues.inflationFactorYearWise;
        self.totalInflatedYearWise = tableData.reserveTableConstantValues.totalInflatedYearWise;
        self.totalInflated = tableData.reserveTableConstantValues.totalInflated;
        self.totalUninflated = tableData.reserveTableConstantValues.totalUninflated;
    }

    factory.fillSplitQty = function (self, tableData) {
        obj.immediateQty = tableData.recommendation.immediateQty;
        obj.reserveQty = tableData.recommendation.reserveQty;
    }

    factory.createRecommendationObject = function (self, recommendationHeader) {

        var obj = {};
        obj.recommendationHeader = recommendationHeader;
        obj.recType = self.recommendation.recType.value == "other_" ? {
            value: self.recommendation.recType.value,
            name: self.recommendation.otherRecommendationType
        } : self.recommendation.recType;


        obj.name = self.recommendation.recType.value == "other_" ? self.recommendation.otherRecommendationType : self.recommendation.recType.name;


        obj.eul = self.recommendation.eul;
        obj.eff = self.recommendation.eff;
        obj.rul = self.recommendation.rul;
        obj.quantity = self.recommendation.quantity;
        obj.unit = angular.isObject(self.recommendation.unit) ? self.recommendation.unit.name : self.recommendation.unit;
        obj.unitCost = self.recommendation.unitCost;
        obj.cycleReplacement = self.recommendation.cycleReplacement;
        obj.replacePercent = self.recommendation.replacePercent;
        obj.totalCost = self.recommendation.totalCost;
        obj.unallocatedCost = self.recommendation.unallocatedCost;
        obj.immediateQty = self.recommendation.immediateQty;
        obj.reserveQty = self.recommendation.reserveQty;
        if (self.costSpread['immed'].include != undefined && self.costSpread['immed'].include) {
            obj.immed = {};

            obj.immed = self.costSpread['immed'];
            obj.immed.name = "immed";
        }

        obj.yearlyCostSpread = [];
        for (i = 1; i <= self.yearlyDistribution; i++) {
            var x = "yr" + "_" + i;
            if (self.costSpread[x].include != undefined && self.costSpread[x].include) {
                obj.yearlyCostSpread.push(self.costSpread[x]);
                obj.yearlyCostSpread[obj.yearlyCostSpread.length - 1].label = i;
            }
        }
        obj.criticalComments = self.recommendation.criticalComments;
        obj.conditionComments = self.recommendation.conditionComments;

        obj.condition = ["E", "P"];
        obj.action = ["CR", "PR"];
        obj.sectionId = self.sectionId;
        return obj;

    }


    return factory;

}]);
angular.module('ReportAuthoring').controller('DefaultRecommendationController', ['$scope', '$modalInstance', 'ReportAuthoringAPI', 'dataContainer', '$filter', '$rootScope', 'commonFunctionsService', 'defaultFunctionsService', function ($scope, $modalInstance, ReportAuthoringAPI, dataContainer, $filter, $rootScope, commonFunctionsService, defaultFunctionsService) {

    $scope.commonFunctionsService = commonFunctionsService;

    //Declare objects
    $scope.yearlyDistribution = 12;
    $scope.recommendation = {};
    $scope.costSpread = {};
    $scope.calculateObj = {};

    $scope.sectionId = dataContainer.sectionId;

    function init() {
        if (!$scope.recommendation) return;

        commonFunctionsService.fillOtherDetails($scope, dataContainer);
        defaultFunctionsService.fillPriorities($scope, dataContainer);
        commonFunctionsService.fillYearlyDistribution($scope, dataContainer);

    }

    init();

    $scope.addUpdateRecommendation = function () {
        var updateRecommendationobj = {};
        updateRecommendationobj = defaultFunctionsService.createRecommendationObject($scope, '');

        $scope.$emit('update-recommendationIn-List', {
            updateRecommendation: updateRecommendationobj
        });

        $scope.close();
    }

    $scope.showCalculator = function (element) {

        commonFunctionsService.showCalculator($scope);
    }


    $scope.close = function () {
        $modalInstance.close();
    }

    $scope.showSplitQtyUnit = function () {
        commonFunctionsService.showSplitQtyUnit($scope);
    }

    $scope.hideSplitQtyUnit = function () {
        commonFunctionsService.hideSplitQtyUnit();

    }
    $scope.splitsQtyUnits = function () {

        var unitCost = $scope.recommendation.unitCost;
        var immedCost = ($scope.costSpread['immed'] = $scope.costSpread['immed'] || {}).val
        var totalCost = $scope.recommendation.totalCost;

        if (isNaN(immedCost)) {
            immedCost = 0;

        }
        var reserveCost = totalCost - immedCost;

        if (unitCost > 0) {
            var immedQty = immedCost / unitCost;
            var reserveQty = reserveCost / unitCost;
            $scope.recommendation.immediateQty = immedQty;
            $scope.recommendation.reserveQty = reserveQty;
        }
        angular.element("a[rel=splitpopover]").popover('hide');
    }



            }]);;
angular.module('ReportAuthoring').directive('defaultRecommendationList', ['$rootScope', '$filter', '$timeout', 'commonFunctionsService', function ($rootScope, $filter, $timeout, commonFunctionsService) {
    return {
        restrict: 'A',
        replace: true,
        transclude: true,
        scope: {
            costTable: '=',
            alertData: '='
        },

        templateUrl: 'app/modules/ReportAuthoring/directives/costTables/default/recommendationListView.html',

        controller: ['$scope', '$timeout', '$modal', '$attrs', 'ParcelUI.Resources', function ($scope, $timeout, $modal, $attrs, ParcelUI_Resources) {

            $scope.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;

            $scope.sectionId = $scope.costTable.sectionId;

            $scope.putBgColor = function (item, index, odd, even) {

                if (index == 0) {
                    item.bgColor = "grey";

                    return "grey";
                } else {
                    if (item.name == "") {
                        if ($scope.tableRows[index - 1].bgColor == "grey") {
                            item.bgColor = "grey";
                            return "grey";
                        }

                        if ($scope.tableRows[index - 1].bgColor == "white") {
                            item.bgColor = "white";
                            return "white";
                        }


                    } else {
                        if ($scope.tableRows[index - 1].bgColor == "grey") {
                            item.bgColor = "white";
                            return "white";
                        }

                        if ($scope.tableRows[index - 1].bgColor == "white") {
                            item.bgColor = "grey";
                            return "grey";
                        }
                    }
                }

            }

            init();

            function init() {

                $scope.defaultHeaders = $scope.costTable.listHeaders;

                //create tables
                $scope.tableItems = [];
                if ($scope.costTable.data.length > 0) {
                    $scope.tableItems = $scope.costTable.data;
                }

                $scope.recommendationHeader = $scope.costTable.recommendationHeader;
                $scope.recommendationTypes = $scope.costTable.recommendationTypes;
                $scope.units = $scope.costTable.unit;

                fillListTable({}, "default");
            }


            function fillListTable(obj, operation) {
                $scope.tableRows = [];

                if (JSON.stringify(obj) === '{}' && operation === "default")
                    fillListView($scope.tableItems);
                else if (JSON.stringify(obj) !== '{}' && operation === "update")
                    fillListView($scope.tableItems);
                else if (JSON.stringify(obj) !== '{}' && operation === "insert") {

                    if ($scope.recommendationHeader === obj.recommendationHeader) {
                        if ($scope.costTable.data.length > 0) {
                            $scope.tableItems = $scope.costTable.data;
                        }
                        // $scope.tableItems.push(obj);
                        fillListView($scope.tableItems);
                    } else {
                        $scope.tableItems = $scope.costTable.data;
                        fillListView($scope.tableItems);
                    }
                }
            }


            function fillListView(tableItems) {
                angular.forEach(tableItems, function (tableItem, index) {

                    $scope.check = false;
                    if (tableItem.immed != undefined && tableItem.immed.include) {
                        var immedObj = addColumnsToListView(tableItem, tableItem.immed);
                        $scope.check = true;
                        $scope.tableRows.push(immedObj);
                    }

                    if (tableItem.yearlyCostSpread.length > 0) {
                        angular.forEach(tableItem.yearlyCostSpread,
                            function (costSplitPerYear, index) {

                                var obj = addSplitCostColumnsToList(tableItem, costSplitPerYear);
                                $scope.check = true;
                                $scope.tableRows.push(obj);
                                //$scope.count = $scope.count + 1;
                                //$scope.check = true;
                            })
                    }
                })
            }


            function addSplitCostColumnsToList(tableItem, costSplitPerYear) {

                var obj = {};
                obj.name = $scope.check ? "" : tableItem.name;
                obj.eul = $scope.check ? "" : tableItem.eul;
                obj.eff = $scope.check ? "" : tableItem.eff;
                obj.rul = $scope.check ? "" : tableItem.rul;
                obj.quantity = $scope.check ? "" : tableItem.quantity;
                obj.unit = $scope.check ? "" : angular.isObject(tableItem.unit) ? tableItem.unit.name : tableItem.unit;
                obj.unitCost = $scope.check ? "" : tableItem.unitCost;
                obj.cycleReplacement = $scope.check ? "" : tableItem.cycleReplacement;
                obj.replacePercent = $scope.check ? "" : tableItem.replacePercent;
                obj.unallocatedCost = $scope.check ? "" : tableItem.unallocatedCost;
                obj.immediateQty = $scope.check ? "" : tableItem.immediateQty;
                obj.reserveQty = $scope.check ? "" : tableItem.reserveQty;
                obj.year = costSplitPerYear.label;
                obj.cost = costSplitPerYear.val;
                obj.criticalComments = $scope.check ? "" : tableItem.criticalComments;
                obj.conditionComments = $scope.check ? "" : tableItem.conditionComments;

                return obj;

            }


            function addColumnsToListView(tableItem, costObj) {
                var obj = {};

                //if($scope.check) obj.class = "same" + $scope.count;
                obj.name = $scope.check ? "" : tableItem.name;
                obj.eul = $scope.check ? "" : tableItem.eul;
                obj.eff = $scope.check ? "" : tableItem.eff;
                obj.rul = $scope.check ? "" : tableItem.rul;
                obj.quantity = $scope.check ? "" : tableItem.quantity;
                obj.unit = $scope.check ? "" : angular.isObject(tableItem.unit) ? tableItem.unit.name : tableItem.unit;
                obj.unitCost = $scope.check ? "" : tableItem.unitCost;
                obj.cycleReplacement = $scope.check ? "" : tableItem.cycleReplacement;
                obj.replacePercent = $scope.check ? "" : tableItem.replacePercent;
                obj.unallocatedCost = $scope.check ? "" : tableItem.unallocatedCost;
                obj.immediateQty = $scope.check ? "" : tableItem.immediateQty;
                obj.reserveQty = $scope.check ? "" : tableItem.reserveQty;
                obj.sectionId = $scope.check ? "" : tableItem.sectionId;
                obj.year = costObj.name;
                obj.cost = costObj.val;

                return obj;
            }


            function getImmediateNotBlankName(index, event) {
                return $(event.target).parents('table tbody tr').eq(index).children().first().text();
            }

            function openPopUp() {

                var modalContainer = {
                    refreshAfter: false,
                    recommendationName: $scope.recommendationName,
                    completeRecommendationObject: $.grep($scope.tableItems, function (item) {
                        return item.name === $scope.recommendationName;
                    }),
                    group: $scope.group,
                    groupTypes: $scope.groupTypes,
                    recommendationTypes: $scope.recommendationTypes,
                    units: $scope.units,
                    sectionId: $scope.sectionId
                }

                var modalInstance = $modal.open({
                    templateUrl: 'app/modules/ReportAuthoring/directives/costTables/default/recommendationView.html',
                    controller: 'DefaultRecommendationController',
                    size: 'lg',
                    resolve: {
                        dataContainer: function () {
                            return modalContainer;
                        }
                    }
                });

                modalInstance.result.then(function () {


                });
            }

            $scope.editRecommendation = function (recommendationData, index, firstClick, elem) {

                if (firstClick == 1) var elem = $(elem.target).parents('tr');

                var text = elem.children().first().text();
                if (text != "") {
                    $scope.recommendationName = text;
                    openPopUp();
                } else {
                    elem = elem.prev();

                    $scope.editRecommendation(recommendationData, index, 0, elem);
                }
            }

            $rootScope.$on('add-recommendationIn-List', function (event, args) {

                if ($scope.sectionId == args.newRecommendation.sectionId) {

                    var copyRecommendation = angular.copy(args.newRecommendation);

                    var tableName = $attrs.$$element.parent('div').attr('ng-repeat').split('.')[1]
                    var data = {
                        submitType: 'ADD',
                        propName: tableName,
                        data: copyRecommendation
                    }

                    var promise = commonFunctionsService.updateRecommedation($scope, data);

                    $scope.waitingProcessResources.promise = null;
                    $scope.waitingProcessResources.promise = promise;
                    promise.then(function () {
                        fillListTable(copyRecommendation, "insert");
                        if ($scope.alertData != undefined) {
                            $scope.alertData.status = 'show';
                            $scope.alertData.message = ParcelUI_Resources.messagesResources.saved_Success;
                            $scope.alertData.type = 'success';
                        }

                        $scope.$emit('load-ReportWriting-Toc', {

                            selectedSection: $scope.$parent.$parent.resp
                        });
                    });
                }
            });

            $rootScope.$on('update-recommendationIn-List', function (event, args) {

                if ($scope.sectionId == args.updateRecommendation.sectionId) {
                    var copyRecommendation = angular.copy(args.updateRecommendation);

                    var tableName = $attrs.$$element.parent('div').attr('ng-repeat').split('.')[1]

                    var data = {
                        submitType: 'UPDATE',
                        propName: tableName,
                        data: copyRecommendation
                    }

                    var promise = commonFunctionsService.updateRecommedation($scope, data);

                    $scope.waitingProcessResources.promise = null;
                    $scope.waitingProcessResources.promise = promise;
                    promise.then(function () {
                        updateListTable(copyRecommendation);
                        if ($scope.alertData != undefined) {
                            $scope.alertData.status = 'show';
                            $scope.alertData.message = ParcelUI_Resources.messagesResources.updated_Success;
                            $scope.alertData.type = 'success';
                        }

                        $scope.$emit('load-ReportWriting-Toc', {

                            selectedSection: $scope.$parent.$parent.resp
                        });
                    });
                }
            });

            function updateListTable(obj) {
                if (obj === undefined) return;
                else {
                    angular.forEach($scope.tableItems, function (item, index) {
                        console.log("compare while update " + item.name);
                        console.log("compare while update " + obj.name);
                        if (item.name == obj.name) {
                            $scope.tableItems[index] = obj;
                            fillListTable(obj, "update");
                        }
                    })

                }
            }
                        }]

    }
            }]);;
angular.module('ReportAuthoring').factory('emgFunctionsService', ['$filter', function ($filter) {

    //Declare objects here
    var factory = {};
    var recommendationObject = {};

    //Start methods implementation here
    factory.fillPriorities = function ($scope, dataContainer) {
        if (dataContainer.completeRecommendationObject[0].immed != undefined && dataContainer.completeRecommendationObject[0].immed.include) {
            $scope.costSpread['immed'] = dataContainer.completeRecommendationObject[0].immed;
        }
        if (dataContainer.completeRecommendationObject[0].shortTerm != undefined && dataContainer.completeRecommendationObject[0].shortTerm.include) {
            $scope.costSpread['shortTerm'] = dataContainer.completeRecommendationObject[0].shortTerm;
        }

    }

    factory.fillConstantValues = function (self, tableData) {
        self.evalPeriod = tableData.reserveTableConstantValues.evaluationPeriod;
        self.squareFootage = tableData.reserveTableConstantValues.totalSquareFootage;
        self.unInflated = tableData.reserveTableConstantValues.reservePerSFPerYearUninflated;
        self.inflated = tableData.reserveTableConstantValues.reservePerSFPerYearInflated;
        self.totalUninflatedYearWise = tableData.reserveTableConstantValues.totalUninflatedYearWise;
        self.inflationFactorYearWise = tableData.reserveTableConstantValues.inflationFactorYearWise;
        self.totalInflatedYearWise = tableData.reserveTableConstantValues.totalInflatedYearWise;
        self.totalInflated = tableData.reserveTableConstantValues.totalInflated;
        self.totalUninflated = tableData.reserveTableConstantValues.totalUninflated;
    }

    factory.createRecommendationObject = function (self, recommendationHeader) {

        var obj = {};
        obj.recommendationHeader = recommendationHeader;
        obj.recType = self.recommendation.recType.value == "other_" ? {
            value: self.recommendation.recType.value,
            name: self.recommendation.otherRecommendationType
        } : self.recommendation.recType;


        obj.name = self.recommendation.recType.value == "other_" ? self.recommendation.otherRecommendationType : self.recommendation.recType.name;


        obj.eul = self.recommendation.eul;
        obj.eff = self.recommendation.eff;
        obj.rul = self.recommendation.rul;
        obj.quantity = self.recommendation.quantity;
        obj.unit = self.recommendation.unit;
        obj.unitCost = self.recommendation.unitCost;
        obj.cycleReplacement = self.recommendation.cycleReplacement;
        obj.replacePercent = self.recommendation.replacePercent;
        obj.totalCost = self.recommendation.totalCost;
        obj.unallocatedCost = self.recommendation.unallocatedCost;
        if (self.costSpread['immed'].include != undefined && self.costSpread['immed'].include) {
            obj.immed = {};

            obj.immed = self.costSpread['immed'];
            obj.immed.name = "immed";
        }
        if (self.costSpread['shortTerm'].include != undefined && self.costSpread['shortTerm'].include) {
            obj.shortTerm = {};

            obj.shortTerm = self.costSpread['shortTerm'];
            obj.shortTerm.name = "shortTerm";
        }

        obj.yearlyCostSpread = [];
        for (i = 1; i <= self.yearlyDistribution; i++) {
            var x = "yr" + "_" + i;
            if (self.costSpread[x].include != undefined && self.costSpread[x].include) {
                obj.yearlyCostSpread.push(self.costSpread[x]);
                obj.yearlyCostSpread[obj.yearlyCostSpread.length - 1].label = i;
            }
        }
        obj.criticalComments = self.recommendation.criticalComments;
        obj.conditionComments = self.recommendation.conditionComments;

        obj.condition = ["E", "P"];
        obj.action = ["CR", "PR"];

        return obj;

    }

    return factory;
}]);
angular.module('ReportAuthoring').controller('EmgRecommendationController', ['$scope', '$modalInstance', 'ReportAuthoringAPI', 'dataContainer', '$filter', '$rootScope', 'commonFunctionsService', 'emgFunctionsService', function ($scope, $modalInstance, ReportAuthoringAPI, dataContainer, $filter, $rootScope, commonFunctionsService, emgFunctionsService) {

    $scope.commonFunctionsService = commonFunctionsService;

    //Declare objects
    $scope.yearlyDistribution = 10;
    $scope.recommendation = {};
    $scope.costSpread = {};
    $scope.calculateObj = {};



    function init() {
        if (!$scope.recommendation) return;

        commonFunctionsService.fillOtherDetails($scope, dataContainer);
        emgFunctionsService.fillPriorities($scope, dataContainer);
        commonFunctionsService.fillYearlyDistribution($scope, dataContainer);
        $scope.recommendation.groupTypes = dataContainer.groupTypes;
        //  $scope.recommendation.group = dataContainer.group;
        var selectedGroupTypeArr = $filter('filter')(dataContainer.groupTypes, {
            value: dataContainer.group
        });

        $scope.recommendation.group = {
            value: selectedGroupTypeArr[0].value,
            name: selectedGroupTypeArr[0].name
        };

    }

    init();

    $scope.addUpdateRecommendation = function () {
        var updateRecommendationobj = {};
        updateRecommendationobj = emgFunctionsService.createRecommendationObject($scope, '');
        var result = ReportAuthoringAPI.addUpdateRecommendation(updateRecommendationobj);
        if (result) {
            $scope.$emit('update-recommendationIn-List', {
                updateRecommendation: updateRecommendationobj
            });
        }
        $scope.close();
    }

    $scope.showCalculator = function (element) {

        commonFunctionsService.showCalculator($scope);
    }


    $scope.close = function () {
        $modalInstance.close();
    }



}]);;
angular.module('ReportAuthoring').directive('emgRecommendationList', ['$rootScope', '$filter', '$timeout', function ($rootScope, $filter, $timeout) {
    return {
        restrict: 'A',
        replace: true,
        transclude: true,
        scope: {
            costTable: '=',
            alertData: '='
        },

        templateUrl: 'app/modules/ReportAuthoring/directives/costTables/emg/recommendationListView.html',
        controller: ['$scope', '$timeout', '$modal', '$attrs', 'ParcelUI.Resources', 'commonFunctionsService', function ($scope, $timeout, $modal, $attrs, ParcelUI_Resources, commonFunctionsService) {
            $scope.sectionId = $scope.costTable.sectionId;
            $scope.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;


            $scope.putBgColor = function (item, index, odd, even) {

                if (index == 0) {
                    item.bgColor = "grey";

                    return "grey";
                } else {
                    if (item.name == "") {
                        if ($scope.tableRows[index - 1].bgColor == "grey") {
                            item.bgColor = "grey";
                            return "grey";
                        }

                        if ($scope.tableRows[index - 1].bgColor == "white") {
                            item.bgColor = "white";
                            return "white";
                        }


                    } else {
                        if ($scope.tableRows[index - 1].bgColor == "grey") {
                            item.bgColor = "white";
                            return "white";
                        }

                        if ($scope.tableRows[index - 1].bgColor == "white") {
                            item.bgColor = "grey";
                            return "grey";
                        }

                    }
                }

            }

            init();

            function init() {
                $scope.emgHeaders = $scope.costTable.listHeaders;

                //create tables
                $scope.group = $scope.costTable.data[0].group;

                $scope.tableItems = [];
                if ($scope.costTable.data.length > 0) {
                    $scope.tableItems = $scope.costTable.data;
                }

                $scope.recommendationHeader = $scope.costTable.recommendationHeader;
                $scope.recommendationTypes = $scope.costTable.recommendationTypes;
                $scope.groupTypes = $scope.costTable.groupTypes;
                $scope.units = $scope.costTable.unit;
                $scope.group = $scope.costTable.data[0].group;
                fillListTable({}, "default");
            }

            function fillListTable(obj, operation) {
                $scope.tableRows = [];

                if (JSON.stringify(obj) === '{}' && operation === "default")
                    fillListView($scope.tableItems);
                else if (JSON.stringify(obj) !== '{}' && operation === "update")
                    fillListView($scope.tableItems);
                else if (JSON.stringify(obj) !== '{}' && operation === "insert") {

                    $scope.tableItems = [];
                    if ($scope.recommendationHeader === obj.recommendationHeader) {
                        $scope.tableItems = $scope.costTable.data[0].recommendation;
                        $scope.tableItems.push(obj);
                        fillListView($scope.tableItems);
                    } else {
                        $scope.tableItems = $scope.costTable.data[0].recommendation;
                        fillListView($scope.tableItems);
                    }
                }
            }

            function fillListView(tableItems) {
                angular.forEach(tableItems, function (tableItem, index) {
                    $scope.check = false;

                    if (tableItem.critical != undefined && tableItem.critical.include) {
                        var criticalObj = addColumnsToListView(tableItem, tableItem.critical);
                        $scope.check = true;
                        criticalObj.sectionId = tableItem.sectionId;
                        $scope.tableRows.push(criticalObj);


                    }

                    if (tableItem.priority90Days != undefined &&
                        tableItem.priority90Days.include) {
                        var priority90DaysObj =
                            addColumnsToListView(tableItem, tableItem.priority90Days);
                        $scope.check = true;
                        priority90DaysObj.sectionId = tableItem.sectionId;
                        $scope.tableRows.push(priority90DaysObj);

                    }

                    if (tableItem.priority != undefined && tableItem.priority.include) {
                        var priorityObj = addColumnsToListView(tableItem, tableItem.priority);
                        $scope.check = true;
                        priorityObj.sectionId = tableItem.sectionId;
                        $scope.tableRows.push(priorityObj);
                    }

                    if (tableItem.yearlyCostSpread.length > 0) {
                        angular.forEach(tableItem.yearlyCostSpread,
                            function (costSplitPerYear, index) {
                                var obj = addSplitCostColumnsToList(tableItem, costSplitPerYear);
                                $scope.check = true;
                                obj.sectionId = tableItem.sectionId;
                                $scope.tableRows.push(obj);
                                //$scope.count = $scope.count + 1;
                                //$scope.check = true;
                            })


                    }
                })
            }

            function addSplitCostColumnsToList(tableItem, costSplitPerYear) {

                var obj = {};

                obj.name = $scope.check ? "" : tableItem.name;
                obj.eul = $scope.check ? "" : tableItem.eul;
                obj.eff = $scope.check ? "" : tableItem.eff;
                obj.rul = $scope.check ? "" : tableItem.rul;
                obj.quantity = $scope.check ? "" : tableItem.quantity;
                obj.unit = $scope.check ? "" : tableItem.unit;
                obj.unitCost = $scope.check ? "" : tableItem.unitCost;
                obj.cycleReplacement = $scope.check ? "" : tableItem.cycleReplacement;
                obj.replacePercent = $scope.check ? "" : tableItem.replacePercent;
                obj.unallocatedCost = $scope.check ? "" : tableItem.unallocatedCost;
                obj.year = costSplitPerYear.label;
                obj.cost = costSplitPerYear.val;
                obj.criticalComments = $scope.check ? "" : tableItem.criticalComments;
                obj.conditionComments = $scope.check ? "" : tableItem.conditionComments;
                return obj;

            }

            function addColumnsToListView(tableItem, costObj) {
                var obj = {};
                //if($scope.check) obj.class = "same" + $scope.count;
                obj.name = $scope.check ? "" : tableItem.name;
                obj.eul = $scope.check ? "" : tableItem.eul;
                obj.eff = $scope.check ? "" : tableItem.eff;
                obj.rul = $scope.check ? "" : tableItem.rul;
                obj.unit = $scope.check ? "" : tableItem.unit;
                obj.unitCost = $scope.check ? "" : tableItem.unitCost;
                obj.cycleReplacement = $scope.check ? "" : tableItem.cycleReplacement;
                obj.replacePercent = $scope.check ? "" : tableItem.replacePercent;
                obj.unallocatedCost = $scope.check ? "" : tableItem.unallocatedCost;
                obj.year = costObj.name;
                obj.cost = costObj.val;
                return obj;
            }

            function getImmediateNotBlankName(index, event) {
                return $(event.target).parents('table tbody tr').eq(index).children().first().text();
            }

            function openPopUp() {

                var modalContainer = {
                    refreshAfter: false,
                    recommendationName: $scope.recommendationName,
                    completeRecommendationObject: $.grep($scope.tableItems, function (item) {
                        return item.name === $scope.recommendationName;
                    }),
                    group: $scope.group,
                    groupTypes: $scope.groupTypes,
                    recommendationTypes: $scope.recommendationTypes,
                    group: $scope.group
                }

                var modalInstance = $modal.open({
                    templateUrl: 'app/modules/ReportAuthoring/directives/costTables/emg/recommendationView.html',
                    controller: 'EmgRecommendationController',
                    size: 'lg',
                    resolve: {
                        dataContainer: function () {
                            return modalContainer;
                        }
                    }
                });

                modalInstance.result.then(function () {


                });
            }

            $scope.editRecommendation = function (recommendationData, index, firstClick, elem) {

                if (firstClick == 1) var elem = $(elem.target).parents('tr');


                var text = elem.children().first().text();
                if (text != "") {
                    $scope.recommendationName = text;
                    openPopUp();
                } else {
                    elem = elem.prev();

                    $scope.editRecommendation(recommendationData, index, 0, elem);
                }


            }


            $rootScope.$on('add-recommendationIn-List', function (event, args) {
                if ($scope.sectionId == args.newRecommendation.sectionId) {
                    var copyRecommendation = angular.copy(args.newRecommendation);

                    var tableName = $attrs.$$element.parent('div').attr('ng-repeat').split('.')[1]
                    var data = {
                        submitType: 'ADD',
                        propName: tableName,
                        data: copyRecommendation
                    }

                    var promise = commonFunctionsService.updateRecommedation($scope, data);

                    $scope.waitingProcessResources.promise = null;
                    $scope.waitingProcessResources.promise = promise;
                    promise.then(function () {
                        fillListTable(copyRecommendation, "insert");
                        $scope.alertData.status = 'show';
                        $scope.alertData.message = ParcelUI_Resources.messagesResources.saved_Success;
                        $scope.alertData.type = 'success';
                    });
                }
            });

            $rootScope.$on('update-recommendationIn-List', function (event, args) {

                if ($scope.sectionId == args.updateRecommendation.sectionId) {
                    var copyRecommendation = angular.copy(args.updateRecommendation);

                    var tableName = $attrs.$$element.parent('div').attr('ng-repeat').split('.')[1]

                    var data = {
                        submitType: 'UPDATE',
                        propName: tableName,
                        data: copyRecommendation
                    }

                    var promise = commonFunctionsService.updateRecommedation($scope, data);

                    $scope.waitingProcessResources.promise = null;
                    $scope.waitingProcessResources.promise = promise;
                    promise.then(function () {
                        updateListTable(copyRecommendation);

                        $scope.alertData.status = 'show';
                        $scope.alertData.message = ParcelUI_Resources.messagesResources.updated_Success;
                        $scope.alertData.type = 'success';
                    });
                }
            });


            function updateListTable(obj) {
                if (obj === undefined) return;
                else {
                    angular.forEach($scope.tableItems, function (item, index) {
                        console.log("compare while update " + item.name);
                        console.log("compare while update " + obj.name);
                        if (item.name == obj.name) {
                            $scope.tableItems[index] = obj;
                            fillListTable(obj, "update");
                        }
                    })

                }
            }



        }]
    }
}]);;
angular.module('ReportAuthoring').factory('fannieFunctionsService', ['$filter', function ($filter) {

    //Declare objects here
    var factory = {};
    var recommendationObject = {};


    //Start methods implementation here
    factory.fillPriorities = function ($scope, dataContainer) {
        if (dataContainer.completeRecommendationObject[0].lifesafety != undefined && dataContainer.completeRecommendationObject[0].lifesafety.include) {
            $scope.costSpread['lifesafety'] = dataContainer.completeRecommendationObject[0].lifesafety;
        }
        if (dataContainer.completeRecommendationObject[0].criticalitem != undefined && dataContainer.completeRecommendationObject[0].criticalitem.include) {
            $scope.costSpread['criticalitem'] = dataContainer.completeRecommendationObject[0].criticalitem;
        }
        if (dataContainer.completeRecommendationObject[0].deferredmaint != undefined && dataContainer.completeRecommendationObject[0].deferredmaint.include) {
            $scope.costSpread['deferredmaint'] = dataContainer.completeRecommendationObject[0].deferredmaint;
        }
    }

    factory.fillConstantValues = function (self, tableData) {

        self.evalPeriod = tableData.reserveTableConstantValues.evaluationPeriod;
        self.squareFootage = tableData.reserveTableConstantValues.totalSquareFootage;
        self.unInflated = tableData.reserveTableConstantValues.reservePerSFPerYearUninflated;
        self.inflated = tableData.reserveTableConstantValues.reservePerSFPerYearInflated;
        self.totalUninflatedYearWise = tableData.reserveTableConstantValues.totalUninflatedYearWise;
        self.inflationFactorYearWise = tableData.reserveTableConstantValues.inflationFactorYearWise;
        self.totalInflatedYearWise = tableData.reserveTableConstantValues.totalInflatedYearWise;
        self.totalInflated = tableData.reserveTableConstantValues.totalInflated;
        self.totalUninflated = tableData.reserveTableConstantValues.totalUninflated;
    }

    factory.createRecommendationObject = function (self, recommendationHeader) {

        var obj = {};
        obj.recommendationHeader = recommendationHeader;
        obj.recType = self.recommendation.recType.value == "other_" ? {
            value: self.recommendation.recType.value,
            name: self.recommendation.otherRecommendationType
        } : self.recommendation.recType;

        obj.name = self.recommendation.recType.value == "other_" ? self.recommendation.otherRecommendationType : self.recommendation.recType.name;
        obj.recType = obj.name;

        obj.eul = self.recommendation.eul;
        obj.eff = self.recommendation.eff;
        obj.rul = self.recommendation.rul;
        obj.quantity = self.recommendation.quantity;
        obj.unit = self.recommendation.unit;
        obj.unitCost = self.recommendation.unitCost;
        obj.cycleReplacement = self.recommendation.cycleReplacement;
        obj.replacePercent = self.recommendation.replacePercent;
        obj.totalCost = self.recommendation.totalCost;
        obj.unallocatedCost = self.recommendation.unallocatedCost;
        if (self.costSpread['lifesafety'].include != undefined && self.costSpread['lifesafety'].include) {
            obj.lifesafety = {};

            obj.lifesafety = self.costSpread['lifesafety'];
            obj.lifesafety.name = "lifesafety";
        }
        if (self.costSpread['criticalitem'].include != undefined && self.costSpread['criticalitem'].include) {
            obj.criticalitem = {};

            obj.criticalitem = self.costSpread['criticalitem'];
            obj.criticalitem.name = "criticalitem";
        }
        if (self.costSpread['deferredmaint'].include != undefined && self.costSpread['deferredmaint'].include) {
            obj.deferredmaint = {};

            obj.deferredmaint = self.costSpread['deferredmaint'];
            obj.deferredmaint.name = "deferredmaint";
        }

        obj.yearlyCostSpread = [];
        for (i = 1; i <= self.yearlyDistribution; i++) {
            var x = "yr" + "_" + i;
            if (self.costSpread[x].include != undefined && self.costSpread[x].include) {
                obj.yearlyCostSpread.push(self.costSpread[x]);
                obj.yearlyCostSpread[obj.yearlyCostSpread.length - 1].label = i;
            }
        }
        obj.criticalComments = self.recommendation.criticalComments;
        obj.source = self.recommendation.source;

        obj.condition = self.recommendation.condition;
        obj.action = self.recommendation.action;

        return obj;

    }

    factory.fillOtherDetails = function ($scope, dataContainer) {

        $scope.recommendation = dataContainer.completeRecommendationObject[0];
        // $scope.recommendation.recommendationTypes = dataContainer.recommendationTypes;

        var selectedRecomendationTypeArr = $filter('filter')(dataContainer.recommendationTypes, {
            name: dataContainer.completeRecommendationObject[0].name
        });


        if (selectedRecomendationTypeArr.length == 0) {
            $scope.recommendation.recType = {
                value: "other_"
            };
            $scope.recommendation.otherRecommendationType = dataContainer.completeRecommendationObject[0].name;
        } else {
            $scope.recommendation.recType = {
                value: selectedRecomendationTypeArr[0].value,
                name: selectedRecomendationTypeArr[0].name
            };

        }
    }

    return factory;
}]);
angular.module('ReportAuthoring').controller('FannieRecommendationController', ['$scope', '$compile', '$modalInstance', 'ReportAuthoringAPI', 'dataContainer', '$filter', '$rootScope', 'commonFunctionsService', 'fannieFunctionsService', function ($scope, $compile, $modalInstance, ReportAuthoringAPI, dataContainer, $filter, $rootScope, commonFunctionsService, fannieFunctionsService) {

    $scope.commonFunctionsService = commonFunctionsService;

    //Declare objects
    $scope.yearlyDistribution = 10;
    $scope.recommendation = {};
    $scope.costSpread = {};
    $scope.calculateObj = {};

    init();

    function init() {

        if (!$scope.recommendation) return;

        commonFunctionsService.fillOtherDetails($scope, dataContainer);
        fannieFunctionsService.fillPriorities($scope, dataContainer);
        commonFunctionsService.fillYearlyDistribution($scope, dataContainer);
        $scope.recommendation.groupTypes = dataContainer.groupTypes;
        $scope.recommendation.conditions = dataContainer.conditions;
        $scope.recommendation.actions = dataContainer.actions;

        var selectedGroupTypeArr = $filter('filter')(dataContainer.groupTypes, {
            value: dataContainer.group
        });

        $scope.recommendation.group = {
            value: selectedGroupTypeArr[0].value,
            name: selectedGroupTypeArr[0].name
        };

        /*  var selectedUnitArr = $filter('filter')(dataContainer.units, {
             value: dataContainer.completeRecommendationObject[0].unit
         });

         $scope.recommendation.unit = {
             value: selectedUnitArr[0].value,
             name: selectedUnitArr[0].name
         };
         */
        /*  var selectedUnitArr = $filter('filter')(dataContainer.units, {
              value: dataContainer.unit
          });

          $scope.recommendation.unit = {
              value: selectedUnitArr[0].value,
              name: selectedUnitArr[0].name
          };*/

    }

    $scope.addUpdateRecommendation = function () {

        var updateRecommendationobj = {};
        updateRecommendationobj = fannieFunctionsService.createRecommendationObject($scope, '');

        var result = ReportAuthoringAPI.addUpdateRecommendation(updateRecommendationobj);
        if (result) {
            $scope.$emit('update-recommendationIn-List', {
                updateRecommendation: updateRecommendationobj
            });
        }
        $scope.close();

    }

    $scope.close = function () {
        $modalInstance.close();
    }

    $scope.showCalculator = function (element) {

        commonFunctionsService.showCalculator($scope);
    }


}]);;
angular.module('ReportAuthoring').directive('fannieRecommendationList', ['$rootScope', '$filter', '$timeout', 'ReportAuthoringAPI', function ($rootScope, $filter, $timeout, ReportAuthoringAPI) {
    return {
        restrict: 'A',
        replace: true,
        transclude: true,
        scope: {
            costTable: '=',
            alertData: '='

        },

        templateUrl: 'app/modules/ReportAuthoring/directives/costTables/Fannie/recommendationListView.html',


        controller: ['$scope', '$timeout', '$modal', '$attrs', 'ParcelUI.Resources', 'commonFunctionsService', function ($scope, $timeout, $modal, $attrs, ParcelUI_Resources, commonFunctionsService) {
            $scope.sectionId = $scope.costTable.sectionId;
            $scope.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;

            $scope.putBgColor = function (item, index, odd, even) {

                if (index == 0) {
                    item.bgColor = "grey";

                    return "grey";
                } else {
                    if (item.name == "") {
                        if ($scope.tableRows[index - 1].bgColor == "grey") {
                            item.bgColor = "grey";
                            return "grey";
                        }

                        if ($scope.tableRows[index - 1].bgColor == "white") {
                            item.bgColor = "white";
                            return "white";
                        }


                    } else {
                        if ($scope.tableRows[index - 1].bgColor == "grey") {
                            item.bgColor = "white";
                            return "white";
                        }

                        if ($scope.tableRows[index - 1].bgColor == "white") {
                            item.bgColor = "grey";
                            return "grey";
                        }

                    }
                }

            }

            init();

            function init() {
                $scope.fannieHeaders = $scope.costTable.listHeaders;

                //create tables

                console.log("$scope.costTable.condition")
                console.log($scope.costTable.condition)
                if ($scope.costTable.data.length > 0) {
                    $scope.tableItems = $scope.costTable.data;
                    $scope.group = $scope.costTable.data[0].group;
                }
                $scope.recommendationHeader = $scope.costTable.recommendationHeader;
                $scope.recommendationTypes = $scope.costTable.recommendationTypes;
                $scope.groupTypes = $scope.costTable.groupTypes;

                $scope.units = $scope.costTable.unit;
                $scope.conditions = $scope.costTable.condition;
                $scope.actions = $scope.costTable.action;

                fillListTable({}, "default");
            }

            function fillListTable(obj, operation) {
                $scope.tableRows = [];

                if (JSON.stringify(obj) === '{}' && operation === "default")
                    fillListView($scope.tableItems);
                else if (JSON.stringify(obj) !== '{}' && operation === "update")
                    fillListView($scope.tableItems);
                else if (JSON.stringify(obj) !== '{}' && operation === "insert") {
                    $scope.tableItems = [];
                    if ($scope.recommendationHeader === obj.recommendationHeader) {
                        $scope.tableItems = $scope.costTable.data[0].recommendation;
                        $scope.tableItems.push(obj);
                        fillListView($scope.tableItems);
                    } else {
                        $scope.tableItems = $scope.costTable.data[0].recommendation;
                        fillListView($scope.tableItems);
                    }
                }

            }


            function fillListView(tableItems) {
                angular.forEach(tableItems, function (tableItem, index) {
                    $scope.check = false;
                    if (tableItem.lifesafety != undefined && tableItem.lifesafety.include) {
                        var lifesafetyObj = addColumnsToListView(tableItem, tableItem.lifesafety);
                        $scope.check = true;
                        lifesafetyObj.sectionId = tableItem.sectionId;
                        $scope.tableRows.push(lifesafetyObj);


                    }
                    if (tableItem.criticalitem != undefined &&
                        tableItem.criticalitem.include) {
                        var criticalitemObj =
                            addColumnsToListView(tableItem, tableItem.criticalitem);
                        $scope.check = true;
                        criticalitemObj.sectionId = tableItem.sectionId;
                        $scope.tableRows.push(criticalitemObj);

                    }
                    if (tableItem.deferredmaint != undefined && tableItem.deferredmaint.include) {
                        var deferredmaintObj = addColumnsToListView(tableItem, tableItem.deferredmaint);
                        $scope.check = true;
                        deferredmaintObj.sectionId = tableItem.sectionId;
                        $scope.tableRows.push(deferredmaintObj);


                    }
                    if (tableItem.yearlyCostSpread.length > 0) {
                        angular.forEach(tableItem.yearlyCostSpread,
                            function (costSplitPerYear, index) {
                                var obj = addSplitCostColumnsToList(tableItem, costSplitPerYear);
                                $scope.check = true;
                                obj.sectionId = tableItem.sectionId;
                                $scope.tableRows.push(obj);
                                //$scope.count = $scope.count + 1;
                                //$scope.check = true;
                            })


                    }
                })
            }


            function addSplitCostColumnsToList(tableItem, costSplitPerYear) {

                var obj = {};

                obj.name = $scope.check ? "" : tableItem.name;
                obj.eul = $scope.check ? "" : tableItem.eul;
                obj.eff = $scope.check ? "" : tableItem.eff;
                obj.rul = $scope.check ? "" : tableItem.rul;
                obj.quantity = $scope.check ? "" : tableItem.quantity;
                obj.unit = $scope.check ? "" : tableItem.unit;
                obj.unitCost = $scope.check ? "" : tableItem.unitCost;
                obj.cycleReplacement = $scope.check ? "" : tableItem.cycleReplacement;
                obj.replacePercent = $scope.check ? "" : tableItem.replacePercent;
                obj.unallocatedCost = $scope.check ? "" : tableItem.unallocatedCost;
                obj.year = costSplitPerYear.label;
                obj.cost = costSplitPerYear.val;
                obj.criticalComments = $scope.check ? "" : tableItem.criticalComments;
                obj.source = $scope.check ? "" : tableItem.source;
                return obj;

            }

            function addColumnsToListView(tableItem, costObj) {
                var obj = {};
                //if($scope.check) obj.class = "same" + $scope.count;
                obj.name = $scope.check ? "" : tableItem.name;
                obj.eul = $scope.check ? "" : tableItem.eul;
                obj.eff = $scope.check ? "" : tableItem.eff;
                obj.rul = $scope.check ? "" : tableItem.rul;
                obj.unit = $scope.check ? "" : tableItem.unit;
                obj.unitCost = $scope.check ? "" : tableItem.unitCost;
                obj.cycleReplacement = $scope.check ? "" : tableItem.cycleReplacement;
                obj.replacePercent = $scope.check ? "" : tableItem.replacePercent;
                obj.unallocatedCost = $scope.check ? "" : tableItem.unallocatedCost;
                obj.year = costObj.name;
                obj.cost = costObj.val;
                return obj;
            }

            function getImmediateNotBlankName(index, event) {
                return $(event.target).parents('table tbody tr').eq(index).children().first().text();
            }

            function openPopUp() {
                var modalContainer = {
                    refreshAfter: false,
                    recommendationName: $scope.recommendationName,
                    completeRecommendationObject: $.grep($scope.tableItems, function (item) {
                        return item.name === $scope.recommendationName;
                    }),
                    groupTypes: $scope.groupTypes,
                    recommendationTypes: $scope.recommendationTypes,
                    group: $scope.group,
                    units: $scope.units,
                    conditions: $scope.conditions,
                    actions: $scope.actions
                }

                var modalInstance = $modal.open({
                    templateUrl: 'app/modules/ReportAuthoring/directives/costTables/Fannie/recommendationView.html',
                    controller: 'FannieRecommendationController',
                    size: 'lg',
                    resolve: {
                        dataContainer: function () {
                            return modalContainer;
                        }
                    }
                });

                modalInstance.result.then(function () {


                });
            }

            $scope.editRecommendation = function (recommendationData, index, firstClick, elem) {
                if (firstClick == 1) var elem = $(elem.target).parents('tr');

                var text = elem.children().children().first().text();
                if (text != "") {
                    $scope.recommendationName = text; //recommendationData.name;
                    openPopUp();
                } else {
                    elem = elem.prev();

                    $scope.editRecommendation(recommendationData, index, 0, elem);
                }
            }


            $scope.deleteRecommendation = function (recommendationData, index, firstClick, elem) {

                var modalContainer = {
                    refreshAfter: false,
                    recommendationName: $scope.recommendationName,
                    completeRecommendationObject: $.grep($scope.tableItems, function (item) {
                        return item.name === $scope.recommendationName;
                    }),

                    recommendationTypes: $scope.recommendationTypes
                }

                var modalInstance = $modal.open({
                    template: "<div class='modal-header'>" + "<h4 class='modal-title'>Confirmation</div>" + "</div>" + "<div class='modal-body'>" + "<p class='alert alert-danger'>Do you want to delete this record?</p>" + "</div>" + "<div class='modal-footer'>" + "<button ng-click='yes_click()' class='btn btn-default'> Yes </button>" + "<button ng-click='no_click()' class='btn btn-primary'> No </button>" + "</div>",
                    controller: ['$scope', '$modalInstance', function ($scope, $modalInstance) {
                        $scope.yes_click = function () {
                            var isDelete = ReportAuthoringAPI.deleteRecommendation("14", "25", recommendationData.recommendationId);
                            $modalInstance.close(isDelete);
                        };

                        $scope.no_click = function () {

                            $modalInstance.close(false);
                        };
                    }],
                    size: 'md',
                    resolve: {

                    }
                });

                modalInstance.result.then(function (isSuccess) {
                    if (isSuccess) {
                        $scope.alertData.status = 'show';
                        $scope.alertData.message = ParcelUI_Resources.messagesResources.deleted_Success;
                        $scope.alertData.type = 'success';
                        var deleteRecommendationObject = $.grep($scope.costTable.data[0].recommendation, function (item) {
                            return item.name === recommendationData.name;
                        });
                        var recommendationIndex = $scope.costTable.data[0].recommendation.indexOf(deleteRecommendationObject);
                        $scope.costTable.data[0].recommendation.splice(recommendationIndex, 1);
                        fillListTable({}, "default");
                    }

                });
            }



            $rootScope.$on('add-recommendationIn-List', function (event, args) {
                if ($scope.sectionId == args.newRecommendation.sectionId) {
                    var copyRecommendation = angular.copy(args.newRecommendation);

                    var tableName = $attrs.$$element.parent('div').attr('ng-repeat').split('.')[1]
                    var data = {
                        submitType: 'ADD',
                        propName: tableName,
                        data: copyRecommendation
                    }

                    var promise = commonFunctionsService.updateRecommedation($scope, data);

                    $scope.waitingProcessResources.promise = null;
                    $scope.waitingProcessResources.promise = promise;
                    promise.then(function () {
                        fillListTable(copyRecommendation, "insert");
                        $scope.alertData.status = 'show';
                        $scope.alertData.message = ParcelUI_Resources.messagesResources.saved_Success;
                        $scope.alertData.type = 'success';
                    });
                }
            });

            $rootScope.$on('update-recommendationIn-List', function (event, args) {

                if ($scope.sectionId == args.updateRecommendation.sectionId) {
                    var copyRecommendation = angular.copy(args.updateRecommendation);

                    var tableName = $attrs.$$element.parent('div').attr('ng-repeat').split('.')[1]

                    var data = {
                        submitType: 'UPDATE',
                        propName: tableName,
                        data: copyRecommendation
                    }

                    var promise = commonFunctionsService.updateRecommedation($scope, data);

                    $scope.waitingProcessResources.promise = null;
                    $scope.waitingProcessResources.promise = promise;
                    promise.then(function () {
                        updateListTable(copyRecommendation);

                        $scope.alertData.status = 'show';
                        $scope.alertData.message = ParcelUI_Resources.messagesResources.updated_Success;
                        $scope.alertData.type = 'success';
                    });
                }
            });



            function updateListTable(obj) {
                if (obj === undefined) return;
                else {
                    angular.forEach($scope.tableItems, function (item, index) {
                        console.log("compare while update " + item.name);
                        console.log("compare while update " + obj.name);
                        if (item.name == obj.name) {
                            $scope.tableItems[index] = obj;
                            fillListTable(obj, "update");
                        }
                    })

                }
            }

        }]
    }
}]);;
angular.module('ReportAuthoring').factory('freddieMacFunctionsService', ['$filter', function ($filter) {
    var factory = {};
    var recommendationObject = {};
    factory.fillPriorities = function ($scope, dataContainer) {
        if (dataContainer.completeRecommendationObject[0].critical != undefined && dataContainer.completeRecommendationObject[0].critical.include) {
            $scope.costSpread['critical'] = dataContainer.completeRecommendationObject[0].critical;
        }
        if (dataContainer.completeRecommendationObject[0].priority90Days != undefined && dataContainer.completeRecommendationObject[0].priority90Days.include) {
            $scope.costSpread['priority90Days'] = dataContainer.completeRecommendationObject[0].priority90Days;
        }
        if (dataContainer.completeRecommendationObject[0].priority != undefined && dataContainer.completeRecommendationObject[0].priority.include) {
            $scope.costSpread['priority'] = dataContainer.completeRecommendationObject[0].priority;
        }
    }


    factory.fillConstantValues = function (self, tableData) {
        self.evalPeriod = tableData.reserveTableConstantValues.evaluationPeriod;
        self.squareFootage = tableData.reserveTableConstantValues.totalSquareFootage;
        self.unInflated = tableData.reserveTableConstantValues.reservePerSFPerYearUninflated;
        self.inflated = tableData.reserveTableConstantValues.reservePerSFPerYearInflated;
        self.totalUninflatedYearWise = tableData.reserveTableConstantValues.totalUninflatedYearWise;
        self.inflationFactorYearWise = tableData.reserveTableConstantValues.inflationFactorYearWise;
        self.totalInflatedYearWise = tableData.reserveTableConstantValues.totalInflatedYearWise;
        self.totalInflated = tableData.reserveTableConstantValues.totalInflated;
        self.totalUninflated = tableData.reserveTableConstantValues.totalUninflated;
    }

    factory.fillRecommendations = function (self, tableData) {
        self.sections = [];
        angular.forEach(tableData.recommendations.sections, function (section, index) {
            var obj = {};
            obj.section = section.section;
            obj.sectionId = section.sectionId;
            obj.sectionName = section.sectionName;
            var sectionId = section.section;
            self.sections.push(obj);
            angular.forEach(section.components, function (component, index) {
                component.section = sectionId;
                component.name = component.componentDescription;
                for (var i = 0; i < self.yearlyDistribution; i++) {
                    if (component.yearlyCostSpread[i] == undefined) {
                        var obj = {};
                        obj.label = i + 1;
                        obj.val = "";
                        obj.include = false;
                        component.yearlyCostSpread.splice(i, 0, obj);
                    } else if (component.yearlyCostSpread[i].label != i + 1) {
                        var obj = {};
                        obj.label = i + 1;
                        obj.val = "";
                        obj.include = false;
                        component.yearlyCostSpread.splice(i, 0, obj);

                    }
                }
                self.recommendations = section.components;
            })

        });
    }



    factory.createRecommendationObject = function (self, recommendationHeader) {



        //$scope.freddieObject.costSpread = $scope.costSpread;


        var obj = {};
        obj.recommendationHeader = recommendationHeader;
        obj.recType = self.recommendation.recType.value == "other_" ? {
            value: self.recommendation.recType.value,
            name: self.recommendation.otherRecommendationType
        } : self.recommendation.recType;


        obj.name = self.recommendation.recType.value == "other_" ? self.recommendation.otherRecommendationType : self.recommendation.recType.name;


        obj.eul = self.recommendation.eul;
        obj.eff = self.recommendation.eff;
        obj.rul = self.recommendation.rul;
        obj.quantity = self.recommendation.quantity;
        obj.unit = self.recommendation.unit;
        obj.unitCost = self.recommendation.unitCost;
        obj.cycleReplacement = self.recommendation.cycleReplacement;
        obj.replacePercent = self.recommendation.replacePercent;
        obj.totalCost = self.recommendation.totalCost;
        obj.unallocatedCost = self.recommendation.unallocatedCost;
        if (self.costSpread['critical'].include != undefined && self.costSpread['critical'].include) {
            obj.critical = {};

            obj.critical = self.costSpread['critical'];
            obj.critical.name = "critical";
        }
        if (self.costSpread['priority90Days'].include != undefined && self.costSpread['priority90Days'].include) {
            obj.priority90Days = {};

            obj.priority90Days = self.costSpread['priority90Days'];
            obj.priority90Days.name = "priority90Days";
        }
        if (self.costSpread['priority'].include != undefined && self.costSpread['priority'].include) {
            obj.priority = {};

            obj.priority = self.costSpread['priority'];
            obj.priority.name = "priority";
        }

        obj.yearlyCostSpread = [];
        for (i = 1; i <= self.yearlyDistribution; i++) {
            var x = "yr" + "_" + i;
            if (self.costSpread[x].include != undefined && self.costSpread[x].include) {
                obj.yearlyCostSpread.push(self.costSpread[x]);
                obj.yearlyCostSpread[obj.yearlyCostSpread.length - 1].label = i;
            }
        }
        obj.criticalComments = self.recommendation.criticalComments;
        obj.conditionComments = self.recommendation.conditionComments;

        obj.condition = ["E", "P"];
        obj.action = ["CR", "PR"];


        return obj;
    }

    return factory;
}]);
angular.module('ReportAuthoring').controller('FreddieMacRecommendationController', ['$scope', '$modalInstance', 'ReportAuthoringAPI', 'dataContainer', '$filter', '$rootScope', 'freddieMacFunctionsService', 'commonFunctionsService', function ($scope, $modalInstance, ReportAuthoringAPI, dataContainer, $filter, $rootScope, freddieMacFunctionsService, commonFunctionsService) {

    $scope.commonFunctionsService = commonFunctionsService;

    $scope.yearlyDistribution = 10;
    $scope.recommendation = {};
    $scope.costSpread = {};
    $scope.calculateObj = {};

    function init() {

        if (!$scope.recommendation) return;

        commonFunctionsService.fillOtherDetails($scope, dataContainer);
        freddieMacFunctionsService.fillPriorities($scope, dataContainer);
        commonFunctionsService.fillYearlyDistribution($scope, dataContainer);
        $scope.recommendation.groupTypes = dataContainer.groupTypes;

        var selectedGroupTypeArr = $filter('filter')(dataContainer.groupTypes, {
            value: dataContainer.group
        });

        $scope.recommendation.group = {
            value: selectedGroupTypeArr[0].value,
            name: selectedGroupTypeArr[0].name
        };
    }

    init();

    $scope.addUpdateRecommendation = function () {
        var updateRecommendationobj = {};

        updateRecommendationobj = freddieMacFunctionsService.createRecommendationObject($scope, '');
        var result = ReportAuthoringAPI.addUpdateRecommendation(updateRecommendationobj);
        if (result) {
            $scope.$emit('update-recommendationIn-List', {
                updateRecommendation: updateRecommendationobj
            });
        }
        $scope.close();

    }

    $scope.showCalculator = function (element) {

        commonFunctionsService.showCalculator($scope);
    }


    $scope.close = function () {
        $modalInstance.close();
    }




    /*$scope.$on('fill-recommendation-details',function(event,args){
        console.log("reached rrrr " + JSON.stringify(args));
    })*/
}]);;
angular.module('ReportAuthoring').directive('freddieMacRecommendationList', ['$rootScope', '$filter', '$timeout', function ($rootScope, $filter, $timeout) {
    return {
        restrict: 'A',
        replace: true,
        transclude: true,
        scope: {
            costTable: '=',
            alertData: '='
        },

        templateUrl: 'app/modules/ReportAuthoring/directives/costTables/freddie/recommendationListView.html',

        controller: ['$scope', '$timeout', '$modal', '$attrs', 'ParcelUI.Resources', 'commonFunctionsService', function ($scope, $timeout, $modal, $attrs, ParcelUI_Resources, commonFunctionsService) {

            $scope.putBgColor = function (item, index, odd, even) {

                if (index == 0) {
                    item.bgColor = "grey";

                    return "grey";
                } else {
                    if (item.name == "") {
                        if ($scope.tableRows[index - 1].bgColor == "grey") {
                            item.bgColor = "grey";
                            return "grey";
                        }

                        if ($scope.tableRows[index - 1].bgColor == "white") {
                            item.bgColor = "white";
                            return "white";
                        }


                    } else {
                        if ($scope.tableRows[index - 1].bgColor == "grey") {
                            item.bgColor = "white";
                            return "white";
                        }

                        if ($scope.tableRows[index - 1].bgColor == "white") {
                            item.bgColor = "grey";
                            return "grey";
                        }

                    }
                }

            }

            $scope.sectionId = $scope.costTable.sectionId;
            $scope.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;


            init();

            function init() {
                $scope.freddieMacHeaders = $scope.costTable.listHeaders;

                //create tables

                if ($scope.costTable.data.length > 0) {
                    $scope.tableItems = $scope.costTable.data[0].recommendation;
                    $scope.group = $scope.costTable.data[0].group;
                }

                $scope.recommendationHeader = $scope.costTable.recommendationHeader;
                $scope.recommendationTypes = $scope.costTable.recommendationTypes;
                $scope.groupTypes = $scope.costTable.groupTypes;
                $scope.units = $scope.costTable.unit;

                fillListTable({}, "default");
            }

            function fillListTable(obj, operation) {
                $scope.tableRows = [];

                if (JSON.stringify(obj) === '{}' && operation === "default")
                    fillListView($scope.tableItems);
                else if (JSON.stringify(obj) !== '{}' && operation === "update")
                    fillListView($scope.tableItems);
                else if (JSON.stringify(obj) !== '{}' && operation === "insert") {

                    $scope.tableItems = [];
                    if ($scope.recommendationHeader === obj.recommendationHeader) {
                        if ($scope.costTable.data) {
                            $scope.tableItems = $scope.costTable.data;
                        }
                        $scope.tableItems.push(obj);
                        fillListView($scope.tableItems);
                    } else {
                        $scope.tableItems = $scope.costTable.data;
                        fillListView($scope.tableItems);
                    }
                }

            }


            function fillListView(tableItems) {
                angular.forEach(tableItems, function (tableItem, index) {

                    $scope.check = false;

                    if (tableItem.critical != undefined && tableItem.critical.include) {
                        var criticalObj = addColumnsToListView(tableItem, tableItem.critical);
                        $scope.check = true;
                        criticalObj.sectionId = $scope.sectionId;
                        $scope.tableRows.push(criticalObj);


                    }
                    if (tableItem.priority90Days != undefined &&
                        tableItem.priority90Days.include) {
                        var priority90DaysObj =
                            addColumnsToListView(tableItem, tableItem.priority90Days);
                        $scope.check = true;
                        priority90DaysObj.sectionId = $scope.sectionId;
                        $scope.tableRows.push(priority90DaysObj);

                    }
                    if (tableItem.priority != undefined && tableItem.priority.include) {
                        var priorityObj = addColumnsToListView(tableItem, tableItem.priority);
                        $scope.check = true;
                        priorityObj.sectionId = $scope.sectionId;
                        $scope.tableRows.push(priorityObj);


                    }
                    if (tableItem.yearlyCostSpread.length > 0) {
                        angular.forEach(tableItem.yearlyCostSpread,
                            function (costSplitPerYear, index) {
                                var obj = addSplitCostColumnsToList(tableItem, costSplitPerYear);
                                $scope.check = true;
                                obj.sectionId = $scope.sectionId;
                                $scope.tableRows.push(obj);
                                //$scope.count = $scope.count + 1;
                                //$scope.check = true;
                            })


                    }
                })
            }


            function addSplitCostColumnsToList(tableItem, costSplitPerYear) {

                var obj = {};

                obj.name = $scope.check ? "" : tableItem.name;
                obj.eul = $scope.check ? "" : tableItem.eul;
                obj.eff = $scope.check ? "" : tableItem.eff;
                obj.rul = $scope.check ? "" : tableItem.rul;
                obj.quantity = $scope.check ? "" : tableItem.quantity;
                obj.unit = $scope.check ? "" : tableItem.unit;
                obj.unitCost = $scope.check ? "" : tableItem.unitCost;
                obj.cycleReplacement = $scope.check ? "" : tableItem.cycleReplacement;
                obj.replacePercent = $scope.check ? "" : tableItem.replacePercent;
                obj.unallocatedCost = $scope.check ? "" : tableItem.unallocatedCost;
                obj.year = costSplitPerYear.label;
                obj.cost = costSplitPerYear.val;
                obj.criticalComments = $scope.check ? "" : tableItem.criticalComments;
                obj.conditionComments = $scope.check ? "" : tableItem.conditionComments;

                return obj;

            }

            function addColumnsToListView(tableItem, costObj) {
                var obj = {};
                //if($scope.check) obj.class = "same" + $scope.count;
                obj.name = $scope.check ? "" : tableItem.name;
                obj.eul = $scope.check ? "" : tableItem.eul;
                obj.eff = $scope.check ? "" : tableItem.eff;
                obj.rul = $scope.check ? "" : tableItem.rul;
                obj.unit = $scope.check ? "" : tableItem.unit;
                obj.unitCost = $scope.check ? "" : tableItem.unitCost;
                obj.cycleReplacement = $scope.check ? "" : tableItem.cycleReplacement;
                obj.replacePercent = $scope.check ? "" : tableItem.replacePercent;
                obj.unallocatedCost = $scope.check ? "" : tableItem.unallocatedCost;

                obj.year = costObj.name;
                obj.cost = costObj.val;
                return obj;
            }

            function getImmediateNotBlankName(index, event) {
                return $(event.target).parents('table tbody tr').eq(index).children().first().text();
            }

            function openPopUp() {

                var modalContainer = {
                    refreshAfter: false,
                    recommendationName: $scope.recommendationName,
                    completeRecommendationObject: $.grep($scope.tableItems, function (item) {
                        return item.name === $scope.recommendationName;
                    }),
                    groupTypes: $scope.groupTypes,
                    recommendationTypes: $scope.recommendationTypes,
                    group: $scope.group,
                    units: $scope.units,
                    sectionId: $scope.sectionId

                }

                var modalInstance = $modal.open({
                    templateUrl: 'app/modules/ReportAuthoring/directives/costTables/freddie/recommendationView.html',
                    controller: 'FreddieMacRecommendationController',
                    size: 'lg',
                    resolve: {
                        dataContainer: function () {

                            return modalContainer;
                        }
                    }
                });

                modalInstance.result.then(function () {


                });
            }

            $scope.editRecommendation = function (recommendationData, index, firstClick, elem) {
                if (firstClick == 1) var elem = $(elem.target).parents('tr');


                var text = elem.children().first().text();
                if (text != "") {
                    $scope.recommendationName = text;
                    openPopUp();
                } else {
                    elem = elem.prev();

                    $scope.editRecommendation(recommendationData, index, 0, elem);
                }


            }


            $rootScope.$on('add-recommendationIn-List', function (event, args) {

                // if ($scope.sectionId == args.newRecommendation.sectionId) {
                var copyRecommendation = angular.copy(args.newRecommendation);

                var tableName = $attrs.$$element.parent('div').attr('ng-repeat').split('.')[1]
                var data = {
                    submitType: 'ADD',
                    propName: tableName,
                    data: copyRecommendation
                }

                var promise = commonFunctionsService.updateRecommedation($scope, data);

                $scope.waitingProcessResources.promise = null;
                $scope.waitingProcessResources.promise = promise;
                promise.then(function () {

                    fillListTable(copyRecommendation, "insert");
                    $scope.alertData.status = 'show';
                    $scope.alertData.message = ParcelUI_Resources.messagesResources.saved_Success;
                    $scope.alertData.type = 'success';
                });
                // }
            });

            $rootScope.$on('update-recommendationIn-List', function (event, args) {

                if ($scope.sectionId == args.updateRecommendation.sectionId) {
                    var copyRecommendation = angular.copy(args.updateRecommendation);

                    var tableName = $attrs.$$element.parent('div').attr('ng-repeat').split('.')[1]

                    var data = {
                        submitType: 'UPDATE',
                        propName: tableName,
                        data: copyRecommendation
                    }

                    var promise = commonFunctionsService.updateRecommedation($scope, data);

                    $scope.waitingProcessResources.promise = null;
                    $scope.waitingProcessResources.promise = promise;
                    promise.then(function () {
                        updateListTable(copyRecommendation);

                        $scope.alertData.status = 'show';
                        $scope.alertData.message = ParcelUI_Resources.messagesResources.updated_Success;
                        $scope.alertData.type = 'success';
                    });
                }
            });


            function updateListTable(obj) {
                if (obj === undefined) return;
                else {
                    angular.forEach($scope.tableItems, function (item, index) {
                        console.log("compare while update " + item.name);
                        console.log("compare while update " + obj.name);
                        if (item.name == obj.name) {
                            $scope.tableItems[index] = obj;
                            fillListTable(obj, "update");
                        }
                    })

                }
            }


        }]
    }
}]);;
angular.module('ReportAuthoring').controller('CostTablesListController', ['tableData', 'ReportAuthoringAPI', '$modal', '$rootScope', '$scope', '$filter', '$stateParams', 'freddieMacFunctionsService', 'emgFunctionsService', 'defaultFunctionsService', 'fannieFunctionsService', 'atcFunctionsService', 'commonFunctionsService', 'sharedService', function (tableData, ReportAuthoringAPI, $modal, $rootScope, $scope, $filter, $stateParams, freddieMacFunctionsService, emgFunctionsService, defaultFunctionsService, fannieFunctionsService, atcFunctionsService, commonFunctionsService, sharedService) {

    this.years = [];
    this.recommendations = [];
    this.yearlyDistribution = 10;
    this.sections = [];
    this.displayType = '';

    var self = this;

    function fillYearsInTableHeader() {
        commonFunctionsService.fillYearsInTableHeader(self, tableData);
    }

    function fillConstantValues() {
        switch (tableData.displayType) {

            case 'displayATC':
                atcFunctionsService.fillConstantValues(self, tableData);
                break;
            case 'displayDefault':
                defaultFunctionsService.fillConstantValues(self, tableData);
                break;
            case 'displayEMG':
                emgFunctionsService.fillConstantValues(self, tableData);
                break;
            case 'displayFannie':
                fannieFunctionsService.fillConstantValues(self, tableData);
                break;
            case 'displayFreddie2015':
                freddieMacFunctionsService.fillConstantValues(self, tableData);
                break;
            case 'displayHUD':

                break;


        }

    }

    function fillRecommendations() {

        commonFunctionsService.fillRecommendations(self, tableData);

    }

    this.getNumberArr = function (num) {
        var numArray = commonFunctionsService.getNumberArr(num);
        return numArray;
    }

    function init() {
        angular.element('.nav-tabs').hide();
        self.displayType = tableData.displayType;

        fillYearsInTableHeader();
        fillConstantValues();
        fillRecommendations();

        self.groupTypes = tableData.recommendations.groupTypes;
        //self.units = tableData.recommendations.unit;

    }

    init();

    this.editRecommendation = function (recomendation) {

        var templateUrl = getTemplateUrl();
        recomendation.recommendationTypes = tableData.recommendations.recommendationTypes;
        recomendation.groupTypes = tableData.recommendations.groupTypes;
        recomendation.units = tableData.recommendations.unit;
        openPopup(recomendation, templateUrl);
    }

    function getTemplateUrl() {
        var templateUrl = sharedService.getTemplateUrl(tableData.displayType);
        return templateUrl;
    }

    function openPopup(recommendationObject, templateUrl) {
        var modalContainer = {
            entireSectionRecommendation: recommendationObject,
            displayType: self.displayType
        }
        var modalInstance = $modal.open({
            templateUrl: templateUrl,
            controller: 'SectionRecommendation',
            size: 'lg',
            resolve: {
                dataContainer: function () {

                    return angular.copy(modalContainer);
                }
            }
        });
        modalInstance.result.then(function () {});
    }

    function updateListTable(obj) {
        if (obj === undefined) return;
        else {
            angular.forEach(self.recommendations, function (item, index) {
                console.log("compare while update " + item.name);
                console.log("compare while update " + obj.name);
                if (item.name == obj.name) {
                    var section = self.recommendations[index].section;
                    self.recommendations[index] = obj;
                    self.recommendations[index].componentDescription = obj.name;
                    self.recommendations[index].section = section;
                }
            })

        }
    }

    $rootScope.$on('update-recommendationIn-List', function (event, args) {
        updateListTable(args.updateRecommendation);

    });
}]);

angular.module('ReportAuthoring').controller('SectionRecommendation', ['dataContainer', '$scope', '$compile', '$filter', '$modalInstance', 'ReportAuthoringAPI', 'commonFunctionsService', 'freddieMacFunctionsService', 'defaultFunctionsService', 'fannieFunctionsService', 'emgFunctionsService', 'atcFunctionsService', function (dataContainer, $scope, $compile, $filter, $modalInstance, ReportAuthoringAPI, commonFunctionsService, freddieMacFunctionsService, defaultFunctionsService, fannieFunctionsService, emgFunctionsService, atcFunctionsService) {

    $scope.commonFunctionsService = commonFunctionsService;

    $scope.yearlyDistribution = 12;
    $scope.costSpread = {};
    $scope.close = function () {
        $modalInstance.close();
    }


    $scope.showCalculator = function (element) {
        commonFunctionsService.showCalculator($scope);

    }


    $scope.showSplitQtyUnit = function () {

        commonFunctionsService.showSplitQtyUnit($scope);
    }

    $scope.hideSplitQtyUnit = function () {
        commonFunctionsService.hideSplitQtyUnit();

    }
    $scope.splitsQtyUnits = function () {

        var unitCost = $scope.recommendation.unitCost;
        var immedCost = ($scope.costSpread['immed'] = $scope.costSpread['immed'] || {}).val
        var totalCost = $scope.recommendation.totalCost;

        if (isNaN(immedCost)) {
            immedCost = 0;

        }
        var reserveCost = totalCost - immedCost;

        if (unitCost > 0) {
            var immedQty = immedCost / unitCost;
            var reserveQty = reserveCost / unitCost;
            $scope.recommendation.immediateQty = immedQty;
            $scope.recommendation.reserveQty = reserveQty;
        }
        angular.element("a[rel=splitpopover]").popover('hide');
    }


    var listener = $scope.$watch(dataContainer, function () {
        commonFunctionsService.storeRecommendation(dataContainer);
    });


    listener();

    var tempdataContainer = {};
    tempdataContainer.completeRecommendationObject = [];
    tempdataContainer.completeRecommendationObject.
    push(dataContainer.entireSectionRecommendation);
    tempdataContainer.recommendationName = dataContainer.entireSectionRecommendation.
    componentDescription;
    tempdataContainer.recommendationTypes = dataContainer.entireSectionRecommendation.
    recommendationTypes;
    tempdataContainer.units = dataContainer.entireSectionRecommendation.
    units;

    switch (dataContainer.displayType) {

        case 'displayATC':
            atcFunctionsService.fillPriorities($scope, tempdataContainer);
            break;
        case 'displayDefault':
            defaultFunctionsService.fillPriorities($scope, tempdataContainer);
            break;
        case 'displayEMG':
            emgFunctionsService.fillPriorities($scope, tempdataContainer);
            break;
        case 'displayFannie':
            fannieFunctionsService.fillPriorities($scope, tempdataContainer);
            break;
        case 'displayFreddie2015':
            freddieMacFunctionsService.fillPriorities($scope, tempdataContainer);
            break;
        case 'displayHUD':

            break;
    }

    commonFunctionsService.fillOtherDetails($scope, tempdataContainer);

    commonFunctionsService.fillYearlyDistribution($scope, tempdataContainer);

    $scope.addUpdateRecommendation = function () {
        var updateRecommendationobj;

        switch (dataContainer.displayType) {
            case 'displayATC':
                updateRecommendationobj = atcFunctionsService.createRecommendationObject($scope, '');
                break;
            case 'displayDefault':
                updateRecommendationobj = defaultFunctionsService.createRecommendationObject($scope, '');
                break;
            case 'displayEMG':
                updateRecommendationobj = emgFunctionsService.createRecommendationObject($scope, '');
                break;
            case 'displayFannie':
                updateRecommendationobj = fannieFunctionsService.createRecommendationObject($scope, '');
                break;
            case 'displayFreddie2015':
                updateRecommendationobj = freddieMacFunctionsService.createRecommendationObject($scope, '');
                break;
            case 'displayHUD':

                break;
        }

        var result = ReportAuthoringAPI.addUpdateRecommendation(updateRecommendationobj);
        if (result) {
            $scope.$emit('update-recommendationIn-List', {
                updateRecommendation: updateRecommendationobj
            });
        }

        $scope.close();
    }

}]);


angular.module('ReportAuthoring').directive('costtablePdf', ['$state', '$window', '$stateParams', 'ReportAuthoringAPI', '$timeout', 'commonFunctionsService', 'freddieMacFunctionsService', 'defaultFunctionsService', 'fannieFunctionsService', 'emgFunctionsService', 'atcFunctionsService', function ($state, $window, $stateParams, ReportAuthoringAPI, $timeout, commonFunctionsService, freddieMacFunctionsService, defaultFunctionsService, fannieFunctionsService, emgFunctionsService, atcFunctionsService) {
    return {
        restrict: 'A',
        link: function (scope, elem, attr) {

            scope.years = [];
            scope.recommendations = [];
            scope.yearlyDistribution = 10;
            scope.sections = [];
            scope.tableData = [];
            var self = scope;

            init();

            function init() {
                //angular.element('.nav-tabs').hide();

                getData(scope.packageId, scope.tableId);

            }


            function getData(packageId, tableId) {
                ReportAuthoringAPI.getCostTableData($stateParams.SiteId, packageId, tableId).then(function (result) {

                    self.tableData = result;
                    fillSections();
                    fillYearsInTableHeader();
                    fillConstantValues();
                    fillRecommendations();
                    self.groupTypes = self.tableData.recommendations.groupTypes;
                })
            }

            function fillSections() {
                angular.forEach(self.tableData.recommendations.sections, function (section, index) {
                        self.sections.push(section.sectionName);
                    })
                    //FreddieMacCommonFunctions.fillYearsInTableHeader(self, self.tableData);
            }

            function fillYearsInTableHeader() {
                commonFunctionsService.fillYearsInTableHeader(self, self.tableData);
            }

            function fillConstantValues() {
                switch (self.tableData.displayType) {

                    case 'displayATC':
                        atcFunctionsService.fillConstantValues(self, self.tableData);
                        break;
                    case 'displayDefault':
                        defaultFunctionsService.fillConstantValues(self, self.tableData);
                        break;
                    case 'displayEMG':
                        emgFunctionsService.fillConstantValues(self, self.tableData);
                        break;
                    case 'displayFannie':
                        fannieFunctionsService.fillConstantValues(self, self.tableData);
                        break;
                    case 'displayFreddie2015':
                        freddieMacFunctionsService.fillConstantValues(self, self.tableData);
                        break;
                    case 'displayHUD':

                        break;
                }
            }

            function fillRecommendations() {

                commonFunctionsService.fillRecommendations(self, self.tableData);

            }

            this.getNumberArr = function (num) {
                var numArray = commonFunctionsService.getNumberArr(num);
                return numArray;

            }


            $timeout(function () {
                //var x =  $element.parent().parent().html();

                scope.$broadcast('openpdf', {
                    html: elem.html()
                });

            });

        },
        controller: function ($scope, $element) {


        }
    }
}]);
angular.module('ReportAuthoring').directive('packageSelection', [function () {
    return {
        restrict: 'A',

        templateUrl: 'app/modules/ReportAuthoring/directives/costTables/reports/packageSelectionDefaultView.html',

        controller: ['$scope', '$window', '$state', '$http', '$compile', '$timeout', '$stateParams', function ($scope, $window, $state, $http, $compile, $timeout, $stateParams) {

            init();

            function init() {
                $scope.packages = [];
                $scope.packageSelected = false;
                fillPackages();
            }



            function fillPackages() {
                if ($scope.resp.packages.packagesArray === undefined) return;
                angular.forEach($scope.resp.packages.packagesArray, function (package, index) {
                    var obj = {};
                    obj.name = package.packageName;
                    obj.id = package.packageId;
                    $scope.packages.push(obj);
                })
            }


            $scope.changeReportsWithPackages = function () {
                $scope.packageSelected = true;
                $scope.cosTables = [];
                angular.forEach($scope.resp.packages.packagesArray, function (package, index) {
                    if (package.packageName === $scope.package.name) {
                        if ($scope.package.name === "None") $scope.packageSelected = false;
                        angular.forEach(package.tables, function (table, index) {
                            var obj = {};
                            obj.name = table.tableName;
                            obj.tableType = table.tableType;
                            obj.tableId = table.tableId;
                            $scope.cosTables.push(obj);
                        })
                    }
                })
            }

            $scope.openWindowWithRecommendations = function (table) {

                console.log("reached on click " + table.tableId, $scope.package.id);
                var url = $state.href('ReportAuthoring.CostTable', {
                    SiteId: $stateParams.SiteId,
                    tableType: table.tableType,
                    packageId: $scope.package.id,
                    tableId: table.tableId
                });
                $window.open(url, {
                    absolute: true
                }, 'self');
            }

            $scope.generatePdf = function (table) {

                $http.get('app/modules/ReportAuthoring/directives/costTables/reports/' + table.tableType + '/' + table.tableType + 'PdfView.html').then(function (result) {

                    $scope.packageId = $scope.package.id;
                    $scope.tableId = table.tableId;
                    $compile(result.data)($scope);

                    $scope.$on('openpdf', function (event, args) {
                        console.log("pdf html " + args.html);

                    });


                });
            }


        }]
    }


}]);
angular.module('ReportAuthoring').directive('ckEditor', ['$timeout', 'MouseClickCopyService', 'ReportOutputAPI', '$rootScope', '$compile', '$filter', 'ReportAuthoringAPI', 'DefaultLanguageLibraryAPI', 'ParcelUI.Resources', 'BASEURL', '$stateParams', '$interval', 'PerformedOperation', function ($timeout, MouseClickCopyService, ReportOutputAPI, $rootScope, $compile, $filter, ReportAuthoringAPI, DefaultLanguageLibraryAPI, ParcelUI_Resources, BASEURL, $stateParams, $interval, PerformedOperation) {
    CKEDITOR.disableAutoInline = true;
    $rootScope.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;
    $rootScope.waitingHistoryResources = ParcelUI_Resources.waitingHistoryResources;
    $rootScope.waitingLibraryResources = ParcelUI_Resources.waitingLibraryResources;

    return {
        require: '?ngModel',
        link: function (scope, elm, attr, ngModel) {

            if (scope.contentValues != undefined && scope.contentValues != null) {

                var splitArr = attr.ngModel ? attr.ngModel.split('.') : null;
                var ckProp = splitArr && splitArr.length ? splitArr[splitArr.length - 1] : null;
                scope.ckProp = ckProp;
                var filtered = $filter("filter")(scope.contentValues.ImportData, {
                    destinationDivID: ckProp
                });

                // if (scope.contentValues && scope.contentValues.ImportData && scope.contentValues.ImportData.length && filtered && filtered.length) {
                //                var parentEl = elm.parent();
                //                var btnHtmlText = "<div class='text-right bottom-margin-xs'><button class='btn btn-primary btn-md' ng-click='importDataClick(\"" + parentEl + "\")'>Import Data</button></div>";
                //                var templateFn = $compile(btnHtmlText);
                //                parentEl.prepend(templateFn(scope));

            }
            var height = attr.editorHeight;
            var fullPage = attr.editorFullPage;
            // var editorangular = CKEDITOR.inline(elm[0]);
            var ck = CKEDITOR.replace(elm[0], {
                height: height ? height : '100%',
                fullPage: fullPage ? fullPage === "true" : false,
                allowedContent: true, //enterMode : CKEDITOR.ENTER_BR,                
                //contentsCss: 'scripts/CKEditor/ckEditorStyle.css',
                /* on: {
                     instanceReady: function (ev) {
                         // Output paragraphs as <p>Text</p>.
                         this.dataProcessor.writer.setRules('p', {
                             indent: true,
                             breakBeforeOpen: false,
                             breakAfterOpen: false,
                             breakBeforeClose: false,
                             breakAfterClose: false
                         });
                     }
                 }*/

            });

            // to be used by other controllers
            // used by 'ReportOutputSetupController' to retrieve editor data
            scope.ckInstance = ck;
            selectSectionElement("title");
            selectSectionElement("sub-title");
            selectSectionElement("sub-sub-title");
            selectSectionElement("narrative");
            selectSectionElement("photos");
            if (scope.resp != undefined) {
                var sectionGUID = scope.resp.sectionGUID;
                var reportGUID = scope.resp.reportGUID;
                var sectionID = scope.resp.sectionID;
            }

            //If CK editor don't want any plugin to display, add remove-ck-plugin attr on ck directive element.
            // e.g- remove-ck-plugin="plugin1,plugin2", seperate plugin name by comma(,). No space.
            if (attr.removeCkPlugin != undefined) {
                var pluginToRemove = attr.removeCkPlugin.split(",");
                for (var i = 0; i < pluginToRemove.length; i++) {
                    scope.ckInstance.config.removePlugins = pluginToRemove[i];
                }
            }

            scope.ckInstance.config.contentsCss = 'scripts/CKEditor/ckEditorStyle.css';
            scope.ckInstance.config.editorCss = 'scripts/CKEditor/skins/moono/editor.css';
            scope.ckInstance.config.format_tags = 'p;h1;h2;h3;h4;h5;h6;pre;address;div';
            /*scope.ckInstance.on('change', function () {
                scope.ckInstance.config.addPlugins = 'saveCkData';
            });*/

            //This command executed from saveCkData plugin
            ck.addCommand("saveReportWritingCkData", {
                exec: function (edt) {
                    scope.stopInterval();
                    if (ck.checkDirty() && scope.isCkDirty == true) {
                        var htmlData = edt.getData();
                        var splitArr = attr.ngModel ? attr.ngModel.split('.') : null;
                        var ckPropName = splitArr && splitArr.length ? splitArr[splitArr.length - 1] : null;
                        scope.contentValues.ckEditData[ckPropName] = htmlData;

                        var data = {
                            "formSectionData": [
                                {
                                    "sectionGUID": scope.resp.sectionGUID,
                                    "sectionData": {
                                        "operationCode": PerformedOperation.EDIT,
                                        "contentValues": scope.contentValues

                                    }
                              }]
                        };

                        scope.msg = 'Your information was updated successfully. \n Section <strong>' +
                            scope.resp.sectionNumber + ' - ' + scope.resp.sectionName + '</strong> saved.';

                        updateSection(data);
                        //ReportAuthoringAPI.updateSection($stateParams.reportGuid, scope.sectionGUID, data);
                    }

                }
            });

            /*ck.on('pasteState', function() {
                console.log("pasteState");

                scope.$apply(function() {
                    ngModel.$setViewValue(ck.getData());
                });
            });*/

            var stopTime;
            ck.on('change', function (event) {
                var isSpellcheckRunning = window.localStorage.getItem('isSpellcheckRunning');
                if (ck.checkDirty()) {
                    var _p = ck.plugins.saveReportWritingCkData.path + "icons";
                    $(ck.container.$).find('.cke_button__savebtndisable_icon').css('background-position', '0 0').css('background-image', 'url("' + _p + '/savebtn.png")').css('background-repeat', 'no-repeat');
                }

                if (isSpellcheckRunning == "false") {
                    var editorSaveCounter = 0;

                    editorSaveCounter = 0;
                    scope.isCkDirty = true;

                    // update ng-model
                    ngModel.$setViewValue(ck.getData());
                    if (angular.isDefined(stopTime)) return;
                    stopTime = $interval(function () {
                        editorSaveCounter = 0;
                        scope.stopInterval();
                        if (ck.checkDirty() && scope.isCkDirty == true) {
                            var htmlData = event.editor.getData();
                            var splitArr = attr.ngModel ? attr.ngModel.split('.') : null;
                            var ckPropName = splitArr && splitArr.length ? splitArr[splitArr.length - 1] : null;
                            var oldEditorData = scope.contentValues.ckEditData[ckPropName];

                            // if (oldEditorData != htmlData) {
                            scope.contentValues.ckEditData[ckPropName] = htmlData;

                            var data = {
                                "formSectionData": [
                                    {
                                        "sectionGUID": scope.resp.sectionGUID,
                                        "sectionData": {
                                            "contentValues": scope.contentValues

                                        }
                                    }]
                            };

                            scope.msg = 'Contents auto saved. \n Section <strong>' +
                                scope.resp.sectionNumber + ' - ' + scope.resp.sectionName + '</strong> saved.';

                            //autosave call after 2 minutes
                            updateSection(data);
                        }
                        //}
                    }, 120000);
                }
            });

            scope.stopInterval = function () {
                $interval.cancel(stopTime);
                stopTime = undefined;
            };

            scope.$on('$destroy', function () {
                // Make sure that the interval is destroyed too
                scope.stopInterval();
            });

            ck.on('instanceReady', function (ev) {
                var editor = ev.editor;
                editor.setReadOnly(false);

                $('#cke_' + ev.editor.name).find(".cke_reset_all").hide();
            });
            ck.on('focus', function (event) {

                // window.localStorage.setItem('isSpellcheckRunning', false);

                $('#cke_' + event.editor.name).find(".cke_reset_all").show();

                if (scope.flag == "History" && scope.allSectionMode == true) {

                    //scope.$parent.getSectionHistory();
                    scope.historyArr = [];
                    ReportAuthoringAPI.putHistoryArray(scope.historyArr);

                    var promise = ReportAuthoringAPI.getHistory($stateParams.reportGuid, scope.resp.sectionGUID);
                    $rootScope.waitingHistoryResources.promise = promise;
                    scope.historyArr = [];
                    return promise.then(function (resp) {

                        for (var i = 0; i < resp.history.length; i++) {

                            scope.historyArr.push(resp.history[i]);
                            ReportAuthoringAPI.putHistoryArray(scope.historyArr);

                        }

                        ReportAuthoringAPI.putHistoryArray(scope.historyArr);

                    });
                }

                if (scope.flag == "Library" && scope.allSectionMode == true) {
                    var libraryID = ReportAuthoringAPI.getLibraryID();
                    var promise = DefaultLanguageLibraryAPI.getLanguageBySection(libraryID, scope.resp.sectionGUID);
                    $rootScope.waitingLibraryResources.promise = promise;
                    return promise.then(function (languages) {
                        ReportAuthoringAPI.putLanguageArray(languages);

                    })
                }

                //$timeout(function () {
                if (typeof FindReplace.pause === "function") {
                    FindReplace.pause();
                }
                //});


            });
            ck.on('blur', function (event) {

                var isSpellcheckRunning = window.localStorage.getItem('isSpellcheckRunning');
                if (isSpellcheckRunning == "false") {
                    $('#cke_' + event.editor.name).find(".cke_reset_all").hide();
                    scope.stopInterval();

                    var splitArr = attr.ngModel ? attr.ngModel.split('.') : null;
                    var ckPropName = splitArr && splitArr.length ? splitArr[splitArr.length - 1] : null;
                    if (ck.checkDirty() || scope.isCkDirty == true) {
                        var htmlData = event.editor.getData();
                        var oldEditorData = scope.contentValues.ckEditData[ckPropName];

                        // if (oldEditorData != htmlData) {
                        scope.contentValues.ckEditData[ckPropName] = htmlData;

                        var data = {
                            "formSectionData": [
                                {
                                    "sectionGUID": scope.resp.sectionGUID,
                                    "sectionData": {
                                        "operationCode": PerformedOperation.EDIT,
                                        "contentValues": scope.contentValues
                                    }
                          }]
                        };
                        //self.successMsg = ''
                        scope.msg = 'Your information was updated successfully. \n Section ' +
                            scope.resp.sectionNumber + ' - ' + scope.resp.sectionName + ' saved.';
                        //ngModel.$setViewValue(ck.getData());
                        updateSection(data);
                    }
                }
                // $(this.contentAreaContainer.parentElement).find("div.cke_reset_all").hide();
                //  $(this.contentAreaContainer.parentElement).find("div.mce-container-body").hide(); 

            });

            /*  updateModel = function() {
				  alert("updateModel");
				  return scope.$apply(function() {
					return ngModel.$setViewValue(ck.getData());
				  });
				}};
		
			ck.on('change', updateModel);*/

            ck.on('change', function (event) {
                // update ng-model
                ngModel.$setViewValue(ck.getData());
            });
            /* ck.on('dragstart', function (event) {
                // update ng-model
                alert("dragstart");
            });
CKEDITOR.on('mouseup', function(event) {
  console.log("dffd");
  });
CKEDITOR.keystrokeHandler = function( editor ) {};*/

            /* $(".cke_editable").mouseup(function() {
  alert( "Handler for .mouseup() called." );
});
            */
            ck.on('selectionChange', function (event) {
                /*var sel = ck.getSelection();
var element = sel.getStartElement();
sel.selectElement(element);
                var ranges = ck.getSelection().getRanges();
                ranges[0].setStart(element.getFirst(), 0);
ranges[0].setEnd(element.getFirst(), 0);*/
                /* var selection = ck.getSelection();
  var range = selection.getRanges()[0];
  var cursor_position = range.startOffset;*/
                /* var element = sel.getStartElement();
                 sel.selectElement(element);*/
                $timeout(function () {
                    insertHtml();
                });

                // update ng-model
                ngModel.$setViewValue(ck.getData());
            });

            /*           ck.document.on('mouseup', function (e) {
alert("mouseup");
});*/


            $rootScope.$on("cancel-editor-edit", function () {
                if (ngModel.$rollbackViewValue) {
                    ngModel.$rollbackViewValue();
                }
            });

            /* elm.bind('click', function(){
             	window.alert("sdfdsdf");
                 for(name in CKEDITOR.instances)
                     CKEDITOR.instances[name].destroy();
                 CKEDITOR.replace(element[0]);
             });*/
            ngModel.$render = function (value) {
                ck.setData(ngModel.$viewValue);
            };

            function disableSaveButton() {
                var _p = ck.plugins.saveReportWritingCkData.path + "icons";
                $(ck.container.$).find('.cke_button__savebtndisable_icon').css('background-position', '0 0').css('background-image', 'url("' + _p + '/savebtndisable.png")').css('background-repeat', 'no-repeat');
            }

            scope.$on('disable-save-button', function (event) {
                disableSaveButton();
            });

            function updateSection(data) {
                scope.newCKData = data.formSectionData[0].sectionData.contentValues;
                ReportAuthoringAPI.updateSection($stateParams.reportGuid, scope.sectionGUID, data)
                    .then(
                        function (response) {
                            var newCkEditData;
                            if (scope.newCKData && scope.newCKData.ckEditData)
                                newCkEditData = scope.newCKData.ckEditData;
                            else
                                newCkEditData = scope.resp.contentValues.ckEditData;

                            //scope.resp.contentValues.ckEditData = scope.newCKData.ckEditData;
                            scope.$emit('update-ckedit-data', {
                                ckEditData: newCkEditData,
                                sectionID: scope.resp.sectionID
                            });
                            disableSaveButton();

                            new PNotify({
                                title: 'Success',
                                text: scope.msg,
                                type: 'success',
                                addclass: "stack-bottomright",
                                stack: scope.$parent.stack_bottomright
                            });
                            scope.isCkDirty = false;

                            var _p = ck.plugins.saveReportWritingCkData.path + "icons";
                            $(ck.container.$).find('.cke_button__savebtndisable_icon').css('background-position', '0 0').css('background-image', 'url("' + _p + '/savebtndisable.png")').css('background-repeat', 'no-repeat');

                            if (scope.flag == "History") {

                                //scope.$parent.getSectionHistory();

                                var promise = ReportAuthoringAPI.getHistory($stateParams.reportGuid, scope.resp.sectionGUID);
                                $rootScope.waitingHistoryResources.promise = promise;
                                scope.historyArr = [];
                                return promise.then(function (resp) {

                                    for (var i = 0; i < resp.history.length; i++) {

                                        scope.historyArr.push(resp.history[i]);
                                        // ReportAuthoringAPI.putHistoryArray(scope.historyArr);

                                    }
                                    ReportAuthoringAPI.putHistoryArray(scope.historyArr);


                                });
                            }

                        },
                        function (error) {
                            new PNotify({
                                title: 'Error',
                                text: 'Your information was not updated successfully.',
                                type: 'error',
                                addclass: "stack-bottomright",
                                stack: scope.$parent.stack_bottomright
                            });
                        });
            }


            function insertHtml() {
                var copied = MouseClickCopyService.getCopied();
                if (copied) {
                    // ck.insertHtml(copied);
                    if (copied.source == "toCopyLibrary") {
                        copied.html = copied.html.substring(0, copied.html.length - 1);
                        console.log("copy lib");
                        var text = ck.getData();
                        if (text.length > 1)
                            copied.html = "<p></p>" + copied.html;
                        else
                            copied.html = copied.html;
                        ck.insertHtml(copied.html);
                    } else if (copied.source == "toCopyHistory") {
                        console.log("copy history");
                        ck.setData(copied.html);
                        // ck.insertHtml(copied.html);
                    }
                }
            }




            function selectSectionElement(name) {
                /* var el = CKEDITOR.document.getById("section-narrative");
                 el.on("click", function(ev) {
                     alert("clic");
                 });*/

                var nativeText = {
                    title: "Title",
                    narrative: "Narrative"
                };

                var elemId = "section-" + name;
                var findString = nativeText[name];
                ck.customSelections = {};
                ck.on('contentDom', function () {
                    var narrative = this.document.getById(elemId);

                    function getComponent() {
                        return narrative;
                    }
                    if (narrative) {
                        narrative.on("blur", function () {});

                        narrative.on("click", function (event) {
                            var componentEl = getComponent();
                            componentEl.$.style.backgroundColor = "blue";
                            componentEl.$.style.color = "white";
                            componentEl.$.attributes["el-clicked"] = true;
                            var selection = ck.getSelection();

                            //var placeHolder = target.$.querySelector("#data-placeholder");
                            /*if (!ck.customSelections[name]) {
                                ck.customSelections[name] = selection.getStartElement();
                            }
                            selection.selectElement(ck.customSelections[name]);*/

                            var element = selection.getStartElement();
                            selection.selectElement(element);

                            var ranges = selection.getRanges();
                            ranges[0].setStart(element.getLast(), 0);
                            ranges[0].setEnd(element.getLast(), element.getLast().getLength());
                            selection.selectRanges([ranges[0]]);

                            /* var startIndex = element.getHtml().indexOf(findString);
                             if (startIndex != -1) {
                                 ranges[0].setStart(element.getFirst(), startIndex);
                                 ranges[0].setEnd(element.getLast(), startIndex + findString.length);
                                 selection.selectRanges([ranges[0]]);
                             }*/
                        });


                        narrative.$.onblur = function () {
                            alert("el blur");
                        };
                        narrative.focus = function () {
                            alert("compoenent focus");
                        };

                        //if (!ck.customSelections.documentOnClick) {
                        this.document.on('click', function (event) {
                            var target = event.data.getTarget();
                            var targetId = target.$.id;
                            var componentEl = getComponent();
                            if (targetId != elemId && !!componentEl.$.attributes["el-clicked"]) {
                                componentEl.$.style.backgroundColor = "rgb(238, 238, 238)";
                                componentEl.$.style.color = "";
                                componentEl.$.attributes["el-clicked"] = false;
                            }
                        });
                        // only one onclick event handler for CKEDITOR.document
                        // property used to indicate handler attachement
                        // case for there being multiple section-components
                        //ck.customSelections.documentOnClick = true;
                        //}
                    }
                });
            }
        },
        controller: ['$scope', '$sce', '$element', function ($scope, $sce, $element) {

            $scope.importDataClick = function (parentEl) {




                var filteredSourceSectionID = $filter("filter")($scope.contentValues.ImportData, {
                    destinationDivID: propName
                });

                for (var i = 0; i < $scope.$parent.ck.resp.sections.length; i++) {

                    if ($scope.$parent.ck.resp.sections[i].sectionID == filteredSourceSectionID[0].originSectionID) {
                        if (JSON.stringify($scope.$parent.ck.resp.sections[i].contentValues.ckEditData) != '{}') {
                            var dataFromSourceSection = $scope.$parent.ck.resp.sections[i].contentValues.ckEditData;

                            var divHtml = "";
                            for (var key in dataFromSourceSection) {
                                if (key == filteredSourceSectionID[0].originDivID) {
                                    var divHtml = dataFromSourceSection[key];
                                    break;
                                }


                            }

                            $scope.contentValues.ckEditData[propName] = $scope.contentValues.ckEditData[propName] + divHtml;

                            break;
                        }


                    }


                }


            }

        }]
    };
}]);





angular.module('ReportAuthoring').directive('addHtml', ['$compile', '$sce', 'ReportAuthoringAPI', function ($compile, $sce, ReportAuthoringAPI) {
    return {
        restrict: 'A',
        scope: {
            resp: '=resp',
            obj: '=obj',
            flag: '=flag',
            allSectionMode: '=allSectionMode',
            allTablesEditMode: '=allTablesEditMode',
            getSectionHistory: "&",
            isCkDirty: '='


        },
        link: function (scope, element, attrs) {


            scope.renderHtml = function (html_asText) {
                var renderedHtml = $sce.trustAsHtml(html_asText);
                return renderedHtml;
            };

            scope.showAllSections = false;
            scope.alertData = {};
            //console.log("html in directive: " + JSON.stringify(scope.obj));
            scope.setVisibility = function () {
                return scope.showAllSections || scope.obj.selectedSection == scope.sectionID;
            }
            var html = scope.resp.html;

            scope.$on(
                "editAllTables",
                function handleEditTableEvent(event, isTableEdit) {
                    scope.$broadcast("handleEditTable", isTableEdit);
                }
            );

            var filteredHtml = html.replace(/id='ckEdit'/g, "data-ck-editor");

            //***********************************************************

            //var filteredHtml = "<div ng-show='true'>"+ scope.resp.html+"</div>" ;

            //***********************************************************


            if (scope.resp.contentValues != null && scope.resp.contentValues != undefined && scope.resp.contentValues != "") {

                //scope.sectionTitle = scope.resp.name;
                // scope.sectionNumber = scope.resp.number;


                //   scope.resp.html = "<p>Your html code</p>";

                // scope.section1Title = scope.resp.contentValues.section1Title;
                scope.sectionID = scope.resp.sectionID;
                //console.log(scope.resp.SectionID,"SECTIONID");
                scope.sectionGUID = scope.resp.sectionGUID;
                scope.contentValues = scope.resp.contentValues;
                scope.html = scope.resp.html;

                var finalFilteredHtml = filteredHtml;
                /* scope.Y = scope.resp.contentValues.choice.Y;
                 scope.N = scope.resp.contentValues.choice.N;
                 scope.NS = scope.resp.contentValues.choice.NS;*/
                if (scope.resp.contentValues.table != undefined) {
                    scope.title = scope.resp.contentValues.table.title;
                    /* scope.r11 = scope.resp.contentValues.table.r11;
                     scope.r12 = scope.resp.contentValues.table.r12;
                     scope.r21 = scope.resp.contentValues.table.r21;
                     scope.r22 = scope.resp.contentValues.table.r22;*/
                }

                //Import Data

                //                                   for (var i = 0; i < $scope.$parent.ck.resp.sections.length; i++) {
                //                              if ($scope.$parent.ck.resp.sections[i].sectionID == 2) {
                //                                  console.log("import data button clicked: " + JSON.stringify($scope.$parent.ck.resp.sections[i]));
                //
                //                                  var dataFromSourceSection = $scope.$parent.ck.resp.sections[i].contentValues.ckEditData;
                //                                  for (var key in dataFromSourceSection) {
                //                                      if (key == "div01") {
                //                                          var divHtml = dataFromSourceSection[key];
                //                                          console.log("divHtml: " + divHtml);
                //                                          break;
                //                                      }
                //
                //
                //                                  }
                //
                //                              }
                //                          }

                //Import data ends


                scope.editLink = true;
                compiledElement = $compile(finalFilteredHtml)(scope);

                var pageElement = angular.element(element);

                pageElement.append(compiledElement);
            } else {

                var html = scope.resp.html;
                compiledElement = $compile(filteredHtml)(scope);

                var pageElement = angular.element(element);

                pageElement.append(compiledElement);
            }


        },
        controller: ['$scope', '$sce', '$element', function ($scope, $sce, $element) {

            $scope.submit = function () {
                var val = $scope.contentValues;
                console.log("submit Data" + JSON.stringify(val));
            }

            $scope.renderLayoutHtml = function (htmlStart, data, htmlEnd) {
                var complete = htmlStart + data + htmlEnd;
                return $sce.trustAsHtml(complete);
            }
            $scope.importData = function (originSectionID, originDivID, destinationDivID, isHardcoded) {


            }
         }]

    }
   }]);


angular.module('ReportAuthoring').directive("tagWithDashes", function () {
    var uniqueId = 1;
    return {
        restrict: "E",
        replace: true,
        templateUrl: 'app/modules/ReportAuthoring/views/tagWithDashes.html',
        link: function (scope, element, attrs, $sce, compile) {
            //scope.tagData = scope.resp.contentValues.tagData;
            scope.tagData = scope.resp.contentValues != undefined ? scope.resp.contentValues.tagData : scope.resp.sectionData.contentValues.tagData;
            //scope.tagData = $sce.trustAsHtml(scope.resp.contentValues.tagData)

            var item = 'item' + uniqueId++;
            element.attr('id', item);
            element.find('button').attr('id', item);
            element.find('i').attr('id', item);
        },
        controller: function ($scope) {
            $scope.expandCollapseTag = function (focusedValue) {

                var id = focusedValue.target.id;
                var parentNode = angular.element("div#" + id)[0];
                var target = angular.element("i#" + id)[0];
                var index = parentNode.className.lastIndexOf("summary-area-maximized");

                if (index > -1) {
                    angular.element(parentNode).removeClass('summary-area-maximized');
                    angular.element(target).removeClass('fa-minus');
                    angular.element(parentNode).addClass('summary-area-default');
                    angular.element(target).addClass('fa-plus');
                } else {
                    angular.element(parentNode).removeClass('summary-area-default');
                    angular.element(target).removeClass('fa-plus');
                    angular.element(parentNode).addClass('summary-area-maximized');
                    angular.element(target).addClass('fa-minus');
                }
            }
        }
    };
});

angular.module('ReportAuthoring').directive("includeExclude", function () {
    var uniqueId = 1;
    var includedArr = {};
    return {
        restrict: "E",
        scope: {
            sectionId: "=?sectionId",
            isIncluded: "=?isIncluded"
        },
        //replace: true,
        templateUrl: 'app/modules/ReportAuthoring/views/includeExclude.html',
        link: function (scope, element, attrs, $sce, compile) {
            if (scope.isIncluded) {
                scope.isIncludedText = 'Yes';
                element.find('button').eq(1).addClass('btn-success');
            } else {
                scope.isIncludedText = 'No';
                element.find('button').eq(1).addClass('btn-danger');
            }
            //scope.dataSectionId = attrs.dataSectionId;
            //element.attr('id' ,'btnInclude_'+ scope.sectionID+'_'+uniqueId);
            uniqueId++;

        },
        controller: function ($scope, $timeout) {
            $scope.isIncludeFlag = $scope.isIncluded ? true : false;
            $timeout(function () {
                $('[data-toggle="tooltip"]').tooltip();
            });
            $scope.includeClick = function (event) {
                //alert($scope.sectionId+'-isIncluded :'+$scope.isIncluded);
                if ($scope.isIncludedText == 'Yes') {
                    $scope.isIncludedText = 'No';
                    $scope.isIncludeFlag = false;
                    //updateSection(isIncludeFlag);
                } else {
                    $scope.isIncludedText = 'Yes';
                    $scope.isIncludeFlag = true;
                }
                console.log('in click event - include-exclude');
            }

        }
    };
});

angular.module('ReportAuthoring').directive('dynamicTable', [function () {
    return {
        restrict: 'E',
        template:

            ' <table class="table table-striped table-bordered">' +
            ' <thead>' +
            ' <tr>' +
            ' <th></th>' +
            ' <th>Tenant Name</th>' +
            ' <th>Location</th>' +
            ' <th>Type of Use</th>' +
            ' <th>Comments</th>' +

            ' <th>Actions</th>' +
            ' </tr>' +
            '</thead>' +
            ' <tbody>' +
            ' <tr data-ng-repeat="entry in appkeys" >' +
            ' <td>{{$index + 1}}</td>' +

            ' <td>' +
            '  <span data-ng-hide="editMode">{{entry.tenantName}}</span>' +
            '  <input class="form-control" type="text" data-ng-show="editMode" data-ng-model="entry.tenantName" data-ng-required />' +
            ' </td>' +
            ' <td>' +
            ' <span data-ng-hide="editMode">{{entry.Location}}</span>' +
            ' <input class="form-control" type="text" data-ng-show="editMode" data-ng-model="entry.Location" data-ng-required />' +
            '</td>' +

            ' <td>' +
            '<span data-ng-hide="editMode">{{entry.use}}</span>' +
            '<input class="form-control" type="text" data-ng-show="editMode" data-ng-model="entry.use" data-ng-required />' +
            ' </td>' +

            '<td>' +
            '<span data-ng-hide="editMode">{{entry.comments}}</span>' +
            ' <input class="form-control" type="text" data-ng-show="editMode" data-ng-model="entry.comments" data-ng-required />' +
            ' </td>' +

            ' <td>' +
            ' <button type="submit" data-ng-hide="editMode" data-ng-click="editMode = true; edit(entry)" class="btn btn-default">Edit</button>' +
            ' <button type="submit" data-ng-show="editMode" data-ng-click="editMode = false" class="btn btn-default">Save</button>' +
            ' <button type="submit" data-ng-show="editMode" data-ng-click="editMode = false; cancel($index)" class="btn btn-default">Cancel</button>' +
            ' </td>' +
            '</tr>' +
            '</tbody>' +
            '</table>'

        ,
        replace: true,
        link: function (scope, element, attrs) {


        },
        controller: function ($scope) {


            $scope.newField = [];
            $scope.editing = false;

            $scope.appkeys = [{
                "tenantName": "sefree",
                "Location": "Pune",
                "use": "nbv",
                "comments": "nbv"
            }, {
                "tenantName": "mnbvc",
                "Location": "Pune",
                "use": "bvcx",
                "comments": "nbv"
            }];

            $scope.edit = function (field) {
                $scope.editing = $scope.appkeys.indexOf(field);
                $scope.newField[$scope.editing] = angular.copy(field);
            }

            $scope.saveField = function (index) {
                //if ($scope.editing !== false) {
                $scope.appkeys[$scope.editing] = $scope.newField;
                //$scope.editing = false;
                //}       
            };

            $scope.cancel = function (index) {
                //if ($scope.editing !== false) {
                $scope.appkeys[index] = $scope.newField[index];
                $scope.editing = false;
                //}       
            };

            //$scope.rows = [
            // {"Id":"1", "type": "", "desc": "", "sign": "" }
            //];
            $scope.val = function () {
                    $scope.show = true;
                }
                //$scope.createTable = function () {

            //}
            //$scope.duplicateRows = function () {
            //    $scope.rows.push({ "type": "", "desc": "", "sign": "" });
            //}
            //$scope.saveRowData = function () {
            //    console.log("save data");
            //}

        },
    };

}]);

angular.module('ReportAuthoring').directive('addTiny', function ($compile) {
    return {
        restrict: 'A',
        scope: {
            resp: '=resp',
            obj: '=obj'
        },
        link: function (scope, element, attrs) {

            var html = "<div ng-show='obj.selectedSection == \"{{section1Title}}\"'>" + scope.resp.html + "<div>";

            //   var filteredHtml = html.replace(/id='ckEdit'/g, "data-ck-editor");
            // var filteredHtml = html.replace(/id='tinymce'/g, "id='tinymce' data-ui-tinymce");
            var filteredHtml = html;
            console.log("qqqqqqqqqqqqqqqqqqqqqqqqqq: " + filteredHtml);
            if (scope.resp.contentValues != null && scope.resp.contentValues != undefined && scope.resp.contentValues != "") {

                scope.section1Title = scope.resp.contentValues.section1Title;

                scope.Y = scope.resp.contentValues.choice.Y;
                scope.N = scope.resp.contentValues.choice.N;
                scope.NS = scope.resp.contentValues.choice.NS;

                scope.title = scope.resp.contentValues.table.title;
                scope.r11 = scope.resp.contentValues.table.r11;
                scope.r12 = scope.resp.contentValues.table.r12;
                scope.r21 = scope.resp.contentValues.table.r21;
                scope.r22 = scope.resp.contentValues.table.r22;

                compiledElement = $compile(filteredHtml)(scope);

                var pageElement = angular.element(element);

                pageElement.append(compiledElement);
            }



        }

    }
});


angular.module('ReportAuthoring').directive('notification', ['$timeout', function ($timeout) {

    return {
        restrict: 'E',
        template: "<div class='alert alert-{{alertData.type}}' ng-show='alertData.message' role='alert' data-notification='{{alertData.status}}'>{{alertData.message}}<a class='close' data-dismiss='alert' aria-hidden='true'>×</a></div>",
        scope: {
            alertData: "="
        }
    };

    }]);



angular.module('ReportAuthoring').directive('condition', ['$timeout', 'ReportAuthoringAPI', function ($timeout, ReportAuthoringAPI) {
    return {
        scope: {
            model: '='
        },
        restrict: 'E',
        template: '<div class="pull-left"><div class="btn-group" data-toggle="buttons"><label class="btn btn-sm btn-warning" ng-repeat="option in conditionOptions" id="lbl_{{option}}" ng-click="conditionActivate(option)"><input  type="{{conditionType}}" ng-checked="conditionData.indexOf(option) > -1" ></input>{{option}}</label> <div class="pull-left"><input class="form-control input-sm" ng-model="model.data.otherText" ng-show="isShowOtherText" type="text"/></div></div></div><div class="pull-right"><button ng-show="isShowConfirmBtn" class="btn btn-md btn-primary" ng-click="conditionConfirm_click()">Confirm</button></div> <div class="clearfix" />',
        controller: function ($scope, $element, $attrs) {
            $scope.isShowConfirmBtn = false;
            $scope.conditionOptions = ["none", "replace", "refubrish", "repair", "other"];
            $scope.conditionData = $scope.model.data.selectedOptions;

            $scope.conditionType = $scope.model.type == "single" ? "radio" : "checkbox";
            $scope.isShowOtherText = false;

            if ($scope.conditionType == 'radio') {
                if ($scope.conditionData == "other") {
                    $scope.isShowOtherText = true;
                }
            } else {
                $scope.isShowOtherText = true;
            }
            $timeout(function () {
                angular.forEach($scope.conditionOptions, function (conditionOption) {
                    if ($scope.conditionData.indexOf(conditionOption) > -1) {
                        $("#lbl_" + conditionOption).addClass("active");
                    }
                });
            }, 100);


            $scope.conditionActivate = function (option) {
                $scope.isShowConfirmBtn = true;
                if ($scope.conditionType == "checkbox") {
                    var idx = $scope.conditionData.indexOf(option);
                    if (idx > -1) {
                        $scope.conditionData.splice(idx, 1);
                    } else {
                        $scope.conditionData.push(option);
                    }
                } else {
                    $scope.conditionData = option;
                }

                if ($scope.conditionType == 'radio') {
                    if ($scope.conditionData == "other") {
                        $scope.isShowOtherText = true;
                    } else {
                        $scope.isShowOtherText = false;
                        $scope.model.data.otherText = '';
                    }
                }
            };

            $scope.conditionConfirm_click = function () {
                alert($scope.conditionData + '-' + $scope.model.data.otherText)
                ReportAuthoringAPI.updateCondition();
            }

        }
    };
}]);


angular.module('ReportAuthoring').directive('action', ['$timeout', 'ReportAuthoringAPI', function ($timeout, ReportAuthoringAPI) {
    return {
        scope: {
            model: '='
        },
        restrict: 'E',
        template: '<div class="pull-left"><div class="btn-group" data-toggle="buttons"><label class="btn btn-sm btn-warning" ng-repeat="option in actionOptions" id="lbl_{{option}}"  ng-click="actionActivate(option)"><input type="{{actionType}}" ng-checked="actionData.indexOf(option) > -1"></input>{{option}}</label></div></div><div class="pull-right"><button ng-show="isShowConfirmBtn" class="btn btn-md btn-primary" ng-click="actionConfirm_click()">Confirm</button></div> <div class="clearfix" />',
        controller: function ($scope, $element, $attrs) {
            $scope.actionType = $scope.model.type == "single" ? "radio" : "checkbox";
            $scope.actionOptions = ["na", "good", "fair", "poor"];
            $scope.isShowConfirmBtn = false;
            $scope.actionData = $scope.model.data.selectedOptions;

            $timeout(function () {
                angular.forEach($scope.actionOptions, function (actionOption) {
                    if ($scope.actionData.indexOf(actionOption) > -1) {
                        $("#lbl_" + actionOption).addClass("active");
                    }
                });
            }, 100);

            $scope.actionActivate = function (option) {
                // console.log("button clicked: " + option);
                $scope.isShowConfirmBtn = true;

                if ($scope.actionType == "checkbox") {
                    var idx = $scope.actionData.indexOf(option);
                    if (idx > -1) {
                        $scope.actionData.splice(idx, 1);
                    } else {
                        $scope.actionData.push(option);
                    }
                } else {
                    $scope.actionData = option;
                }
            };

            $scope.actionConfirm_click = function () {

                ReportAuthoringAPI.updateAction();
            }
        }
    };
}]);



/* directive for slide toggle for Left Panel*/
angular.module('ReportAuthoring').directive('leftPanelSlideToggle', [function () {
    return {
        restrict: 'E',
        template:

            '<span id="section-toggle" ng-click="toggleLeftPanel()" class="hidden-sm hidden-xs fa fa-step-backward btn btn-sm btn-primary"></span>',
        replace: true,
        link: function (scope, element, attrs) {

        },
        controller: function ($scope) {

            $scope.toggleLeftPanel = function () {
                $(".leftContent").toggleClass("col-md-4 report-menu-width");
                $(".leftContent").toggleClass("col-md-4");
                $("#rightContent").toggleClass("col-md-8 col-md-12");
                $("#section-toggle").toggleClass("sidesection-icon");
            }
        },
    };
}]);

angular.module('ReportAuthoring').directive('lastUpdatedBy', function ($compile, $filter, $window, BASEURL, AuthFactory, ReportAuthoringUrlCollection, ReportAuthoringAPI) {
    return {
        restrict: 'A',
        scope: {
            secData: '=secData'
        },
        link: function (scope, element, attrs) {

            var sec = scope.secData;

            if (sec.updatedBy != null && sec.updatedBy != undefined && !$.isEmptyObject(sec.updatedBy)) {
                var updatedDate = (sec.updatedDate).replace(/-/g, '/');
                var user = sec.updatedBy.firstName + " " + sec.updatedBy.lastName;

                var userGuid = AuthFactory.getUserDetailsFromStorage('USERGUID');
                if (sec.updatedBy.userGUID == userGuid)
                    user = "Me";

                var url = BASEURL.ACCOUNT_MGMT + ReportAuthoringUrlCollection.ACCT_USER;

                var params = {
                    companyguid: sec.updatedBy.companyGUID,
                    officeguid: sec.updatedBy.officeGUID,
                    userguid: sec.updatedBy.userGUID
                };

                var uri = ReportAuthoringAPI.formatUrl(url, params);

                var linkToUserDetail = '<a href="" ng-click="linkToAccountUser(\'' + uri + '\')" class="pointer">' + user + '</a>'

                var html = "<div class='alert alert-info'>Last Updated " + updatedDate + " by " + linkToUserDetail + "<div>";

                compiledElement = $compile(html)(scope);
                var pageElement = angular.element(element);
                pageElement.append(compiledElement);
            }
        },
        controller: function ($scope) {
            $scope.linkToAccountUser = function (url) {
                $window.location.href = url;
            }
        }
    }
});

angular.module('ReportAuthoring').directive('searchBySiteid', [function () {
    return function (scope, element, attrs) {

        element.bind("keydown", function (event) {
            var keyCode = event.which || event.keyCode;

            // If enter key is pressed
            if (keyCode === 13) {

                var siteID = scope[attrs.ngModel];
                if (siteID) {
                    var regEx = /^[a-zA-Z]{1}[0-9]{7}$/;
                    if (regEx.test(siteID)) {
                        scope.$apply(function () {
                            // Evaluate the expression
                            scope.$eval(attrs.searchBySiteid);
                        });
                    } else {
                        new PNotify({
                            title: 'Error',
                            text: 'Please enter valid SiteID',
                            type: 'error',
                            addclass: "stack-topright"
                        });
                    }
                }

                event.preventDefault();
            }
        });
    };
}]);;
angular.module("ReportAuthoring").directive("dynamicForm", [function () {
        return {
            restrict: "A",
            transclude: false,
            templateUrl: "app/modules/ReportAuthoring/directives/dynamicForm/dynamicForm.html",
            scope: {
                formData: '=dynamicFormData'
            },
            controller: ['$scope', '$modal', function ($scope, $modal) {

                $scope.origianlCopy = angular.copy($scope.formData);

                this.displayForm = function () {
                    var modalInstance = $modal.open({
                        templateUrl: "formDisplay.html",
                        scope: $scope,
                        size: "lg",
                        controller: "displayFormController as displayFormCtrl"
                    });

                    modalInstance.result.then(function () {

                    });
                };

            }],
            controllerAs: "dynamicFormCtrl"
        }
    }])
    .controller("displayFormController", ["$scope", "$modalInstance", "$timeout", "$window", "APIFactory", "GeneralInformationAPI", function ($scope, $modalInstance, $timeout, $window, APIFactory, GeneralInformationAPI) {

        var self = this;

        self.dataField = $scope.formData;

        // calendar controls
        self.open = {};

        self.disabled = function (date, mode) {
            return (mode === 'day' && (new Date().toDateString() == date.toDateString()));
        };

        self.dateOptions = {
            showWeeks: false,
            startingDay: 1
        };

        self.timeOptions = {
            readonlyInput: true,
            showMeridian: false
        };

        self.openCalendar = function (e, date) {
            self.successMsg = false;
            e.preventDefault();
            e.stopPropagation();

            self.open[date] = true;
        };

        self.enableEdit = function (index) {
            self.siteGeoCodeError = false;
            self.successMsg = false;
            self.editMode = true;

            // focus on input field
            var inputFieldId = 'editDataField_' + $scope.formData.name + "_" + index;
            $timeout(function () {
                var element = $window.document.getElementById(inputFieldId);
                if (element)
                    element.focus();
            });

        };

        self.cancelEdit = function () {
            self.siteGeoCodeError = false;
            self.successMsg = false;
            self.editMode = false;
            //$scope.formData = angular.copy($scope.origianlCopy);
            reset();
        };

        self.save = function () {

            var objGI = {
                "reportID": 1110001001,
                "dataFields": []
            }

            var radioOptionVal = $('#radioDivOption input:radio:checked').val();
            //call below only after saving gi
            if (self.dataField.name == "Site" && radioOptionVal == "1") {
                var iflag = 0;
                for (i = 0; i < self.dataField.fields.length; i++) {

                    if (self.dataField.fields[i].mappedField == "address" || self.dataField.fields[i].mappedField == "city" || self.dataField.fields[i].mappedField == "state") {

                        if (self.dataField.fields[i].fieldValue != undefined && self.dataField.fields[i].fieldValue != null && self.dataField.fields[i].fieldValue != "") {

                        } else {
                            iflag = 1;
                            // break;
                        }
                    }
                    if (self.dataField.fields[i].mappedField == 'address') {
                        var addressVal = self.dataField.fields[i].fieldValue;
                    }
                    if (self.dataField.fields[i].mappedField == 'city') {
                        var cityVal = self.dataField.fields[i].fieldValue;
                    }
                    if (self.dataField.fields[i].mappedField == 'state') {
                        var stateVal = self.dataField.fields[i].fieldValue;
                    }
                    if (self.dataField.fields[i].mappedField == 'zip') {
                        var zipVal = self.dataField.fields[i].fieldValue;
                    }
                }

                if (iflag == 1) {
                    self.siteGeoCodeError = true;
                } else {
                    //save GI
                    objGI.dataFields.push(self.dataField);
                    APIFactory.putGI(self.dataField.url, objGI).then(function (resp) {
                        console.log("put gi response: " + JSON.stringify(resp));

                    });
                    //get geocode
                    GeneralInformationAPI.put(addressVal, cityVal, stateVal, zipVal).then(function (resp) {

                        for (i = 0; i < self.dataField.fields.length; i++) {

                            if (self.dataField.fields[i].mappedField == 'latitude') {
                                self.dataField.fields[i].fieldValue = resp.addressResults.addresses[0].latitude;
                            } else if (self.dataField.fields[i].mappedField == 'longitude') {
                                self.dataField.fields[i].fieldValue = resp.addressResults.addresses[0].longitude;
                            } else if (self.dataField.fields[i].mappedField == 'regeocode') {
                                self.dataField.fields[i].fieldValue = 0;
                            }
                        }
                        self.editMode = false;
                        self.siteGeoCodeError = false;
                        self.successMsg = true;
                    });
                }
            } else {
                //save GI
                if (self.dataField.name == "Summary Text") {

                    self.dataField.fields[0].fieldValue = self.ckVal;
                }
                objGI.dataFields.push(self.dataField);
                APIFactory.put(self.dataField.url, objGI).then(function (resp) {
                    self.editMode = false;
                    self.siteGeoCodeError = false;
                    self.successMsg = true;
                    for (i = 0; i < self.dataField.fields.length; i++) {

                        if (self.dataField.fields[i].mappedField == 'regeocode') {
                            self.dataField.fields[i].fieldValue = 0;
                        }
                    }
                });
            }
        };

        self.openFindContact = function () {
            self.successMsg = false;
            self.siteGeoCodeError = false;
            var modalInstance = $modal.open({
                templateUrl: 'app/modules/ProjectCreation/views/findContact.html',
                scope: $scope,
                controller: 'FindContactCtrl as findContact',
                size: 'lg',
                windowClass: 'app-modal-window',

                resolve: {
                    contactObj: function () {
                        return self.data;
                    }

                }
            });
            modalInstance.result.then(function () {


                if (self.dataField.name == 'Client') {
                    for (i = 0; i < self.dataField.fields.length; i++) {

                        if (self.dataField.fields[i].mappedField == 'name') {
                            self.dataField.fields[i].fieldValue = self.data.client.companyName;
                        } else if (self.dataField.fields[i].mappedField == 'contact') {
                            self.dataField.fields[i].fieldValue = self.data.client.contactName;
                        } else if (self.dataField.fields[i].mappedField == 'address') {
                            self.dataField.fields[i].fieldValue = self.data.client.address;
                        } else if (self.dataField.fields[i].mappedField == 'city') {
                            self.dataField.fields[i].fieldValue = self.data.client.city;
                        } else if (self.dataField.fields[i].mappedField == 'state') {
                            self.dataField.fields[i].fieldValue = self.data.client.state;
                        } else if (self.dataField.fields[i].mappedField == 'zip') {
                            self.dataField.fields[i].fieldValue = self.data.client.zip;
                        } else if (self.dataField.fields[i].mappedField == 'fax') {
                            self.dataField.fields[i].fieldValue = self.data.client.fax;
                        } else if (self.dataField.fields[i].mappedField == 'email') {
                            self.dataField.fields[i].fieldValue = self.data.client.email;
                        }
                    }

                }

            });

        }

        self.openManageCoverContacts = function () {
            var modalInstance = $modal.open({
                templateUrl: 'app/modules/ReportAuthoring/views/manageCoverContacts.html',
                scope: $scope,
                controller: 'ManageCoverContactsController as coverContact',
                size: 'lg',
                windowClass: 'app-modal-window'
            })
        }

        function reset() {
            angular.forEach($scope.origianlCopy.fields, function (field, index) {
                var dest = $scope.formData.fields[index];
                copyPropertyValues(field, dest);
            });
        }

        function copyPropertyValues(orignial, dest) {
            if (!orignial) return;

            dest = dest || {};
            for (var prop in orignial) {
                var val = orignial[prop];
                dest[prop] = val;
            }
        }

    }]);;
angular.module('ReportAuthoring').directive('executiveSummaryTable', [function () {
    return {
        restrict: 'E',
        transclude: false,
        replace: true,
        templateUrl: 'app/modules/ReportAuthoring/directives/executiveSummaryTables/executiveSummaryTableView.html',
        scope: {
            table: '='
        },
        controller: ['$scope', function ($scope) {
            if (!$scope.table) return;
            $scope.eEditable = -1;

            $scope.flatTable = [];
            var structure = $scope.table.structure;
            var sections = $scope.table.sections;

            var data = $scope.table.data;
            $scope.cols = [];


            for (var s = 0; s < structure.length; s++) {

                if (structure[s].options != undefined) {
                    for (var o = 0; o < structure[s].options.length; o++) {
                        $scope.cols.push(structure[s].options[o].label);



                    }
                }
                if (structure[s].label != "Results") {
                    $scope.cols.push(structure[s].label);
                }


            }
            // console.log("table columns are : " + JSON.stringify($scope.cols));


            // iteration for all values
            /*for (var i = 0; i < data.length; i++) {

                var single = data[i];
                console.log("single: " + JSON.stringify(single));
                var obj = {};
                // iteration for properties in a single value
                for (var prop in single) {

                    var val = single[prop];
                    if (val instanceof Object) {
                        for (var nestedProp in val) {

                            var nestedVal = val[nestedProp];

                            obj[nestedProp] = nestedVal;
                        }
                    } else {
                        obj[prop] = val;
                    }
                }

                console.log("final Object: " + JSON.stringify(obj));
                $scope.flatTable.push(obj);
            }*/

            /*var sectionObj = {};

            angular.forEach($scope.flatTable, function (secObj) {
             

                for (var sec in sections) {
                   
                    if (sections[sec].sectionId == secObj.sectionId) {
                        secObj["sectionTitle"] = sections[sec].sectionTitle;
                    }

                }


            });*/


            var cloned = angular.copy($scope.table.structure);
            var arr = [];
            for (var i = 0; i < sections.length; i++) {
                var section = sections[i];
                var section_obj = {
                    sectionId: section.sectionId,
                    sectionTitle: section.sectionTitle,
                    estCol: angular.copy(cloned)
                }

                for (var j = 0; j < section_obj.estCol.length; j++) {
                    var col = section_obj.estCol[j];
                    if (col.options && col.options.length) {
                        for (var k = 0; k < col.options.length; k++) {
                            var option = col.options[k];
                            option.value = getSectionValue($scope.table.data, section_obj.sectionId, option.label);
                        }
                    } else {
                        col.value = getSectionValue($scope.table.data, section_obj.sectionId, col.label);
                    }
                }
                arr.push(section_obj);

            }



            function getSectionValue(dataList, sectionId, property) {
                for (var i = 0; i < dataList.length; i++) {
                    var data = dataList[i];
                    if (data.sectionId == sectionId) {
                        return getDataValue(data, property);
                    }
                }
            }

            function getDataValue(data, property) {
                for (var prop in data) {
                    var val = data[prop];
                    if (prop == property) {
                        return val;
                    }

                    if (val instanceof Object) {
                        for (var nestedProp in val) {
                            var nestedVal = val[nestedProp];
                            if (nestedProp == property) {
                                return nestedVal;
                            }
                        }
                    }
                }
            }


            // console.log("1111111: " + JSON.stringify($scope.flatTable));




            for (var i = 0; i < arr.length; i++) {
                var section = arr[i];
                var item = {
                    sectionTitle: section.sectionTitle,
                    cols: []
                };
                $scope.Results = [];
                $scope.checkboxCount = 0;
                var nestedArr = section.estCol;
                for (var j = 0; j < nestedArr.length; j++) {
                    var col = nestedArr[j];
                    switch (col.style) {
                        case "CHECKBOX":
                            var chkBoxArr = col.options;
                            for (var k = 0; k < chkBoxArr.length; k++) {
                                var option = chkBoxArr[k];

                                var optionItem = {
                                    style: col.style,
                                    label: option.label,
                                    value: option.value
                                };
                                item.cols.push(optionItem);
                                $scope.Results.push(optionItem);
                                $scope.checkboxCount = $scope.checkboxCount + 1;
                            }
                            break;
                        case "MEMO":
                            var optionItem = {
                                style: col.style,
                                label: col.label,
                                value: col.value
                            };
                            item.cols.push(optionItem);
                            $scope.Results.push(optionItem);
                            break;
                    }
                }


                $scope.flatTable.push(item);
            }

            $scope.saveUser = function (data, id) {
                //$scope.user not updated yet
                angular.extend(data, {
                    id: id
                });

            };

            // remove user
            $scope.removeUser = function (index) {
                $scope.users.splice(index, 1);
            };
            //    }

        }]
    }
}]);;
angular.module("ReportAuthoring").directive("generalInfoDataField", [function () {
    return {
        restrict: "A",
        replace: true,
        templateUrl: "app/modules/ReportAuthoring/directives/generalInformation/generalInfoDataFieldView.html",
        scope: {
            infoField: '=',
            companyOffices: '='
        },
        controller: ['$scope', '$timeout', '$window', '$modal', 'GeneralInformationAPI', 'BASEURL', '$location', function ($scope, $timeout, $window, $modal, GeneralInformationAPI, BASEURL, $location) {
            var self = this;
            var reportGuid = $location.search().reportGuid;
            var companyGUID = BASEURL.companyGUID_ACC_MGMT;

            self.userMsg = false;
            $scope.$parent.client = $scope.$parent.client || {};
            self.data = $scope.$parent;
            self.dataField = angular.copy($scope.infoField);
            self.siteLocation = {};
            self.offices = angular.copy($scope.companyOffices);

            if ($scope.infoField.name.toLowerCase() == "consultant" || $scope.infoField.name.toLowerCase() == "site") {
                fillCompanyOffices();
            } else if ($scope.infoField.name == "Summary Text") {
                self.ckVal = self.dataField.fields[0].fieldValue;
            }

            function fillCompanyOffices() {
                self.officesDataField = [];
                for (i = 0; i < self.dataField.fields.length; i++) {
                    if (self.dataField.fields[i].fieldType == "dropdown" && self.dataField.fields[i].mappedField == "companyOffices") {
                        for (var j = 0; j < self.offices.length; j++) {
                            var fieldOptionObj = {
                                "option_name": "",
                                "subOption": [],
                                "option_value": "",
                                "orderIndex": "",
                                "isDefault": 0
                            };
                            fieldOptionObj.option_name = self.offices[j].officeName;
                            fieldOptionObj.option_value = j;
                            fieldOptionObj.orderIndex = j;
                            self.officesDataField.push(fieldOptionObj);
                        }
                        self.dataField.fields[i].fieldOption = angular.copy(self.officesDataField);
                    } else if (self.dataField.fields[i].mappedField == 'latitude') {
                        self.siteLocation.latitude = self.dataField.fields[i].fieldValue;
                    } else if (self.dataField.fields[i].mappedField == 'longitude') {
                        self.siteLocation.longitude = self.dataField.fields[i].fieldValue;
                    } else {}
                }
            }

            self.enableEdit = function (index) {
                self.userMsg = false;
                self.editMode = true;

                // focus on input field
                var inputFieldId = 'editDataField-' + self.dataField.name + "-" + index;
                var element = document.getElementById(inputFieldId);
                $timeout(function () {
                    if (element) {
                        element.focus();
                    }
                });
            };

            self.dropdownChange = function (mappedField, selectedVal) {
                self.userMsg = false;
                if (mappedField == "companyOffices") {
                    if (selectedVal != undefined && selectedVal != null && selectedVal != "") {
                        for (j = 0; j < self.offices.length; j++) {
                            if (selectedVal == self.offices[j].officeName) {
                                var officeDetailObj = {
                                    "address": (self.offices[j].address != "" && self.offices[j].address != undefined && self.offices[j].address != null) ? self.offices[j].address : "",
                                    "city": (self.offices[j].city != "" && self.offices[j].city != undefined && self.offices[j].city != null) ? self.offices[j].city : "",
                                    "state": (self.offices[j].state != "" && self.offices[j].state != undefined && self.offices[j].state != null) ? self.offices[j].state : "",
                                    "zip": (self.offices[j].zipCode != "" && self.offices[j].zipCode != undefined && self.offices[j].zipCode != null) ? self.offices[j].zipCode : "",
                                    "phone": (self.offices[j].phone != "" && self.offices[j].phone != undefined && self.offices[j].phone != null) ? self.offices[j].phone : "",
                                    "fax": (self.offices[j].fax != "" && self.offices[j].fax != undefined && self.offices[j].fax != null) ? self.offices[j].fax : "",
                                    "email": (self.offices[j].email != "" && self.offices[j].email != undefined && self.offices[j].email != null) ? self.offices[j].email : ""

                                };

                                for (i = 0; i < self.dataField.fields.length; i++) {
                                    if (self.dataField.fields[i].mappedField == "address") {
                                        self.dataField.fields[i].fieldValue = officeDetailObj.address;
                                    } else if (self.dataField.fields[i].mappedField == "city") {
                                        self.dataField.fields[i].fieldValue = officeDetailObj.city;
                                    } else if (self.dataField.fields[i].mappedField == "state") {
                                        self.dataField.fields[i].fieldValue = officeDetailObj.state;
                                    } else if (self.dataField.fields[i].mappedField == "zip") {
                                        self.dataField.fields[i].fieldValue = officeDetailObj.zip;
                                    } else if (self.dataField.fields[i].mappedField == "phone") {
                                        self.dataField.fields[i].fieldValue = officeDetailObj.phone;
                                    } else if (self.dataField.fields[i].mappedField == "fax") {
                                        self.dataField.fields[i].fieldValue = officeDetailObj.fax;
                                    } else if (self.dataField.fields[i].mappedField == "email") {
                                        self.dataField.fields[i].fieldValue = officeDetailObj.email;
                                    }
                                }
                                break;
                            }
                        }
                    } else {
                        self.dataField = angular.copy($scope.infoField);
                        fillCompanyOffices();
                    }
                }
            }

            self.radioOption_yes = function (dataFieldName, index) {
                self.userMsg = false;
                if (dataFieldName == "Consultant") {
                    for (i = 0; i < self.dataField.fields.length; i++) {
                        if (self.dataField.fields[i].mappedField == "companyOffices") {
                            self.dataField.fields[i].isEditable = 0;
                            self.dataField.fields[i].fieldValue = "";
                        }

                        if (self.dataField.fields[i].mappedField == "address") {
                            self.dataField.fields[i].fieldValue = (self.offices[0].address != "" && self.offices[0].address != undefined && self.offices[0].address != null) ? self.offices[0].address : "";
                        } else if (self.dataField.fields[i].mappedField == "city") {
                            self.dataField.fields[i].fieldValue = (self.offices[0].city != "" && self.offices[0].city != undefined && self.offices[0].city != null) ? self.offices[0].city : "";
                        } else if (self.dataField.fields[i].mappedField == "state") {
                            self.dataField.fields[i].fieldValue = (self.offices[0].state != "" && self.offices[0].state != undefined && self.offices[0].state != null) ? self.offices[0].state : "";
                        } else if (self.dataField.fields[i].mappedField == "zip") {
                            self.dataField.fields[i].fieldValue = (self.offices[0].zipCode != "" && self.offices[0].zipCode != undefined && self.offices[0].zipCode != null) ? self.offices[0].zipCode : "";
                        } else if (self.dataField.fields[i].mappedField == "phone") {
                            self.dataField.fields[i].fieldValue = (self.offices[0].phone != "" && self.offices[0].phone != undefined && self.offices[0].phone != null) ? self.offices[0].phone : "";
                        } else if (self.dataField.fields[i].mappedField == "fax") {
                            self.dataField.fields[i].fieldValue = (self.offices[0].fax != "" && self.offices[0].fax != undefined && self.offices[0].fax != null) ? self.offices[0].fax : "";
                        } else if (self.dataField.fields[i].mappedField == "email") {
                            self.dataField.fields[i].fieldValue = (self.offices[0].email != "" && self.offices[0].email != undefined && self.offices[0].email != null) ? self.offices[0].email : "";
                        }
                    }
                }
            }

            self.radioOption_no = function (dataFieldName, index) {
                if (dataFieldName == "Consultant") {
                    self.dataField = angular.copy($scope.infoField);
                    fillCompanyOffices();
                }
            }

            self.open = {};

            // Disable weekend selection
            self.disabled = function (date, mode) {
                return (mode === 'day' && (new Date().toDateString() == date.toDateString()));
            };

            self.dateOptions = {
                showWeeks: false,
                startingDay: 1
            };

            self.timeOptions = {
                readonlyInput: true,
                showMeridian: false
            };

            self.openCalendar = function (e, date) {
                self.userMsg = false;
                e.preventDefault();
                e.stopPropagation();

                self.open[date] = true;
            };

            self.cancelEdit = function () {
                self.userMsg = false;
                self.editMode = false;

                if (self.dataField.name == "Summary Text") {
                    self.dataField = angular.copy($scope.infoField);
                    self.ckVal = self.dataField.fields[0].fieldValue;
                } else if (self.dataField.name == "Consultant") {
                    self.dataField = angular.copy($scope.infoField);
                    fillCompanyOffices();
                } else {
                    self.dataField = angular.copy($scope.infoField);
                }
            };

            self.saveGI = function () {
                var objGI = {
                    "reportID": 12,
                    "dataFields": []
                }
                var siteLocationOnGeocode = {};

                var radioOptionVal = "0";
                var reGeoCodeStatus = $("input[type='radio'][name='regeocode']:checked");
                if (reGeoCodeStatus.length > 0) {
                    radioOptionVal = reGeoCodeStatus.val();
                }

                //var radioOptionVal = $('input[name="regeocode"]').val();
                //call below only after saving gi
                if (self.dataField.name == "Site" && radioOptionVal == "1") {
                    var iflag = false;
                    for (i = 0; i < self.dataField.fields.length; i++) {
                        if (self.dataField.fields[i].mappedField == "address" || self.dataField.fields[i].mappedField == "city" || self.dataField.fields[i].mappedField == "state") {
                            iflag = (self.dataField.fields[i].fieldValue != undefined && self.dataField.fields[i].fieldValue != null && self.dataField.fields[i].fieldValue != "") ? false : true;
                        }

                        if (self.dataField.fields[i].mappedField == 'address') {
                            var addressVal = self.dataField.fields[i].fieldValue;
                        } else if (self.dataField.fields[i].mappedField == 'city') {
                            var cityVal = self.dataField.fields[i].fieldValue;
                        } else if (self.dataField.fields[i].mappedField == 'state') {
                            var stateVal = self.dataField.fields[i].fieldValue;
                        } else if (self.dataField.fields[i].mappedField == 'zip') {
                            var zipVal = self.dataField.fields[i].fieldValue;
                        } else {}
                    }


                    if (iflag) {
                        self.userMsgAlertClass = "alert-danger";
                        self.userMsg = "Please enter Address, City and State if you want to <strong>Re-geocode on save</strong>.";
                    } else {
                        //get geocode
                        GeneralInformationAPI.getGeoCode(addressVal, cityVal, stateVal, zipVal).then(function (resp) {
                            for (i = 0; i < self.dataField.fields.length; i++) {
                                if (self.dataField.fields[i].mappedField == 'latitude') {
                                    self.dataField.fields[i].fieldValue = siteLocationOnGeocode.latitude = parseFloat(resp.addressResults.addresses[0].latitude);
                                } else if (self.dataField.fields[i].mappedField == 'longitude') {
                                    self.dataField.fields[i].fieldValue = siteLocationOnGeocode.longitude = parseFloat(resp.addressResults.addresses[0].longitude);
                                } else if (self.dataField.fields[i].mappedField == 'regeocode') {
                                    self.dataField.fields[i].fieldValue = 0;
                                } else if (self.dataField.fields[i].mappedField == 'address') {
                                    self.dataField.fields[i].fieldValue = resp.addressResults.addresses[0].address1;
                                } else if (self.dataField.fields[i].mappedField == 'city') {
                                    self.dataField.fields[i].fieldValue = resp.addressResults.addresses[0].city;
                                } else if (self.dataField.fields[i].mappedField == 'state') {
                                    self.dataField.fields[i].fieldValue = resp.addressResults.addresses[0].state;
                                } else if (self.dataField.fields[i].mappedField == 'zip') {
                                    self.dataField.fields[i].fieldValue = resp.addressResults.addresses[0].zipCode;
                                }
                            }
                            //save GI
                            objGI.dataFields.push(self.dataField);
                            GeneralInformationAPI.putGI(objGI, reportGuid).then(function (resp) {
                                    self.dataField = angular.copy(objGI.dataFields[0]);
                                    $scope.infoField = angular.copy(objGI.dataFields[0]);
                                    self.editMode = false;
                                    self.userMsgAlertClass = "alert-success";
                                    self.userMsg = "Information for <strong>" + self.dataField.name + "</strong> section saved successfully.";
                                    self.siteLocation.latitude = siteLocationOnGeocode.latitude;
                                    self.siteLocation.longitude = siteLocationOnGeocode.longitude;
                                }),
                                function (error) {
                                    self.userMsgAlertClass = "alert-danger";
                                    self.userMsg = "Error: Failed to save information for <strong>" + self.dataField.name + "</strong> section. " + error;
                                };
                        }, function (error) {
                            self.userMsgAlertClass = "alert-danger";
                            self.userMsg = "Error: Failed to Re-geocode on save for your property. " + error;
                        });
                    }
                } else {
                    //save GI
                    if (self.dataField.name == "Summary Text") {
                        self.dataField.fields[0].fieldValue = self.ckVal;
                    }

                    for (i = 0; i < self.dataField.fields.length; i++) {
                        if (self.dataField.fields[i].mappedField == 'latitude' || self.dataField.fields[i].mappedField == 'longitude') {
                            self.dataField.fields[i].fieldValue = parseFloat(self.dataField.fields[i].fieldValue);
                        }
                    }
                    objGI.dataFields.push(self.dataField);
                    GeneralInformationAPI.putGI(objGI, reportGuid).then(function (resp) {
                            self.dataField = angular.copy(objGI.dataFields[0]);
                            $scope.infoField = angular.copy(objGI.dataFields[0]);
                            self.editMode = false;
                            self.userMsgAlertClass = "alert-success";
                            self.userMsg = "Information for <strong>" + self.dataField.name + "</strong> section saved successfully.";
                            for (i = 0; i < self.dataField.fields.length; i++) {
                                if (self.dataField.fields[i].mappedField == 'regeocode') {
                                    self.dataField.fields[i].fieldValue = 0;
                                }
                                if (self.dataField.name == "Summary Text") {
                                    self.dataField.fields[0].fieldValue = self.ckVal;
                                }
                            }
                        }),
                        function (error) {
                            self.userMsgAlertClass = "alert-danger";
                            self.userMsg = "Error: Failed to save information for <strong>" + self.dataField.name + "</strong> section. " + error;
                        };
                }
            }

            self.openFindContact = function () {
                self.userMsg = false;
                var modalInstance = $modal.open({
                    templateUrl: 'app/modules/ProjectCreation/views/findContact.html',
                    scope: $scope,
                    controller: 'FindContactCtrl as findContact',
                    size: 'lg',
                    windowClass: 'app-modal-window',

                    resolve: {
                        contactObj: function () {
                            return self.data;
                        }
                    }
                });
                modalInstance.result.then(function () {
                    if (self.dataField.name == 'Client') {
                        for (i = 0; i < self.dataField.fields.length; i++) {
                            if (self.dataField.fields[i].mappedField == 'companyName') {
                                self.dataField.fields[i].fieldValue = self.data.client.companyName;
                            } else if (self.dataField.fields[i].mappedField == 'contactName') {
                                self.dataField.fields[i].fieldValue = self.data.client.contactName;
                            } else if (self.dataField.fields[i].mappedField == 'address') {
                                self.dataField.fields[i].fieldValue = self.data.client.address;
                            } else if (self.dataField.fields[i].mappedField == 'city') {
                                self.dataField.fields[i].fieldValue = self.data.client.city;
                            } else if (self.dataField.fields[i].mappedField == 'state') {
                                self.dataField.fields[i].fieldValue = self.data.client.state;
                            } else if (self.dataField.fields[i].mappedField == 'zipCode') {
                                self.dataField.fields[i].fieldValue = self.data.client.zip;
                            } else if (self.dataField.fields[i].mappedField == 'fax') {
                                self.dataField.fields[i].fieldValue = self.data.client.fax;
                            } else if (self.dataField.fields[i].mappedField == 'email') {
                                self.dataField.fields[i].fieldValue = self.data.client.email;
                            }
                        }
                    }
                });
            }

            self.openManageCoverContacts = function () {
                var modalInstance = $modal.open({
                    templateUrl: 'app/modules/ReportAuthoring/views/manageCoverContacts.html',
                    scope: $scope,
                    controller: 'ManageCoverContactsController as coverContact',
                    size: 'lg',
                    windowClass: 'app-modal-window'
                })
            }
            self.viewSiteMap = function () {
                if (self.siteLocation && self.siteLocation.latitude && self.siteLocation.longitude) {
                    var modalInstance = $modal.open({
                        templateUrl: 'app/modules/ReportAuthoring/views/viewMap.html',
                        scope: $scope,
                        controller: "ViewMapController as viewMap",
                        size: 'lg',
                        windowClass: 'app-modal-window',
                        resolve: {
                            mapLocation: function () {
                                return self.siteLocation;
                            }
                        }
                    })
                } else {
                    self.userMsgAlertClass = "alert-danger";
                    self.userMsg = "Site location is not available to view on Map.";
                }
            }
        }],
        controllerAs: "generalInfoDataField"
    }
}]);;
angular.module('ReportAuthoring').directive('scrollableTopContainer', ['scrollableElement', function (scrollableElement) {
    return {
        restrict: 'A',
        compile: function (tElem, tAttrs) {
            return {
                pre: function (scope, iElem, iAttrs) {
                    scrollableElement.el = iElem;
                },
                post: function (scope, iElem, iAttrs) {

                }
            }
        }
    }
}]);

angular.module('ReportAuthoring').value('scrollableElement', {
    el: null
});

angular.module('ReportAuthoring').directive('handleWhenScrollAtTop', ['$window', '$parse', 'scrollableElement', function ($window, $parse, scrollableElement) {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {

            var $elem = null;

            if (scrollableElement && scrollableElement.el) {
                $elem = angular.element(scrollableElement.el);
            }
            if (!$elem) {
                $elem = angular.element($window); // wrap window object as jQuery object
                element.attr('default-scroll', true);
            }

            /*scope.$on('set-skip-handle-scroll-top-condition-true', function(event){
                scope.skipHandleScrollTopCondition = true;
            })
            scope.$on('set-skip-handle-scroll-top-condition-false', function(event){
                scope.skipHandleScrollTopCondition = false;
            })*/

            var sectionId = attrs.reportSectionId;
            var topOffset = parseInt(attrs.scrollTopOffset);
            var handler = attrs.handleWhenScrollAtTop;
            var skipCondition = attrs.skipHandleScrollTopCondition;

            var handlerParsed = $parse(handler);
            var skipConditionParsed = $parse(skipCondition);

            $elem.on('scroll', function (e) {
                var shouldSkip = skipConditionParsed(scope);
                if (shouldSkip) {
                    /*scope.skipHandleScrollTopCondition = false;*/
                    return
                };

                if (!JSON.parse(localStorage.getItem('handleAfterScroll')))
                    return;

                var arr = localStorage.getItem('idlist').split(',');

                angular.forEach(arr, function (item) {
                        var sectionId = '#section_' + item;
                        if ($('#rightContent').height() >= $(sectionId).offset().top - $('#rightContent').offset().top) {


                            if ($(sectionId).offset().top < 0) {

                                //$('#tocSection_' + item).removeClass('bg-gray');
                                //$('#tocSection_' + item).removeClass('current-section');

                            } else {
                                if (item != '1') {
                                    $('.toc-section').removeClass('bg-gray');
                                    $('.toc-section').removeClass('current-section');
                                    $('#tocSection_' + item).addClass('bg-gray');
                                    $('#tocSection_' + item).addClass('current-section');
                                    //console.log('correct item:' + item);
                                    scope.$emit('set-selected-section', {
                                        sectionId: item
                                    });

                                    //lastScrollPos = $(sectionId).offset().top;
                                } else {
                                    var currentSelectedEltId = $('.toc-nav li a.bg-gray').attr('id');
                                    if (currentSelectedEltId && currentSelectedEltId.split('_')[1] === "2") {
                                        $('.toc-section').removeClass('bg-gray');
                                        $('.toc-section').removeClass('current-section');
                                        $('#tocSection_' + item).addClass('bg-gray');
                                        $('#tocSection_' + item).addClass('current-section');
                                        scope.$emit('set-selected-section', {
                                            sectionId: item
                                        });

                                    }
                                }
                            }
                        } else {

                            //$('#tocSection_' + item).removeClass('bg-gray');
                            //$('#tocSection_' + item).removeClass('current-section');                                                                    
                        }
                    }) //end of foreach
            });
        }
    };
}]);


////New Approach for scrolling
//var $scope, $location;
//var app = angular.module('ReportAuthoring', []);

/*angular.module('ReportAuthoring').service('anchorSmoothScroll', function () {

    this.scrollTo = function (eID) {

        // This scrolling function 
        // is from http://www.itnewb.com/tutorial/Creating-the-Smooth-Scroll-Effect-with-JavaScript

        var startY = currentYPosition();
        var stopY = elmYPosition(eID);
        var distance = stopY > startY ? stopY - startY : startY - stopY;
        if (distance < 100) {
            scrollTo(0, stopY);
            return;
        }
        var speed = Math.round(distance / 100);
        if (speed >= 20) speed = 20;
        var step = Math.round(distance / 25);
        var leapY = stopY > startY ? startY + step : startY - step;
        var timer = 0;
        if (stopY > startY) {
            for (var i = startY; i < stopY; i += step) {
                setTimeout("window.scrollTo(0, " + leapY + ")", timer * speed);
                leapY += step;
                if (leapY > stopY) leapY = stopY;
                timer++;
            }
            return;
        }
        for (var i = startY; i > stopY; i -= step) {
            setTimeout("window.scrollTo(0, " + leapY + ")", timer * speed);
            leapY -= step;
            if (leapY < stopY) leapY = stopY;
            timer++;
        }

        function currentYPosition() {
            // Firefox, Chrome, Opera, Safari
            if (self.pageYOffset) return self.pageYOffset;
            // Internet Explorer 6 - standards mode
            if (document.documentElement && document.documentElement.scrollTop)
                return document.documentElement.scrollTop;
            // Internet Explorer 6, 7 and 8
            if (document.body.scrollTop) return document.body.scrollTop;
            return 0;
        }

        function elmYPosition(eID) {
            var elm = document.getElementById(eID);
            var y = elm.offsetTop;
            var node = elm;
            while (node.offsetParent && node.offsetParent != document.body) {
                node = node.offsetParent;
                y += node.offsetTop;
            }
            return y;
        }

    };

});*/
;
angular.module('ReportAuthoring').directive('horizontalTable', [function () {
    return {
        restrict: 'E',
        transclude: false,
        replace: true,
        templateUrl: 'app/modules/ReportAuthoring/directives/horizontalTables/horizontalTableView.html',
        scope: {
            table: '='
        },
        controller: ['$scope', '$attrs', 'tablesCommonFunctionsService', 'ParcelUI.Resources', function ($scope, $attrs, tablesCommonFunctionsService, ParcelUI_Resources) {
            if (!$scope.table) return;

            $scope.tableName = $attrs.table.split('.')[1];
            $scope.tablesCommonFunctionsService = tablesCommonFunctionsService;
            $scope.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;
            $scope.sectionNumber = $scope.$parent.resp.sectionNumber;
            $scope.sectionGuid = $scope.$parent.resp.sectionGUID;


            $scope.alertData = {};
            $scope.identity = angular.identity;
            var structure = $scope.table.structure;
            $scope.numberOfRowsAdd = 1;
            $scope.dataOperationMode = "EDIT";
            $scope.editmode = false;
            $scope.isSetEditableDone = false;

            $scope.$on(
                "handleEditTable",
                function handleEditTableEvent(event, isTableEdit) {
                    $scope.editmode = isTableEdit;
                }
            );

            $scope.$on('save-all-tables', function (event, args) {
                if (event.currentScope.editmode) {
                    if (event.targetScope.updatedTableSections.indexOf(event.currentScope.sectionGuid) == -1) {
                        event.targetScope.updatedTableSections.push(event.currentScope.sectionGuid);
                    }
                }
            });

            $scope.$on('set-editable-flag', function (event, args) {
                if (!$scope.isSetEditableDone) {
                    if (args.scopeToApply == "CURRENT" && event.currentScope.editmode != args.flagState) {
                        if ($scope.sectionGuid == args.sectionGuid) {
                            event.currentScope.editmode = args.flagState;
                            $scope.isSetEditableDone = true;
                        }
                    } else if (args.scopeToApply == "ALL" && $scope.editmode != args.flagState) {
                        $scope.editmode = args.flagState;
                        $scope.isSetEditableDone = true;
                    } else {}
                }
            });

            $scope.rowIndexColl = [];
            for (var i = 0; i < structure.length; i++) {
                var local = structure[i];
                var val = local.rowIndex;
                if ($scope.rowIndexColl.indexOf(val) < 0) {
                    $scope.rowIndexColl.push(val);
                }
            }

            $scope.filterbyRowIndex = function (rowIndex) {
                return function (col) {
                    return col.rowIndex === rowIndex;
                };
            };


            $scope.saveChanges = function () {

                tablesCommonFunctionsService.saveChanges($scope, $scope.sectionNumber);
            }

            $scope.cancelChanges = function () {
                tablesCommonFunctionsService.cancelChanges($scope);
            }

            $scope.addRow = function () {
                tablesCommonFunctionsService.addRow($scope);
            }

            $scope.editTable = function () {
                tablesCommonFunctionsService.editTable($scope);
            }

            $scope.duplicateRow = function (rowData) {
                tablesCommonFunctionsService.duplicateRow($scope, rowData)
            }

            $scope.deleteRow = function (rowIndex) {

                tablesCommonFunctionsService.deleteRow($scope, rowIndex);
            }
            $scope.deleteTable = function (rowIndex) {
                tablesCommonFunctionsService.deleteTable($scope, rowIndex);
            }
            $scope.moveUp = function (rowIndex) {
                tablesCommonFunctionsService.moveUp($scope, rowIndex);
            }
            $scope.moveDown = function (rowIndex) {
                tablesCommonFunctionsService.moveDown($scope, rowIndex);
            }
            $scope.moveToEnd = function (rowIndex, destination, direction) {
                tablesCommonFunctionsService.moveToEnd($scope, rowIndex, destination, direction);
                $scope.saveChanges();
            }

            $scope.showHistory = function () {
                tablesCommonFunctionsService.showHistory($scope, 'horizontalTable');
            }

        }]
    }
}]);;
angular.module('ReportAuthoring').directive('insertSubmitSuccessCallback', ['$timeout', '$rootScope', function ($timeout, $rootScope) {
    return {
        restrict: 'A',
        link: function (scope, elem, attrs) {

            // mandatory to identify angular element
            // need to 
            var elemId = attrs.id;

            // this needs to be called after submit success
            scope.callback = function (event) {
                $rootScope.$broadcast('submit-success-callback-invoked');

                // cancel default behavior
                if (event) {
                    // prevents ng-click to be executed
                    event.stopImmediatePropagation();
                    // prevents href 
                    event.preventDefault();
                }
            };



            $timeout(function () {
                //var btn = elem[0].querySelector("input[type=submit]");
                var btn = elem[0].querySelector("button[type=submit]");
                var submit = angular.element(btn);

                /*submit.on('click', function() {
                    otherCallback();
                });*/

                var clickEvName = "onClick";
                var original = submit.attr(clickEvName);
                //var modified = original + "; callbackFunc(event, '" + elemId + "');";
                var modified = "javascript: someFunc(event); callbackFunc(event, '" + elemId + "');";
                //submit.attr(clickEvName, modified);

                submit.attr('submit-success', "callbackFunc(event, '" + elemId + "')");
            });
        }
    }
}]);

// test javascript functions
// to replicate what would have
function someFunc() {
    alert('some javascript function invoked');
}

function callbackFunc(event, elemId) {
    angular.element(document.getElementById(elemId)).scope().callback(event);
};
angular.module('ReportAuthoring').directive('mapGoogle', function () {
    return {
        restrict: 'EA',
        require: '?ngModel',
        scope: {
            mapModel: '=ngModel'
        },
        link: function (scope, element, attrs, ngModel) {

            var mapOptions;
            var googleMap;
            var searchMarker;
            var searchLatLng;
            var mapDraggable = (attrs.mapdraggable == "true") ? true : false;
            var mapZoom = (attrs.mapzoom) ? parseInt(attrs.mapzoom) : 12;
            var US_geoCentre = {
                latitude: 39.828212077334264,
                longitude: -98.5795724196434
            };
            console.log("checkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk: " + scope.mapModel);
            var initLatitude = scope.mapModel.latitude ? scope.mapModel.latitude : US_geoCentre.latitude;
            var initLongitude = scope.mapModel.longitude ? scope.mapModel.longitude : US_geoCentre.longitude;

            if (scope.mapModel != undefined && scope.mapModel != "" && scope.mapModel != null) {
                ngModel.$render = function () {

                };

                scope.$watchCollection('[mapModel.latitude, mapModel.longitude]', function (newValues, oldValues) {
                    initLatitude = scope.mapModel.latitude ? scope.mapModel.latitude : US_geoCentre.latitude;
                    initLongitude = scope.mapModel.longitude ? scope.mapModel.longitude : US_geoCentre.longitude;
                    var currentPosition = new google.maps.LatLng(initLatitude, initLongitude);

                    if (newValues[0] == oldValues[0]) {
                        if (newValues[1] != oldValues[1]) {
                            if (searchMarker) {
                                googleMap.setCenter(currentPosition);
                                searchMarker.setPosition(currentPosition);
                            } else {
                                initMap(initLatitude, initLongitude);
                            }
                        }
                    } else {
                        if (searchMarker) {
                            googleMap.setCenter(currentPosition);
                            searchMarker.setPosition(currentPosition);
                        } else {
                            initMap(initLatitude, initLongitude);
                        }
                    }

                });

                function initMap(lat, lng) {
                    searchLatLng = new google.maps.LatLng(lat, lng);

                    mapOptions = {
                        zoom: mapZoom,
                        mapTypeId: google.maps.MapTypeId.ROADMAP,
                        center: searchLatLng
                    };

                    googleMap = new google.maps.Map(element[0], mapOptions);

                    searchMarker = new google.maps.Marker({
                        position: searchLatLng,
                        map: googleMap,
                        draggable: mapDraggable
                    });

                    google.maps.event.addListener(searchMarker, 'dragend', function () {
                        scope.$apply(function () {
                            scope.mapModel.dragendLat = searchMarker.getPosition().lat();
                            scope.mapModel.dragendLng = searchMarker.getPosition().lng();
                        });
                    }.bind(this));
                }

            }
            initMap(initLatitude, initLongitude);
        }
    };
});;
var copyPasteApp = angular.module('ReportAuthoring');

copyPasteApp.directive('mouseClickCopy', ['MouseClickCopyService', '$rootScope', '$parse', function (MouseClickCopyService, $rootScope, $parse) {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            element.addClass('pointer');

            var extractFrom = element;
            var childElemId = attrs['mouseClickCopy'];
            if (childElemId) {
                var childEl = element[0].querySelector("[id='" + childElemId + "']");
                var angularEl = angular.element(childEl);

                if (angularEl) {
                    extractFrom = angularEl;
                }


            }

            var enableConditionExp = attrs["oneClickCopyCondition"];
            if (enableConditionExp != "true") return;

            element.bind('click', function (event) {
                var toCopy = extractFrom.html();
                var alreadySelected = MouseClickCopyService.checkIfElemAlreadySelected(element, null);
                if (event.ctrlKey) {
                    // if element already selected, then unselect
                    // else select current                    
                    if (alreadySelected) {
                        unselectElement(element);
                    } else {
                        selectElement(element, childElemId, toCopy);
                    }
                } else {
                    // if element already selected, then unselect
                    // else unselect others, and then select current
                    if (alreadySelected) {
                        if (MouseClickCopyService.collection.length > 1) {
                            unselectAll();
                            selectElement(element, childElemId, toCopy);
                        } else {
                            unselectElement(element);
                        }
                    } else {
                        unselectAll();
                        selectElement(element, childElemId, toCopy);
                    }
                }
            });

            function selectElement(el, childElemId, toCopyHtml) {
                MouseClickCopyService.insert(toCopyHtml, el, childElemId);
                setSelectIndicator(el);
            }

            function unselectElement(el) {
                MouseClickCopyService.clear(el, null, false);
                removeSelectedIndicator(el);
            }

            function unselectAll() {
                var coll = MouseClickCopyService.collection;
                for (var i = 0; i < coll.length; i++) {
                    var item = coll[i];
                    var el = item.parentEl;
                    removeSelectedIndicator(el);
                }
                MouseClickCopyService.clear(null, null, true);
            }

            function setSelectIndicator(el) {
                element.attr('clicked', true);
                element.addClass('language-selected');
            }

            function removeSelectedIndicator(el) {
                el.removeClass('language-selected');
                el.removeAttr('clicked');
            }


            $rootScope.$on(MouseClickCopyService.broadcastMsgText_copyRetrieved, function () {
                removeSelectedIndicator(element);
            });

        }
    }
}]);

copyPasteApp.service('MouseClickCopyService', ['$rootScope', function ($rootScope) {

    this.finalHtml_;
    this.separator = ""; //<br>";
    this.broadcastMsgText_copyRetrieved = "mouse-click-copy-text-retrieved";
    this.collection = [];

    function ElItem(html, parentEl, copyFromElId) {
        this.html = html;
        this.parentEl = parentEl;
        this.copyFromElId = copyFromElId;
    }

    function getMergedHtml() {
        if (!this.collection || !this.collection.length) return "";

        var merged = null;
        var coll = this.collection;
        for (var i = 0; i < coll.length; i++) {
            var item = coll[i];
            merged = merged ? merged + this.separator + item.html : item.html;
        }
        return merged;
    }

    this.insert = function (html, parentEl, copyFromElId) {
        if (html) {
            this.finalHtml_ = this.finalHtml_ ? this.finalHtml_ + this.separator + html : html;
            var item = new ElItem(html, parentEl, copyFromElId);
            this.collection.push(item);
        }
    }

    this.checkIfElemAlreadySelected = function (parentEl, copyFromElId) {
        if (!this.collection || !this.collection.length) return false;

        var coll = this.collection;
        for (var i = 0; i < coll.length; i++) {
            var item = coll[i];
            if ((parentEl && parentEl == item.parentEl) || (copyFromElId && copyFromElId == item.copyFromElId)) {
                return true;
            }
        }
        return false;
    };

    this.clear = function (parentEl, copyFromElId, isClearAll) {
        if (!this.finalHtml_ || !this.collection || !this.collection.length) return;

        if (isClearAll) {
            this.finalHtml_ = null;
            this.collection = [];
            return;
        }

        if (parentEl || copyFromElId) {
            var coll = this.collection;
            var modified = false;
            for (var i = 0; i < coll.length; i++) {
                var item = coll[i];
                if ((parentEl && parentEl == item.parentEl) || (copyFromElId && copyFromElId == item.copyFromElId)) {
                    modified = true;
                    coll.splice(i, 1);
                    break;
                }
            }
            if (modified) {
                this.finalHtml_ = getMergedHtml();
            }
        }
    };

    this.getCopied = function () {

        var copied = angular.copy(this.finalHtml_);
        var coll = this.collection;
        var copyContent = copied ? {
            html: copied,
            //collection: coll,
            source: coll && coll.length ? coll[0].copyFromElId : null
        } : undefined;
        $rootScope.$broadcast(this.broadcastMsgText_copyRetrieved);
        this.clear(null, null, true);

        return copyContent;
    };
}]);;
angular.module('ReportAuthoring').directive('photoLog', ['AppendixAPI', 'BASEURL', '$filter', '$rootScope', function (AppendixAPI, BASEURL, $filter, $rootScope) {
    return {
        restrict: 'A',
        templateUrl: 'app/modules/ReportAuthoring/directives/photoLog/photoLogView.html',
        replace: true,
        scope: {
            reportId: '=',
            section: '='
        },
        controller: ['$scope', function ($scope) {

            function getPhotos(reportID, sectionGUID) {
                var promise = AppendixAPI.getAppendixPhotos(reportID, sectionGUID);
                return promise.then(function (photos) {
                    return photos;
                });
            }

            function init() {
                if (!$scope.section.images) {
                    var promise = getPhotos($scope.reportId, $scope.section.sectionGUID);
                    promise.then(function (photos) {

                        $scope.section.images = $filter('orderBy')(photos, 'orderIndex');
                        separateImages($scope.section);
                    });
                }
            }


            $scope.changeText = function () {
                scope.text = 'New directive text';
            };
            $scope.$on('appendixUploadImage', function (event, data) {
                var promise = getPhotos($scope.reportId, $scope.section.sectionGUID);
                promise.then(function (photos) {
                    $scope.section.images = $filter('orderBy')(photos, 'orderIndex');
                    separateImages($scope.section);
                });
            });


            init();

            function separateImages(section) {
                section.includedImages = extractIncludedPhotos(section.images, true);
                section.excludedImages = extractIncludedPhotos(section.images, false);
            }

            function extractIncludedPhotos(photos, isIncluded) {
                var arr = [];
                angular.forEach(photos, function (photo) {
                    photo.thumbnailURL = BASEURL.REPORTAUTHORING_APPENDICES_COREFILES + '/files/' + photo.fileGuid + '/stream';
                    if (photo.isIncluded === isIncluded) {
                        arr.push(photo);
                    }
                });
                return arr;
            }

            $scope.sortableOptions = {
                update: function (e, ui) {
                    /*var logEntry = tmpList.map(function(i) {
                        return i.value;
                    }).join(', ');
                    $scope.sortingLog.push('Update: ' + logEntry);*/
                },
                stop: function (e, ui) {
                    // this callback has the changed model
                    /*var logEntry = tmpList.map(function(i) {
                        return i.value;
                    }).join(', ');
                    $scope.sortingLog.push('Stop: ' + logEntry);*/

                    var model = ui.item.sortable.model;
                    //var photos = ui.item.sortable.sourceModel;

                    var photos = $scope.section.includedImages.concat($scope.section.excludedImages)
                    reorderPhotosInAppendix(photos, $scope.section.sectionGUID);
                }
            };

            function reorderPhotosInAppendix(photos, sectionGUID) {
                $rootScope.$broadcast('appendixClearmessage', {});
                var data = extractPutDataForReorderingPhotos(photos);
                var promise = AppendixAPI.putAppendixPhotos($scope.reportId, data, sectionGUID);
                promise.then(function (result) {
                    // no response in API
                });
            }

            function extractPutDataForReorderingPhotos(photos) {
                var data = [];
                angular.forEach(photos, function (photo) {
                    var obj = {
                        fileGuid: photo.fileGuid,
                        isIncluded: photo.isIncluded
                    };
                    data.push(obj);
                });
                return data;
            }

            $scope.enableRename = function (img) {

                img.renameAction = true;
                img.renamed = img.caption;
            };
            $scope.cancelRename = function (img) {
                img.renameAction = false;
                $rootScope.$broadcast('appendixClearmessage', {});
            };
            $scope.renameImg = function (img) {

                var photo = angular.copy(img);
                photo.caption = img.renamed;
                photo.orderIndex = img.orderIndex;

                delete photo.renamed;
                delete photo.uploadedByAccountGuid;
                delete photo.uploadedByAccountID;
                delete photo.uploadedDateTime;
                delete photo.downloadURL;
                delete photo.uploadedByName;
                delete photo.renameAction;
                delete photo.thumbnailURL;
                var promise = AppendixAPI.putAppendixPhoto($scope.reportId, img.fileGuid, photo, img.sectionGUID);
                promise.then(function (photo) {
                    /*var arr = $scope.section.images;
                    var index = arr.indexOf(img);
                    arr[index] = photo;
                    img = arr[index];*/
                    img.caption = photo.caption;
                    img.renameAction = false;
                    $rootScope.$broadcast('appendixClearmessage', {});
                });
            };


            $scope.rotateCounterClockwise = function (img) {
                $rootScope.$broadcast('appendixClearmessage', {});
                var photo = {
                    caption: img.caption,
                    isIncluded: img.isIncluded,
                    orderIndex: img.orderIndex,
                    transform: {
                        rotation: -90
                    }
                }
                var promise = AppendixAPI.putAppendixPhoto($scope.reportId, img.fileGuid, photo, img.sectionGUID);
                promise.then(function (photo) {
                    /*var arr = $scope.section.images;
                    var index = arr.indexOf(img);
                    arr[index] = photo;
                    img = arr[index];*/

                    img.renameAction = false;
                });
            };
            $scope.includePhoto = function (img) {
                $rootScope.$broadcast('appendixClearmessage', {});
                var photo = {
                    caption: img.caption,
                    orderIndex: img.orderIndex,
                    isIncluded: 1
                }
                var promise = AppendixAPI.putAppendixPhoto($scope.reportId, img.fileGuid, photo, img.sectionGUID);
                promise.then(function (photo) {
                    /*var arr = $scope.section.images;
                    var index = arr.indexOf(img);
                    arr[index] = photo;
                    img = arr[index];*/

                    // only for testing purposes
                    // mock API only returns true
                    var section = $scope.section;
                    img.isIncluded = 1;
                    var index = section.excludedImages.indexOf(img);
                    if (index >= 0) {
                        section.excludedImages.splice(index, 1);
                        section.includedImages.push(img);
                    }

                    img.renameAction = false;
                });

            };
            $scope.excludePhoto = function (img) {
                $rootScope.$broadcast('appendixClearmessage', {});
                var photo = {
                    caption: img.caption,
                    orderIndex: img.orderIndex,
                    isIncluded: 0
                }
                var promise = AppendixAPI.putAppendixPhoto($scope.reportId, img.fileGuid, photo, img.sectionGUID);
                promise.then(function (photo) {
                    /*var arr = $scope.section.images;
                    var index = arr.indexOf(img);
                    arr[index] = photo;
                    img = arr[index];*/

                    // only for testing purposes
                    // mock API only returns true
                    var section = $scope.section;
                    img.isIncluded = 0;
                    var index = section.includedImages.indexOf(img);
                    if (index >= 0) {
                        section.includedImages.splice(index, 1);
                        section.excludedImages.push(img);
                    }

                    img.renameAction = false;
                });

            };
            $scope.deletePhoto = function (img) {
                $rootScope.$broadcast('appendixClearmessage', {});
                var photo = {
                    caption: img.caption,
                    isIncluded: img.isIncluded,
                    transform: {
                        rotation: -90
                    }
                }
                var promise = AppendixAPI.deleteAppendixPhoto($scope.reportId, img.fileGuid);
                promise.then(function (photo) {
                    var arr = $scope.section.images;
                    var index = arr.indexOf(img);
                    arr.splice(index, 1);

                    if (img.isIncluded) {
                        var includedIndex = $scope.section.includedImages.indexOf(img);
                        $scope.section.includedImages.splice(includedIndex, 1);
                    } else {
                        var excludedIndex = $scope.section.excludedImages.indexOf(img);
                        $scope.section.excludedImages.splice(excludedIndex, 1);
                    }
                    //separateImages($scope.section);

                    img.renameAction = false;
                });
            };
            $scope.zoomPhoto = function (img) {
                $rootScope.$broadcast('appendixClearmessage', {});
                img.zoomIn = !img.zoomIn;
            };
            $scope.rotateClockwise = function (img) {
                $rootScope.$broadcast('appendixClearmessage', {});
                var photo = {
                    caption: img.caption,
                    isIncluded: img.isIncluded,
                    orderIndex: img.orderIndex,
                    transform: {
                        rotation: 90
                    }
                }
                var promise = AppendixAPI.putAppendixPhoto($scope.reportId, img.fileGuid, photo, img.sectionGUID);
                promise.then(function (photo) {
                    /*var arr = $scope.section.images;
                    var index = arr.indexOf(img);
                    arr[index] = photo;
                    img = arr[index];*/

                    img.renameAction = false;
                });
            };

            $scope.excludeAll = function () {

            };
            $scope.includeAll = function () {

            };
            $scope.deleteAll = function () {

            };
            $scope.zoomInAll = function () {

            };
        }]
    }
}]);;
angular.module('ReportAuthoring').directive('renderGeneralinformation', ['$compile', '$sce', 'ReportAuthoringAPI', '$http', function ($compile, $sce, ReportAuthoringAPI, $http) {
    return {
        restrict: 'A',

        link: function (scope, element, attr, controllers) {

            $http.get('app/modules/ReportAuthoring/views/generalInformationForTOC.html').success(function (data) {

                element.html(data);
                scope.element = element.contents();
                $compile(element.contents())(scope);

            });

        }
    }
}]);;
angular.module("ReportAuthoring").directive("mapResolveGeocode", ["$modal", "$timeout", function ($modal, $timeout) {
    return {
        restrict: "A",
        scope: {
            addressData: '='
        },
        controller: function ($scope) {
            $scope.$on("map-resolve-geocode-linked", createGoogleMap);

            var createGoogleMap = function () {
                var mapOptions = {
                    zoom: 4,
                    center: new google.maps.LatLng(40.0000, -98.0000),
                    mapTypeId: google.maps.MapTypeId.TERRAIN
                };
                $scope.map = new google.maps.Map(document.getElementById('gMap'), mapOptions);
            };
        },
        compile: function (tElem, tAttrs) {
            tElem.attr("ng-click", "openViewinPopup()");
            return {
                pre: function (scope, iElem, iAttrs) {

                },
                post: function ($scope, element, attrs) {
                    var templateUrl = 'app/modules/ReportAuthoring/directives/resolveGeocode/mapResolveGeocode.html';

                    $scope.openViewinPopup = function () {
                        var modalInstance = $modal.open({
                            templateUrl: templateUrl,
                            scope: $scope,
                            size: "lg"
                        });

                        $scope.$broadcast("map-resolve-geocode-linked");
                    };

                    element.on("click", $scope.openViewinPopup);
                }
            }
        }
    };

}]);;
angular.module('ReportAuthoring').directive('spreadsheetTable', [function () {
    return {
        restrict: 'E',
        transclude: false,
        replace: true,
        templateUrl: 'app/modules/ReportAuthoring/directives/spreadsheetTables/spreadsheetTableView.html',
        scope: {
            table: '='
        },

        controller: ['$scope', '$attrs', 'tablesCommonFunctionsService', 'ParcelUI.Resources', function ($scope, $attrs, tablesCommonFunctionsService, ParcelUI_Resources) {
            if (!$scope.table) return;

            $scope.sectionGuid = $scope.$parent.resp.sectionGUID;
            $scope.sectionNumber = $scope.$parent.resp.sectionNumber;
            $scope.tablesCommonFunctionsService = tablesCommonFunctionsService;
            $scope.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;

            $scope.tableName = $attrs.table.split('.')[1];

            $scope.alertData = {};
            $scope.identity = angular.identity;
            $scope.numberOfRowsAdd = 1;
            $scope.dataOperationMode = "EDIT";
            $scope.editmode = false;
            $scope.isSetEditableDone = false;
            var structure = $scope.table.structure;


            $scope.$on(
                "handleEditTable",
                function handleEditTableEvent(event, isTableEdit) {
                    $scope.editmode = isTableEdit;
                }
            );

            $scope.$on('save-all-tables', function (event, args) {
                if (event.currentScope.editmode) {
                    if (event.targetScope.updatedTableSections.indexOf(event.currentScope.sectionGuid) == -1) {
                        event.targetScope.updatedTableSections.push(event.currentScope.sectionGuid);
                    }
                }
            });

            $scope.$on('set-editable-flag', function (event, args) {
                if (!$scope.isSetEditableDone) {
                    if (args.scopeToApply == "CURRENT" && event.currentScope.editmode != args.flagState) {
                        if ($scope.sectionGuid == args.sectionGuid) {
                            event.currentScope.editmode = args.flagState;
                            $scope.isSetEditableDone = true;
                        }
                    } else if (args.scopeToApply == "ALL" && $scope.editmode != args.flagState) {
                        $scope.editmode = args.flagState;
                        $scope.isSetEditableDone = true;
                    } else {}
                }
            });

            $scope.rowIndexColl = [];
            for (var i = 0; i < structure.length; i++) {
                var local = structure[i];
                var val = local.rowIndex;
                if ($scope.rowIndexColl.indexOf(val) < 0) {
                    $scope.rowIndexColl.push(val);
                }
            }

            $scope.saveChanges = function (form) {
                tablesCommonFunctionsService.saveChanges($scope, $scope.sectionNumber);
            }

            $scope.cancelChanges = function () {
                tablesCommonFunctionsService.cancelChanges($scope);
            }
            $scope.addRow = function () {
                tablesCommonFunctionsService.addRow($scope);

            }
            $scope.editTable = function () {
                tablesCommonFunctionsService.editTable($scope);
            }
            $scope.duplicateRow = function (rowData) {
                tablesCommonFunctionsService.duplicateRow($scope, rowData)
            }

            $scope.deleteRow = function (rowIndex) {
                tablesCommonFunctionsService.deleteRow($scope, rowIndex);
            }
            $scope.deleteTable = function (rowIndex) {
                tablesCommonFunctionsService.deleteTable($scope, rowIndex);
            }
            $scope.moveUp = function (rowIndex) {
                tablesCommonFunctionsService.moveUp($scope, rowIndex);
                $scope.saveChanges();
            }
            $scope.moveDown = function (rowIndex) {
                tablesCommonFunctionsService.moveDown($scope, rowIndex);
                $scope.saveChanges();
            }
            $scope.moveToEnd = function (rowIndex, destination, direction) {
                tablesCommonFunctionsService.moveToEnd($scope, rowIndex, destination, direction);
                $scope.saveChanges();
            }

            $scope.showHistory = function () {
                tablesCommonFunctionsService.showHistory($scope, 'spreadSheetTable');
            }


        }]
    }
}]);;
angular.module('ReportAuthoring').directive('tablefieldDirective', ['$http', '$compile', '$filter', function ($http, $compile, $filter) {

    var getTemplateUrl = function (field, data, editmode, parentindex, index) {
        var type = field.type;
        var template = '';

        switch (type) {
            case 'text':
                template = '<p class="form-control-static" ng-show="!editmode">{{data}}</p><input class="form-control" type="text" ng-show="editmode" ng-init="data = data || field.defaultValue"  ng-model="data">';
                break;
            case 'textarea':
                template = '<div class="form-control-static" ng-show="!editmode" ng-bind-html="trustAsHtml(data)"></div>' +
                    '<div ck-inline ng-show="editmode" id="ck_inline_editor_{{parentindex}}_{{index}}" name="ck_inline_editor{{index}}" editmode="editmode" class="form-control-static border-1" ng-model="data" ng-bind-html="trustAsHtml(data)"></div>';
                break;
            case 'checkbox':
                template = '<div class="col-xs-12 col-lg-12 col-md-12"><div ng-show="!editmode"><span ng-show="{{data}}" class="form-control-static">{{data}}</span></div><div data-ng-repeat="item infield.options"><input type="checkbox" ng-show="editmode" ng-checked="data(item.value)>-1" /><span ng-show="editmode">{{item.name}}</span></div></div>';
                break;
            case 'radio':
                template = '<fieldset id="radio"><div ng-show="!editmode"><span ng-show="data" class="form-control-static">{{data}}</span></div><div data-ng-repeat="item in field.options | orderBy: "orderIndex""><input type="radio" ng-show="editmode" value="{{item.value}}" name="radio_{{index}}" ng-model="data" ng-init="data=data||field.defaultValue" />            <span ng-show="editmode">{{item.name}}</span></div></fieldset>';
                break;
            case 'email':
                template = '<p class="form-control-static" ng-show="!editmode">{{data}}</p><input type="email" placeholder="Email" ng-show="editmode"  ng-init="data = data || field.defaultValue"  value="{{data}}" ng-model="data"/>';
                break;
            case 'dropdown':
                template = '<p class="form-control-static" ng-show="!editmode">{{data.name}}</p><select id="grouping" ng-show="editmode" class="form-control" ng-model="data" ng-options="item.name for item in field.options" ng-model="data"><option value="">-- Select--</option></select>';
                break;
            case 'date':
                template = '<div><span class="form-control-static" ng-show="!editmode">{{data | date:"dd-MM-yyyy"}}</span><div ng-show="editmode" class=" input-group"><input type="text" class="form-control" datetime-picker="dd-MM-yyyy" ng-model="data" is-open="status.opened" enable-time="false" datepicker-options="dateOptions" date-disabled="disabled(date, mode)" close-on-date-selection="true" datepicker-append-to-body="true" name="date" ng-click="open($event)"><span class="input-group-btn"><button type="button" class="btn btn-default" ng-click="open($event)"><i class="fa fa-calendar"></i></button></span></div></div>';
                break;
            default:
                template = '<p class="form-control-static" ng-show="!editmode">{{data}}</p><input class="form-control" type="text" ng-show="editmode" ng-init="data = data || field.defaultValue"  ng-model="data">';
        }
        return template;
    }

    var linker = function (scope, element, attr, controllers) {

        // GET template content from path
        scope.attr = attr;
        scope.element = element;

        if (scope.field.type == "dropdown") {
            if (scope.data && scope.data.value != undefined) {
                var selectedGroupTypeArr = $filter('filter')(scope.field.options, {
                    value: scope.data.value
                }, true);
                scope.data = selectedGroupTypeArr[0];
            }
        }


        scope.open = {};

        // Disable weekend selection
        scope.disabled = function (date, mode) {
            return (mode === 'day' && (date.getDay() === 0 || date.getDay() === 6));
        };
        scope.dateOptions = {
            showWeeks: false,
            startingDay: 1
        };

        scope.timeOptions = {
            readonlyInput: true,
            showMeridian: false
        };

        scope.open = function ($event) {
            scope.status.opened = true;
        };

        scope.status = {
            opened: false
        };

        var template = getTemplateUrl(scope.field, scope.data, scope.editmode, scope.parentindex, scope.index);
        if (template != undefined) {
            //  $http.get(templateUrl).success(function (data) {
            element.html(template);
            scope.element = element.contents();
            $compile(element.contents())(scope);

            // });
        }

    }

    return {

        restrict: 'A',
        require: '?^form',

        scope: {
            field: '=',
            data: '=',
            editmode: '=',
            index: '=',
            parentindex: '=',
        },
        controller: function ($scope, $element, $http, $sce) {
            $scope.trustAsHtml = function (string) {
                if (string)
                    return $sce.trustAsHtml(string);
                return;
            }
        },
        link: linker
    };
}]);



angular.module('ReportAuthoring').directive('ckInline', ['$sce', '$timeout', function ($sce, $timeout) {
    return {
        scope: {
            editmode: "=editmode",
            value: "=ngModel",

        },
        link: function (scope, elm, attr, ngModel) {
            var ck_inline;
            var cfg = {
                toolbar: [
                    {
                        name: "basicstyles",
                        items: ["Bold", "Italic", "Underline", "Strike", "Subscript", "Superscript", "-", "RemoveFormat"]
                    },
                    {
                        name: "paragraph",
                        items: ["NumberedList", "BulletedList", "-", "Outdent", "Indent", "-", "JustifyLeft", "JustifyCenter", "JustifyRight", "JustifyBlock"]
                    },
                    {
                        name: "links",
                        items: ["Link", "Unlink"]
                    },
		"/",
                    {
                        name: "styles",
                        items: ["Styles", "Format", "Font", "FontSize"]
                    },
                    {
                        name: "colors",
                        items: ["TextColor", "BGColor"]
                    }
	]
            };

            function applyInlineCKEditor() {
                elm.attr("contenteditable", "true");
                CKEDITOR.disableAutoInline = true;

                ck_inline = CKEDITOR.inline(elm[0], cfg);

                if (!attr.ngModel)
                    return;

                ck_inline.on('instanceReady', function () {
                    ck_inline.setData(elm.html());
                });

                function updateHtml() {
                    scope.$apply(function () {
                        scope.value = ck_inline.getData();
                    });
                }

                ck_inline.on('blur', updateHtml);
                ck_inline.on('dataReady', updateHtml);
            }


            scope.$watch('editmode', function (newValue, oldValue) {
                if (newValue) {
                    applyInlineCKEditor();
                } else {
                    if (ck_inline && ck_inline.name && CKEDITOR.instances[ck_inline.name]) {
                        CKEDITOR.instances[ck_inline.name].destroy();
                    }
                }
            });
        }
    };
}]);


angular.module('ReportAuthoring').directive("tabularDataFormChange", function ($parse) {
    return {
        require: "form",
        link: function (scope, element, attrs) {
            var cb = $parse(attrs.formOnChange);
            element.on("change", function () {
                cb(scope);
            });
        }
    }
});;
angular.module('ReportAuthoring').controller('tableHistoryController', ['$scope', '$modalInstance', 'tableHistoryObj', 'ReportAuthoringAPI', '$stateParams', 'ParcelUI.Resources', '$sce', function ($scope, $modalInstance, tableHistoryObj, ReportAuthoringAPI, $stateParams, ParcelUI_Resources, $sce) {

    var self = this;
    self.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;
    init();

    function init() {

        self.historyArr = [];
        self.tableName = tableHistoryObj.tableName;
        //self.filteredHistoryArr = [];
        self.tableHistory = [];
        var promise = ReportAuthoringAPI.getHistory($stateParams.reportGuid, tableHistoryObj.sectionGUID);
        self.waitingProcessResources.promise = null;
        self.waitingProcessResources.promise = promise;
        promise.then(function (resp) {
            self.tableHistory = resp.history;
        });
    }

    self.trustAsHtml = function (string) {
        if (string) {
            if (typeof string !== 'object') {
                return $sce.trustAsHtml(string.toString());
            } else {
                string.value;
            }
        }
        return string;
    }

    self.convertDateTime = function (value) {
        return new Date(value);
    }

    self.closeTableHistory = function () {
        $modalInstance.close();
    }

    self.filterbyRowIndex = function (rowIndex) {
        return function (col) {
            return col.rowIndex === rowIndex;
        };
    };

    self.identity = angular.identity;
    //self.rowIndexColl = [];

    self.rowIndexCollection = function (structure) {
        var rowIndexColl = [];
        for (var i = 0; i < structure.length; i++) {
            var local = structure[i];
            var val = local.rowIndex;
            if (rowIndexColl.indexOf(val) < 0) {
                rowIndexColl.push(val);
            }
        }
        return rowIndexColl;
    }
}]);;
/**
 * Binds a TinyMCE widget to <textarea> elements.
 */
angular.module('ui.tinymce', [])
    .value('uiTinymceConfig', {})
    .directive('uiTinymce', ['uiTinymceConfig', function (uiTinymceConfig) {
        uiTinymceConfig = uiTinymceConfig || {};
        var generatedIds = 0;
        return {
            require: 'ngModel',
            link: function (scope, elm, attrs, ngModel) {
                var expression, options, tinyInstance;
                // generate an ID if not present
                if (!attrs.id) {
                    attrs.$set('id', 'uiTinymce' + generatedIds++);
                }
                options = {
                    // Update model when calling setContent (such as from the source editor popup)
                    setup: function (ed) {
                        ed.on('init', function (args) {
                            ngModel.$render();
                        });
                        // Update model on button click
                        ed.on('ExecCommand', function (e) {
                            ed.save();
                            ngModel.$setViewValue(elm.val());
                            if (!scope.$$phase) {
                                scope.$apply();
                            }
                        });
                        // Update model on keypress
                        ed.on('KeyUp', function (e) {
                            console.log(ed.isDirty());
                            ed.save();
                            ngModel.$setViewValue(elm.val());
                            if (!scope.$$phase) {
                                scope.$apply();
                            }
                        });
                    },
                    mode: 'exact',
                    elements: attrs.id
                };
                if (attrs.uiTinymce) {
                    expression = scope.$eval(attrs.uiTinymce);
                } else {
                    expression = {};
                }
                angular.extend(options, uiTinymceConfig, expression);
                setTimeout(function () {
                    tinymce.init(options);
                });


                ngModel.$render = function () {
                    if (!tinyInstance) {
                        tinyInstance = tinymce.get(attrs.id);
                    }
                    if (tinyInstance) {
                        tinyInstance.setContent(ngModel.$viewValue || '');
                    }
                };
            }
        };
    }]);;
angular.module('ReportAuthoring').directive('tocDisplay', ['$rootScope', function ($rootScope) {
    return {
        restrict: 'E',
        transclude: true,
        templateUrl: 'app/modules/ReportAuthoring/directives/tocDisplay/tocView.html',
        scope: {
            sections: '=',
            selectedSection: '=',
            sectionClick: "&",
            flagClick: "&"
        },
        link: function (scope, element, attrs) {
            scope.sectionTotal = "";
            var sectionTotalCost = 0;
            scope.calculateRecommendationCost = function (section, selectedSection) {

                if (section.sections.length > 0) {
                    sectionTotalCost = 0;
                    var calculateTotalCost = totalCost(section, selectedSection);
                    section.totalCost = calculateTotalCost;
                } else {
                    if (section.totalCost != undefined) {
                        section.totalCost = section.totalCost;
                    }
                }
            }

            function totalCost(section, selectedSection) {

                angular.forEach(section.sections, function (section, index) {
                    if (section.length != undefined && section.length > 0) {
                        totalCost(section);
                    } else {
                        if (section.totalCost != undefined) {
                            sectionTotalCost = parseFloat(sectionTotalCost) + parseFloat(section.totalCost);
                        }
                    }

                });
                return sectionTotalCost;

            }


            $rootScope.$on('load-ReportWriting-Toc', function (event, args) {

                var selectedSection = scope.sections.filter(function (item) {
                    return item.sectionGUID.toLowerCase() == args.selectedSection.sectionGUID.toLowerCase()
                })
                if (selectedSection.length > 0) {
                    selectedSection[0].totalCost = args.selectedSection.totalCost;
                }
                angular.forEach(scope.sections, function (section, index) {
                    scope.calculateRecommendationCost(section);
                });



            });

        }
    };
}]);


angular.module('ReportAuthoring').directive('nestedSections', ['$compile', function ($compile) {
    return {
        restrict: 'E',
        template: '<div></div>',
        scope: {
            nestedSections: '=',
            selectedSection: '=',
            nestedSectionClick: "&",
            nestedSectionFlagClick: "&"
        },
        link: function (scope, element, attrs) {
            if (angular.isArray(scope.nestedSections)) {

                element.append("<toc-display sections='nestedSections' id='tocSection_{section.hasComments}' section-click='nestedSectionClick({section: section})' flag-click='nestedSectionFlagClick({section: section})' selected-section='selectedSection'></toc-display>");
                $compile(element.contents())(scope);
            }
        }
    };
}]);;
angular.module('ReportAuthoring').directive('verticalTable', [function () {
    return {
        restrict: 'E',
        transclude: false,
        replace: true,
        templateUrl: 'app/modules/ReportAuthoring/directives/verticalTables/verticalTableView.html',
        scope: {
            table: '='
        },

        controller: ['$scope', '$attrs', 'tablesCommonFunctionsService', 'ParcelUI.Resources', function ($scope, $attrs, tablesCommonFunctionsService, ParcelUI_Resources) {

            $scope.tablesCommonFunctionsService = tablesCommonFunctionsService;
            $scope.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;
            $scope.tableName = $attrs.table.split('.')[1];
            $scope.sectionGuid = $scope.$parent.resp.sectionGUID;
            $scope.sectionNumber = $scope.$parent.resp.sectionNumber;

            $scope.alertData = {};
            $scope.identity = angular.identity;
            $scope.numberOfRowsAdd = 1;
            $scope.dataOperationMode = "EDIT";
            $scope.editmode = false;
            $scope.isSetEditableDone = false;
            var structure = $scope.table.structure;

            $scope.$on(
                "handleEditTable",
                function handleEditTableEvent(event, isTableEdit) {
                    $scope.editmode = isTableEdit;
                }
            );


            $scope.$on('save-all-tables', function (event, args) {
                if (event.currentScope.editmode) {
                    if (event.targetScope.updatedTableSections.indexOf(event.currentScope.sectionGuid) == -1) {
                        event.targetScope.updatedTableSections.push(event.currentScope.sectionGuid);
                    }
                }
            });

            $scope.$on('set-editable-flag', function (event, args) {
                if (!$scope.isSetEditableDone) {
                    if (args.scopeToApply == "CURRENT" && event.currentScope.editmode != args.flagState) {
                        if ($scope.sectionGuid == args.sectionGuid) {
                            event.currentScope.editmode = args.flagState;
                            $scope.isSetEditableDone = true;
                        }
                    } else if (args.scopeToApply == "ALL" && $scope.editmode != args.flagState) {
                        $scope.editmode = args.flagState;
                        $scope.isSetEditableDone = true;
                    } else {}
                }
            });

            $scope.rowIndexColl = [];
            for (var i = 0; i < structure.length; i++) {
                var local = structure[i];
                var val = local.rowIndex;
                if ($scope.rowIndexColl.indexOf(val) < 0) {
                    $scope.rowIndexColl.push(val);
                }
            }

            $scope.saveChanges = function () {
                tablesCommonFunctionsService.saveChanges($scope, $scope.sectionNumber);
            }

            $scope.cancelChanges = function () {
                tablesCommonFunctionsService.cancelChanges($scope);
            }

            $scope.addRow = function () {
                tablesCommonFunctionsService.addRow($scope);
            }

            $scope.editTable = function () {
                tablesCommonFunctionsService.editTable($scope);
            }

            $scope.duplicateRow = function (rowData) {
                tablesCommonFunctionsService.duplicateRow($scope, rowData)
            }

            $scope.deleteRow = function (rowIndex) {
                tablesCommonFunctionsService.deleteRow($scope, rowIndex);
            }

            $scope.deleteTable = function (rowIndex) {
                tablesCommonFunctionsService.deleteTable($scope, rowIndex);
            }

            $scope.moveUp = function (rowIndex) {
                tablesCommonFunctionsService.moveUp($scope, rowIndex);
            }

            $scope.moveDown = function (rowIndex) {
                tablesCommonFunctionsService.moveDown($scope, rowIndex);
            }

            $scope.moveToEnd = function (rowIndex, destination, direction) {
                tablesCommonFunctionsService.moveToEnd($scope, rowIndex, destination, direction);
                $scope.saveChanges();
            }

            $scope.showHistory = function () {
                tablesCommonFunctionsService.showHistory($scope, 'verticalTable');
            }

        }]
    }
}]);;
/*
angular.module("ReportAuthoring").filter("selectableLanguages", [function () {
    return function (collection) {
        if (!collection || !collection.length) return null;

        var out = [];
        for (var i = 0; i < collection.length; i++) {
            var item = collection[i];
            if (item.category && (item.category != "Instructions" || (item.category == "Instructions" && !item.showInPage))) {
                out.push(item);
            }
        }

        return out;
    };
}])
*/

angular.module("ReportAuthoring").filter("selectableLanguages", [function () {
    return function (collection) {
        if (!collection || !collection.length) return null;

        var out = [];
        for (var i = 0; i < collection.length; i++) {
            var item = collection[i];
            if (item.category && (item.category != "Instructions" || (item.category == "Instructions" && !item.showInPage))) {
                out.push(item);
            }
        }

        return out;
    };
}])



;
angular.module('ReportAuthoring').service('AppendixAPI', ['APIFactory', 'AppendicesUrlCollection', 'BASEURL', function (APIFactory, AppendicesUrlCollection, BASEURL) {

    // 1. Appendix Sections
    // 1.1 Get all report appendices
    this.getAllAppendices = function (reportID) {
        var url = BASEURL.REPORTAUTHORING + AppendicesUrlCollection.GETAPI_ALLAPPENDICES;
        var params = {
            reportID: reportID
        };
        var sectionsObject = {};
        return APIFactory.get(url, params).then(function (response) {

            angular.forEach(response.tableOfContent.sections, function (section, index) {
                if (section.isAppendix != undefined && section.isAppendix)
                    sectionsObject = section.sections;
            });

            return sectionsObject;
        })
    }

    // 2. Appendix Section

    // 3. Appendix Files
    this.getAppendixFiles = function (reportID, sectionGUID) {

        var url = BASEURL.appendicesPOC + AppendicesUrlCollection.GETAPI_APPENDIXFILES;
        var params = {
            reportID: reportID,
            sectionGUID: sectionGUID
        };

        return APIFactory.get(url, params).then(function (response) {
            return response.files;
        });
    }
    this.reorderAppendixFiles = function (reportID, sectionGUID, files) {

        var url = BASEURL.appendicesPOC + AppendicesUrlCollection.PUTAPI_APPENDIXFILES;
        var params = {
            reportID: reportID,
            sectionGuid: sectionGUID
        };

        var putData = {
            files: files
        };

        return APIFactory.put(url, putData, params).then(function (response) {
            return response;
        });
    };

    // 4. Appendix File
    // 4.1 put file
    this.putAppendixFile = function (reportGuid, sectionGUID, fileGuid, file) {
        var url = BASEURL.appendicesPOC + AppendicesUrlCollection.PUTAPI_APPENDIXFILE;
        var params = {
            reportGuid: reportGuid,
            sectionGUID: sectionGUID,
            fileGuid: fileGuid
        };

        var putData = {
            file: file
        };

        return APIFactory.put(url, putData, params).then(function (response) {
            return response.file;
        });
    };
    // 4.2
    this.deleteAppendixFile = function (reportGuid, sectionGuid, fileGuid) {

        var url = BASEURL.appendicesPOC + AppendicesUrlCollection.DELETEAPI_APPENDIXFILE;

        var params = {
            reportGuid: reportGuid,
            sectionGuid: sectionGuid,
            fileGuid: fileGuid
        };

        return APIFactory.delete(url, null, params);
    };


    // 5. Appendix Photos
    /* this.getAppendixPhotos = function(reportID) {
        var url = AppendicesUrlCollection.GETAPI_APPENDIXPHOTOS;
        var params = {
            reportID: reportID
        };

        return APIFactory.get(url, params).then(function(response) {
            return response.photos;
        })
    }
	*/

    this.getAppendixPhotos = function (reportID, sectionGUID) {

        var url = BASEURL.appendicesPOC + AppendicesUrlCollection.GETAPI_APPENDIXPHOTOS;
        var params = {
            reportID: reportID,
            sectionGUID: sectionGUID
        };

        return APIFactory.get(url, params).then(function (response) {
            return response.photos;
        })
    }

    this.putAppendixPhotos = function (reportID, photos, sectionGuid) {
        // var url = BASEURL.REPORTAUTHORING_PHOTOS + AppendicesUrlCollection.PUTAPI_APPENDIXPHOTOS;
        var url = BASEURL.appendicesPOC + AppendicesUrlCollection.PUTAPI_APPENDIXPHOTOS;
        var params = {
            reportID: reportID,
            sectionGuid: sectionGuid
        };

        var putData = {
            photos: photos
        };

        return APIFactory.put(url, putData, params).then(function (response) {
            // no response mentioned in the API
            return response;
        });
    };

    // 6. Appendix Photo
    this.putAppendixPhoto = function (reportID, fileGuid, photo, sectionGuid) {
        var url = BASEURL.appendicesPOC + AppendicesUrlCollection.PUTAPI_APPENDIXPHOTO;
        var params = {
            reportID: reportID,
            fileGuid: fileGuid,
            sectionGuid: sectionGuid
        };

        var putData = {
            photo: photo
        };

        return APIFactory.put(url, putData, params).then(function (response) {
            return response.photo;
        });
    }

    this.deleteAppendixPhoto = function (reportGuid, fileGuid) {
        //var url = BASEURL.REPORTAUTHORING_PHOTOS + AppendicesUrlCollection.DELETEAPI_APPENDIXPHOTO;
        var url = BASEURL.appendicesPOC + AppendicesUrlCollection.DELETEAPI_APPENDIXPHOTO;
        var params = {
            reportGuid: reportGuid,
            fileGuid: fileGuid
        };

        return APIFactory.delete(url, null, params);
    }

    // 7. Appendix Upload

    // 8. Photo Upload

    // 8. Get EDR Drawing Tool orders

    this.getAvailableDrawingToolOrders = function (reportGuid) {
        var url = BASEURL.APPENDICES_EDRDRAWINGTOOL + AppendicesUrlCollection.GETAPI_APPENDIXDRAWINGTOOLORDERS;
        var params = {
            reportGuid: reportGuid
        };
        var sectionsObject = {};
        return APIFactory.get(url, params).then(function (response) {

            return response.orders;

        })
    }

    this.getDrawingToolUrl = function (reportGuid, edrPropertyGuid) {
        var url = BASEURL.APPENDICES_EDRDRAWINGTOOL + AppendicesUrlCollection.GETAPI_APPENDIXDRAWINGTOOLURL;
        var params = {
            reportGuid: reportGuid,
            edrPropertyGuid: edrPropertyGuid
        };
        var sectionsObject = {};
        return APIFactory.get(url, params).then(function (response) {

            return response;

        })
    }


}]);;
angular.module('ReportAuthoring').service('EXCELConvertAPI', ['APIFactory', 'ReportOutputUrlCollection', 'BASEURL', function (APIFactory, ReportOutputUrlCollection, BASEURL) {

    this.getEXCEL = function (params, type) {
        var url = '';
        switch (type) {
            case 'CostTable':
                url = BASEURL.REPORTOUPUT_EXCELCONVERT + ReportOutputUrlCollection.GETAPI_COSTTABLEEXCEL;
                return APIFactory.get(url, params).then(function (response) {
                    return response.data;
                })

                break;

            case 'DetailReport':

                break;

        }
    }


}]);;
angular.module("ReportAuthoring").service("GeneralInformationAPI", ['APIFactory', 'GeneralInformationUrlCollection', 'BASEURL', function (APIFactory, GeneralInformationUrlCollection, BASEURL) {

    var self = this;
    self.get = function (reportGuid, sectionGuid) {
        var url = BASEURL.REPORTS + GeneralInformationUrlCollection.GETAPI_GI;
        var params = {
            reportGuid: reportGuid,
            sectionGuid: sectionGuid ? sectionGuid : ''
        };
        return APIFactory.get(url, params);
    }

    self.putGI = function (data, reportGuid) {
        var url = BASEURL.REPORTS + GeneralInformationUrlCollection.PUTAPI_GI;
        var putData = {
            generalInformation: data
        };
        var params = {
            reportGuid: reportGuid
        };
        return APIFactory.put(url, putData, params).then(function (response) {
            return response.generalInformation;
        });
    };


    self.getAccountManagement = function (companyGUID) {
        var url = BASEURL.ACCOUNT_MGMT_API + GeneralInformationUrlCollection.GETAPI_ACCOUNTMANAGEMENT;
        var params = {
            companyGUID: companyGUID
        };

        return APIFactory.get(url, params).then(function (response) {
            return response.companies;
        });
    }

    self.getGeoCode = function (address1, city, state, zip) {
        var url = BASEURL.REPORTAUTHORING_GEODEV + GeneralInformationUrlCollection.GETAPI_GEOCODE;
        var params = {
            address1: address1,
            city: city,
            state: state,
            zip: zip
        };

        return APIFactory.get(url, params).then(function (response) {
            return response;
        });
    }
}]);;
angular.module("ReportAuthoring").service("GeocodeAPI", ['GeneralInformationUrlCollection', 'APIFactory', function (GeneralInformationUrlCollection, APIFactory) {

    this.getStates = function () {
        var url = GeneralInformationUrlCollection.GETAPI_STATES;
        return APIFactory.get(url).then(function (result) {
            return result.states;
        });
    };

    this.getCounties = function () {
        var url = GeneralInformationUrlCollection.GETAPI_COUNTIES;
        return APIFactory.get(url).then(function (result) {
            return result.counties;
        });
    };

    this.getAddressesForCoordinates = function (latitude, longitude, distance, minScore, limit, offset) {
        var url = GeneralInformationUrlCollection.GETAPI_ADDRESSES;
        var params = {
            latitude: latitude,
            longitude: longitude,
            distance: distance,
            minScore: minScore,
            limit: limit,
            offset: offset
        };
        return APIFactory.get(url, params).then(function (result) {
            return result ? result.addressResults ? result.addressResults.addresses : null : null;
        });
    };

    this.getCoordinatesForAddress = function (address1, address2, city, state, zipCode) {
        var url = GeneralInformationUrlCollection.GETAPI_COORDIANTES;
        var params = {
            address1: address1,
            address2: address2 || "",
            city: city || "",
            state: state || "",
            zipcode: zipCode || ""
        };
        return APIFactory.get(url, params).then(function (result) {
            if (!result || !result.addressResults || !result.addressResults.addresses || !result.addressResults.addresses.length) {
                return null;
            }
            var geocode = {
                latitude: result.addressResults.addresses[0].latitude,
                longitude: result.addressResults.addresses[0].longitude
            };
            return geocode;
        });
    };

}]);;
angular.module('ReportAuthoring').service('PDFConvertAPI', ['APIFactory', 'ReportOutputUrlCollection', 'BASEURL', function (APIFactory, ReportOutputUrlCollection, BASEURL) {

    this.getPDF = function (params, type) {
        var url = '';
        switch (type) {
            case 'ExecutiveSummary':
                url = BASEURL.REPORTOUPUT_PDFCONVERT + ReportOutputUrlCollection.GETAPI_EXECUTIVESUMMARY;
                return APIFactory.get(url, params).then(function (response) {
                    return response.data;
                })
                break;
            case 'DetailReport':
                url = BASEURL.REPORTOUPUT_PDFCONVERT + ReportOutputUrlCollection.GETAPI_DETAILREPORT;
                return APIFactory.get(url, params).then(function (response) {
                    return response.data;
                })
                break;

            case 'DetailReportWithComments':
                url = BASEURL.REPORTOUPUT_PDFCONVERT + ReportOutputUrlCollection.GETAPI_DETAILREPORTCOMMENTS;
                return APIFactory.get(url, params).then(function (response) {
                    return response.data;
                })
                break;
            case 'CostTable':
                url = BASEURL.REPORTOUPUT_PDFCONVERT + ReportOutputUrlCollection.GETAPI_COSTTABLE;
                return APIFactory.get(url, params).then(function (response) {
                    return response.data;
                })
                break;
        }
    }

    this.createReportGenerationRequest = function (reportguid, data) {
        var url = 'http://wwwdev.parcelplatform.com/parcelservice/reports/{reportguid}/generations';
        var params = {
            reportguid: reportguid
        };
        return APIFactory.post(url, data, params).then(function (response) {
            return response;
        })
    }

    this.getConstructedDocument = function (params) {
        var url = '';
        var params = {
            reportguid: self.reportGuid
        };
        return APIFactory.get(url, params).then(function (response) {
            return response;
        })
    }


}]);;
angular.module('ReportAuthoring').service('ReportAuthoringAPI', ['$timeout', 'APIFactory', 'ReportAuthoringUrlCollection', '$stateParams', 'BASEURL', function ($timeout, APIFactory, ReportAuthoringUrlCollection, $stateParams, BASEURL) {

    var self = this;
    var storedHistoryArray = [];
    var storedLanguagesArray = [];
    var libraryID;
    self.apiType = {
        type: 'real', //'real',

        getAllSections: {
            mock: ReportAuthoringUrlCollection.GETAPI_ALLSECTIONS_MOCK,
            real: ReportAuthoringUrlCollection.GETAPI_ALLSECTIONS_REAL
        },
        getReportDefaulfLibrary: {
            mock: ReportAuthoringUrlCollection.GETAPI_ReportDefaulfLibrary_MOCK,
            real: ReportAuthoringUrlCollection.GETAPI_ReportDefaulfLibrary_REAL
        },
        getAllSectionsWithLimit: {
            mock: ReportAuthoringUrlCollection.GETAPI_ALLSECTIONS_WITHLIMIT_MOCK,
            real: ReportAuthoringUrlCollection.GETAPI_ALLSECTIONS_WITHLIMIT_MOCK
        },

        getSection: {
            mock: ReportAuthoringUrlCollection.GETAPI_MOCK,
            real: ReportAuthoringUrlCollection.GETAPI_REAL
        },


        getToC: {
            mock: ReportAuthoringUrlCollection.GETTOC_MOCK,
            real: ReportAuthoringUrlCollection.GETTOC_REAL
        },

        //        getComments: {
        //            mock: ReportAuthoringUrlCollection.GETCOMMENTS_MOCK,
        //            real: ReportAuthoringUrlCollection.GETCOMMENTS_MOCK
        //        },

        getHistory: {
            mock: ReportAuthoringUrlCollection.GETHISTORY_MOCK,
            real: ReportAuthoringUrlCollection.GETHISTORY_MOCK
        },
        updateSection: {
            mock: ReportAuthoringUrlCollection.UPDATESECTION_MOCK,

            real: ReportAuthoringUrlCollection.UPDATESECTION_REAL

        },
        getReportSignoff: {
            mock: ReportAuthoringUrlCollection.GETAPI_REPORTSIGNOFF_MOCK,
            //mock: BASEURL.parcelPOC+ ReportAuthoringUrlCollection.GETAPI_REPORTSIGNOFF_REAL, 
            real: BASEURL.parcelPOC + ReportAuthoringUrlCollection.GETAPI_REPORTSIGNOFF_REAL,

            //real : ReportAuthoringUrlCollection.GETAPI_REPORTSIGNOFF_MOCK
        },
        getReportSignOffSingle: {
            mock: ReportAuthoringUrlCollection.GETAPI_REPORTSIGNOFF_MOCK,
            real: BASEURL.parcelPOC + ReportAuthoringUrlCollection.GETAPI_REPORTSIGNOFFSINGLE_REAL,
        },
        getUsersUnderSignTab: {
            mock: BASEURL.ACCOUNT_MGMT_API + ReportAuthoringUrlCollection.GETAPI_REPORTSIGNOFFUSERS_REAL,
            real: BASEURL.ACCOUNT_MGMT_API + ReportAuthoringUrlCollection.GETAPI_REPORTSIGNOFFUSERS_REAL,
            //real: BASEURL.REPORTAUTHORING_ACCMGMTPOC + ReportAuthoringUrlCollection.GETAPI_REPORTSIGNOFFUSERS_REAL,
        }
    };

    self.formatUrl = function (url, queryParams) {
        if (!queryParams) return url;

        for (var param in queryParams) {
            url = url.replace("{" + param + "}", queryParams[param]);
        }
        return url;
    };

    self.getReportDefaulfLibrary = function (reportGuid) {
        var url = BASEURL.REPORTS + self.apiType.getReportDefaulfLibrary[self.apiType.type];
        var params = {
            reportGUID: reportGuid
        };
        return APIFactory.get(url, params);
    }

    self.getAllSections = function (reportId) {

        var url = BASEURL.REPORTAUTHORING + self.apiType.getAllSections[self.apiType.type];
        var params = {
            reportGuid: reportId
        };
        return APIFactory.get(url, params).then(function (response) {
            return response.report.reportData.formSectionData;
        });
    }

    self.getAllSectionsWithLimit = function (reportId, offset, limit) {
        var url = self.apiType.getAllSectionsWithLimit[self.apiType.type];
        var params = {
            limit: limit,
            offset: offset
        };
        return APIFactory.get(url, params).then(function (response) {
            return response.Sections;
        });
    }

    self.getSection = function (reportId, sectionId, sectionGUID) {

        var url = BASEURL.REPORTAUTHORING + self.apiType.getSection[self.apiType.type];
        var params = {
            reportGuid: reportId,
            sectionGUID: sectionGUID
        };

        return APIFactory.get(url, params).then(function (response) {
            response.sectionID = response.sectionID || sectionId;
            response.sectionGUID = response.sectionGUID || sectionGUID;
            response.reportGUID = response.reportGUID || $stateParams.reportGUID;
            return response.report.reportData.formSectionData[0];

        });
    }


    self.updateSection = function (reportID, sectionGUID, data) {


        var url = BASEURL.REPORTAUTHORING + self.apiType.updateSection[self.apiType.type];
        var params = {
            reportGUID: reportID

        };

        return APIFactory.put(url, data, params).then(function (response) {
            return response;
        });
    }


    self.getToC = function (reportId) {
        var url = BASEURL.REPORTAUTHORING + self.apiType.getToC[self.apiType.type];

        var params = {

            reportGuid: reportId,
            depth: 'SHALLOW'
        };

        return APIFactory.get(url, params).then(function (response) {
            //return response.tableOfContent.sections;
            return response;
        });
    }

    self.getComments = function (sortEnum, reportGUID, sectionGUID) {

        if (sectionGUID != undefined && sectionGUID != null && sectionGUID != "") {
            var url = BASEURL.BASE_REPORTWRITING_SERVICE + ReportAuthoringUrlCollection.GETCOMMENTS;
            var params = {
                reportGUID: reportGUID,
                sectionGUID: sectionGUID,
                sortEnum: sortEnum
            };
        } else {

            var url = BASEURL.BASE_REPORTWRITING_SERVICE + ReportAuthoringUrlCollection.GETALLCOMMENTS;
            var params = {
                reportGUID: reportGUID,
                sortEnum: sortEnum

            };
        }

        return APIFactory.get(url, params).then(function (response) {
            return response.sections;

        });
    }
    self.add_update_Comments = function (reportGUID, sectionGUID, data) {
        var url = BASEURL.PUT_COMMENTS + ReportAuthoringUrlCollection.PUTCOMMENTS;
        var params = {
            reportGUID: reportGUID,
            sectionGUID: sectionGUID
        };

        return APIFactory.put(url, data, params).then(function (response) {
            return response;
        });
    }
    self.deleteComments = function (data) {
        var url = BASEURL.DELETE_COMMENTS;

        return APIFactory.put(url, data).then(function (response) {
            return response;
        });
    }
    self.getCommentTypes = function () {
        var url = BASEURL.GET_COMMENT_TYPES;
        var params = {
            reportGUID: reportGUID,
            sectionGUID: sectionGUID
        };
        return APIFactory.get(url, params).then(function (response) {
            return response.comments;
        });
    }
    self.getHistory = function (reportGuid, sectionId) {
        var url = BASEURL.REPORTAUTHORING_HISTORY + self.apiType.getHistory[self.apiType.type];
        //var url = "http://127.0.0.1:49321/app/modules/ReportAuthoring/directives/tableHistory/spreadSheetTableHistory.json";
        var params = {
            reportGUID: reportGuid,
            sectionGUID: sectionId
        };
        return APIFactory.get(url, params).then(function (response) {
            return response;
        });
    }

    self.getSetupDefaults = function (reportGUID) {
        var url = BASEURL.SETUP_DEFAULTS + ReportAuthoringUrlCollection.GET_SETUP_DEFAULTS;
        var params = {
            reportGUID: reportGUID
        };
        return APIFactory.get(url, params).then(function (response) {
            return response;
        });
    }

    self.updateSetupDefaults = function (reportGUID, data) {


        var url = BASEURL.SETUP_DEFAULTS + ReportAuthoringUrlCollection.PUT_SETUP_DEFAULTS;
        var params = {
            reportGUID: reportGUID
        };

        return APIFactory.put(url, data, params).then(function (response) {
            return response;
        });
    }

    self.getCoverPageList = function (companyGuid) {
        var url = BASEURL.COVERPAGES_LIST + ReportAuthoringUrlCollection.GET_COVERPAGES_LIST;
        var params = {
            companyGuid: companyGuid
        };
        return APIFactory.get(url, params).then(function (response) {
            return response.covers;
        });
    }

    self.updatePrepopulatedData = function (reportGUID) {


        var url = BASEURL.UPDATE_PREPOPULATED + ReportAuthoringUrlCollection.UPDATE_PREPOPULATED;
        var params = {
            reportGUID: reportGUID
        };

        return APIFactory.put(url, null, params).then(function (response) {
            return response;
        });
    }
    self.getReportOutputList = function (companyGUID, type) {
        var url = BASEURL.REPORTOUTPUTLIST + ReportAuthoringUrlCollection.REPORTOUTPUTLIST;
        var params = {
            companyGUID: companyGUID,
            type: type
        };
        return APIFactory.get(url, params).then(function (response) {
            return response.reportOutputSetup;
        });
    }


    self.getCostTableData = function (siteId, packageId, tableId) {

        var url = 'app/modules/ReportAuthoring/sampleJson/' + siteId + '/sampleSection_25.json';
        return APIFactory.get(url).then(function (response) {

            var tableObject = {};
            tableObject.reserveTableConstantValues = {};
            tableObject.recommendations = {};
            tableObject.displayType = response.packages.type;
            angular.forEach(response.reports, function (report, index) {

                if (report.reportName == "Replacement Reserve Costs Table") {
                    tableObject.reserveTableConstantValues = report;
                }
                if (report.reportName == "Freddie Mac 2015 Cost Tables") {
                    tableObject.reserveTableConstantValues = report;
                }
            });
            angular.forEach(response.packages.packagesArray, function (package, index) {

                if (package.packageId == packageId) {

                    for (var i = 0; i < package.tables.length; i++) {
                        if (package.tables[i].tableId === tableId) tableObject.recommendations = package.tables[i];
                    }

                }
            });
            return tableObject;
        });
    }


    self.addUpdateRecommendation = function (submitData) {

        return true;
    }

    self.updateCondition = function (condition) {
        return true;
    }

    self.updateAction = function (action) {
        return true;
    }

    self.putHistoryArray = function (historyArray) {
        storedHistoryArray = [];
        return storedHistoryArray = historyArray;
    }

    self.getHistoryArray = function () {
        return storedHistoryArray;
    }

    self.putLanguageArray = function (languageArray) {
        storedLanguagesArray = [];
        return storedLanguagesArray = languageArray;
    }

    self.getLanguageArray = function () {
        return storedLanguagesArray;
    }

    self.putLibraryID = function (libraryGUID) {
        libraryID = "";
        return libraryID = libraryGUID;
    }

    self.getLibraryID = function () {
        return libraryID;
    }

    self.getReportSignOff = function (reportGuid) {
        var url = self.apiType.getReportSignoff[self.apiType.type];
        var params = {
            reportGuid: reportGuid
        };
        return APIFactory.get(url, params).then(function (response) {
            return response;
        });

    }

    self.getSingleReportSignOff = function (reportGuid, reportsignoffguid) {
        var url = self.apiType.getReportSignOffSingle[self.apiType.type];
        var params = {
            reportGuid: reportGuid,
            reportsignoffguid: reportsignoffguid
        };
        return APIFactory.get(url, params).then(function (response) {
            return response;
        });
    }

    self.getUsersUnderSignTab = function () {
        var url = self.apiType.getUsersUnderSignTab[self.apiType.type];
        var params = {
            companyGuid: BASEURL.companyGUID_ACC_MGMT
        };
        return APIFactory.get(url, params).then(function (response) {
            return response;
        });
    }


    self.managePanelHeight = function () {
        $timeout(function () {
            var leftpanelheight = $('.leftContent ').height();
            var topheader = $('.topHeaderHeight').height();
            var contentheight = leftpanelheight - topheader;
            $('.contentbodyHeight').height(contentheight - 5);
            $('.topHeaderHeight').css("max-height", leftpanelheight);
            $(window).resize(function () {

                var leftpanelheight = $('.leftContent ').height();
                var topheader = $('.topHeaderHeight').height();
                var contentheight = leftpanelheight - topheader;
                $('.contentbodyHeight').height(contentheight - 5);
                $('.topHeaderHeight').css("max-height", leftpanelheight);
            });
            $(window).trigger('resize');
        })
    }

    self.reportBySiteID = function (siteID) {
        var url = BASEURL.REPORTAUTHORING_SEARCHBYSITEID + ReportAuthoringUrlCollection.GETAPI_SEARCHBYSITEID;
        var params = {
            siteID: siteID
        };

        return APIFactory.get(url, params).then(function (data) {
            return data;
        });
    }

}]);;
angular.module('ReportAuthoring').factory('sharedService', [function () {

    var factory = {};

    factory.getTemplateUrl = function (type) {

        var rootCostViewUrl = 'app/modules/ReportAuthoring/directives/costTables/';
        var templateUrl = '';
        switch (type) {
            case 'displayATC':
                templateUrl = rootCostViewUrl + 'atc/recommendationView.html';
                break;
            case 'displayDefault':
                templateUrl = rootCostViewUrl + 'default/recommendationView.html';
                break;
            case 'displayEMG':
                templateUrl = rootCostViewUrl + 'emg/recommendationView.html';
                break;
            case 'displayFannie':
                templateUrl = rootCostViewUrl + 'fannie/recommendationView.html';
                break;
            case 'displayFreddie2015':
                templateUrl = rootCostViewUrl + 'freddie/recommendationView.html';
                break;
            case 'displayHUD':
                templateUrl = rootCostViewUrl + 'displayHUD.html';
                break;

        }
        return templateUrl;
    }

    return factory;

}]);
angular.module('ReportAuthoring').service('VariableReplacerAPI', ['APIFactory', 'ReportAuthoringUrlCollection', 'BASEURL', function (APIFactory, ReportAuthoringUrlCollection, BASEURL) {


    this.getVariableReplacerKeywords = function (reportID) {

        var url = BASEURL.REPORTAUTHORING + ReportAuthoringUrlCollection.VARIABLEREPLACER_KEYWORDS;
        var params = {
            reportGuid: reportID
        };

        return APIFactory.get(url, params).then(function (response) {
            return response.variables;
        });
    }


    this.updateKeywordsValue = function (reportID, variables) {
        var url = BASEURL.REPORTAUTHORING + ReportAuthoringUrlCollection.VARIABLEREPLACER_KEYWORDS;
        var queryParams = {
            reportGuid: reportID
        }
        var putData = {
            variables: variables
        }
        return APIFactory.put(url, putData, queryParams).then(function (resp) {
            return resp;
        });
    };

}]);;
angular.module('ReportAuthoring').factory('commonFunctionsService', ['$filter', '$compile', 'ReportAuthoringAPI', 'BASEURL', '$stateParams', function ($filter, $compile, ReportAuthoringAPI, BASEURL, $stateParams) {
    var factory = {};
    var recommendationObject = {};



    factory.fillConstantValues = function (self, tableData) {


        self.evalPeriod = tableData.reserveTableConstantValues.evaluationPeriod;
        self.squareFootage = tableData.reserveTableConstantValues.totalSquareFootage;
        self.unInflated = tableData.reserveTableConstantValues.reservePerSFPerYearUninflated;
        self.inflated = tableData.reserveTableConstantValues.reservePerSFPerYearInflated;
        self.totalUninflatedYearWise = tableData.reserveTableConstantValues.totalUninflatedYearWise;
        self.inflationFactorYearWise = tableData.reserveTableConstantValues.inflationFactorYearWise;
        self.totalInflatedYearWise = tableData.reserveTableConstantValues.totalInflatedYearWise;
        self.totalInflated = tableData.reserveTableConstantValues.totalInflated;
        self.totalUninflated = tableData.reserveTableConstantValues.totalUninflated;


    }

    factory.fillOtherDetails = function (self, dataContainer) {

        self.recommendation = dataContainer.completeRecommendationObject[0];
        self.recommendation.recommendationTypes = dataContainer.recommendationTypes;
        self.recommendation.units = dataContainer.units;
        self.sectionId = dataContainer.sectionId;

        var selectedUnitArr = $filter('filter')(dataContainer.units, {
            name: dataContainer.completeRecommendationObject[0].unit
        });

        if (selectedUnitArr.length == 0) {

            self.recommendation.unit = dataContainer.completeRecommendationObject[0].unit;
        } else {
            self.recommendation.unit = {
                value: selectedUnitArr[0].value,
                name: selectedUnitArr[0].name
            };
        }

        var selectedRecomendationTypeArr = $filter('filter')(dataContainer.recommendationTypes, {
            name: dataContainer.completeRecommendationObject[0].name
        });


        if (selectedRecomendationTypeArr.length == 0) {
            self.recommendation.recType = {
                value: "other_"
            };
            self.recommendation.otherRecommendationType = dataContainer.completeRecommendationObject[0].name;
        } else {
            self.recommendation.recType = {
                value: selectedRecomendationTypeArr[0].value,
                name: selectedRecomendationTypeArr[0].name
            };
        }
    }

    factory.fillYearlyDistribution = function (self, dataContainer) {

        angular.forEach(dataContainer.completeRecommendationObject[0].yearlyCostSpread, function (yearWiseCost, index) {
            self.costSpread["yr_" + yearWiseCost.label] = yearWiseCost;
        });
    }

    factory.isNumber = function (n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    factory.getNumberArr = function (num) {
        var numVal = parseInt(num);
        return new Array(num);
    }



    factory.calculateTotalSpreadCost = function (costSpread) {
        var valContainer = costSpread;
        var total = 0;
        for (var spreadFactorLabel in valContainer) {
            var spreadFactor = valContainer[spreadFactorLabel];
            var val = spreadFactor.val;
            var parsedIntVal = parseInt(val);
            if (!parsedIntVal) continue;
            total = total + parsedIntVal;
        }
        return total;
    }

    factory.checkAll = function (costSpread) {
        var valContainer = costSpread;
        for (var spreadFactorLabel in valContainer) {
            if (checkIfSpreadLabelYearly(spreadFactorLabel)) {
                var spreadFactor = valContainer[spreadFactorLabel];
                spreadFactor.include = true;
            }
        }
    }

    factory.uncheckAll = function (costSpread) {

        var valContainer = costSpread;
        for (var spreadFactorLabel in valContainer) {
            if (checkIfSpreadLabelYearly(spreadFactorLabel)) {
                var spreadFactor = valContainer[spreadFactorLabel];
                spreadFactor.include = false;
            }
        }
    }

    function checkIfSpreadLabelYearly(label) {
        return label.startsWith('yr_') // label.startsWith('yr_')
    }

    factory.spreadCost = function (costSpread, totalCost) {
        var valContainer = costSpread;
        var includedCount = 0;
        for (var spreadFactorLabel in valContainer) {
            var spreadFactor = valContainer[spreadFactorLabel];
            var isIncluded = spreadFactor.include;
            if (isIncluded) {
                includedCount++;
            }

            spreadFactor.val = "";
        }


        var spread = parseInt(totalCost / includedCount);
        var remainder = totalCost % includedCount;

        for (var spreadFactorLabel in valContainer) {
            var spreadFactor = valContainer[spreadFactorLabel];
            var isIncluded = spreadFactor.include;
            if (isIncluded) {
                var toAssign = spread;

                if (remainder) {
                    toAssign++;
                    remainder--;
                }
                spreadFactor.val = toAssign;
            } else {
                spreadFactor.val = "";
            }
        }
    }

    factory.fillYearsInTableHeader = function (self, tableData) {
        var yearlySpread = tableData.recommendations.evaluationPeriod;
        for (var i = 0; i < yearlySpread; i++) {
            self.years.push(i + 1);
        }
    }



    factory.fillRecommendations = function (self, tableData) {
        self.sections = [];
        self.recommendations = [];
        angular.forEach(tableData.recommendations.sections, function (section, index) {

            var obj = {};
            obj.section = section.section;
            obj.sectionId = section.sectionId;
            obj.sectionName = section.sectionName;
            var sectionId = section.section;
            obj.sectionscomponents = [];
            angular.forEach(section.components, function (component, index) {

                component.section = sectionId;
                component.name = component.componentDescription;
                for (var i = 0; i < self.yearlyDistribution; i++) {

                    if (component.yearlyCostSpread[i] == undefined) {
                        var yearobj = {};
                        yearobj.label = i + 1;
                        yearobj.val = "";
                        yearobj.include = false;
                        component.yearlyCostSpread.splice(i, 0, yearobj);
                    } else if (component.yearlyCostSpread[i].label != i + 1) {
                        var yearobj = {};
                        yearobj.label = i + 1;
                        yearobj.val = "";
                        yearobj.include = false;
                        component.yearlyCostSpread.splice(i, 0, yearobj);

                    }
                }
                self.recommendations.push(component);
                obj.sectionscomponents.push(component);
            });

            self.sections.push(obj);
        });
    }


    factory.storeRecommendation = function (obj) {
        recommendationObject = obj;
    }

    factory.getRecommendation = function () {
        return recommendationObject;
    }



    factory.calculate = function (calculateObj) {

        var calculatedvalue = 0;
        var calculatevalue1 = 0;
        var calculatevalue2 = 0;

        if (!isNaN(calculateObj.calculatevalue1)) {
            calculatevalue1 = calculateObj.calculatevalue1;
        }

        if (!isNaN(calculateObj.calculatevalue2)) {
            calculatevalue2 = calculateObj.calculatevalue2;
        }

        switch (calculateObj.calculatesign) {
            case "-":
                calculatedvalue = parseFloat(calculatevalue1) - parseFloat(calculatevalue2);
                break;
            case "+":
                calculatedvalue = parseFloat(calculatevalue1) + parseFloat(calculatevalue2);
                break;
            case "/":
                calculatedvalue = parseFloat(calculatevalue1) / parseFloat(calculatevalue2)
                break;
            case "*":
                calculatedvalue = parseFloat(calculatevalue1) * parseFloat(calculatevalue2)
                break;

        }

        angular.element("a[rel=popover]").popover('hide')
        return calculatedvalue;
    }


    factory.showCalculator = function (self) {

        angular.element("a[rel=popover]").popover({
            placement: 'bottom',
            html: 'true',
            content: function () {
                var itemsTemplate = ' <div>' + '<div class="row">' + '<div class="col-lg-5 col-md-5">' + '<input type="text" class="form-control" id="calculatevalue1" ng-model="calculateObj.calculatevalue1"/></div>' + '<div class="col-lg-2 col-md-2 margin-padding-0">' + '<select class="form-control" id="calculatesign" ng-model="calculateObj.calculatesign" style="padding:0px;">' + '<option value="-">-</option>' + '<option value="+">+</option>' + '<option value="*">*</option>' + ' <option value="/">/</option>' + ' </select></div>' + ' <div class="col-lg-5 col-md-5">' + '<input type="text" class="form-control" id="calculatevalue2" ng-model="calculateObj.calculatevalue2">' + '</div>' + ' </div>' + ' <div class="row">' + ' <div class="col-lg-12 col-md-12 text-center">' + '<br> <button type="button" ng-click="commonFunctionsService.hideCalculator()" class="btn btn-default btn-sm">Close</button> <button type="button" class="btn btn-primary btn-sm" ng-click="recommendation.quantity=commonFunctionsService.calculate(calculateObj)">Calculate</button>' + '</div></div></div>'
                return $compile(itemsTemplate)(self);
            },
            template: '<div class="calculator popover popover-large"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>',
            trigger: 'manual'
        });
        angular.element("a[rel=popover]").popover('show');
        //$("#" + e.currentTarget.id).popover('show');

    }

    factory.hideCalculator = function () {
        angular.element("a[rel=popover]").popover('hide');
    }

    factory.showSplitQtyUnit = function (self) {

        angular.element("a[rel=splitpopover]").popover({
            placement: 'bottom',
            html: 'true',
            content: function () {
                var itemsTemplate = '<div>' + '<div class="row">' + ' <div class="col-lg-6 col-md-6">' + '<div class="form-group ">' + ' <label class="control-label col-lg-12 col-md-12 label-center" for="immediateQty">Immediate Qty</label>' + ' <div class="col-lg-12 col-md-12">' + ' <input type="text" class="form-control" id="immediateQty" ng-model="recommendation.immediateQty">' + '</div>' + '  </div>' + '  </div>' + '<div class="col-lg-6 col-md-6">' + '   <div class="form-group ">' + '  <label class="control-label col-lg-12 col-md-12 label-center" for="reserveQty">Reserve Qty</label>' + '   <div class="col-lg-12 col-md-12">' + '<input type="text" class="form-control" id="reserveQty" ng-model="recommendation.reserveQty">' + '  </div>' + ' </div>' + ' </div>' + '</div>' + ' <div class="row" style="padding-top:15px;">' + '<div class="col-lg-12 col-md-12 text-center">' + '<button type="button" ng-click="hideSplitQtyUnit()" class="btn btn-default btn-sm">Close</button>&nbsp;<button type="button" class="btn btn-primary btn-sm" ng-click="splitsQtyUnits()">Split</button></div> </div>' + '</div>'
                return $compile(itemsTemplate)(self);
            },
            template: '<div class="popover popover-large"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>',
            trigger: 'manual'
        });
        angular.element("a[rel=splitpopover]").popover('show');
    }

    factory.hideSplitQtyUnit = function () {
        angular.element("a[rel=splitpopover]").popover('hide');

    }


    factory.updateRecommedation = function (self, recommendationData) {

        var sectionTotalCost = 0;
        var sectionData = self.$parent.$parent.contentValues;
        if (recommendationData.submitType == "ADD") {

            if (!sectionData[recommendationData.propName][0].data) {
                sectionData[recommendationData.propName][0].data = [];
            }
            recommendationData.data.UniqueID = sectionData[recommendationData.propName][0].data.length;
            sectionData[recommendationData.propName][0].data.push(recommendationData.data);
            angular.forEach(sectionData[recommendationData.propName][0].data, function (dataObj, dataIndex) {

                sectionTotalCost = parseFloat(sectionTotalCost) + parseFloat(dataObj.totalCost);
            });
        } else {

            angular.forEach(sectionData[recommendationData.propName][0].data, function (dataObj, dataIndex) {

                sectionTotalCost = parseFloat(sectionTotalCost) + parseFloat(dataObj.totalCost);
                if (dataObj.UniqueID == sectionData[recommendationData.propName][0].data.length) {
                    recommendationData.data = dataObj.UniqueID;

                    sectionData[recommendationData.propName][0].data[dataIndex] = recommendationData.data;
                }
            });

        }

        var data = {
            "formSectionData": [
                {
                    "sectionGUID": self.$parent.$parent.sectionGUID,
                    "totalCost": sectionTotalCost,
                    "sectionData": {
                        "contentValues": sectionData

                    }
               }]
        };

        self.$parent.$parent.resp.totalCost = sectionTotalCost;
        return ReportAuthoringAPI.updateSection($stateParams.reportGuid, self.$parent.$parent.sectionGUID, data)

    }

    return factory;
}])


angular.module('ReportAuthoring').factory('tablesCommonFunctionsService', ['$filter', '$compile', '$modal', 'ParcelUI.Resources', 'ReportAuthoringAPI', 'BASEURL', '$stateParams', 'PerformedOperation', function ($filter, $compile, $modal, ParcelUI_Resources, ReportAuthoringAPI, BASEURL, $stateParams, PerformedOperation) {

    var factory = {};
    var stack_bottomright = {
        "dir1": "up",
        "dir2": "left",
        "firstpos1": 50,
        "firstpos2": 25
    };

    factory.showPNotifyMessage = function (title, text, type) {
        new PNotify({
            title: title,
            text: text,
            type: type,
            addclass: "stack-bottomright",
            stack: stack_bottomright
        });
    }


    factory.saveChanges = function (self, sectionNumber) {


        var data = {
            propName: self.tableName,
            data: self.table.data
        }

        var promise = updateTable(self, data);

        var pNotifySuccessTitle = 'Table saved';
        var pNotifyErrorTitle = 'Problem saving table';
        var pNotifySuccessMsg = 'Table in section <strong>' + sectionNumber + '</strong> saved.';
        var pNotifyErrorMsg = 'There was a problem saving the table. Please try again.';

        self.waitingProcessResources.promise = null;
        self.waitingProcessResources.promise = promise;

        promise.then(function () {

            self.editmode = false;
            factory.showPNotifyMessage(pNotifySuccessTitle, pNotifySuccessMsg, 'success');
        }, function (error) {
            factory.showPNotifyMessage(pNotifyErrorTitle, pNotifyErrorMsg, 'error');
        });

    };


    factory.editTable = function (self) {
        self.copytableData = angular.copy(self.table.data);
        self.editmode = true;
        self.dataOperationMode = 'EDIT';
        self.operationCode = PerformedOperation.EDIT;
    }

    factory.duplicateRow = function (self, data) {
        var duplicateData = {}
        angular.copy(data, duplicateData);

        self.table.data.push(duplicateData);
    }

    factory.deleteRow = function (self, index) {

        var modalInstance = $modal.open({
            template: function (elem, attr) {
                var html = '';
                html += "<div class='modal-header'>";
                html += "<h4 class='modal-title'>Confirmation</div>";;
                html += "</div>";
                html += "<div class='modal-body'>";
                html += "<p class='alert alert-danger'>Do you want to delete this record?</p>";
                html += "</div>";
                html += "<div class='modal-footer'>";
                html += "<button ng-click='cancel()' class='btn btn-default'> No </button>";
                html += "<button ng-click='ok()' class='btn btn-primary'> Yes </button>";
                html += "</div>";
                return html;
            },
            controller: ['$scope', '$modalInstance', function ($scope, $modalInstance) {
                $scope.ok = function () {

                    var tablecopy = self.table.data;
                    tablecopy.splice(index, 1);

                    self.operationCode = PerformedOperation.DELETE;
                    var data = {
                        propName: self.tableName,
                        data: tablecopy
                    }
                    var promise = updateTable(self, data);
                    self.waitingProcessResources.promise = null;
                    self.waitingProcessResources.promise = promise;

                    $modalInstance.close(true, promise);
                };

                $scope.cancel = function () {

                    $modalInstance.close(false, null);
                };
                    }],
            size: 'md',
            resolve: {

            }
        });

        modalInstance.result.then(function (action, promise) {
            // console.log(action)
            if (action) {
                promise.then(function () {
                    self.table.data.splice(index, 1);
                    self.alertData.status = 'show';
                    self.alertData.message = ParcelUI_Resources.messagesResources.deleted_Success;
                    self.alertData.type = 'success';
                });
            }
        });
    }

    factory.deleteTable = function (self) {

        var modalInstance = $modal.open({
            template: function (elem, attr) {
                var html = '';
                html += "<div class='modal-header'>";
                html += "<h4 class='modal-title'>Confirmation</div>";;
                html += "</div>";
                html += "<div class='modal-body'>";
                html += "<p class='alert alert-danger'>Do you want to delete this table?</p>";
                html += "</div>";
                html += "<div class='modal-footer'>";
                html += "<button ng-click='cancel()' class='btn btn-default'> No </button>";
                html += "<button ng-click='ok()' class='btn btn-primary'> Yes </button>";
                html += "</div>";
                return html;
            },
            controller: ['$scope', '$modalInstance', function ($scope, $modalInstance) {
                $scope.ok = function () {

                    var tablecopy = angular.copy(self.table.data);
                    tablecopy = []

                    self.operationCode = PerformedOperation.DELETETABLE;
                    var data = {
                        propName: self.tableName,
                        data: tablecopy
                    }
                    var promise = updateTable(self, data);
                    self.waitingProcessResources.promise = promise;

                    promise.then(function () {
                        self.table.data = [];
                        self.alertData.status = 'show';
                        self.alertData.message = ParcelUI_Resources.messagesResources.deleted_Success;
                        self.alertData.type = 'success';
                    });
                    $modalInstance.close(true);

                };

                $scope.cancel = function () {

                    $modalInstance.close(false);
                };
                    }],
            size: 'md',
            resolve: {

            }
        });

        modalInstance.result.then(function (action) {
            // console.log(action)
            if (action) {

            }
        });


    }

    factory.showHistory = function (self, tableType) {

        var modalInstance = $modal.open({
            templateUrl: getTemplate(tableType),
            controller: 'tableHistoryController as tableHistory',
            size: 'lg',
            backdrop: 'static',
            keyboard: false,
            resolve: {
                tableHistoryObj: function () {
                    var obj = {
                        sectionGUID: self.$parent.$parent.sec.sectionGUID,
                        tableName: self.tableName
                    }
                    return obj;
                }
            }
        });
    }

    var moveRow = function (self, origin, destination, direction) {
        var temp = self.table.data[origin];
        if (temp != undefined && temp != null && temp != "") {
            if (direction == "UP") {
                for (var i = origin; i > destination; i--) {
                    self.table.data[i] = self.table.data[i - 1];
                }
            } else {
                for (var i = origin; i < destination; i++) {
                    self.table.data[i] = self.table.data[i + 1];
                }
            }

            self.table.data[destination] = temp;

            self.operationCode = PerformedOperation.REORDER;
            var data = {
                propName: self.tableName,
                data: self.table.data
            }

            updateTable(self, data);
        }
    };

    factory.moveUp = function (self, index) {
        moveRow(self, index, index - 1, "UP");
    }

    factory.moveDown = function (self, index) {
        moveRow(self, index, index + 1, "DOWN");
    }

    factory.moveToEnd = function (self, index, destination, direction) {
        moveRow(self, index, destination, direction);
    }

    factory.addRow = function (self) {
        self.tempTableData = [];
        angular.copy(self.table.data, self.tempTableData);
        for (var index = 0; index < self.numberOfRowsAdd; index++) {
            var objString = '';
            objString += '{';
            angular.forEach(self.table.structure, function (item, itemkey) {
                objString += '"' + item.label + '":"",'
            });
            objString = objString.substring(0, objString.length - 1);
            objString += '}';

            var jsonObj = JSON.parse(objString);
            self.table.data.push(jsonObj);

        }
        self.dataOperationMode = "ADD";
        self.editmode = true;
        self.operationCode = PerformedOperation.ADD;
    };

    factory.cancelChanges = function (self) {
        self.editmode = false;
        if (self.dataOperationMode == "ADD") {
            self.table.data = self.tempTableData;
        } else {
            self.dataOperationMode = "EDIT";
            self.table.data = self.copytableData;
        }
    }

    function getTemplate(tableType) {
        switch (tableType) {
            case "spreadSheetTable":
                return 'app/modules/ReportAuthoring/directives/tableHistory/spreadSheetTableHistoryView.html';
                break;
            case "horizontalTable":
                return 'app/modules/ReportAuthoring/directives/tableHistory/horizontalTableHistoryView.html';
                break;
            case "verticalTable":
                return 'app/modules/ReportAuthoring/directives/tableHistory/verticalTableHistoryView.html';
                break;
        }
    }

    function updateTable(self, tableData) {

        self.$parent.contentValues[tableData.propName].data = tableData.data;

        var data = {
            "formSectionData": [
                {
                    "sectionGUID": self.$parent.sectionGUID,
                    "sectionData": {
                        "operationCode": self.operationCode,
                        "contentValues": self.$parent.contentValues

                    }
               }]
        };


        return ReportAuthoringAPI.updateSection($stateParams.reportGuid, self.$parent.sectionGUID, data)

    }

    return factory;
}]);
angular.module('ReportAuthoring').constant('AppendicesUrlCollection', {
    //GETAPI_ALLAPPENDICES: '{reportID}',
    GETAPI_ALLAPPENDICES: 'tableofcontents?reportGUID={reportID}&depth=SHALLOW',

    GETAPI_APPENDIXFILES: 'appendices/{reportID}/{sectionGUID}/files',

    //PUTAPI_APPENDIXFILES: 'appendices/{reportID}/{sectionGuid}/files',    

    PUTAPI_APPENDIXFILES: 'appendices/{reportID}/files',

    PUTAPI_APPENDIXFILE: 'appendices/{reportGuid}/{sectionGUID}/files/{fileGuid}',

    //DELETEAPI_APPENDIXFILE: 'appendices/{reportGuid}/{sectionGuid}/files/{fileGuid}',							
    DELETEAPI_APPENDIXFILE: 'appendices/files/{fileGuid}',

    GETAPI_APPENDIXPHOTOS: 'photos/{reportID}/{sectionGUID}',

    PUTAPI_APPENDIXPHOTOS: 'photos/{reportID}/{sectionGuid}',

    PUTAPI_APPENDIXPHOTO: 'photos/{reportID}/{sectionGuid}/photo/{fileGuid}',

    POSTAPI_APPENDIXFILE: 'appendices/{reportID}/{sectionGuid}/upload?fileName={filename}&orderIndex=1',
    //POSTAPI_APPENDIXFILE: 'appendices/{reportID}/{sectionGuid}/upload',

    POSTAPI_APPENDIXPHOTO: 'photos/{reportID}/{sectionGuid}/upload?fileName={filename}&orderIndex=1&caption={caption}',

    DELETEAPI_APPENDIXPHOTO: 'photos/{fileGuid}',
    //DELETEAPI_APPENDIXPHOTO: 'photos/{reportGuid}/{fileGuid}'

    GETAPI_APPENDIXDRAWINGTOOLORDERS: 'drawingtools/{reportGuid}',

    GETAPI_APPENDIXDRAWINGTOOLURL: 'drawingtools/{reportGuid}/{edrPropertyGuid}'



});;
angular.module("ReportAuthoring").constant("AppendixTools", {
    'appendixtools/questionnaire': {
        templateUrl: "app/modules/ReportAuthoring/views/llpQuestionnaire.html",
        controller: "llpQuestionnaireController as appendixTool",
        openAsPage: true
    },
    'appendixtools/addADAChecklist': {
        templateUrl: "app/modules/ReportAuthoring/views/AddADAChecklist.html",
        controller: "addADAChecklistController as appendixTool",
        openAsPage: true
    },
    'appendixtools/addCommunicationRecord': {
        templateUrl: "app/modules/ReportAuthoring/views/AddCommunicationRecord.html",
        controller: "addCommunicationRecordController as appendixTool",
        openAsPage: false
    }
});




;
angular.module('ReportAuthoring').constant('GeneralInformationUrlCollection', {
    GETAPI_GI: "{reportGuid}/generalInfo?sectionGUID={sectionGuid}",
    PUTAPI_GI: "{reportGuid}/generalInfo",
    GETAPI_ACCOUNTMANAGEMENT: "companies/{companyGUID}?name=&detail=offices&parentcompanyguid=&hasparent=",
    GETAPI_GEOCODE: "addresses?address1={address1}&city={city}&state={state}&zip={zip}",

    //append BaseURL_REPORTAUTHORING_GEOPOC_REAL
    GETAPI_STATES: "states",
    GETAPI_COUNTIES: "states/{state}/counties",
    GETAPI_COORDIANTES: "addresses?address1={address1}&address2={address2}&city={city}&state={state}&zipcode={zipcode}",
    GETAPI_ADDRESSES: "addresses?latitude={latitude}&longitude={longitude}&minScore={minScore}&limit={limit}&offset={offset}&distance={distance}"



});;
angular.module('ReportAuthoring').constant('ReportAuthoringUrlCollection', {
    GETAPI_ALLSECTIONS_MOCK: 'app/modules/ReportAuthoring/sampleJson/sampleSections.json',

    GETAPI_ALLSECTIONS_WITHLIMIT_MOCK: 'app/modules/ReportAuthoring/sampleJson/sampleSections_{offset}_{limit}.json',

    GETAPI_MOCK: 'app/modules/ReportAuthoring/sampleJson/{moduleName}/{sectionID}.json',

    GETTOC_MOCK: 'app/modules/ReportAuthoring/sampleJson/{moduleName}/TOC.json',

    // GETCOMMENTS_MOCK: 'app/modules/ReportAuthoring/sampleJson/sampleComments.json',

    GETAPI_ReportDefaulfLibrary_REAL: '{reportGUID}',

    GETCOMMENTS: '?reportGUID={reportGUID}&sectionGUID={sectionGUID}&sortEnum={sortEnum}',
    PUTCOMMENTS: '?reportGUID={reportGUID}&sectionGUID={sectionGUID}',
    GETALLCOMMENTS: '?reportGUID={reportGUID}&sortEnum={sortEnum}',

    GETAPI_REPORTSIGNOFF_REAL: 'reports/{reportGuid}/signoffs',
    GETAPI_REPORTSIGNOFF_MOCK: 'app/modules/ReportAuthoring/sampleJson/reportSignoffJSON.js',
    GETAPI_REPORTSIGNOFFUSERS_REAL: 'users/?company={companyGuid}',
    GETAPI_REPORTSIGNOFFSINGLE_REAL: 'reports/{reportGuid}/signoffs?reportsignoffguid={reportsignoffguid}',

    GETHISTORY_MOCK: 'history?reportGUID={reportGUID}&sectionGUID={sectionGUID}',
    //GETHISTORY_MOCK: 'app/modules/ReportAuthoring/sampleJson/SampleHistoryData.js',
    UPDATESECTION_MOCK: 'sections?reportGUID={reportGUID}',
    GETAPI_ALLSECTIONS_REAL: 'sections?reportGUID={reportGuid}',

    GETAPI_REAL: 'sections?reportGUID={reportGuid}&sectionGUID={sectionGUID}',

    GETTOC_REAL: 'tableofcontents?reportGUID={reportGuid}&depth={depth}',
    UPDATESECTION_REAL: 'sections?reportGUID={reportGUID}',
    GET_SETUP_DEFAULTS: '?reportGUID={reportGUID}',
    PUT_SETUP_DEFAULTS: '?reportGUID={reportGUID}',
    GET_COVERPAGES_LIST: '?companyGuid={companyGuid}',
    UPDATE_PREPOPULATED: '?reportGUID={reportGUID}',
    REPORTOUTPUTLIST: '?companyGUID={companyGUID}&type={type}',
    GETAPI_SEARCHBYSITEID: "siteid/{siteID}",

    VARIABLEREPLACER_KEYWORDS: 'report/tools/variablereplacer/{reportGuid}',

    ACCT_USER: 'accounts/company/office/user/view?companyguid={companyguid}&officeguid={officeguid}&userguid={userguid}'
});;
angular.module('ReportAuthoring').constant('ReportOutputUrlCollection', {
    GETAPI_EXECUTIVESUMMARY: 'sections?reportGUID={reportGUID}&sectionGUID={sectionGUID}',

    GETAPI_DETAILREPORT: 'reportGUID={reportID}',

    GETAPI_DETAILREPORTCOMMENTS: 'comments?reportGUID={reportGUID}',

    GETAPI_COSTTABLE: 'sections?reportGUID={reportGUID}&sectionGUID={sectionGUID}',

    GETAPI_COSTTABLEEXCEL: 'sections?reportGUID={reportGUID}&sectionGUID={sectionGUID}'
});;
angular.module('ReportAuthoring').controller('AppendicesController', ['AppendixAPI', 'FileUploader', '$modal', '$timeout', '$scope', 'ReportAuthoringAPI', 'AppendixTools', '$state', 'BASEURL', '$filter', 'AppendicesUrlCollection', '$rootScope', 'ParcelUI.Resources', '$stateParams', '$window', function (AppendixAPI, FileUploader, $modal, $timeout, $scope, ReportAuthoringAPI, AppendixTools, $state, BASEURL, $filter, AppendicesUrlCollection, $rootScope, ParcelUI_Resources, $stateParams, $window) {
    var self = this;
    //self.reportID = 12;
    self.reportID = $stateParams.reportGuid;
    self.checkComments = false;
    self.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;
    self.waitingCommentsResources = ParcelUI_Resources.waitingCommentsResources;

    self.selectAllText = "Check All";
    self.IsCommentChecked = false;
    self.commentsErrorStatus = false;
    self.commentsErrorText = "";
    $scope.commentsArr = [];
    self.serviceResponseAlert = true;
    self.responseAlert = false;

    ReportAuthoringAPI.managePanelHeight();

    self.saveNewCommBtn = false;
    self.reportAppendices = {
        sections: [],
        selectedSection: {},
        allSectionView: false
    };

    function init() {



        var sectionGUID = localStorage.getItem('sign_sectionGUID');
        if (sectionGUID) {

            $('#li_toc_appendices').removeClass('active');
            $('#li_comments_appendices').addClass('active');
            self.reportAuthoringWriteSelected = 'Comments';

            var getAllAppendicesPromise = AppendixAPI.getAllAppendices(self.reportID);
            self.waitingProcessResources.promise = getAllAppendicesPromise;
            getAllAppendicesPromise.then(function (sections) {

                addUploaderInstanceToEverySection(sections);
                self.reportAppendices.sections = sections;
                if (sections && sections.length) {
                    var selectedSectionAppendices = sections.filter(function (item) {
                        return item.sectionGUID.toLowerCase() == sectionGUID.toLowerCase()
                    })[0];
                    if (selectedSectionAppendices) {
                        self.sectionClick(selectedSectionAppendices);
                    } else {
                        self.sectionClick(sections[0]);
                    }
                    // load files for all sections
                    loadFileDetailsForAllSections(self.reportAppendices.sections);
                }

                //comment starts
                var section = {
                    "sectionGUID": sectionGUID
                }

                self.commentsErrorStatus = false;
                self.commentsErrorText = "";
                self.checkComments = false;
                self.newComm = false;
                self.serviceResponseAlert = true;

                var commentFilterSelected = localStorage.getItem('commentFilterSelected');
                if (commentFilterSelected) {
                    self.selSection_Comments = commentFilterSelected;
                    getCommentsByFilter(commentFilterSelected, section);
                } else {

                    self.selSection_Comments = 0;
                    getCommentsBySection(section);

                }

                //comment ends

            })


        } else {
            self.reportAuthoringWriteSelected = 'Appendices';
            var getAllAppendicesPromise = AppendixAPI.getAllAppendices(self.reportID);
            self.waitingProcessResources.promise = getAllAppendicesPromise;
            getAllAppendicesPromise.then(function (sections) {

                addUploaderInstanceToEverySection(sections);
                self.reportAppendices.sections = sections;
                if (sections && sections.length) {
                    // default behavior: first section view
                    self.sectionClick(sections[0]);
                    // load files for all sections
                    loadFileDetailsForAllSections(self.reportAppendices.sections);

                }
            })

        }

        ReportAuthoringAPI.managePanelHeight();


    }
    init();

    self.removeLocalStorage = function () {
        localStorage.removeItem('sign_sectionGUID');

    }

    self.showMessage = function (messageText, messageType) {
        self.responseAlert = true;
        self.statusClass = "alert-" + messageType;
        self.statusText = messageText;

    }

    self.sectionClick = function (section) {

        self.reportAppendices.allSectionView = false;
        self.reportAppendices.selectedSection = section;
        self.responseAlert = false;
        // only for testing purposes
        // TODO: remove after apiary mock API introduces appendix tools in Get all appendices call
        /* section.appendixTools = [{
             "name": "appendixtools/llpQuestionnaire",
             "label": "Add User Questionnaire"
         }, {
             "name": "adaChecklist",
             "label": "Add ADA Checklist"
         }, {
             "name": "communicationRecord",
             "label": "Add Communication Record"
         }];*/
        loadUploadedFilesForSelectedSection(self.reportAppendices.selectedSection);
        //loadUploadedFilesForSelectedSection(section);
    }

    self.allSectionViewClick = function () {
        self.reportAppendices.allSectionView = true;
        self.reportAppendices.selectedSection = null;
    }

    function loadUploadedFilesForSelectedSection(section, hardReload) {
        if (section && section.files && section.files.length && !hardReload) return;

        var sectionID = section.sectionID;
        var sectionGUID = section.sectionGUID;


        $scope.delay = 0;
        $scope.minDuration = 0;
        $scope.message = 'Please Wait...';
        $scope.backdrop = true;
        $scope.promise = null;
        $scope.promise = getUploadedFilesForSection(self.reportID, sectionGUID).then(function (files) {

            // for testing purposes only
            // mock api only returns one item
            /*for (var i = 5, first = files[0]; i < 10; i++) {
                var temp = angular.copy(first);
                temp.filename = temp.filename + '_' + i;
                temp.fileGuid = temp.fileGuid + '_' + i;
                files.push(temp);
            }*/

            //section.files = files;
            if (files != undefined) {
                section.files = $filter('orderBy')(files, 'orderIndex');
            } else {
                section.files = [];
            }

            angular.forEach(section.files, function (file) {
                file.sectionID = sectionID
                file.downloadURL = BASEURL.REPORTAUTHORING_APPENDICES_COREFILES + '/files/' + file.fileGUID + '/stream';
                //file.isPdfFile = checkIfUploadFilePdf(file.fileName);
                file.fileType = checkUploadedFileType(file.fileName);
            });
            if (section.files && section.files.length) {
                section.totalFileSize = section.files.sum('fileSize');
            } else {
                section.totalFileSize = "";
            }
        })
    }


    function checkUploadedFileType(filename) {
        //var fileType= "";
        //if(filename.endsWith('.pdf'))
        return filename.endsWith('.pdf') ? 'pdf' : filename.endsWith('.html') ? 'html' : filename.endsWith('.htm') ? 'html' : filename.endsWith('.docx') ? 'docx' : filename.endsWith('.pptx') ? 'pptx' : filename.endsWith('.txt') ? 'txt' : filename.endsWith('.xlsx') ? 'xlsx' : filename.endsWith('.jpeg') ? 'img' : filename.endsWith('.jpg') ? 'img' : filename.endsWith('.png') ? 'img' : filename.endsWith('.gif') ? 'img' : filename.endsWith('.tif') ? 'img' : filename.endsWith('.bmp') ? 'img' : 'undefined';
    }

    function checkIfUploadFilePdf(filename) {
        return filename.endsWith('.pdf') ? true : false;
    }



    function getUploadedFilesForSection(reportID, sectionGUID) {
        var promise = AppendixAPI.getAppendixFiles(reportID, sectionGUID);
        return promise.then(function (files) {
            return files;
        }, function (error) {
            console.log("error");
            // self.commentsErrorText = error;
            // self.commentsErrorStatus = true;

        });
    }

    self.openEDRDrawingTool = function () {

        var reportGuid = 'CD76D078-AD32-11E5-B950-0E29ED3D2A45';
        //var reportGuid = "2E1BDBAF-EC04-4DB7-951A-37C7611970A2";
        var getAvailableDrawingToolOrdersPromise = AppendixAPI.getAvailableDrawingToolOrders(reportGuid);
        self.waitingProcessResources.promise = getAvailableDrawingToolOrdersPromise;
        getAvailableDrawingToolOrdersPromise.then(function (drawingToolOrders) {

            if (drawingToolOrders.length > 1) {

                angular.forEach(drawingToolOrders, function (order, index) {

                    order.creationDate = new Date(order.creationDate);

                })
                selectDrawingToolOrders(drawingToolOrders);

            } else {

                redirectToEDRDrawingTool(reportGuid, drawingToolOrders[0].edrPropertyGuid)

            }

        })

    }

    function selectDrawingToolOrders(drawingToolOrders) {
        var modalContainer = {
            drawingToolOrders: drawingToolOrders
        }

        var modalInstance = $modal.open({
            templateUrl: 'SelectDrawingToolOrders.html',
            controller: selectDrawingToolOrdersController,
            size: 'lg',
            resolve: {
                data: function () {
                    return modalContainer;
                }
            }
        });

        modalInstance.result.then(function (result) {

        });
    }

    function selectDrawingToolOrdersController($scope, $modalInstance, data) {

        $scope.drawingToolOrders = data.drawingToolOrders;
        $scope.drawingToolOrders.selectedEdrPropertyGuid;

        $scope.continueToDrawingTool = function () {

            if ($scope.drawingToolOrders.selectedEdrPropertyGuid != undefined) {
                var reportGuid = 'CD76D078-AD32-11E5-B950-0E29ED3D2A45';
                //var reportGuid = "2E1BDBAF-EC04-4DB7-951A-37C7611970A2";
                redirectToEDRDrawingTool(reportGuid, $scope.drawingToolOrders.selectedEdrPropertyGuid, $modalInstance, $scope);
            } else {
                $scope.showMessage("Please select an order from the table.", "danger");
            }

        }

        $scope.cancelToDrawingTool = function () {
            $modalInstance.close();
        }

        $scope.showMessage = function (MessageText, MessageType) {
            $scope.drawingToolOrders.ResponseAlert = true;
            $scope.drawingToolOrders.StatusClass = "alert-" + MessageType;
            $scope.drawingToolOrders.StatusText = MessageText;

        }
    }

    function redirectToEDRDrawingTool(reportGuid, edrPropertyGuid, $modalInstance, $scope) {

        var getDrawingToolUrlPromise = AppendixAPI.getDrawingToolUrl(reportGuid, edrPropertyGuid);
        self.waitingProcessResources.promise = getDrawingToolUrlPromise;
        getDrawingToolUrlPromise.then(function (drawingTool) {

            if (drawingTool.url.url) {
                var newWindow = $window.open("", "_blank");
                newWindow.location.href = drawingTool.url.url;
                $modalInstance.close();
            } else {
                $scope.showMessage("EDR drawing tool url is not available.", "danger");
            }

        })
    }

    function loadFileDetailsForAllSections(sections) {
        var count = 0;
        angular.forEach(sections, function (section, index) {
            loadUploadedFilesForSelectedSection(section);
        });
    }

    // tool options for uploaded files
    self.deleteFile = function (file, section) {
        self.responseAlert = false;
        var modalContainer = {
            file: file,
            section: section,
            refreshAfter: false
        }

        var modalInstance = $modal.open({
            templateUrl: 'DeleteAppendixFile.html',
            controller: deleteAppendixFileController,
            size: 0,
            resolve: {
                data: function () {
                    return modalContainer;
                }
            }
        });

        modalInstance.result.then(function (result) {
            if (result) {
                loadUploadedFilesForSelectedSection(section, true);
            }
        });
    }

    function deleteAppendixFileController($scope, $modalInstance, data) {
        $scope.toDelete = {
            file: data.file,
            section: data.section
        };

        $scope.deleteAppendixFile = function () {
            var sectionGuid = $scope.toDelete.section.sectionGUID;
            var fileGuid = $scope.toDelete.file.fileGUID;
            var promise = AppendixAPI.deleteAppendixFile(self.reportID, sectionGuid, fileGuid);
            promise.then(function (data) {
                // data.refreshAfter = true;
                $modalInstance.close(true);
            });
        }

        $scope.cancelDelete = function () {
            $modalInstance.close();
        }
    }


    self.editFileDetails = function (file, section) {
        self.responseAlert = false;
        var modalContainer = {
            file: file,
            section: section,
            refreshAfter: false,
            sections: self.reportAppendices.sections
        }

        var modalInstance = $modal.open({
            templateUrl: 'UpdateAppendixFile.html',
            controller: updateAppendixFileController,
            size: 0,
            resolve: {
                data: function () {
                    return modalContainer;
                }
            }
        });

        modalInstance.result.then(function (result) {
            /*console.log(result)
            console.log(data)
            console.log(modalContainer*/
            if (result.refreshAfter) {
                loadUploadedFilesForSelectedSection(section, true);
            }
        });
    }



    function updateAppendixFileController($scope, $modalInstance, data) {
        $scope.toUpdate = {
            file: angular.copy(data.file),
            section: data.section,
            sections: data.sections
        };

        $scope.toUpdate.file.sectionGUID = $scope.toUpdate.file.sectionGUID.toLowerCase();

        angular.forEach($scope.toUpdate.sections, function (section, index) {
            section.sectionGUID = section.sectionGUID.toLowerCase();
        });

        $scope.toUpdate.file.sectionID = $scope.toUpdate.section.sectionID;

        $scope.updateAppendixFile = function () {
            var sectionGUID = $scope.toUpdate.section.sectionGUID;
            var fileGuid = $scope.toUpdate.file.fileGUID;
            //var file = $scope.toUpdate.file;
            //file.targetSectionGuid = $scope.toUpdate.file.sectionGUID;
            //file.filename = 'Testname.pdf';

            var file = {};
            file.isIncluded = $scope.toUpdate.file.isIncluded;
            file.sectionGUID = $scope.toUpdate.file.sectionGUID;
            file.orderIndex = $scope.toUpdate.file.orderIndex;
            file.fileName = $scope.toUpdate.file.fileName;


            $scope.delay = 0;
            $scope.minDuration = 0;
            $scope.message = 'Please Wait...';
            $scope.backdrop = true;
            $scope.promise = AppendixAPI.putAppendixFile(self.reportID, sectionGUID, fileGuid, file).then(function (data) {
                data.refreshAfter = true;
                $modalInstance.close(data);
            });
        }

        $scope.cancelUpdate = function () {
            $modalInstance.close();
        }
    }



    self.moveUpFile = function (index, section) {
        self.responseAlert = false;
        var files = section.files;
        if (!files || !files.length || index <= 0) return;

        // var sectionID = section.sectionID;
        var sectionGUID = section.sectionGUID;
        files.move(index, index - 1);
        reorderFilesInAppendix(sectionGUID, files);
    }
    self.moveDownFile = function (index, section) {
        self.responseAlert = false;
        var files = section.files;
        if (!files || !files.length || index >= (files.length - 1)) return;

        // var sectionID = section.sectionID;
        var sectionGUID = section.sectionGUID;
        files.move(index, index + 1);
        reorderFilesInAppendix(sectionGUID, files);
    }





    var fixHelper = function (e, ui) {
        ui.children().each(function () {
            $(this).width($(this).width());
        });
        return ui;
    };
    self.sortableOptions = {
        helper: fixHelper,
        cancel: ".unsortable",
        items: "tr:not(.unsortable)",
        update: function (e, ui) {
            /*var logEntry = tmpList.map(function(i) {
                return i.value;
            }).join(', ');
            $scope.sortingLog.push('Update: ' + logEntry);*/
        },
        stop: function (e, ui) {
            // this callback has the changed model
            /*var logEntry = tmpList.map(function(i) {
                return i.value;
            }).join(', ');
            $scope.sortingLog.push('Stop: ' + logEntry);*/
            var model = ui.item.sortable.model;
            var files = ui.item.sortable.sourceModel;
            //var sectionID = model.sectionID;
            var sectionGUID = model.sectionGUID;
            reorderFilesInAppendix(sectionGUID, files);
        }
    };

    function extractPutDataForReordering(files) {
        var data = [];
        angular.forEach(files, function (file) {
            var obj = {
                fileGUID: file.fileGUID
            };
            data.push(obj);
        });
        return data;
    }

    function reorderFilesInAppendix(sectionGUID, files) {
        var data = extractPutDataForReordering(files);
        AppendixAPI.reorderAppendixFiles(self.reportID, sectionGUID, data).then(function (result) {
            // no response in API
            //loadUploadedFilesForSelectedSection(section, true);
        });
    }



    // uploader section

    /*
        var uploadHelper = {
            types: {
                default: "default",
                photo: "photo"
            },
            uploadUrl: {
                photo: "http://private-33015-parcelappendixapi.apiary-mock.com/photos/{reportID}/{sectionID}/upload?filename={filename}&caption={caption}",
                default: "http://private-33015-parcelappendixapi.apiary-mock.com/appendices/{reportID}/{sectionID}/upload?filename={filename}"
            }
        };
    	*/


    var uploadHelper = {
        types: {
            default: "default",
            photo: "photo"
        },
        uploadUrl: {
            photo: BASEURL.appendicesPOC + AppendicesUrlCollection.POSTAPI_APPENDIXPHOTO,
            default: BASEURL.appendicesPOC + AppendicesUrlCollection.POSTAPI_APPENDIXFILE
        }
    };


    function checkIfUploadFileImage(filename) {
        return filename.endsWith('.jpg') ? true : false;
    }

    function getfilenamewithoutextension(filename) {
        return filename.substring(0, filename.lastIndexOf('.'));
    }

    function formatUrl(url, queryParams) {
        if (!queryParams) return url;

        for (var param in queryParams) {
            url = url.replace("{" + param + "}", queryParams[param]);
        }
        return url;
    }

    function createUploaderInstance(section) {
        var sectionID = section.sectionID;
        var sectionGuid = section.sectionGUID;
        var fileNameString = "";
        var url = uploadHelper.uploadUrl[uploadHelper.types.default];
        var uploader = self.uploader = new FileUploader({
            url: url,
            //removeAfterUpload: true,
            sectionGuid: sectionGuid,
            filters: []
                //autoUpload: true,
        });

        // CALLBACKS
        uploader.onBeforeUploadItem = function (item) {
            fileNameString = "";

            self.responseAlert = false;
            var filename = item.file.name;
            var url = item.url;
            var params = {
                    reportID: self.reportID,
                    sectionGuid: sectionGuid,
                    filename: filename

                }
                //console.log(self.reportAppendices.selectedSection);
            if (self.reportAppendices.selectedSection.hasPhotos) {
                if (checkIfUploadFileImage(filename)) {
                    url = uploadHelper.uploadUrl[uploadHelper.types.photo];
                    params.caption = getfilenamewithoutextension(filename);
                }
            }
            item.url = formatUrl(url, params);

            /*var filename = item.file.name;
            item.url = item.url + filename;
            console.info('onBeforeUploadItem', item);*/
        };
        uploader.onCompleteAll = function () {
            // clear queue and reload from service
            fileNameString = "";
            loadUploadedFilesForSelectedSection(section, true);
            $rootScope.$broadcast('appendixUploadImage', {});

            section.uploader.clearQueue();
        };

        uploader.onSuccessItem = function () {
            var fileNameString = "";
            angular.forEach(section.uploader.queue, function (uploadItem, index) {
                if (fileNameString != "") {
                    fileNameString = fileNameString + ", " + uploadItem.file.name;
                } else {
                    fileNameString = uploadItem.file.name;
                }

            });
            self.showMessage(fileNameString + " uploaded successfully", "success");

        };
        uploader.onErrorItem = function () {
            fileNameString = "";
            var fileNameString = "";
            angular.forEach(section.uploader.queue, function (uploadItem, index) {
                if (fileNameString != "") {
                    fileNameString = fileNameString + ", " + uploadItem.file.name;
                } else {
                    fileNameString = uploadItem.file.name;
                }

            });
            self.showMessage(fileNameString + " upload failed", "danger");

        };

        uploader.filters.push({
            name: 'sizeFilter',
            fn: function (item) {
                if (item.size > BASEURL.APPENDIX_FILE_UPLOAD_SIZE_LIMIT) {
                    if (fileNameString != "") {
                        fileNameString = fileNameString + ", " + item.name;
                    } else {
                        fileNameString = item.name;
                    }
                    self.showMessage(fileNameString + " file size is more than 25MB", "danger");
                }

                return item.size < BASEURL.APPENDIX_FILE_UPLOAD_SIZE_LIMIT;

            }
        });

        uploader.onAfterAddingAll = function () {
            //fileNameString = "";			
        }
        uploader.onWhenAddingFileFailed = function () {
            fileNameString = "";
        }

        return uploader;
    }
    $scope.$on('appendixClearmessage', function (event, data) {
        self.responseAlert = false;
    });

    function addUploaderInstanceToEverySection(sections) {
        angular.forEach(sections, function (section, index) {
            section.uploader = createUploaderInstance(section)
        });
    }


    // appendix tools
    self.toolClicked = function (tool, section) {
        var modalData = {
            tool: tool,
            refreshAfter: false
        };



        var appendixTool = AppendixTools[tool.url];
        if (appendixTool.openAsPage) {
            /*$state.go(tool.name, {
                modalData: modalData
            });*/

            /* var href = $state.href(tool.name, {
                modalData: modalData
            });
			*/
            var name = '';
            if (tool.url === 'appendixtools/questionnaire') {
                name = 'llpQuestionnaire';
            } else if (tool.url === 'appendixtools/addADAChecklist') {
                name = 'adaChecklist';
            }

            var href = $state.href(name, {
                modalData: modalData
            });
            var appendixToolWindow = window.open(href, {
                absolute: true
            }, "self");
            // console.log(appendixToolWindow);
            appendixToolWindow.onbeforeunload = function () {
                //  console.log(modalData);
            }
            return;
        }

        var toolModalInstance = $modal.open({
            templateUrl: appendixTool.templateUrl, //"app/modules/ReportAuthoring/views/llpQuestionnaire.html",
            controller: appendixTool.controller, //"llpQuestionnaireController as appendixTool",
            size: "lg",
            resolve: {
                modalData: function () {
                    return modalData;
                }
            }
        });

        toolModalInstance.result.then(function () {
            if (modalData.refreshAfter) {
                loadUploadedFilesForSelectedSection(section, true);
            }
        });

    };


    // helper
    Array.prototype.sum = function (prop) {
        var total = 0
        for (var i = 0, _len = this.length; i < _len; i++) {
            total += this[i][prop];
        }
        return total;
    }

    Array.prototype.move = function (old_index, new_index) {
        if (new_index >= this.length) {
            var k = new_index - this.length;
            while ((k--) + 1) {
                this.push(undefined);
            }
        }
        this.splice(new_index, 0, this.splice(old_index, 1)[0]);
        return this; // for testing purposes
    };

    /* comments tab starts */

    self.getReportComments = function () {
        self.saveNewCommBtn = false;
        self.commentsErrorStatus = false;
        self.commentsErrorText = "";
        self.checkComments = false;
        self.newComm = false;
        self.serviceResponseAlert = true;
        var commentFilterSelected_appendices = localStorage.getItem('commentFilterSelected_appendices');
        if (commentFilterSelected_appendices != undefined && commentFilterSelected_appendices != null && commentFilterSelected_appendices != "") {

            self.selSection_Comments = commentFilterSelected_appendices;
            getCommentsByFilter(commentFilterSelected_appendices);


        } else {

            self.selSection_Comments = 0;
            getCommentsBySection();

        }



    }

    function getCommentsBySection(sectionData) {
        $scope.commentsArr = [];
        self.commentsErrorStatus = false;
        self.commentsErrorText = "";

        var promise;
        if (sectionData) {
            promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid, sectionData.sectionGUID);
        } else {
            promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid, self.reportAppendices.selectedSection.sectionGUID);
        }
        self.waitingCommentsResources.promise = promise;
        return promise.then(function (resp) {

            $scope.commentsArr = [];
            for (var i = 0; i < resp.length; i++) {

                var sectionObj = {
                    "sectionGUID": "",
                    "sectionNumber": "",
                    "sectionName": "",
                    comments: []

                }
                if (self.reportAppendices.selectedSection.sectionGUID.toLowerCase() == resp[i].sectionGUID.toLowerCase()) {

                    //  $scope.commentsArr.push(resp[i]);

                    if (resp[i].comments.length > 0) {
                        sectionObj.sectionGUID = self.reportAppendices.selectedSection.sectionGUID;
                        sectionObj.sectionNumber = self.reportAppendices.selectedSection.sectionNumber;
                        sectionObj.sectionName = self.reportAppendices.selectedSection.sectionName;
                        for (var j = 0; j < resp[i].comments.length; j++) {
                            var commObj = {
                                "Id": "",
                                "addressed": false,
                                "commentVal": "",
                                "addressedVal": "",
                                "commentedBy": "",
                                "addressedBy": "",
                                "date": "",
                                "addressedDate": ""
                            }
                            commObj.Id = resp[i].comments[j].commentGUID;
                            commObj.addressed = resp[i].comments[j].addressed;
                            commObj.commentVal = resp[i].comments[j].commentText;
                            commObj.commentedBy = resp[i].comments[j].createdBy.firstName + ' ' + resp[i].comments[j].createdBy.lastName;
                            if (resp[i].comments[j].addressed) {
                                if (resp[i].comments[j].responseComments != null && resp[i].comments[j].responseComments != undefined && resp[i].comments[j].responseComments != "") {
                                    commObj.addressedBy = resp[i].comments[j].responseComments[0].createdBy.firstName + ' ' + resp[i].comments[j].responseComments[0].createdBy.lastName;
                                    commObj.addressedVal = resp[i].comments[j].responseComments[0].commentText;
                                    commObj.addressedDate = resp[i].comments[j].responseComments[0].commentDate;
                                    //$filter('date')(new Date(resp[i].comments[j].responseComments[0].commentDate), 'MM/dd/yyyy HH:mm:ss');
                                }

                            }
                            // commObj.date = resp[i].comments[j].commentDate;
                            if (resp[i].comments[j].commentUpdated) {
                                commObj.date = resp[i].comments[j].updatedDate;
                            } else {
                                commObj.date = resp[i].comments[j].commentDate;
                            }
                            //$filter('date')(new Date(resp[i].comments[j].commentDate), 'MM/dd/yyyy HH:mm:ss');
                            sectionObj.comments.push(commObj);
                        }
                    }
                    $scope.commentsArr.push(sectionObj);
                    break;
                }
                // $scope.commentsArr.push(sectionObj);

            }
            checkCommentsStatus();
            if ($scope.commentsArr.length > 0) {
                if ($scope.commentsArr[0].comments.length == 0) {

                    self.commentsErrorText = "No Comments Found";
                    self.commentsErrorStatus = true;


                }
            } else {

                self.commentsErrorText = "No Comments Found";
                self.commentsErrorStatus = true;
            }

            $timeout(function () {
                ReportAuthoringAPI.managePanelHeight();
            });
            $('[data-toggle="tooltip"]').tooltip();

        }, function (error) {
            console.log("error");
            self.commentsErrorText = error;
            self.commentsErrorStatus = true;

        });



    }

    function checkCommentsStatus() {
        self.IsCommentChecked = false;
        self.selectedAll = false;
        self.checkComments = false;
        if ($scope.commentsArr.length > 0) {
            for (var i = 0; i < $scope.commentsArr.length; i++) {
                if ($scope.commentsArr[i]) {
                    if ($scope.commentsArr[i].comments.length > 0) {
                        self.checkComments = true;

                    }
                }
            }
        } else {
            self.checkComments = false;
        }

        if (!self.checkComments) {
            self.commentsErrorText = "No Comments Found";
            self.commentsErrorStatus = true;
        }
        ReportAuthoringAPI.managePanelHeight();
    }

    self.checkAll = function () {
        var isCommentsDeleted = localStorage.getItem('isCommentsDeleted');

        if (isCommentsDeleted) {
            self.selectAllText = "Un Check";
            self.selectAllText = "Uncheck All";
            self.selectedAll = true;
        } else {
            self.IsCommentChecked = true;
            if (self.selectedAll) {
                self.selectAllText = "Un Check";
                self.selectAllText = "Uncheck All";
                self.selectedAll = true;
            } else {
                self.selectAllText = "Check All";
                self.selectedAll = false;
            }

        }


        angular.forEach($scope.commentsArr, function (item) {

            if (item.comments != undefined && item.comments != null && item.comments != "") {
                angular.forEach(item.comments, function (commObj) {

                    commObj.Selected = self.selectedAll;
                    self.IsCommentChecked = commObj.Selected;
                });

            }

        });
        localStorage.removeItem('isCommentsDeleted');
    };

    self.commentCheck = function () {
        var flag = false;

        angular.forEach($scope.commentsArr, function (item) {
            if (item.comments != undefined && item.comments != null && item.comments != "") {
                angular.forEach(item.comments, function (commObj) {

                    if (commObj.Selected) {
                        flag = true;
                        return;
                    }


                });

            }

        });
        self.IsCommentChecked = flag;
    }

    self.openDeletePopup = function () {
        var modalInstance = $modal.open({
            templateUrl: "dllDeleteAll.html",
            scope: $scope,
            controller: deleteCommentsController,
            size: 0
        })
    }

    var deleteCommentsController = function ($scope, $modalInstance) {

        $scope.deleteComments = function () {

            $scope.comments = [];

            var deleteCommentArrObj = {
                "comments": $scope.comments
            };


            angular.forEach($scope.commentsArr, function (item) {


                for (var i = 0; i < item.comments.length; i++) {
                    var deleteCommentObj = {
                        "commentGUID": ""
                    }
                    if (item.comments[i].Selected) {
                        deleteCommentObj.commentGUID = item.comments[i].Id;
                        $scope.comments.push(deleteCommentObj);
                    }
                }



            });

            var promise = ReportAuthoringAPI.deleteComments(deleteCommentArrObj);

            return promise.then(function (resp) {
                var iflag = 0;
                for (var k = 0; k < deleteCommentArrObj.comments.length; k++) {
                    for (var i = 0; i < $scope.commentsArr.length; i++) {
                        for (var j = 0; j < $scope.commentsArr[i].comments.length; j++) {

                            if (deleteCommentArrObj.comments[k].commentGUID.toLowerCase() == $scope.commentsArr[i].comments[j].Id.toLowerCase()) {
                                $scope.commentsArr[i].comments.splice(j, 1);

                            }
                        }



                    }
                }
                checkCommentsStatus();

                $('#divSelAll label.active').removeClass('active');
                self.selectAllText = "Check All";
                self.selectedAll = true;
                localStorage.setItem('isCommentsDeleted', true);
                $modalInstance.close();
            });





        }



        $scope.CancelDelete = function () {

            $modalInstance.close();
        }
    }


    self.saveNewComments = function () {
        self.saveNewCommBtn = true;
        self.IsCommentChecked = false;
        self.selectedAll = false;
        var addCommentObj = {
            "comment": {
                "commentText": self.newCommentVal,
                "commentType": {
                    "commentTypeGUID": "726D034A-9791-11E5-8226-0E29ED3D2A45"
                }
            }
        }

        var promise = ReportAuthoringAPI.add_update_Comments($stateParams.reportGuid, self.reportAppendices.selectedSection.sectionGUID, addCommentObj);

        return promise.then(function (resp) {

            var userDetails = JSON.parse(localStorage.getItem('userdetails'));

            if (userDetails) {
                var userName;
                for (var i = 0; i < userDetails.length; i++) {
                    if (userDetails[i].key === "USERNAME") {
                        userName = userDetails[i].value;
                        self.userName = userName;
                    }

                }
            }

            self.commentsErrorStatus = false;
            self.commentsErrorText = "";
            var commObj = {
                "Id": resp.comment.commentGUID,
                "addressed": false,
                "commentVal": resp.comment.commentText,
                "addressedVal": "",
                "commentedBy": self.userName,
                "addressedBy": "",
                "date": ""
            }
            if (resp.comment.commentUpdated) {
                commObj.date = resp.comment.updatedDate;
            } else {
                commObj.date = resp.comment.commentDate;
            }

            if ($scope.commentsArr.length == 0) {
                var sectionObj = {
                    "sectionGUID": self.reportAppendices.selectedSection.sectionGUID,
                    "sectionNumber": self.reportAppendices.selectedSection.sectionNumber,
                    "sectionName": self.reportAppendices.selectedSection.sectionName,
                    comments: []

                }
                sectionObj.comments.push(commObj);
                $scope.commentsArr.push(sectionObj);



            } else {
                for (var i = 0; i < $scope.commentsArr.length; i++) {
                    if ($scope.commentsArr[i].sectionGUID.toLowerCase() == self.reportAppendices.selectedSection.sectionGUID.toLowerCase()) {
                        $scope.commentsArr[i].comments.unshift(commObj)
                        break;
                    }
                }
            }
            checkCommentsStatus();
            self.newComm = false;
            self.saveNewCommBtn = true;

        });


    };

    function getCommentsByFilter(filterVal, section) {
        $scope.commentsArr = [];
        self.commentsErrorStatus = false;
        self.commentsErrorText = "";

        if (filterVal == 0) {
            var promise;
            if (section) {
                promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid, section.sectionGUID);
            } else {
                promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid, self.reportAppendices.selectedSection.sectionGUID);
            }

            self.waitingCommentsResources.promise = promise;

            return promise.then(function (resp) {

                $scope.commentsArr = [];
                for (var i = 0; i < resp.length; i++) {
                    var sectionObj = {
                        "sectionGUID": "",
                        "sectionNumber": "",
                        "sectionName": "",
                        comments: []

                    }

                    if (self.reportAppendices.selectedSection.sectionGUID.toLowerCase() == resp[i].sectionGUID.toLowerCase()) {

                        //  $scope.commentsArr.push(resp[i]);

                        if (resp[i].comments.length > 0) {
                            sectionObj.sectionGUID = self.reportAppendices.selectedSection.sectionGUID;
                            sectionObj.sectionNumber = self.reportAppendices.selectedSection.sectionNumber;
                            sectionObj.sectionName = self.reportAppendices.selectedSection.sectionName;
                            for (var j = 0; j < resp[i].comments.length; j++) {
                                var commObj = {
                                    "Id": "",
                                    "addressed": false,
                                    "commentVal": "",
                                    "addressedVal": "",
                                    "commentedBy": "",
                                    "addressedBy": "",
                                    "date": "",
                                    "addressedDate": ""
                                }
                                commObj.Id = resp[i].comments[j].commentGUID;
                                commObj.addressed = resp[i].comments[j].addressed;
                                commObj.commentVal = resp[i].comments[j].commentText;
                                commObj.commentedBy = resp[i].comments[j].createdBy.firstName + ' ' + resp[i].comments[j].createdBy.lastName;
                                if (resp[i].comments[j].addressed) {
                                    if (resp[i].comments[j].responseComments != null && resp[i].comments[j].responseComments != undefined && resp[i].comments[j].responseComments != "") {
                                        commObj.addressedBy = resp[i].comments[j].responseComments[0].createdBy.firstName + ' ' + resp[i].comments[j].responseComments[0].createdBy.lastName;
                                        commObj.addressedVal = resp[i].comments[j].responseComments[0].commentText;
                                        commObj.addressedDate = resp[i].comments[j].responseComments[0].commentDate;
                                    }

                                }
                                // commObj.date = resp[i].comments[j].commentDate;
                                if (resp[i].comments[j].commentUpdated) {
                                    commObj.date = resp[i].comments[j].updatedDate;
                                } else {
                                    commObj.date = resp[i].comments[j].commentDate;
                                }
                                sectionObj.comments.push(commObj);
                            }
                        }
                        $scope.commentsArr.push(sectionObj);
                        break;
                    }

                }

                checkCommentsStatus();

            }, function (error) {
                console.log("error");
                self.commentsErrorText = error;
                self.commentsErrorStatus = true;

            });
        } else if (filterVal == 1) {
            var promise;
            if (section) {
                promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid, section.sectionGUID);
            } else {
                promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid, self.reportAppendices.selectedSection.sectionGUID);
            }
            self.waitingCommentsResources.promise = promise;
            return promise.then(function (resp) {
                $scope.commentsArr = [];
                for (var i = 0; i < resp.length; i++) {
                    var sectionObj = {
                        "sectionGUID": "",
                        "sectionNumber": "",
                        "sectionName": "",
                        comments: []

                    }
                    if (self.reportAppendices.selectedSection.sectionGUID.toLowerCase() == resp[i].sectionGUID.toLowerCase()) {

                        //  $scope.commentsArr.push(resp[i]);

                        if (resp[i].comments.length > 0) {
                            sectionObj.sectionGUID = self.reportAppendices.selectedSection.sectionGUID;
                            sectionObj.sectionNumber = self.reportAppendices.selectedSection.sectionNumber;
                            sectionObj.sectionName = self.reportAppendices.selectedSection.sectionName;
                            for (var j = 0; j < resp[i].comments.length; j++) {
                                if (!resp[i].comments[j].addressed) {
                                    var commObj = {
                                        "Id": "",
                                        "addressed": false,
                                        "commentVal": "",
                                        "addressedVal": "",
                                        "commentedBy": "",
                                        "addressedBy": "",
                                        "date": "",
                                        "addressedDate": ""
                                    }
                                    commObj.Id = resp[i].comments[j].commentGUID;
                                    commObj.addressed = resp[i].comments[j].addressed;
                                    commObj.commentVal = resp[i].comments[j].commentText;
                                    commObj.commentedBy = resp[i].comments[j].createdBy.firstName + ' ' + resp[i].comments[j].createdBy.lastName;
                                    if (resp[i].comments[j].addressed) {
                                        if (resp[i].comments[j].responseComments != null && resp[i].comments[j].responseComments != undefined && resp[i].comments[j].responseComments != "") {
                                            commObj.addressedBy = resp[i].comments[j].responseComments[0].createdBy.firstName + ' ' + resp[i].comments[j].responseComments[0].createdBy.lastName;
                                            commObj.addressedVal = resp[i].comments[j].responseComments[0].commentText;
                                            commObj.addressedDate = resp[i].comments[j].responseComments[0].commentDate;
                                        }

                                    }
                                    // commObj.date = resp[i].comments[j].commentDate;
                                    if (resp[i].comments[j].commentUpdated) {
                                        commObj.date = resp[i].comments[j].updatedDate;
                                    } else {
                                        commObj.date = resp[i].comments[j].commentDate;
                                    }
                                    sectionObj.comments.push(commObj);
                                }

                            }
                        }
                        $scope.commentsArr.push(sectionObj);
                        break;
                    }



                }
                checkCommentsStatus();

            }, function (error) {
                console.log("error");
                self.commentsErrorText = error;
                self.commentsErrorStatus = true;

            });




        } else if (filterVal == 2) {
            var promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid);
            self.waitingCommentsResources.promise = promise;
            return promise.then(function (resp) {
                $scope.commentsArr = [];

                for (var i = 0; i < resp.length; i++) {

                    if (resp[i].comments.length > 0) {

                        var sectionObj = {
                            "sectionGUID": "",
                            "sectionNumber": "",
                            "sectionName": "",
                            comments: []

                        }

                        //  for (var j = 0; j < self.reportAppendices.sections.length; j++) {

                        if (resp[i].isAppendix) {

                            sectionObj.sectionGUID = resp[i].sectionGUID;
                            sectionObj.sectionNumber = resp[i].sectionNumber;
                            sectionObj.sectionName = resp[i].sectionTitle;
                            for (var k = 0; k < resp[i].comments.length; k++) {
                                var commObj = {
                                    "Id": "",
                                    "addressed": false,
                                    "commentVal": "",
                                    "addressedVal": "",
                                    "commentedBy": "",
                                    "addressedBy": "",
                                    "date": "",
                                    "addressedDate": ""
                                }
                                commObj.Id = resp[i].comments[k].commentGUID;
                                commObj.addressed = resp[i].comments[k].addressed;
                                commObj.commentVal = resp[i].comments[k].commentText;
                                commObj.commentedBy = resp[i].comments[k].createdBy.firstName + ' ' + resp[i].comments[k].createdBy.lastName;
                                if (resp[i].comments[k].addressed) {
                                    if (resp[i].comments[k].responseComments != null && resp[i].comments[k].responseComments != undefined && resp[i].comments[k].responseComments != "") {
                                        commObj.addressedBy = resp[i].comments[k].responseComments[0].createdBy.firstName + ' ' + resp[i].comments[k].responseComments[0].createdBy.lastName;
                                        commObj.addressedVal = resp[i].comments[k].responseComments[0].commentText;
                                        commObj.addressedDate = resp[i].comments[k].responseComments[0].commentDate;
                                    }

                                }
                                //  commObj.date = resp[i].comments[k].commentDate;
                                if (resp[i].comments[k].commentUpdated) {
                                    commObj.date = resp[i].comments[k].updatedDate;
                                } else {
                                    commObj.date = resp[i].comments[k].commentDate;
                                }
                                sectionObj.comments.push(commObj);


                            }

                            $scope.commentsArr.push(sectionObj);
                            //  break;
                        }


                        // }


                    }



                }
                checkCommentsStatus();

            }, function (error) {
                console.log("error");
                self.commentsErrorText = error;
                self.commentsErrorStatus = true;

            });



        } else if (filterVal == 3) {
            var promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid);
            self.waitingCommentsResources.promise = promise;
            return promise.then(function (resp) {
                $scope.commentsArr = [];

                for (var i = 0; i < resp.length; i++) {

                    if (resp[i].comments.length > 0) {

                        var sectionObj = {
                            "sectionGUID": "",
                            "sectionNumber": "",
                            "sectionName": "",
                            comments: []

                        }

                        //  for (var j = 0; j < self.reportAppendices.sections.length; j++) {


                        if (resp[i].isAppendix) {
                            sectionObj.sectionGUID = resp[i].sectionGUID;
                            sectionObj.sectionNumber = resp[i].sectionNumber;
                            sectionObj.sectionName = resp[i].sectionTitle;

                            for (var k = 0; k < resp[i].comments.length; k++) {
                                if (!resp[i].comments[k].addressed) {
                                    var commObj = {
                                        "Id": "",
                                        "addressed": false,
                                        "commentVal": "",
                                        "addressedVal": "",
                                        "commentedBy": "",
                                        "addressedBy": "",
                                        "date": "",
                                        "addressedDate": ""
                                    }
                                    commObj.Id = resp[i].comments[k].commentGUID;
                                    commObj.addressed = resp[i].comments[k].addressed;
                                    commObj.commentVal = resp[i].comments[k].commentText;
                                    commObj.commentedBy = resp[i].comments[k].createdBy.firstName + ' ' + resp[i].comments[k].createdBy.lastName;
                                    if (resp[i].comments[k].addressed) {
                                        if (resp[i].comments[k].responseComments != null && resp[i].comments[k].responseComments != undefined && resp[i].comments[k].responseComments != "") {
                                            commObj.addressedBy = resp[i].comments[k].responseComments[0].createdBy.firstName + ' ' + resp[i].comments[k].responseComments[0].createdBy.lastName;
                                            commObj.addressedVal = resp[i].comments[k].responseComments[0].commentText;
                                            commObj.addressedDate = resp[i].comments[k].responseComments[0].commentDate;
                                        }

                                    }
                                    // commObj.date = resp[i].comments[k].commentDate;
                                    if (resp[i].comments[k].commentUpdated) {
                                        commObj.date = resp[i].comments[k].updatedDate;
                                    } else {
                                        commObj.date = resp[i].comments[k].commentDate;
                                    }
                                    sectionObj.comments.push(commObj);


                                }
                            }
                            $scope.commentsArr.push(sectionObj);
                            //  break;
                        }

                        // }




                    }



                }
                checkCommentsStatus();

            }, function (error) {
                console.log("error");
                self.commentsErrorText = error;
                self.commentsErrorStatus = true;

            });



        }



        //check uncheck comments
        angular.forEach($scope.commentsArr, function (item) {

            if (item.comments != undefined && item.comments != null && item.comments != "") {
                angular.forEach(item.comments, function (commObj) {

                    commObj.Selected = self.selectedAll;

                });

            }

        });

        checkCommentsStatus();
    }

    self.sectionChanged = function () {
        localStorage.setItem('commentFilterSelected_appendices', self.selSection_Comments);
        $('#divSelAll_write label.active').removeClass('active');
        self.selectAllText = "Check All";
        self.selectedAll = true;
        $scope.commentsArr = [];

        if (self.selSection_Comments == 0) {


            getCommentsByFilter(0);


        } else if (self.selSection_Comments == 1) {
            getCommentsByFilter(1);


        } else if (self.selSection_Comments == 2) {
            getCommentsByFilter(2);

        } else if (self.selSection_Comments == 3) {
            getCommentsByFilter(3);



        }

    }

    self.refreshComments = function () {

        $timeout(function () {
            console.log('in appendices refresh comments.');
            checkCommentsStatus();
            $('#divSelAll_write label.active').removeClass('active');
            self.selectAllText = "Check All";
            self.selectedAll = true;
            if (self.selSection_Comments == 0) {
                getCommentsBySection();
            } else if (self.selSection_Comments == 1) {
                getCommentsByFilter(1);
            } else if (self.selSection_Comments == 2) {
                getCommentsByFilter(2);
            } else if (self.selSection_Comments == 3) {
                getCommentsByFilter(3);
            }
        });
    }

    self.editAddressComment = function (commentObj) {

        if (commentObj.commentEditState) {
            console.log("edit");
            var editCommentObj = {
                "comment": {
                    "commentGUID": commentObj.Id,
                    "commentText": commentObj.commentVal,
                    "commentUpdated": true
                }
            }



            var promise = ReportAuthoringAPI.add_update_Comments($stateParams.reportGuid, self.reportAppendices.selectedSection.sectionGUID, editCommentObj);

            return promise.then(function (resp) {

                if (resp.comment.commentUpdated) {
                    commentObj.date = resp.comment.updatedDate;
                } else {
                    commentObj.date = resp.comment.commentDate;
                }
                commentObj.commentEditState = false;
            });


        } else {

            var addressCommentObj = {
                "comment": {
                    "commentGUID": commentObj.Id,
                    "commentResponse": true,
                    "responseComments": [{
                        "commentText": commentObj.addressComment
 }]
                }
            }




            var promise = ReportAuthoringAPI.add_update_Comments($stateParams.reportGuid, self.reportAppendices.selectedSection.sectionGUID, addressCommentObj);

            return promise.then(function (resp) {

                var userDetails = JSON.parse(localStorage.getItem('userdetails'));

                if (userDetails) {
                    var userName;
                    for (var i = 0; i < userDetails.length; i++) {
                        if (userDetails[i].key === "USERNAME") {
                            userName = userDetails[i].value;
                            self.userName = userName;
                        }
                    }
                }

                commentObj.addressedBy = self.userName;
                commentObj.addressedDate = resp.comment.responseComments[0].commentDate;
                commentObj.addressedVal = resp.comment.responseComments[0].commentText;

                commentObj.addressState = false;
                commentObj.addressed = true;
                if (self.selSection_Comments == 3 || self.selSection_Comments == 1) {
                    var commLength = 0;
                    for (var i = 0; i < $scope.commentsArr.length; i++) {

                        for (var j = 0; j < $scope.commentsArr[i].comments.length; j++) {
                            if ($scope.commentsArr[i].comments[j].Id == commentObj.Id) {
                                $scope.commentsArr[i].comments.splice(j, 1);

                                break;
                            }
                        }

                        if ($scope.commentsArr[i].comments.length > 0) {
                            commLength = 1;

                        }
                    }

                    if (commLength == 0) {
                        self.commentsErrorText = "No Comments Found";
                        self.commentsErrorStatus = true;
                    }
                }

            });


        }
    }

    self.CloseAll = function () {

        for (var i = 0; i < $scope.commentsArr.length; i++) {
            for (var j = 0; j < $scope.commentsArr[i].comments.length; j++) {

                //comment
                $("#" + $scope.commentsArr[i].comments[j].Id + "-comment").removeClass();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-comment").addClass('collapse');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment").removeClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment-span").removeClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment-span").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-comment").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-comment-span").hide();

                //address
                $("#" + $scope.commentsArr[i].comments[j].Id + "-address").removeClass();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-address").addClass('collapse');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address").removeClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address-span").removeClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address-span").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-address").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-address-span").hide();
            }
        }


    }

    self.OpenAll = function () {

        for (var i = 0; i < $scope.commentsArr.length; i++) {
            for (var j = 0; j < $scope.commentsArr[i].comments.length; j++) {

                //comment
                $("#" + $scope.commentsArr[i].comments[j].Id + "-comment").removeClass();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-comment").addClass('collapse in');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment").addClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment-span").addClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment-span").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-comment").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-comment-span").show();

                //address
                $("#" + $scope.commentsArr[i].comments[j].Id + "-address").removeClass();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-address").addClass('collapse in');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address").addClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address-span").addClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address-span").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-address").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-address-span").show();
            }
        }


    }

    self.setIconComment = function (val, commentId) {
        console.log("class: " + val);
        $("#" + commentId + "-comment").removeClass();
        $("#" + commentId + "-comment").addClass(val);
        if (val == 'collapse') {
            $("#" + commentId + "-plus-comment").removeClass('ng-hide');
            $("#" + commentId + "-plus-comment-span").removeClass('ng-hide');
            $("#" + commentId + "-plus-comment").show();
            $("#" + commentId + "-plus-comment-span").show();
            $("#" + commentId + "-minus-comment").hide();
            $("#" + commentId + "-minus-comment-span").hide();

        } else {
            $("#" + commentId + "-plus-comment").hide();
            $("#" + commentId + "-plus-comment-span").hide();
            $("#" + commentId + "-minus-comment").show();
            $("#" + commentId + "-minus-comment-span").show();
        }
        //self.expanddivComment = val;
    }

    self.setIconAddress = function (val, commentId) {
        $("#" + commentId + "-address").removeClass();
        $("#" + commentId + "-address").addClass(val);
        if (val == 'collapse') {
            $("#" + commentId + "-plus-address").removeClass('ng-hide');
            $("#" + commentId + "-plus-address-span").removeClass('ng-hide');
            $("#" + commentId + "-plus-address").show();
            $("#" + commentId + "-plus-address-span").show();
            $("#" + commentId + "-minus-address").hide();
            $("#" + commentId + "-minus-address-span").hide();

        } else {
            $("#" + commentId + "-plus-address").hide();
            $("#" + commentId + "-plus-address-span").hide();
            $("#" + commentId + "-minus-address").show();
            $("#" + commentId + "-minus-address-span").show();
        }
    }

    /* comments tab ends */
    ReportAuthoringAPI.managePanelHeight();
}]);;
angular.module('ReportAuthoring').controller('AssembleController', ['$scope', 'ReportAuthoringAPI', '$modal', '$timeout', 'Upload', '$stateParams', 'ReportOutputService', function ($scope, ReportAuthoringAPI, $modal, $timeout, Upload, $stateParams, ReportOutputService) {
    var self = this;
    self.isPhotographChecked = "";
    self.uploadError = "";
    self.reportGuid = $stateParams.reportGuid;
    //angular.element(document).ready(function () {
    //$scope.$on('$viewContentLoaded', function(){
    $timeout(function () {
        $('[data-toggle="tooltip"]').tooltip();

    });
    $scope.setTooltipClass = function () {
        $timeout(function () {
            $('[data-toggle="tooltip"]').tooltip();

        });
    }
    self.checkAll = function () {


        if (self.selectedAll) {
            self.selectedAll = true;
        } else {
            self.selectedAll = false;
        }
        self.transmittalCheck = self.selectedAll;
        self.coverPageCheck = self.selectedAll;
        self.execSummaryCheck = self.selectedAll;
        self.figureCheck = self.selectedAll;
        self.photographCheck = self.selectedAll;
        if (self.photographCheck) {
            self.isPhotographChecked = "portrait";
        } else {
            self.isPhotographChecked = "";
        }

        self.historyResearchCheck = self.selectedAll;
        self.regulatoryRecordsCheck = self.selectedAll;
        self.qualificationCheck = self.selectedAll;
        self.additionalDocumentationCheck = self.selectedAll;

    };
    self.photographChecked = function () {

        if (self.photographCheck) {
            self.isPhotographChecked = "portrait";
        } else {
            self.isPhotographChecked = "";
        }

    }

    ///PDF Geneartion Section Start

    self.dismissAlertMsg = function () {
        self.downloadMsg = '';
    }

    self.dowloadPDF = function () {
        createReportGenerationRequest('FullPDF');
    }

    function createReportGenerationRequest(type) {
        var reqObj = getCreateReportGenerationRequestObj(type);
        ReportOutputService.createReportGenerationRequest(self.reportGuid, reqObj).then(function (result) {
            msg = 'Failed to create request for report generation.';
            if (result.reportGeneration && result.reportGeneration.constructedDocumentGUID) {
                console.log('ReportGenerationRequest created...!');
                getConstructedDocument(result.reportGeneration.constructedDocumentGUID);
            } else {
                if (result.message)
                    msg = result.message.userMessage;
                self.downloadMsg = msg;
            }
        }, function (error) {
            msg = 'Failed to create request for report generation.';
            self.downloadMsg = msg;
        })
    }

    function getCreateReportGenerationRequestObj(type, sectionGuid) {
        //type = "FullPDF"
        //includedSections not yet implemented both server side and UI side(Harcoded but not in use.)
        return obj = {
            "reportGeneration": {
                "generationType": type,
                "includedSections": [
                    {
                        "sectionGUID": "A0F5E294-B497-4C16-8FA4-526C9413530F",
                        "orientation": "portrait"
                    }
                ],
                "reorderLetteringOfAppendices": true
            }
        }
    }

    function getConstructedDocument(docGuid) {

        var promise = ReportOutputService.getConstructedDocument(docGuid);
        promise.then(function (response) {
            if (response.constructedDocument) {
                if (response.constructedDocument.status && response.constructedDocument.status.toLowerCase() == 'processing') {
                    $timeout(function () {
                        getConstructedDocument(docGuid);
                    }, 5000)
                } else {
                    //console.log('document constructed...!');
                    getGeneratedPDF(response.constructedDocument.constructedDocumentGUID);
                }
            } else {
                msg = 'Request failed to fetch constructed document.';
                if (response.message)
                    msg = result.message.userMessage;
                self.downloadMsg = msg;
            }
            //handle error here
        }, function (error) {
            msg = 'Request failed to fetch constructed document.';
            if (response.message)
                msg = result.message.userMessage;
            self.downloadMsg = msg;
        })

    }

    function getGeneratedPDF(coreFileGuid) {
        ReportOutputService.downloadGeneratedDocument(coreFileGuid);
        /*promise.then(function (resp) {
            //$window.open(resp.outputDocument, '_blank');
            console.log('gggjjj');
        }, function (error) {
            showPNotifyMessage('Error', 'Error in getting document.', 'error');
        })*/
    }
    // PFD Generation Section Ends.

    $scope.openEmailLinkToClientPopup = function () {
        var modal = $modal.open({
            templateUrl: 'orderEmailLinkToClient.html',
            controller: orderEmailLinkToClientController,
            scope: $scope,
            size: 0
        });
    }
    var orderEmailLinkToClientController = function ($scope, $modalInstance) {

        $scope.Cancel = function () {
            $modalInstance.close();
        }

    }
    $scope.openEditTransmittalLetterPopup = function () {
        var modal = $modal.open({
            templateUrl: 'editTransmittalLetter.html',
            controller: editTransmittalLetterController,
            scope: $scope,
            size: 'lg'
        });
    }
    var editTransmittalLetterController = function ($scope, $modalInstance) {

        $scope.Cancel = function () {
            $modalInstance.close();
        }

    }
    $scope.openEditCoverPagePopup = function () {
        var modal = $modal.open({
            templateUrl: 'editCoverPage.html',
            controller: editCoverPageController,
            scope: $scope,
            size: 'lg'
        });
    }
    var editCoverPageController = function ($scope, $modalInstance) {

        $scope.Cancel = function () {
            $modalInstance.close();
        }

    }
    $scope.openUpload = function (uploadLetter) {
        self.uploadError = "";
        $scope.uploadLetter = uploadLetter;
        var modal = $modal.open({
            templateUrl: 'upload.html',
            controller: uploadController,
            scope: $scope,
            size: 0
        });
    }
    var uploadController = function ($scope, $modalInstance) {

        $scope.Cancel = function () {
            $modalInstance.close();
        }
        $scope.Upload = function () {

            self.uploadError = "";
            var files = $scope.files;
            console.log("file: " + JSON.stringify($scope.files));
            if (!files || files.length <= 0) {

                self.uploadError = "Please attach files before trying to upload.";
                return;
            }
            for (var i = 0; i < files.length; i++) {
                var file = files[i];

                //            Upload.upload({
                //                url: 'https://angular-file-upload-cors-srv.appspot.com/upload',
                //                file: file
                //            }).progress(function (evt) {
                //                var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                //                console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);
                //            }).success(function (data, status, headers, config) {
                //                //console.log('file ' + config.file.name + 'uploaded. Response: ' + JSON.stringify(data));
                //                self.attachmentFiles.push({
                //                    name: data.result[0].name,
                //                    size: data.result[0].size
                //                });
                //            }).error(function (data, status, headers, config) {
                //                //console.log('error status: ' + status);
                //
                //                self.uploadError += "Failed to upload file '" + config.file.name + "'. Status: " + status + ".\n";
                //            })
            }

        };



    }
    $scope.openWhatsThis = function () {
        var modal = $modal.open({
            templateUrl: 'whatsThis.html',
            controller: openWhatsThisController,
            scope: $scope,
            size: 0
        });
    }
    var openWhatsThisController = function ($scope, $modalInstance) {

        $scope.Cancel = function () {
            $modalInstance.close();
        }

    }
    self.photographCheckChange = function () {
        if (self.isPhotographChecked != "" && self.isPhotographChecked != null && self.isPhotographChecked != undefined) {
            self.photographCheck = true;
        }
    }

    $scope.open = {};

    // Disable weekend selection
    $scope.disabled = function (date, mode) {
        return (mode === 'day' && (new Date().toDateString() == date.toDateString()));
    };

    $scope.dateOptions = {
        showWeeks: false,
        startingDay: 1
    };

    $scope.timeOptions = {
        readonlyInput: true,
        showMeridian: false
    };

    $scope.openCalendar = function (e, date) {
        e.preventDefault();
        e.stopPropagation();

        $scope.open[date] = true;
    };


    self.openLeftPanel = function () {
        $(".leftContent").removeClass("report-menu-width");
        $(".leftContent").addClass("col-md-4");
        $("#rightContent").addClass("col-md-8");
        $("#section-toggle").removeClass("sidesection-icon");
    }

}]);;
angular.module('ReportAuthoring').controller('CKEditorCtrl', ['$scope', '$http', '$modal', 'ReportAuthoringAPI', '$window', '$timeout', '$parse', 'DefaultLanguageLibraryAPI', '$sce', '$state', '$filter', '$location', '$anchorScroll', 'ParcelUI.Resources', 'BASEURL', '$interval', '$modal', '$stateParams', '$localStorage', '$rootScope', 'AuthFactory', 'ReportAuthoringUrlCollection', 'VariableReplacerAPI', function ($scope, $http, $modal, ReportAuthoringAPI, $window, $timeout, $parse, DefaultLanguageLibraryAPI, $sce, $state, $filter, $location, $anchorScroll, ParcelUI_Resources, BASEURL, $interval, $modal, $stateParams, $localStorage, $rootScope, AuthFactory, ReportAuthoringUrlCollection, VariableReplacerAPI) {

    var self = this;
    window.localStorage.setItem('isSpellcheckRunning', false);
    self.showAllSections = false;

    /*self.waitingProcessResources = ParcelUI_Resources.waitingProcessResources;
    self.waitingHistoryResources = ParcelUI_Resources.waitingHistoryResources;
    self.waitingLibraryResources = ParcelUI_Resources.waitingLibraryResources;
    self.waitingCommentsResources = ParcelUI_Resources.waitingCommentsResources;*/
    self.waitingProcessResources = {};
    self.waitingHistoryResources = {};
    self.waitingLibraryResources = {};
    self.waitingCommentsResources = ParcelUI_Resources.waitingCommentsResources;

    self.reportDetails = {};
    self.saveNewCommBtn = false;

    self.isEditAllTables = false;

    $scope.ckEditors = [];
    $scope.historyArr = [];
    self.isCkDirty = false;
    $scope.stack_bottomright = {
        "dir1": "up",
        "dir2": "left",
        "firstpos1": 50,
        "firstpos2": 25
    };
    $localStorage.historyInstructionFlag;
    $localStorage.libraryInstructionFlag;

    self.checkComments = false;
    self.selectAllText = "Check All";
    self.IsCommentChecked = false;
    self.commentsErrorStatus = false;
    self.commentsErrorText = "";
    $scope.commentsArr = [];
    self.serviceResponseAlert = true;


    self.reportPhase = '';
    /* $('.text_here2').ThreeDots({ max_rows:3 });*/

    $scope.removeEmptyHistory = function (itm) {
        if (itm)
            return itm;
    }

    $scope.testMerge = {
        "html": "<h2><strong><span>{{contentValues.sectionTitle00}}</span></strong></h2>",
        "contentValues": {
            "sectionTitle00": "Recommendation:"
        }
    };

    self.setHistoryInstructionFlag = function () {

        $localStorage.historyInstructionFlag = true;

    }
    self.getHistoryInstructionFlag = function () {
        return $localStorage.historyInstructionFlag;
    }

    self.setLibraryInstructionFlag = function () {

        $localStorage.libraryInstructionFlag = true;

    }
    self.getLibraryInstructionFlag = function () {
        return $localStorage.libraryInstructionFlag;
    }


    self.windowResize = function () {
        $(window).resize(function () {

            var reportwriteHead = $(".ReportwriteHead").height();
            if ($(".ReportwriteHead").css('display') == "none") {
                reportwriteHead = 0;
            }
            var reportautohring = $(window).height();

            var reportHeader = $("#EDRnav").height();
            var Footermenu1LP = $(".Footermenu1-LP").height();
            var reportbodyheight = reportautohring - (reportwriteHead + reportHeader + Footermenu1LP);
            $(".leftContent, #rightContent").height(reportbodyheight - 70);
        });
        $(window).trigger('resize');
    }

    self.toggleReportwriteHead = function () {
        $(".ReportwriteHead").toggle(250, function () {

            var reportwriteHead = $(".ReportwriteHead").height();
            if ($(".ReportwriteHead").css('display') == "none") {
                reportwriteHead = 0;
                $(".showRwHeader").show();
                $(".hideRwHeader").hide();
            } else if ($(".ReportwriteHead").css('display') != "none") {
                $(".showRwHeader").hide();
                $(".hideRwHeader").show();
            } else {
                $(".showRwHeader").hide();
                $(".hideRwHeader").show();
            }
            var reportautohring = $(window).height();

            var reportHeader = $("#EDRnav").height();
            var Footermenu1LP = $(".Footermenu1-LP").height();
            var reportbodyheight = reportautohring - (reportwriteHead + reportHeader + Footermenu1LP);
            $(".leftContent, #rightContent").height(reportbodyheight - 70);
            // manage panel height
            var leftpanelheight = $('.leftContent ').height();
            var topheader = $('.topHeaderHeight').height();
            var contentheight = leftpanelheight - topheader;
            $('.contentbodyHeight').height(contentheight);

        });

        $(window).resize(function () {

            var reportwriteHead = $(".ReportwriteHead").height();
            if ($(".ReportwriteHead").css('display') == "none") {
                reportwriteHead = 0;
            }
            var reportautohring = $(window).height();

            var reportHeader = $("#EDRnav").height();
            var Footermenu1LP = $(".Footermenu1-LP").height();
            var reportbodyheight = reportautohring - (reportwriteHead + reportHeader + Footermenu1LP);
            $(".leftContent, #rightContent").height(reportbodyheight - 70);
        });
        $(window).trigger('resize');

    }

    self.windowResize();


    var rand = "" + (Math.random() * 10000);

    this.resp = {
        sections: []
    }
    this.obj = {
        selectedSection: ''
    };
    self.reportId = $stateParams.reportGuid; //'4C96AC1F-B608-11E5-B950-0E29ED3D2A45'; //Without costtable '67acf400-bb4e-11e5-b5c1-0e29ed3d2a45';

    self.sectionIndex = 0;
    self.parentIndex;
    self.childIndex;
    self.tocArray = [];
    // to get section by id
    self.sectionIdList = [];
    self.sectionGUIDList = [];

    function checkActiveBrowser() {
        self.isChrome = !!window.chrome && !!window.chrome.webstore;
    }

    function init(reportId) {
        checkActiveBrowser();
        getDefaultLibrary();
        self.resp = {
            sections: []
        }
        var sectionGUID = localStorage.getItem('sign_sectionGUID');
        if (sectionGUID) {
            $('#li_toc').removeClass('active');
            $('#li_comments').addClass('active');
            $scope.reportAuthoringWriteSelected = 'Comments';
            var section = {
                "sectionGUID": sectionGUID
            }

            var promise = getReportToc(reportId);
            self.waitingProcessResources.promise = null;
            self.waitingProcessResources.promise = promise;
            promise.then(function () {
                createSectionIdListFromToC();
                if (!self.sectionIdList || !self.sectionIdList.length) return;

                var selectedSection = self.resp.sections.filter(function (item) {
                    return item.sectionGUID.toLowerCase() == sectionGUID.toLowerCase()
                })
                if (selectedSection.length) {
                    self.selectedSection = selectedSection[0];
                    //comments starts

                    self.commentsErrorStatus = false;
                    self.commentsErrorText = "";
                    self.checkComments = false;
                    self.newComm = false;
                    self.serviceResponseAlert = true;

                    var commentFilterSelected = localStorage.getItem('commentFilterSelected');
                    if (commentFilterSelected) {
                        self.selSection_Comments = commentFilterSelected;
                        getCommentsByFilter(commentFilterSelected, section);

                    } else {

                        self.selSection_Comments = 0;
                        getCommentsBySection(section);

                    }

                    //comments ends
                } else {
                    self.selectedSection = self.resp.sections[0];
                }

                self.copyOfAllSections = angular.copy(self.resp.sections);

                self.getLibraries();
                enableDisableNavigation();
            });


        } else {
            $scope.reportAuthoringWriteSelected = 'ToC';

            var promise = getReportToc(reportId);
            self.waitingProcessResources.promise = null;
            self.waitingProcessResources.promise = promise;
            promise.then(function () {
                createSectionIdListFromToC();
                //filterGeneralInformationSection();
                if (!self.sectionIdList || !self.sectionIdList.length) return;

                var selectedSection;
                if (localStorage.getItem("selectedSection")) {
                    var localSelectedSection = localStorage.getItem("selectedSection");
                    selectedSection = $filter('filter')(self.resp.sections, {
                        sectionGUID: localSelectedSection
                    })[0];
                } else {
                    selectedSection = self.resp.sections[0];
                }

                if (!selectedSection) {
                    selectedSection = self.resp.sections[0];
                }

                self.selectedSection = selectedSection;
                self.obj.selectedSection = selectedSection.sectionID;

                enableDisableNavigation();
                ReportAuthoringAPI.managePanelHeight();
                //getAllSections(reportId);
                //startRetrievingSectionData();
                self.copyOfAllSections = angular.copy(self.resp.sections);
                //self.obj.selectedSection = self.resp.sections[0].sectionID;
                self.getLibraries();
                //console.log("wwwwwwwwww: " + JSON.stringify(self.sectionGUIDList[1]));
            });

        }

    }

    init(self.reportId);

    function getDefaultLibrary() {
        var promise = ReportAuthoringAPI.getReportDefaulfLibrary(self.reportId);
        return promise.then(function (Data) {

            //self.defaultLibraryID = BASEURL.default_LibraryGUID; //report.languageLibraryID;
            self.defaultLibraryID = Data.reports[0].languageLibraryGUID; //report.languageLibraryID;
            self.selectedLibraryID = self.defaultLibraryID;
            $('#siteId').val(Data.reports[0].siteID);
        });
    }

    function enableDisableNavigation() {
        if (self.selectedSection.isGeneralInfo)
            self.isGISelected = true;
        if (self.selectedSection.sectionID == self.sectionIdList[0])
            self.prevDisabled = true;
        if (self.selectedSection.sectionID == self.sectionIdList[self.sectionIdList.length - 1])
            self.nextDisabled = true;
    }

    self.removeLocalStorage = function () {
        localStorage.removeItem('sign_sectionGUID');

    }

    /*function filterGeneralInformationSection() {
        var GISection = self.resp.sections.filter(function (section) {
            return section.isGeneralInfo == true
        })[0]
        if (GISection) {
            self.GISectionID = GISection.sectionID;
            self.firstSectionIndex = self.sectionIdList.indexOf(self.GISectionID) + 1;
            self.firstSectionID = self.sectionIdList[self.firstSectionIndex];
            //self.selectedSection = self.resp.sections[self.firstSectionIndex];
        }
        self.selectedSection = self.resp.sections[0];

    }*/

    function createSectionIdListFromToC() {
        self.resp.sections = [];
        var tocSections = self.toc.sections;
        if (!tocSections || !tocSections.length) return;

        for (var i = 0; i < tocSections.length; i++) {
            var local = tocSections[i];
            extractSectionIdAndPushToArr(local);
        }

        localStorage.setItem('idlist', self.sectionIdList);
    }

    function extractSectionIdAndPushToArr(section) {
        var sectionId = section.sectionID;

        self.sectionGUIDList.push(section);
        self.sectionIdList.push(sectionId);

        //var sectionId = self.getSectionIdfromsectionGuid(section.sectionGUID);
        var updatedSection = {
            html: section.html,
            sectionID: sectionId,
            sectionNumber: section.sectionNumber,
            sectionName: section.sectionName,
            sectionGUID: section.sectionGUID,
            isGeneralInfo: section.isGeneralInfo,
            sections: section.sections,
            sectionData: section.sectionData
        }
        updatedSection.updatedBy = {};
        if (section.updatedBy) {
            updatedSection.updatedBy = section.updatedBy;
        }
        if (section.updatedDate) {
            updatedSection.updatedDate = section.updatedDate;
        }
        if (section.sectionData) {
            updatedSection.contentValues = section.sectionData.contentValues;
            updatedSection.operationCode = section.sectionData.operationCode;
        }

        self.resp.sections.push(updatedSection);
        //End
        var nestedSectionArr = section.sections;
        if (!nestedSectionArr) return;
        for (var i = 0; i < nestedSectionArr.length; i++) {
            var nested = nestedSectionArr[i];
            extractSectionIdAndPushToArr(nested);
        }
    }

    self.getSectionIdfromsectionGuid = function (sectionGuid) {
        var returnSectionId = null;
        var tocSection = $filter('filter')(self.sectionGUIDList, {
            sectionGUID: sectionGuid
        })[0];
        if (tocSection) {
            returnSectionId = tocSection.sectionID;
        }
        return returnSectionId;
    }

    self.gotoNextSection = function () {
        if (self.selectedSection) {
            //self.isGISelected = false;
            setGIFlag();
            var nextSectionIndex = self.sectionIdList.indexOf(self.selectedSection.sectionID) + 1;
            if (nextSectionIndex < self.sectionIdList.length) {
                var nextSectionID = self.sectionIdList[nextSectionIndex];
                //filter self.sectionGUIDList
                var nextSection = $filter('filter')(self.resp.sections, {
                    sectionID: nextSectionID
                }, true);
                /* if (nextSection[0].sectionData) {
                     nextSection[0].contentValues = nextSection[0].sectionData.contentValues;
                 }*/
                //Save previous section data if changed                
                var changedSectionData = angular.copy(self.selectedSection);
                if ($scope.rigthSectionForm.$dirty || self.isCkDirty)
                    saveSectionAfterNavigation(changedSectionData);
                self.selectedSection = nextSection[0];

                loadSectionsOnScroll();
                scrollToSectionAfterNavigation(self.selectedSection.sectionID);
                self.prevDisabled = false;
                if (nextSection[0].isGeneralInfo)
                    self.isGISelected = true;

            }
            if (nextSectionIndex == self.sectionIdList.length - 1) {
                self.nextDisabled = true;
            }

        }

    }

    self.gotoPrevSection = function () {
        if (self.selectedSection) {
            //self.isGISelected = false;
            setGIFlag();
            var prevSectionIndex = self.sectionIdList.indexOf(self.selectedSection.sectionID) - 1;
            if (prevSectionIndex >= 0) {
                var prevSectionID = self.sectionIdList[prevSectionIndex];
                var prevSection = $filter('filter')(self.resp.sections, {
                    sectionID: prevSectionID
                }, true);
                if (prevSection[0].isGeneralInfo)
                    self.isGISelected = true;

                //Save previous section data if changed
                var changedSectionData = angular.copy(self.selectedSection);
                if ($scope.rigthSectionForm.$dirty || self.isCkDirty)
                    saveSectionAfterNavigation(changedSectionData);
                self.selectedSection = prevSection[0];
                self.nextDisabled = false;
                loadSectionsOnScroll();

                if (prevSection[0].sectionID == self.sectionIdList[0]) {
                    self.prevDisabled = true;
                }
                scrollToSectionAfterNavigation(self.selectedSection.sectionID);

            }
        }
    }

    self.blackAllCurrentSummary = function () {
        if (self.selectedSection && !self.selectedSection.isGeneralInfo) {
            angular.forEach(self.selectedSection.sectionData.contentValues.ckEditData, function (ckDivData, index) {
                var sectionText = ckDivData; //angular.copy(self.selectedSection.sectionData.contentValues.ckEditData.div02);
                ckDivData = changeTextColorToBlack(sectionText);
                self.selectedSection.sectionData.contentValues.ckEditData[index] = ckDivData;

            });

            //Assign section text black changes to array
            if (self.selectedSection.sectionData.contentValues) {
                var respSectionData = $filter('filter')(self.resp.sections, {
                    sectionID: self.selectedSection.sectionID
                }, true);
                if (respSectionData.length) {
                    var respIndex = self.resp.sections.indexOf(respSectionData[0]);
                    if (respIndex > -1)
                        self.resp.sections[respIndex].contentValues = angular.copy(self.selectedSection.sectionData.contentValues);
                }
            }
            self.pNotifySuccessTitle = 'Section text changed to black';
            self.pNotifyErrorTitle = 'Problem changing section text';
            self.pNotifySuccessMsg = 'Section <strong>' + self.selectedSection.sectionNumber + ' - ' + self.selectedSection.sectionName + '</strong> saved.';
            self.pNotifyErrorMsg = 'There was a problem changing the section text to black. Please try again.';
            saveSections(self.selectedSection);
        }
    }

    self.blackAllSummaries = function () {
        for (var i = 0; i < self.resp.sections.length; i++) {
            if (self.resp.sections[i].sectionData && self.resp.sections[i].sectionData.contentValues)
                angular.forEach(self.resp.sections[i].sectionData.contentValues.ckEditData, function (ckDivData, index) {
                    var sectionText = ckDivData;
                    ckDivData = changeTextColorToBlack(sectionText);
                    self.resp.sections[i].sectionData.contentValues.ckEditData[index] = ckDivData;
                    /*if(self.resp.sections[i].contentValues){
                        self.resp.sections[i].contentValues.ckEditData[index] = ckDivData;
                    }*/
                })
        }

        self.pNotifySuccessTitle = 'Section text changed to black';
        self.pNotifyErrorTitle = 'Problem changing section text';
        self.pNotifySuccessMsg = 'Section '; // This is being appended by changed sections in saveSections()
        self.pNotifyErrorMsg = 'There was a problem changing the section text to black. Please try again.';

        saveSections(self.resp.sections);

    }

    self.saveAll = function (type) {
        self.pNotifySuccessTitle = 'Table saved';
        self.pNotifyErrorTitle = 'Problem saving tables';
        switch (type) {
            case "CURRENT_SECTION":
                self.pNotifySuccessMsg = 'Table(s) in section <strong>' + self.selectedSection.sectionNumber + '</strong> saved.';
                self.pNotifyErrorMsg = 'There was a problem saving the table. Please try again.';
                saveSections(self.selectedSection);
                $scope.$broadcast('set-editable-flag', {
                    flagState: false,
                    scopeToApply: "CURRENT",
                    sectionGuid: self.selectedSection.sectionGUID
                });
                break;
            case "ALL_SECTIONS":
                $scope.updatedTableSections = [];
                $scope.$broadcast('save-all-tables');
                var updatedSections = [];
                var sectionsArray = [];

                self.pNotifySuccessMsg = 'Table(s)'; // This is being appended with changed sections
                self.pNotifyErrorMsg = 'There was a problem saving the tables. Please try again.';

                if ($scope.updatedTableSections.length) {
                    angular.forEach(self.resp.sections, function (section, index) {
                        if (section.sectionData && section.sectionData.contentValues) {
                            var updatedSectionsFiltered = $filter('filter')($scope.updatedTableSections, section.sectionGUID, true);

                            if (updatedSectionsFiltered.length) {
                                var obj = {
                                    "sectionGUID": section.sectionGUID,
                                    "sectionData": {
                                        "contentValues": section.sectionData.contentValues
                                    }
                                }
                                sectionsArray.push(obj);
                                updatedSections.push(section.sectionNumber);
                            }
                        }
                    });

                    if (sectionsArray.length) {
                        self.pNotifySuccessMsg += ' in sections <strong>' + updatedSections.join(', ') + '</strong> saved.';
                        updateSections(sectionsArray, null, null, null, null);
                    } else {
                        showPNotifyMessage('Everything is up to date.', 'We couldn\'t find any changes to save.', 'info');
                    }
                    $scope.$broadcast('set-editable-flag', {
                        flagState: false,
                        scopeToApply: "ALL"
                    });
                } else {
                    showPNotifyMessage('Everything is up to date.', 'We couldn\'t find any changes to save.', 'info');
                }
                break;
            default:
                return;
        }
    }

    function changeTextColorToBlack(text) {
        re = /color/g;
        while (m = re.exec(text)) {
            //console.log(m.index);
            matchindex = text.substring(m.index).indexOf('#');
            if (matchindex > -1) {

                //case for background and font color (default white)

                if (text.substring(m.index - 1, m.index) == '-') {
                    colorIndex = m.index + matchindex + 1;
                    text = text.substring(0, colorIndex) + 'ffffff' + text.substring(colorIndex + 6);
                }
                // case for text color (default black)
                else {
                    colorIndex = m.index + matchindex + 1;
                    text = text.substring(0, colorIndex) + '000000' + text.substring(colorIndex + 6);
                }
            }

            //case for IE Browser
            matchindexIE = text.substring(m.index).indexOf('rgb');
            if (matchindexIE > -1) {
                //case for background and font color (default white)
                if (text.substring(m.index - 1, m.index) == '-') {
                    colorIndex = m.index + matchindexIE + 1;
                    startIndex = text.substring(colorIndex).indexOf('(');
                    endIndex = text.substring(colorIndex).indexOf(')');
                    text = text.substring(0, colorIndex + startIndex + 1) + '255, 255, 255' + text.substring(colorIndex + endIndex);
                } else {
                    colorIndex = m.index + matchindexIE + 1;
                    startIndex = text.substring(colorIndex).indexOf('(');
                    endIndex = text.substring(colorIndex).indexOf(')');
                    text = text.substring(0, colorIndex + startIndex + 1) + '0, 0, 0' + text.substring(colorIndex + endIndex);
                }
            }

            //console.log(text);
        }
        return text;
    }

    function saveSections(sectionData) {
        var sectionsArray = [];
        if (!angular.isArray(sectionData)) {
            if (sectionData.sectionData && sectionData.sectionData.contentValues) {
                var oldSectionData = $filter('filter')(self.copyOfAllSections, {
                    sectionGUID: sectionData.sectionGUID
                }, true);
                if (!compareObjFunction(oldSectionData[0].contentValues, sectionData.sectionData.contentValues)) {
                    var obj = {
                        "sectionGUID": sectionData.sectionGUID,
                        "sectionData": {
                            "contentValues": sectionData.sectionData.contentValues
                        }
                    }
                    sectionsArray.push(obj);
                    updateSections(sectionsArray, sectionData.sectionName, sectionData.sectionNumber, sectionData.sectionData.contentValues, sectionData.sectionID);
                } else {
                    showPNotifyMessage('Everything is up to date.', 'We couldn\'t find any changes to save.', 'info');
                }
            }
        }
        //Save all sections
        else {
            var updatedSectionsArr = [];
            angular.forEach(self.resp.sections, function (section, index) {
                if (section.sectionData && section.sectionData.contentValues) {
                    var oldSectionData = $filter('filter')(self.copyOfAllSections, {
                        sectionGUID: section.sectionGUID
                    }, true);
                    if (!compareObjFunction(oldSectionData[0].contentValues.ckEditData, section.sectionData.contentValues.ckEditData)) {
                        var obj = {
                            "sectionGUID": section.sectionGUID,
                            "sectionData": {
                                "contentValues": section.sectionData.contentValues
                            }
                        }
                        sectionsArray.push(obj);
                        updatedSectionsArr.push(section.sectionNumber);
                    }
                }
            });

            if (sectionsArray.length) {
                self.pNotifySuccessMsg += updatedSectionsArr.join(', ') + ' saved.';
                updateSections(sectionsArray, null, null, null, null);
            } else {
                showPNotifyMessage('Everything is up to date.', 'We couldn\'t find any changes to save.', 'info');
            }
        }
    }

    $scope.$on('update-ckedit-data', function (event, args) {
        if (args && args.ckEditData && args.sectionID) {
            var oldSectionData = $filter('filter')(self.copyOfAllSections, {
                sectionID: args.sectionID
            }, true);
            var sectionIndex = self.copyOfAllSections.indexOf(oldSectionData[0]);
            if (sectionIndex > -1) {
                self.copyOfAllSections[sectionIndex].contentValues.ckEditData = angular.copy(args.ckEditData);
                if (self.copyOfAllSections[sectionIndex].sectionData.contentValues)
                    self.copyOfAllSections[sectionIndex].sectionData.contentValues.ckEditData = angular.copy(args.ckEditData);
            }

        }
        //alert('updated'+ JSON.stringify(args));
        event.stopPropagation();

    })

    function setUpdatedSectionsToOldSections(sectionsArray, changedContentValues, sectionID) {
        if (sectionID) {
            var oldSectionData = $filter('filter')(self.copyOfAllSections, {
                sectionID: sectionID
            }, true);
            var sectionIndex = self.copyOfAllSections.indexOf(oldSectionData[0]);
            if (sectionIndex > -1)
                self.copyOfAllSections[sectionIndex].contentValues = angular.copy(changedContentValues);
        } else {
            angular.forEach(sectionsArray, function (section, index) {
                var oldSectionData = $filter('filter')(self.copyOfAllSections, {
                    sectionGUID: section.sectionGUID
                }, true);
                var sectionIndex = self.copyOfAllSections.indexOf(oldSectionData[0]);
                if (sectionIndex > -1) {
                    self.copyOfAllSections[sectionIndex].contentValues = angular.copy(section.sectionData.contentValues);
                    /*if(self.copyOfAllSections[sectionIndex].sectionData){
                        self.copyOfAllSections[sectionIndex].sectionData.contentValues = angular.copy(section.sectionData.contentValues);
                    }*/
                }
            })
        }
    }

    function showPNotifyMessage(title, text, type) {
        new PNotify({
            title: title,
            text: text,
            type: type,
            addclass: "stack-bottomright",
            stack: $scope.stack_bottomright
        });
    }

    function updateSections(sectionsArray, sectionName, sectionNumber, changedContentValues, sectionID) {
        var data = {};
        data["formSectionData"] = sectionsArray;
        $scope.rigthSectionForm.$setPristine();
        self.isCkDirty = false;
        var promise = ReportAuthoringAPI.updateSection(self.reportId, null, data);
        promise.then(function (resp) {
            if (resp.length == 0) {
                $scope.$broadcast('disable-save-button');
                var title = self.pNotifySuccessTitle ? self.pNotifySuccessTitle : 'Success';
                var text = self.pNotifySuccessMsg ? self.pNotifySuccessMsg : "Your information was updated successfully.";
                var type = 'success';
                showPNotifyMessage(title, text, type);


                setUpdatedSectionsToOldSections(sectionsArray, changedContentValues, sectionID);
                return true;
            } else {
                var msg = 'Failed to update your information. Please try again';
                if (resp.message)
                    msg = resp.message.userMessage;

                var title = self.pNotifySuccessTitle ? self.pNotifySuccessTitle : "Error";
                var text = self.pNotifyErrorMsg ? self.pNotifyErrorMsg + " " + msg : msg;
                var type = 'error';
                showPNotifyMessage(title, text, type);
                return false;
            }
        }, function (error) {
            var msg = 'Failed to update your information. Please try again';
            if (error.message)
                msg = error.message.userMessage;

            var title = self.pNotifySuccessTitle ? self.pNotifySuccessTitle : "Error";
            var text = self.pNotifyErrorMsg ? self.pNotifyErrorMsg + " " + msg : msg;
            var type = 'error';
            showPNotifyMessage(title, text, type);
        });
    }

    var saveSectionAfterNavigation = function (changedSectionData) {
        var sectionsArray = [];
        var oldSectionData = $filter('filter')(self.copyOfAllSections, {
            sectionID: changedSectionData.sectionID
        }, true);
        var changedContentValues;
        if (changedSectionData.hasOwnProperty('contentValues') && !angular.isArray(changedSectionData.contentValues))
            changedContentValues = changedSectionData.contentValues;
        else if (changedSectionData.sectionData && changedSectionData.sectionData.contentValues)
            changedContentValues = changedSectionData.sectionData.contentValues;


        if (changedContentValues) {

            var obj = {
                "sectionGUID": changedSectionData.sectionGUID,
                "sectionData": {
                    "contentValues": changedSectionData.contentValues
                }
            }
            sectionsArray.push(obj);
            self.pNotifySuccessMsg = 'Your information was updated successfully. \n Section <strong>' +
                changedSectionData.sectionNumber + ' - ' + changedSectionData.sectionName + '</strong> saved.';
            updateSections(sectionsArray, changedSectionData.sectionName, changedSectionData.sectionNumber, changedContentValues, changedSectionData.sectionID);
        }
    }

    var compareObjFunction = function (oldObj, newObj) {
        return angular.equals(oldObj, newObj);
    }

    self.openLeftPanel = function () {
        $(".leftContent").removeClass("report-menu-width");
        $(".leftContent").addClass("col-md-4");
        $("#rightContent").addClass("col-md-8");
        $("#section-toggle").removeClass("sidesection-icon");
        self.windowResize();
    }


    function getReportPhase(reportStatusAbbreviation) {

        var reportStatus = $filter('filter')(ParcelUI_Resources.reportPhasesResources, {
            key: reportStatusAbbreviation
        })[0];
        self.reportPhase = reportStatus.value;

    }

    function startRetrievingSectionData() {
        var firstSectionId = self.sectionIdList[0];
        getSectionData(firstSectionId);
    }


    function getSectionData(sectionId) {
        if (!sectionId) return;

        var retrieved = checkIfSectionRetrieved(sectionId);
        if (retrieved) return;
        var sectionGUID = '';

        angular.forEach(self.sectionGUIDList, function (secObj) {
            if (secObj.sectionID == sectionId) {
                sectionGUID = secObj.sectionGUID;
            }
        });


        var promise = ReportAuthoringAPI.getSection(self.reportId, sectionId, sectionGUID);

        promise.then(function (section) {
            var updatedSection = {
                html: section.html,
                sectionID: sectionId,
                sectionGUID: section.sectionGUID,
                //contentValues: section.sectionData,
                sectionData: section.sectionData,
                isGeneralInfo: section.isGeneralInfo,
                sections: section.sections,
                sectionNumber: section.sectionNumber,
                sectionName: section.sectionName
            }
            if (section.sectionData) {
                updatedSection.contentValues = section.sectionData.contentValues;
            }

            self.resp.sections.push(updatedSection);


            var nextSectionId = getNextSectionId(sectionId);
            if (!nextSectionId) return;
            $timeout(function () {
                getSectionData(nextSectionId);
            });
        }, function (error) {

            var nextSectionId = getNextSectionId(sectionId);
            if (!nextSectionId) return;
            $timeout(function () {
                getSectionData(nextSectionId);
            });
        });
    }

    function getAllSections(reportId) {

        var getAllSectionsPromise = ReportAuthoringAPI.getAllSections(reportId);

        self.waitingProcessResources.promise = null;
        self.waitingProcessResources.promise = getAllSectionsPromise;

        getAllSectionsPromise.then(function (sections) {

            self.resp.sections = [];
            angular.forEach(sections, function (section, sectionIndex) {

                var sectionId = self.getSectionIdfromsectionGuid(section.sectionGUID);
                var updatedSection = {
                    html: section.html,
                    sectionID: sectionId,
                    sectionGUID: section.sectionGUID,
                    contentValues: section.sectionData
                }

                if (section.sectionData) {

                    updatedSection.contentValues = section.sectionData.contentValues;
                }

                self.resp.sections.push(updatedSection);



            });


            //self.resp.Sections = sections;
            self.obj.selectedSection = self.resp.sections[0].sectionID;
        });
    }

    function getNextSectionId(currentSectionId) {
        if (!self.sectionIdList || !self.sectionIdList.length) return 0;
        var index = (self.sectionIdList.indexOf(currentSectionId) + 1);
        if (index < 0 || index >= self.sectionIdList.length) return 0;
        return self.sectionIdList[index];
    }


    function checkIfSectionRetrieved(sectionId) {
        var existingCount = $parse('self.resp.sections.length')(self);
        if (existingCount <= 0) return false;

        var arr = self.resp.sections;
        for (var i = 0; i < arr.length; i++) {
            var local = arr[i];
            if (local && local.sectionID == sectionId && local.contentValues) {
                return true;
            }
        }
        return false;
    }

    function getReportToc(reportId) {
        var promise = ReportAuthoringAPI.getToC(reportId);
        return promise.then(function (tocData) {

            self.toc = {};
            self.toc.sections = [];

            self.reportDetails = tocData.reportDetails;
            getReportPhase(tocData.reportDetails.reportStatusAbbreviation);
            var updatedBy = tocData.tableOfContent.updatedBy;
            if (!$.isEmptyObject(updatedBy)) {
                var updatedDate = (tocData.tableOfContent.updatedDate).replace(/-/g, '/');
                var user = updatedBy.firstName + " " + updatedBy.lastName;

                var userGuid = AuthFactory.getUserDetailsFromStorage('USERGUID');
                if (updatedBy.userGUID == userGuid)
                    user = "Me";

                var url = BASEURL.ACCOUNT_MGMT + ReportAuthoringUrlCollection.ACCT_USER;

                var params = {
                    companyguid: updatedBy.companyGUID,
                    officeguid: updatedBy.officeGUID,
                    userguid: updatedBy.userGUID
                };

                var uri = ReportAuthoringAPI.formatUrl(url, params);

                $('#lastUpdatedDetails').text('Last updated ' + updatedDate + " by ");
                $("#lastUpdatedDetails").append('<a id="userLink" href="" class="pointer">' + user + '</a>');
                $('#userLink').removeAttr('onclick');
                $('#userLink').click({
                    url: uri
                }, linkToAccountUser);
            }

            var tocSections = tocData.tableOfContent.sections;

            angular.forEach(tocSections, function (tocsec) {
                if (tocsec.sectionNumber) {
                    tocsec.sectionNumber = tocsec.sectionNumber.trim();
                }
                if (!tocsec.isAppendix) {
                    self.toc.sections.push(tocsec);
                } else if (tocsec.isAppendix) {

                    var appendixsectionGuid = [];
                    angular.forEach(tocsec.sections, function (appendix) {
                        if (appendix.hasPhotos) {
                            appendixsectionGuid.push(appendix.sectionGUID);
                        }
                    });
                    var appendixTocPhotoSections = {
                        reportGuid: reportId,
                        appendixsectionGuidlist: appendixsectionGuid
                    };
                    $window.sessionStorage.setItem("appendixTocPhotoSections", JSON.stringify(appendixTocPhotoSections));
                }
                if (tocsec.isGeneralInfo) {
                    $rootScope.giSectionGuid = tocsec.sectionGUID;
                }
            });

            // Building link for Project Dashboard
            var projectDashParamObj = {
                projectGuid: $state.params.projectGuid,
                accountGuid: BASEURL.accountGUID,
                companyGuid: BASEURL.companyGUID
            };
            var linkToProjectDash = $state.href('projectDashboard', projectDashParamObj);

            $scope.projectDashLink = '<a title="Go to Project Dashboard for this Report" href="' + linkToProjectDash + '" class="pointer">' + tocData.project.name + '</a> /';

            // Building link for General Information
            var giParamObj = {
                projectGuid: $state.params.projectGuid,
                reportGuid: $state.params.reportGuid,
                sectionGuid: $rootScope.giSectionGuid
            };
            var linkToGI = $state.href('generalInformation', giParamObj);
            var propNoPart = tocData.location.propertyNumber ? tocData.location.propertyNumber + " " : "";
            var propNamePart = tocData.location.propertyName ? tocData.location.propertyName + " " : "";
            var addressPart = tocData.location.address1 ? tocData.location.address1 + ", " : "";
            var cityPart = tocData.location.city ? tocData.location.city + ", " : "";
            var statePart = tocData.location.state ? tocData.location.state + " " : "";

            var reportAuthTitle = propNoPart + propNamePart + addressPart + cityPart + statePart + tocData.location.zip;

            $scope.giLink = '<a target="_blank" title="Open General Information for this Report." href="' + linkToGI + '" class="pointer">' + reportAuthTitle + '</a>';
            document.title = reportAuthTitle + " / PARCEL";

            var first = tocSections[0];
            self.obj.selectedSection = first.sectionID;
            self.selectedSection = first;
        });
    }

    function linkToAccountUser(event) {
        $window.location.href = event.data.url;
    }

    self.tocTabClicked = function () {
        setSectionFlagValue();
    }

    /* comments tab starts */
    self.getReportComments = function () {

        self.saveNewCommBtn = false;
        console.log("entered getReportComments");
        self.commentsErrorStatus = false;
        self.commentsErrorText = "";
        self.checkComments = false;
        self.newComm = false;
        self.serviceResponseAlert = true;

        var commentFilterSelected = localStorage.getItem('commentFilterSelected');
        if (commentFilterSelected) {
            self.selSection_Comments = commentFilterSelected;
            getCommentsByFilter(commentFilterSelected);

        } else {

            self.selSection_Comments = 0;
            getCommentsBySection();

        }



    }

    function getCommentsBySection(sectionData) {

        $scope.commentsArr = [];
        self.commentsErrorStatus = false;
        self.commentsErrorText = "";
        //  if (self.otherViewModeMsg.toLowerCase() == "all sections mode") {
        var promise;
        if (sectionData) {
            promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid, sectionData.sectionGUID);
        } else {
            promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid, self.selectedSection.sectionGUID);
        }
        self.waitingCommentsResources.promise = promise;



        return promise.then(function (resp) {
            $scope.commentsArr = [];

            for (var i = 0; i < resp.length; i++) {

                var sectionObj = {
                    "sectionGUID": "",
                    "sectionNumber": "",
                    "sectionName": "",
                    comments: []

                }
                if (self.selectedSection.sectionGUID.toLowerCase() == resp[i].sectionGUID.toLowerCase()) {

                    //  $scope.commentsArr.push(resp[i]);

                    if (resp[i].comments.length > 0) {
                        sectionObj.sectionGUID = self.selectedSection.sectionGUID;
                        sectionObj.sectionNumber = self.selectedSection.sectionNumber;
                        sectionObj.sectionName = self.selectedSection.sectionName;
                        for (var j = 0; j < resp[i].comments.length; j++) {
                            var commObj = {
                                "Id": "",
                                "addressed": false,
                                "commentVal": "",
                                "addressedVal": "",
                                "commentedBy": "",
                                "addressedBy": "",
                                "date": "",
                                "addressedDate": ""
                            }
                            commObj.Id = resp[i].comments[j].commentGUID;
                            commObj.addressed = resp[i].comments[j].addressed;
                            commObj.commentVal = resp[i].comments[j].commentText;
                            commObj.commentedBy = resp[i].comments[j].createdBy.firstName + ' ' + resp[i].comments[j].createdBy.lastName;
                            console.log("777777777: " + JSON.stringify(resp[i].comments[j]));
                            if (resp[i].comments[j].addressed) {
                                if (resp[i].comments[j].responseComments != null && resp[i].comments[j].responseComments != undefined && resp[i].comments[j].responseComments != "") {
                                    commObj.addressedBy = resp[i].comments[j].responseComments[0].createdBy.firstName + ' ' + resp[i].comments[j].responseComments[0].createdBy.lastName;
                                    commObj.addressedVal = resp[i].comments[j].responseComments[0].commentText;
                                    commObj.addressedDate = resp[i].comments[j].responseComments[0].commentDate;
                                }

                            }
                            if (resp[i].comments[j].commentUpdated) {
                                commObj.date = resp[i].comments[j].updatedDate;
                            } else {
                                commObj.date = resp[i].comments[j].commentDate;
                            }

                            sectionObj.comments.push(commObj);
                        }
                    }
                    $scope.commentsArr.push(sectionObj);

                    break;
                }

            }

            checkCommentsStatus();
            if ($scope.commentsArr.length > 0) {
                if ($scope.commentsArr[0].comments.length == 0) {

                    self.commentsErrorText = "No Comments Found";
                    self.commentsErrorStatus = true;


                }
            } else {
                self.commentsErrorText = "No Comments Found";
                self.commentsErrorStatus = true;
            }
            $timeout(function () {
                ReportAuthoringAPI.managePanelHeight();

            });
            $timeout(function () {
                $('[data-toggle="tooltip"]').tooltip();
            });

        }, function (error) {
            console.log("error");
            self.commentsErrorText = error;
            self.commentsErrorStatus = true;

        });


        //}

    }

    function checkCommentsStatus() {
        self.IsCommentChecked = false;
        self.selectedAll = false;
        self.checkComments = false;
        if ($scope.commentsArr.length > 0) {
            for (var i = 0; i < $scope.commentsArr.length; i++) {
                if ($scope.commentsArr[i]) {
                    if ($scope.commentsArr[i].comments.length > 0) {
                        self.checkComments = true;
                    }
                }

            }
        } else {
            self.checkComments = false;
        }

        if (!self.checkComments) {
            self.commentsErrorText = "No Comments Found";
            self.commentsErrorStatus = true;
        }
        ReportAuthoringAPI.managePanelHeight();
    }

    self.checkAll = function () {
        var isCommentsDeleted_write = localStorage.getItem('isCommentsDeleted_write');

        if (isCommentsDeleted_write) {
            self.selectAllText = "Un Check";
            self.selectAllText = "Uncheck All";
            self.selectedAll = true;
        } else {
            self.IsCommentChecked = true;
            if (self.selectedAll) {
                self.selectAllText = "Un Check";
                self.selectAllText = "Uncheck All";
                self.selectedAll = true;
            } else {
                self.selectAllText = "Check All";
                self.selectedAll = false;
            }

        }


        angular.forEach($scope.commentsArr, function (item) {

            if (item.comments != undefined && item.comments != null && item.comments != "") {
                angular.forEach(item.comments, function (commObj) {

                    commObj.Selected = self.selectedAll;
                    self.IsCommentChecked = commObj.Selected;
                });

            }

        });
        localStorage.removeItem('isCommentsDeleted_write');
    };

    self.commentCheck = function () {
        var flag = false;

        angular.forEach($scope.commentsArr, function (item) {
            if (item.comments != undefined && item.comments != null && item.comments != "") {
                angular.forEach(item.comments, function (commObj) {

                    if (commObj.Selected) {
                        flag = true;
                        return;
                    }


                });

            }

        });
        self.IsCommentChecked = flag;
    }

    self.openDeletePopup = function () {
        var modalInstance = $modal.open({
            templateUrl: "dllDeleteAll.html",
            scope: $scope,
            controller: deleteCommentsController,
            size: 0
        })
    }

    var deleteCommentsController = function ($scope, $modalInstance) {

        $scope.deleteComments = function () {

            $scope.comments = [];

            var deleteCommentArrObj = {
                "comments": $scope.comments
            };


            angular.forEach($scope.commentsArr, function (item) {


                for (var i = 0; i < item.comments.length; i++) {
                    var deleteCommentObj = {
                        "commentGUID": ""
                    }
                    if (item.comments[i].Selected) {
                        deleteCommentObj.commentGUID = item.comments[i].Id;
                        $scope.comments.push(deleteCommentObj);
                    }
                }



            });

            var promise = ReportAuthoringAPI.deleteComments(deleteCommentArrObj);

            return promise.then(function (resp) {
                var iflag = 0;
                for (var k = 0; k < deleteCommentArrObj.comments.length; k++) {
                    for (var i = 0; i < $scope.commentsArr.length; i++) {
                        for (var j = 0; j < $scope.commentsArr[i].comments.length; j++) {

                            if (deleteCommentArrObj.comments[k].commentGUID.toLowerCase() == $scope.commentsArr[i].comments[j].Id.toLowerCase()) {
                                $scope.commentsArr[i].comments.splice(j, 1);

                            }
                        }



                    }
                }
                checkCommentsStatus();

                $('#divSelAll_write label.active').removeClass('active');
                self.selectAllText = "Check All";
                self.selectedAll = true;
                localStorage.setItem('isCommentsDeleted', true);
                $modalInstance.close();
            });





        }

        $scope.CancelDelete = function () {

            $modalInstance.close();
        }
    }

    self.saveNewComments = function () {
        $("#btnSaveNewComments").prop("disabled", true);
        var userDetails = JSON.parse(localStorage.getItem('userdetails'));

        if (userDetails) {
            var userName;
            for (var i = 0; i < userDetails.length; i++) {
                if (userDetails[i].key === "USERNAME") {
                    userName = userDetails[i].value;
                    self.userName = userName;
                }
            }
        }

        self.saveNewCommBtn = true;
        self.IsCommentChecked = false;
        self.selectedAll = false;
        var addCommentObj = {
            "comment": {
                "commentText": self.newCommentVal,
                "commentType": {
                    "commentTypeGUID": "726D034A-9791-11E5-8226-0E29ED3D2A45"
                }
            }
        }

        var promise = ReportAuthoringAPI.add_update_Comments($stateParams.reportGuid, self.selectedSection.sectionGUID, addCommentObj);

        return promise.then(function (resp) {

            self.commentsErrorStatus = false;
            self.commentsErrorText = "";

            var commObj = {
                "Id": resp.comment.commentGUID,
                "addressed": false,
                "commentVal": resp.comment.commentText,
                "addressedVal": "",
                "commentedBy": self.userName,
                "addressedBy": "",
                "date": ""
            }

            if (resp.comment.commentUpdated) {
                commObj.date = resp.comment.updatedDate;
            } else {
                commObj.date = resp.comment.commentDate;
            }

            console.log("333333333333333: " + JSON.stringify(resp));
            if ($scope.commentsArr.length == 0) {
                var sectionObj = {
                    "sectionGUID": self.selectedSection.sectionGUID,
                    "sectionNumber": self.selectedSection.sectionNumber,
                    "sectionName": self.selectedSection.sectionName,
                    comments: []

                }
                sectionObj.comments.push(commObj);
                $scope.commentsArr.push(sectionObj);



            } else {
                for (var i = 0; i < $scope.commentsArr.length; i++) {
                    if ($scope.commentsArr[i].sectionGUID.toLowerCase() == self.selectedSection.sectionGUID.toLowerCase()) {
                        $scope.commentsArr[i].comments.unshift(commObj)
                        break;
                    }
                }
            }
            checkCommentsStatus();
            self.newComm = false;
            self.saveNewCommBtn = true;

        }, function (error) {
            console.log("error");
            self.commentsErrorText = error;
            self.commentsErrorStatus = true;

        });


    };

    function getCommentsByFilter(filterVal, section) {
        $scope.commentsArr = [];
        self.commentsErrorStatus = false;
        self.commentsErrorText = "";

        if (filterVal == 0) {
            var promise;
            if (section) {
                console.log("section is present");
                promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid, section.sectionGUID);
            } else {
                console.log("section is not present");
                promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid, self.selectedSection.sectionGUID);
            }
            self.waitingCommentsResources.promise = promise;

            return promise.then(function (resp) {
                $scope.commentsArr = [];

                for (var i = 0; i < resp.length; i++) {

                    var sectionObj = {
                        "sectionGUID": "",
                        "sectionNumber": "",
                        "sectionName": "",
                        comments: []

                    }

                    if (self.selectedSection.sectionGUID.toLowerCase() == resp[i].sectionGUID.toLowerCase()) {

                        //  $scope.commentsArr.push(resp[i]);

                        if (resp[i].comments.length > 0) {
                            sectionObj.sectionGUID = self.selectedSection.sectionGUID;
                            sectionObj.sectionNumber = self.selectedSection.sectionNumber;
                            sectionObj.sectionName = self.selectedSection.sectionName;
                            for (var j = 0; j < resp[i].comments.length; j++) {
                                var commObj = {
                                    "Id": "",
                                    "addressed": false,
                                    "commentVal": "",
                                    "addressedVal": "",
                                    "commentedBy": "",
                                    "addressedBy": "",
                                    "date": "",
                                    "addressedDate": ""
                                }
                                commObj.Id = resp[i].comments[j].commentGUID;
                                commObj.addressed = resp[i].comments[j].addressed;
                                commObj.commentVal = resp[i].comments[j].commentText;
                                commObj.commentedBy = resp[i].comments[j].createdBy.firstName + ' ' + resp[i].comments[j].createdBy.lastName;
                                if (resp[i].comments[j].addressed) {
                                    if (resp[i].comments[j].responseComments != null && resp[i].comments[j].responseComments != undefined && resp[i].comments[j].responseComments != "") {
                                        commObj.addressedBy = resp[i].comments[j].responseComments[0].createdBy.firstName + ' ' + resp[i].comments[j].responseComments[0].createdBy.lastName;
                                        commObj.addressedVal = resp[i].comments[j].responseComments[0].commentText;
                                        commObj.addressedDate = resp[i].comments[j].responseComments[0].commentDate;
                                    }

                                }
                                if (resp[i].comments[j].commentUpdated) {
                                    commObj.date = resp[i].comments[j].updatedDate;
                                } else {
                                    commObj.date = resp[i].comments[j].commentDate;
                                }
                                // commObj.date = resp[i].comments[j].commentDate;
                                sectionObj.comments.push(commObj);
                            }
                        }
                        $scope.commentsArr.push(sectionObj);
                        break;
                    }

                }

                checkCommentsStatus();
                $timeout(function () {
                    $('[data-toggle="tooltip"]').tooltip();
                });

            }, function (error) {
                console.log("error");
                self.commentsErrorText = error;
                self.commentsErrorStatus = true;

            });
        } else if (filterVal == 1) {
            var promise;
            if (section) {
                promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid, section.sectionGUID);
            } else {
                promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid, self.selectedSection.sectionGUID);
            }

            self.waitingCommentsResources.promise = promise;

            return promise.then(function (resp) {
                $scope.commentsArr = [];
                for (var i = 0; i < resp.length; i++) {
                    var sectionObj = {
                        "sectionGUID": "",
                        "sectionNumber": "",
                        "sectionName": "",
                        comments: []

                    }
                    if (self.selectedSection.sectionGUID.toLowerCase() == resp[i].sectionGUID.toLowerCase()) {

                        //  $scope.commentsArr.push(resp[i]);

                        if (resp[i].comments.length > 0) {
                            sectionObj.sectionGUID = self.selectedSection.sectionGUID;
                            sectionObj.sectionNumber = self.selectedSection.sectionNumber;
                            sectionObj.sectionName = self.selectedSection.sectionName;
                            for (var j = 0; j < resp[i].comments.length; j++) {
                                if (!resp[i].comments[j].addressed) {
                                    var commObj = {
                                        "Id": "",
                                        "addressed": false,
                                        "commentVal": "",
                                        "addressedVal": "",
                                        "commentedBy": "",
                                        "addressedBy": "",
                                        "date": "",
                                        "addressedDate": ""
                                    }
                                    commObj.Id = resp[i].comments[j].commentGUID;
                                    commObj.addressed = resp[i].comments[j].addressed;
                                    commObj.commentVal = resp[i].comments[j].commentText;
                                    commObj.commentedBy = resp[i].comments[j].createdBy.firstName + ' ' + resp[i].comments[j].createdBy.lastName;
                                    if (resp[i].comments[j].addressed) {
                                        if (resp[i].comments[j].responseComments != null && resp[i].comments[j].responseComments != undefined && resp[i].comments[j].responseComments != "") {
                                            commObj.addressedBy = resp[i].comments[j].responseComments[0].createdBy.firstName + ' ' + resp[i].comments[j].responseComments[0].createdBy.lastName;
                                            commObj.addressedVal = resp[i].comments[j].responseComments[0].commentText;
                                            commObj.addressedDate = resp[i].comments[j].responseComments[0].commentDate;
                                        }

                                    }
                                    //commObj.date = resp[i].comments[j].commentDate;
                                    if (resp[i].comments[j].commentUpdated) {
                                        commObj.date = resp[i].comments[j].updatedDate;
                                    } else {
                                        commObj.date = resp[i].comments[j].commentDate;
                                    }
                                    sectionObj.comments.push(commObj);
                                }

                            }
                        }
                        $scope.commentsArr.push(sectionObj);
                        break;
                    }
                }

                checkCommentsStatus();
                $timeout(function () {
                    $('[data-toggle="tooltip"]').tooltip();
                });
            }, function (error) {
                console.log("error");
                self.commentsErrorText = error;
                self.commentsErrorStatus = true;

            });


        } else if (filterVal == 2) {
            var promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid);
            self.waitingCommentsResources.promise = promise;
            return promise.then(function (resp) {
                $scope.commentsArr = [];
                // console.log("ggggggggggggg " + JSON.stringify(self.toc.sections));
                for (var i = 0; i < resp.length; i++) {

                    if (resp[i].comments.length > 0) {

                        var sectionObj = {
                            "sectionGUID": "",
                            "sectionNumber": "",
                            "sectionName": "",
                            comments: []
                        }

                        //  for (var j = 0; j < self.toc.sections.length; j++) {

                        if (!resp[i].isAppendix) {
                            for (var j = 0; j < resp[i].comments.length; j++) {
                                sectionObj.sectionGUID = resp[i].sectionGUID;
                                sectionObj.sectionNumber = resp[i].sectionNumber;
                                sectionObj.sectionName = resp[i].sectionTitle;

                                var commObj = {
                                    "Id": "",
                                    "addressed": false,
                                    "commentVal": "",
                                    "addressedVal": "",
                                    "commentedBy": "",
                                    "addressedBy": "",
                                    "date": "",
                                    "addressedDate": ""
                                }
                                commObj.Id = resp[i].comments[j].commentGUID;
                                commObj.addressed = resp[i].comments[j].addressed;
                                commObj.commentVal = resp[i].comments[j].commentText;
                                commObj.commentedBy = resp[i].comments[j].createdBy.firstName + ' ' + resp[i].comments[j].createdBy.lastName;
                                if (resp[i].comments[j].addressed) {
                                    if (resp[i].comments[j].responseComments != null && resp[i].comments[j].responseComments != undefined && resp[i].comments[j].responseComments != "") {
                                        commObj.addressedBy = resp[i].comments[j].responseComments[0].createdBy.firstName + ' ' + resp[i].comments[j].responseComments[0].createdBy.lastName;
                                        commObj.addressedVal = resp[i].comments[j].responseComments[0].commentText;
                                        commObj.addressedDate = resp[i].comments[j].responseComments[0].commentDate;
                                    }

                                }
                                // commObj.date = resp[i].comments[j].commentDate;
                                if (resp[i].comments[j].commentUpdated) {
                                    commObj.date = resp[i].comments[j].updatedDate;
                                } else {
                                    commObj.date = resp[i].comments[j].commentDate;
                                }
                                sectionObj.comments.push(commObj);


                            }

                            $scope.commentsArr.push(sectionObj);
                            //  break;
                        }
                        //  }
                    }

                }

                //code to place comments of selected section on top
                $scope.filterObject = $filter('filter')($scope.commentsArr, {
                    sectionGUID: self.selectedSection.sectionGUID
                })[0];
                if ($scope.filterObject) {
                    var selectedSectionIndex = $scope.commentsArr.indexOf($scope.filterObject);
                    $scope.commentsArr.splice(selectedSectionIndex, 1);
                    $scope.commentsArr.unshift($scope.filterObject);
                }
                //ends

                checkCommentsStatus();
                $timeout(function () {
                    $('[data-toggle="tooltip"]').tooltip();
                });
            }, function (error) {
                console.log("error");
                self.commentsErrorText = error;
                self.commentsErrorStatus = true;

            });

        } else if (filterVal == 3) {
            var promise = ReportAuthoringAPI.getComments('DESC', $stateParams.reportGuid);
            self.waitingCommentsResources.promise = promise;
            return promise.then(function (resp) {
                $scope.commentsArr = [];
                //console.log("ggggggggggggg " + JSON.stringify(self.toc.sections));
                for (var i = 0; i < resp.length; i++) {

                    if (resp[i].comments.length > 0) {

                        var sectionObj = {
                            "sectionGUID": "",
                            "sectionNumber": "",
                            "sectionName": "",
                            comments: []
                        }

                        //     for (var j = 0; j < self.toc.sections.length; j++) {

                        if (!resp[i].isAppendix) {
                            for (var j = 0; j < resp[i].comments.length; j++) {
                                sectionObj.sectionGUID = resp[i].sectionGUID;
                                sectionObj.sectionNumber = resp[i].sectionNumber;
                                sectionObj.sectionName = resp[i].sectionTitle;
                                if (!resp[i].comments[j].addressed) {
                                    var commObj = {
                                        "Id": "",
                                        "addressed": false,
                                        "commentVal": "",
                                        "addressedVal": "",
                                        "commentedBy": "",
                                        "addressedBy": "",
                                        "date": "",
                                        "addressedDate": ""
                                    }
                                    commObj.Id = resp[i].comments[j].commentGUID;
                                    commObj.addressed = resp[i].comments[j].addressed;
                                    commObj.commentVal = resp[i].comments[j].commentText;
                                    commObj.commentedBy = resp[i].comments[j].createdBy.firstName + ' ' + resp[i].comments[j].createdBy.lastName;
                                    if (resp[i].comments[j].addressed) {
                                        if (resp[i].comments[j].responseComments != null && resp[i].comments[j].responseComments != undefined && resp[i].comments[j].responseComments != "") {
                                            commObj.addressedBy = resp[i].comments[j].responseComments[0].createdBy.firstName + ' ' + resp[i].comments[j].responseComments[0].createdBy.lastName;
                                            commObj.addressedVal = resp[i].comments[j].responseComments[0].commentText;
                                            commObj.addressedDate = resp[i].comments[j].responseComments[0].commentDate;
                                        }

                                    }
                                    // commObj.date = resp[i].comments[j].commentDate;
                                    if (resp[i].comments[j].commentUpdated) {
                                        commObj.date = resp[i].comments[j].updatedDate;
                                    } else {
                                        commObj.date = resp[i].comments[j].commentDate;
                                    }
                                    sectionObj.comments.push(commObj);


                                }
                            }

                            $scope.commentsArr.push(sectionObj);
                            //  break;
                        }
                        // }
                    }

                }
                //code to place comments of selected section on top
                $scope.filterObject = $filter('filter')($scope.commentsArr, {
                    sectionGUID: self.selectedSection.sectionGUID
                })[0];
                if ($scope.filterObject) {
                    var selectedSectionIndex = $scope.commentsArr.indexOf($scope.filterObject);
                    $scope.commentsArr.splice(selectedSectionIndex, 1);
                    $scope.commentsArr.unshift($scope.filterObject);
                }
                //ends

                checkCommentsStatus();
                $timeout(function () {
                    $('[data-toggle="tooltip"]').tooltip();
                });

            }, function (error) {
                console.log("error");
                self.commentsErrorText = error;
                self.commentsErrorStatus = true;

            });
        }

        //check uncheck comments
        angular.forEach($scope.commentsArr, function (item) {

            if (item.comments != undefined && item.comments != null && item.comments != "") {
                angular.forEach(item.comments, function (commObj) {

                    commObj.Selected = self.selectedAll;

                });

            }

        });

    }

    self.sectionChanged = function () {
        localStorage.setItem('commentFilterSelected', self.selSection_Comments);
        $('#divSelAll_write label.active').removeClass('active');
        self.selectAllText = "Check All";
        self.selectedAll = true;
        $scope.commentsArr = [];
        if (self.selSection_Comments == 0) {
            getCommentsByFilter(0);
        } else if (self.selSection_Comments == 1) {
            getCommentsByFilter(1);
        } else if (self.selSection_Comments == 2) {
            getCommentsByFilter(2);
        } else if (self.selSection_Comments == 3) {
            getCommentsByFilter(3);
        }

    }

    self.refreshComments = function () {

        $timeout(function () {
            checkCommentsStatus();
            $('#divSelAll_write label.active').removeClass('active');
            self.selectAllText = "Check All";
            self.selectedAll = true;

            if (self.selSection_Comments == 0) {
                getCommentsBySection();
            } else if (self.selSection_Comments == 1) {
                getCommentsByFilter(1);
            } else if (self.selSection_Comments == 2) {
                getCommentsByFilter(2);
            } else if (self.selSection_Comments == 3) {
                getCommentsByFilter(3);
            }
        });
    }

    self.editAddressComment = function (commentObj) {

        if (commentObj.commentEditState) {
            console.log("edit");
            var editCommentObj = {
                "comment": {
                    "commentGUID": commentObj.Id,
                    "commentText": commentObj.EditCommentVal,
                    "commentUpdated": true
                }
            }



            var promise = ReportAuthoringAPI.add_update_Comments($stateParams.reportGuid, self.selectedSection.sectionGUID, editCommentObj);

            return promise.then(function (resp) {
                if (resp.comment.commentUpdated) {
                    commentObj.date = resp.comment.updatedDate;
                } else {
                    commentObj.date = resp.comment.commentDate;
                }
                commentObj.commentVal = commentObj.EditCommentVal;
                commentObj.commentEditState = false;
            });


        } else {
            console.log("address" + JSON.stringify(commentObj));
            var addressCommentObj = {
                "comment": {
                    "commentGUID": commentObj.Id,
                    "commentResponse": true,
                    "responseComments": [{
                        "commentText": commentObj.addressComment
 }]
                }
            }




            var promise = ReportAuthoringAPI.add_update_Comments($stateParams.reportGuid, self.selectedSection.sectionGUID, addressCommentObj);

            return promise.then(function (resp) {
                var userDetails = JSON.parse(localStorage.getItem('userdetails'));

                if (userDetails) {
                    var userName;
                    for (var i = 0; i < userDetails.length; i++) {
                        if (userDetails[i].key === "USERNAME") {
                            userName = userDetails[i].value;
                            self.userName = userName;
                        }
                    }
                }

                commentObj.addressedBy = self.userName;
                commentObj.addressedDate = resp.comment.responseComments[0].commentDate;
                commentObj.addressedVal = resp.comment.responseComments[0].commentText;

                commentObj.addressState = false;
                commentObj.addressed = true;

                if (self.selSection_Comments == 3 || self.selSection_Comments == 1) {
                    var commLength = 0;
                    for (var i = 0; i < $scope.commentsArr.length; i++) {

                        for (var j = 0; j < $scope.commentsArr[i].comments.length; j++) {
                            if ($scope.commentsArr[i].comments[j].Id == commentObj.Id) {
                                $scope.commentsArr[i].comments.splice(j, 1);

                                break;
                            }
                        }

                        if ($scope.commentsArr[i].comments.length > 0) {
                            commLength = 1;

                        }
                    }

                    if (commLength == 0) {
                        self.commentsErrorText = "No Comments Found";
                        self.commentsErrorStatus = true;
                    }
                }





            });


        }
    }

    self.CloseAll = function () {

        for (var i = 0; i < $scope.commentsArr.length; i++) {
            for (var j = 0; j < $scope.commentsArr[i].comments.length; j++) {

                //comment
                $("#" + $scope.commentsArr[i].comments[j].Id + "-comment").removeClass();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-comment").addClass('collapse');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment").removeClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment-span").removeClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment-span").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-comment").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-comment-span").hide();

                //address
                $("#" + $scope.commentsArr[i].comments[j].Id + "-address").removeClass();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-address").addClass('collapse');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address").removeClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address-span").removeClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address-span").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-address").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-address-span").hide();
            }
        }


    }

    self.OpenAll = function () {

        for (var i = 0; i < $scope.commentsArr.length; i++) {
            for (var j = 0; j < $scope.commentsArr[i].comments.length; j++) {

                //comment
                $("#" + $scope.commentsArr[i].comments[j].Id + "-comment").removeClass();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-comment").addClass('collapse in');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment").addClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment-span").addClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment-span").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-comment").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-comment-span").show();

                //address
                $("#" + $scope.commentsArr[i].comments[j].Id + "-address").removeClass();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-address").addClass('collapse in');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address").addClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address-span").addClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address-span").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-address").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-address-span").show();
            }
        }


    }

    self.setIconComment = function (val, commentId) {
        console.log("class: " + val);
        $("#" + commentId + "-comment").removeClass();
        $("#" + commentId + "-comment").addClass(val);
        if (val == 'collapse') {
            $("#" + commentId + "-plus-comment").removeClass('ng-hide');
            $("#" + commentId + "-plus-comment-span").removeClass('ng-hide');
            $("#" + commentId + "-plus-comment").show();
            $("#" + commentId + "-plus-comment-span").show();
            $("#" + commentId + "-minus-comment").hide();
            $("#" + commentId + "-minus-comment-span").hide();

        } else {
            $("#" + commentId + "-plus-comment").hide();
            $("#" + commentId + "-plus-comment-span").hide();
            $("#" + commentId + "-minus-comment").show();
            $("#" + commentId + "-minus-comment-span").show();
        }
        //self.expanddivComment = val;
    }

    self.setIconAddress = function (val, commentId) {
        $("#" + commentId + "-address").removeClass();
        $("#" + commentId + "-address").addClass(val);
        if (val == 'collapse') {
            $("#" + commentId + "-plus-address").removeClass('ng-hide');
            $("#" + commentId + "-plus-address-span").removeClass('ng-hide');
            $("#" + commentId + "-plus-address").show();
            $("#" + commentId + "-plus-address-span").show();
            $("#" + commentId + "-minus-address").hide();
            $("#" + commentId + "-minus-address-span").hide();

        } else {
            $("#" + commentId + "-plus-address").hide();
            $("#" + commentId + "-plus-address-span").hide();
            $("#" + commentId + "-minus-address").show();
            $("#" + commentId + "-minus-address-span").show();
        }
    }

    function setSectionFlagValue() {
        var isAddressed = 0;

        console.log(self.sectionGUIDList);
        for (var i = 0; i < $scope.commentsArr.length; i++) {
            for (var j = 0; j < self.sectionGUIDList.length; j++) {
                if (self.sectionGUIDList[j].sectionGUID.toLowerCase() == $scope.commentsArr[i].sectionGUID.toLowerCase()) {
                    if ($scope.commentsArr[i].comments.length > 0) {
                        self.sectionGUIDList[j].hasComments = true;
                    } else {
                        self.sectionGUIDList[j].hasComments = false;
                    }
                    for (var k = 0; k < $scope.commentsArr[i].comments.length; k++) {
                        if (!$scope.commentsArr[i].comments[k].addressed) {
                            isAddressed = 1;
                            break;
                        }
                    }
                    if (isAddressed == 1) {
                        self.sectionGUIDList[j].isCommentsAddressed = false;
                    } else {
                        self.sectionGUIDList[j].isCommentsAddressed = true;
                    }
                }


            }
        }


        //*************************************************************************************
        // if (self.selSection_Comments != 0 && self.selSection_Comments != 1) {
        //            for (var i = 0; i < $scope.commentsArr.length; i++) {
        //                if ($scope.commentsArr[i].comments.length > 0) {
        //                    self.selectedSection.hasComments = true;
        //                } else {
        //                    self.selectedSection.hasComments = false;
        //                }
        //                for (var j = 0; j < $scope.commentsArr[i].comments.length; j++) {
        //                    if (!$scope.commentsArr[i].comments[j].addressed) {
        //                        isAddressed = 1;
        //                    }
        //                }
        //            }
        //            if (isAddressed == 1) {
        //                self.selectedSection.isCommentsAddressed = false;
        //
        //            } else {
        //                self.selectedSection.isCommentsAddressed = true;
        //            }
        // } 
        //else {}




    }

    self.editComment = function (commObj) {
            commObj.EditCommentVal = commObj.commentVal;

        }
        /* comments tab ends */

    self.removeQuerystringParameters = function () {

        if ($location.$$search.sectionGuid) {
            delete $location.$$search.sectionGuid;
            $location.$$compose();
        }
    }

    /* history tab starts here */
    self.getHistoryForSections = function () {
        $scope.historyArr = [];
        ReportAuthoringAPI.putHistoryArray($scope.historyArr);
        self.showHistoryMsg = false;
        var promise = ReportAuthoringAPI.getHistory(self.reportId, self.selectedSection.sectionGUID);
        self.waitingHistoryResources.promise = promise;
        console.log(promise);
        // self.showHistoryMsg = false;
        return promise.then(function (resp) {
            self.showHistoryMsg = false;
            $scope.historyArr = [];
            if (resp.history.length == 0)
                self.showHistoryMsg = true;
            else
                self.showHistoryMsg = false;

            for (var i = 0; i < resp.history.length; i++) {

                // if (self.selectedSection.sectionGUID == resp.history[i].sectionGUID) {
                var secID = "6fbceca3-521a-43e5-9c45-ed1794b6e6f1";
                // if (secID == resp.history[i].section.sectionGUID) {
                //  $scope.historyArr = resp.history;
                $scope.historyArr.push(resp.history[i]);
                //console.log($scope.historyArr);
                ReportAuthoringAPI.putHistoryArray($scope.historyArr);

                //}
            }

            console.log(self.selectedSection.sectionGUID);
            ReportAuthoringAPI.managePanelHeight();

        }).catch(function (resp) {
            if (resp.history == undefined)
                self.showHistoryMsg = true;
        });
    }

    self.closeAlertHeight = function () {
            $("#btnSaveNewComments").removeAttr('disabled');
            ReportAuthoringAPI.managePanelHeight();
        }
        /* history tab ends */

    self.otherViewModeMsg = "All Sections Mode";

    this.switchViewMode = function () {
        self.showAllSections = !self.showAllSections;
        setGIFlag();
        if (!self.showAllSections) {
            //filter and select first section while moving from all-section-mode to single-section-mode
            self.selectedSection = self.resp.sections[0];
            scrollUp(self.selectedSection.sectionID);
            scrollToLeftSection(self.selectedSection.sectionID);
            setGIFlag();
            self.otherViewModeMsg = "All Sections Mode";
        } else {
            self.otherViewModeMsg = "Single Section Mode";
            scrollToSectionAfterNavigation(self.selectedSection.sectionID);
            /*$timeout(function () {                                
                //scrollToSection(self.selectedSection.sectionID);
                //scrollToLeftSection(self.selectedSection.sectionID);
            }, 0, false);*/
        }
    }

    var findWhat, replaceWith;

    function setGIFlag() {
        if (self.selectedSection.isGeneralInfo || self.showAllSections)
            self.isGISelected = true;
        else
            self.isGISelected = false;
    }

    self.editAllTables = function (isEditAllTables) {
        $scope.$broadcast("editAllTables", isEditAllTables);
        //$rootScope.$broadcast("custom.event");
    }

    this.viewMode = function (SelectedMode) {
        //var historyMode = self.showAllSections;                
        if (SelectedMode == 'all') {
            if (!self.showAllSections) {
                var confirmAllSections = confirm('Your report will need to be in "All Sections Mode" with all tables in edit mode to run find and replace on your full report.\n\nWould you like to switch to these modes now?');
                if (confirmAllSections) {
                    self.switchViewMode();
                }
                if (!confirmAllSections) {
                    self.showMainButtions = true;
                }
            }
        }

        if (SelectedMode == 'single') {
            self.showAllSections = false;
            $timeout(function () {
                FindReplace.displayFindAndReplacePanelActiveSection(self.selectedSection.sectionID);
            }, 200);
        } else {
            $timeout(function () {
                FindReplace.displayFindAndReplacePanelAllSections();
            }, 200);
        }
    }


    String.prototype.replaceAll = function (search, replacement) {
        var reg = new RegExp(search, 'ig');
        return this.replace(reg, replacement);
    };


    this.replaceAll = function () {

        $timeout(function () {
            FindReplace.replaceAll(self.findWhat);
        }, 200);
    }

    String.prototype.replaceAllOptions = function (_f, _r, _c) {

        var o = this.toString();
        var r = '';
        var s = o;
        var b = 0;
        var e = -1;
        if (_c) {
            _f = _f.toLowerCase();
            s = o.toLowerCase();
        }

        while ((e = s.indexOf(_f)) > -1) {
            r += o.substring(b, b + e) + _r;
            s = s.substring(e + _f.length, s.length);
            b += e + _f.length;
            countWords++;
        }

        // Add Leftover
        if (s.length > 0) {
            r += o.substring(o.length - s.length, o.length);
        }

        // Return New String
        return r;
    };

    this.saveReplacedText = function () {

        window.localStorage.setItem('isSpellcheckRunning', false);

        for (var instance in CKEDITOR.instances) {
            var currentInstance = instance;
            var oEditor = CKEDITOR.instances[currentInstance];
            oEditor.focusManager.focus();
            oEditor.focusManager.blur();
        }
    }

    function beforeUnload(e) {
        for (var instance in CKEDITOR.instances) {
            var currentInstance = instance;
            var oEditor = CKEDITOR.instances[currentInstance];
            if (oEditor.checkDirty()) {
                return e.returnValue = "You will lose the changes made in the editor.";
            }
        }
    }

    if (window.addEventListener) window.addEventListener('beforeunload', beforeUnload, false);
    else window.attachEvent('onbeforeunload', beforeUnload);

    this.clearOnFindReplace = function () {
        clearReplaceInput();
        window.localStorage.setItem('isSpellcheckRunning', false);
    }

    function clearReplaceInput() {
        self.findWhat = String.empty;
        self.replaceWith = String.empty;
        self.matchCase = false;
        self.findWholeWordsOnly = false;
    }

    self.clearOldFindReplace = function () {
        var currentFindWhat = self.findWhat;
        if (findWhat != self.currentFindWhat) {
            oldKeys = [];
            FindCheckEndCounter = 0;
            visitedSection = [];
        }
    }


    self.findNext = function () {
        $timeout(function () {
            FindReplace.findNext(self.findWhat);
        }, 200);

    }

    self.resumeFindReplace = function () {
        $timeout(function () {
            FindReplace.resume();
        }, 200);

    }

    self.ReplaceFindNext = function () {
        $timeout(function () {
            FindReplace.replaceAndFindNext(self.findWhat);
        }, 200);
    }



    function isInArray(value, array) {
        return array.indexOf(value) > -1;
    }

    this.sectionVisible = function (section) {
        if (self.selectedSection)
            return self.showAllSections || self.selectedSection.sectionID == section.sectionID;
        else return self.showAllSections;
        //self.obj.selectedSection == section.SectionID;
    }

    var scrollToSection = function (sectionId, isDirectionalNavigation) {
        var name = 'section_' + sectionId;
        var elementRight = document.getElementById(name);
        //$scope.$broadcast('set-skip-handle-scroll-top-condition-false');
        //var angularEl = angular.element(element);
        /*if (isDirectionalNavigation)
            $scope.$broadcast('set-skip-handle-scroll-top-condition-true');
        else
            $scope.$broadcast('set-skip-handle-scroll-top-condition-false');*/
        if (elementRight) {
            elementRight.scrollIntoView();
        }
    }

    var scrollToLeftSection = function (sectionId, isDirectionalNavigation) {

        var leftContentName = 'tocSection_' + sectionId;
        var leftContentElement = document.getElementById(leftContentName);

        var leftContentId = '#tocSection_' + sectionId;

        if (leftContentElement) {
            var topOffset = $('.scrollDiv').offset().top;
            var elementOffset = $(leftContentId).offset().top;
            if (self.isChrome) {
                if (leftContentElement.scrollIntoViewIfNeeded)
                    leftContentElement.scrollIntoViewIfNeeded();
                else leftContentElement.scrollIntoView();
            } else {
                //other than chrome calulate offset to avoid unnecessary scroll
                if (elementOffset - topOffset < 0)
                    leftContentElement.scrollIntoView();
                else {
                    if ($('.scrollDiv').height() > $(leftContentId).offset().top - $('.scrollDiv').offset().top) {
                        //console.log("correct")
                    } else {
                        console.log("incorrect")
                        leftContentElement.scrollIntoView();
                    }
                }
                //$window.scrollBy(0,-70);
            }
        }
    }

    var scrollToSectionAfterNavigation = function (sectionId) {
        localStorage.setItem('handleAfterScroll', false);
        var name = 'section_' + sectionId;
        var elementRight = document.getElementById(name);

        /*if(self.showAllSections)
            $scope.$broadcast('set-skip-handle-scroll-top-condition-true');*/

        var leftContentName = 'tocSection_' + sectionId;
        var leftContentElement = document.getElementById(leftContentName);
        if (leftContentElement) {
            //left section scroll for chrome or safari
            if (self.isChrome || self.isSafari) {
                leftContentElement.scrollIntoViewIfNeeded();
            } else {
                // for other browsers
                leftContentElement.scrollIntoView();
            }
        }

        //right section scroll
        $timeout(function () {
            //elementRight.scrollIntoView();
            $location.hash(name);
            $anchorScroll();
            //The below is to avoid scrolling again after navigation.
            $timeout(function () {
                localStorage.setItem('handleAfterScroll', true);
            }, 200)
        });
    }

    this.sectionClicked = function (section, avoidScroll) {
        sectionIndex = self.sectionIdList.indexOf(section.sectionID);
        self.isGISelected = true;
        self.nextDisabled = false;
        self.prevDisabled = false;

        if (!section.isGeneralInfo && !self.showAllSections)
            self.isGISelected = false;
        else if (section.isGeneralInfo)
            self.isGISelected = true;

        if (sectionIndex == (self.sectionIdList.length - 1))
            self.nextDisabled = true;
        if (self.sectionIdList[0] == section.sectionID)
            self.prevDisabled = true;

        if (section.isGeneralInfo) {
            self.isGISelected = true;
            //self.selectedSection = section;
        }
        var sectionId = section.sectionID;
        if (self.showAllSections && !avoidScroll) {
            localStorage.setItem('handleAfterScroll', false);
            $timeout(function () {
                $location.hash('section_' + sectionId);
                $anchorScroll();
                //The below is to avoid scrolling again after section click.
                $timeout(function () {
                    localStorage.setItem('handleAfterScroll', true);
                }, 200)
            })


        } else if (!self.showAllSections) {
            scrollUp(sectionId);
        }
        self.obj.selectedSection = sectionId;
        self.selectedSection = section;

        localStorage.setItem("selectedSection", section.sectionGUID);
        loadSectionsOnScroll();
    }

    function loadSectionsOnScroll() {
        if ($scope.reportAuthoringWriteSelected == "Library")
            self.selectedLibraryChanged();

        if ($scope.reportAuthoringWriteSelected == "History")
            self.getHistoryForSections();

        if ($scope.reportAuthoringWriteSelected == "Comments")
            self.getReportComments();
    }

    $scope.$on('set-selected-section', function (event, args) {
        if (args.sectionId) {
            var section = self.resp.sections.filter(function (item) {
                return item.sectionID == args.sectionId;
            })
            if (section.length) {
                self.selectedSection = section[0];
                loadSectionsOnScroll();
            }

            event.stopPropagation();
            scrollToLeftSection(args.sectionId);
        }
    })

    this.flagClicked = function (section) {
        if (section.hasComments) {
            $('#li_toc').removeClass('active');
            $('#li_comments').addClass('active');
            $scope.reportAuthoringWriteSelected = 'Comments';
            self.commentsErrorStatus = false;
            self.commentsErrorText = "";
            self.checkComments = false;
            self.newComm = false;
            self.serviceResponseAlert = true;
            self.selectedSection = section;
            var commentFilterSelected = localStorage.getItem('commentFilterSelected');
            if (commentFilterSelected) {
                self.selSection_Comments = commentFilterSelected;
                getCommentsByFilter(commentFilterSelected, section);

            } else {
                self.selSection_Comments = 0;
                getCommentsBySection(section);
            }

        }
    }

    var scrollUp = function (sectionId) {
        var elementId = 'section_' + sectionId;
        $timeout(function () {
            $location.hash(elementId);
            $anchorScroll();
            //$('html,body').animate({scrollTop: $("#"+elementId).offset().top},'slow');
        });
    }

    $interval(function () {

        $scope.historyArr = [];
        // self.showHistoryMsg = false;
        $scope.historyArr = ReportAuthoringAPI.getHistoryArray();
        /*if (ReportAuthoringAPI.getHistoryArray().length == 0)
            self.showHistoryMsg = true;
        else
            self.showHistoryMsg = false;*/
        self.languages = $filter("selectableLanguages")(ReportAuthoringAPI.getLanguageArray());
        /* if (ReportAuthoringAPI.getLanguageArray().length == 0)
             self.showLanguageMsg = false;
         else
             self.showLanguageMsg = true;*/



    }, 1000, false);
    /*
        function refreshHistoryOnScroll(sectionGUID) {
            var promise = ReportAuthoringAPI.getHistory(self.reportId, sectionGUID);
            self.waitingProcessResources.promise = promise;
            $scope.historyArr = [];
            self.showHistoryMsg = false;

            return promise.then(function (resp) {
                self.showHistoryMsg = true;
                for (var i = 0; i < resp.history.length; i++) {


                    var secID = '6fbceca3-521a-43e5-9c45-ed1794b6e6f1';

                    $scope.historyArr.push(resp.history[i]);
                    ReportAuthoringAPI.putHistoryArray($scope.historyArr);

                }
                console.log(self.selectedSection.sectionGUID);



            });


        }*/
    //$scope.obj = this.obj;
    //this.sectionClicked = function (section) {
    //    this.obj.selectedSection = section.contentValues.section1Title;
    //    // console.log(this.selectedSection);
    //    //console.log(section);
    //}


    $scope.uploadSpreadsheet = function () {
        var modalInstance = $modal.open({
            templateUrl: 'UploadSpreadsheet.html',
            scope: $scope,
            controller: UploadSpreadsheetController,
            size: 1

        })
    };

    var UploadSpreadsheetController = function ($scope, $modalInstance) {
        $scope.Cancel = function () {

            $modalInstance.close()
        }

    }


    // library-language methods
    self.companyId = BASEURL.companyGUID;

    //self.defaultLibraryID = "6b75d2a8-190f-430f-8dc0-ec7a77b05769"; //report.languageLibraryID;




    self.showDots = function (language) {
        if (language)
            return false;
        else
            return true;
    }

    self.libraries = [];

    self.getLibraries = function () {
        var companyId = self.companyId;
        var promise = getLibraries_withPromise(companyId);
        promise.then(function (libraries) {
            self.libraries = libraries;
            // load language of default language library
            self.selectedLibraryChanged();
        });
    };

    self.selectedLibraryChanged = function () {

        var libraryId = self.selectedLibraryID;
        ReportAuthoringAPI.putLibraryID(self.selectedLibraryID);
        var sectionId = self.selectedSection.sectionGUID;
        if (libraryId != null)
            loadLanguages(libraryId, sectionId, libraryId == self.defaultLibraryID);
    };

    function loadLanguages(libraryId, sectionId, isDefault) {
        var promise = getLanguages(libraryId, sectionId);
        promise.then(function (languages) {

            /*if (languages.length == 0)
                self.showLanguageMsg = false;
            else
                self.showLanguageMsg = true;*/
            // 1. instructions
            // 1.1 instructions to appear above narratives
            var filterResult = isDefault ? $filter("filter")(self.resp.sections, {
                sectionID: self.selectedSection.sectionID
            }, true) : null;
            if (filterResult && filterResult.length) {
                var linkedSectionObj = filterResult[0];
                linkedSectionObj.contentValues = $filter("filter")(languages, {
                    category: "Instructions",
                    showInPage: true
                });
            }

            // 2. language options to appear as selectable
            self.languages = $filter("selectableLanguages")(languages);

            if (self.languages == null || self.languages.length < 1)
                self.showLanguageMsg = true;
            else
                self.showLanguageMsg = false;


            if (self.languages)
                self.repeatData = self.resp.sections.map(function (value, index) {
                    return {
                        data: value,
                        value: self.languages[index]
                    }
                });
        });

    }

    function getLanguages(libraryId, sectionId) {
        var promise = getLanguageBySection_withPromise(libraryId, sectionId);
        self.waitingLibraryResources.promise = promise;
        return promise.then(function (languages) {

            return languages;
        });
    }

    function getLibraries_withPromise(companyId, reportGUID) {
        var promise = DefaultLanguageLibraryAPI.getDLLList(companyId);
        return promise.then(function (dllData) {
            return dllData.libraries;
        });
    }

    function getLanguageBySection_withPromise(libraryId, sectionId) {
        if (libraryId != null) {
            var promise = DefaultLanguageLibraryAPI.getLanguageBySection(libraryId, sectionId);
            return promise.then(function (languages) {
                ReportAuthoringAPI.putLanguageArray(languages);
                return languages;
            })
        }

    }


    /* self.editAllTable = function (sectionId) {
        var htmlTables = $('#divsection_13 .table-responsive table');
        $.each(htmlTables, function (table) {
            $.each($(table).find('td'), function (tablecell) {
$(tablecell).find()
            });
        })
    }*/
    self.getFlag = function (index) {
        //return true;
        //var name = "#divHeightChild"+index;
        //var height = $("#divHeightChild"+index).prev().children().height();
        //var height = $("#divHeightChild"+index).parent().height();
        var totalheight = 0;
        //var length = $("#divHeightChild"+index).prev().children().length;
        var i = 0;
        for (i; i < $("#divHeightChild" + index).prev().children().length; i++) {
            totalheight += $("#divHeightChild" + index).prev().children().eq(i).height();
            //alert(totalheight);
        }

        if (totalheight >= 57)
            return true;
        else
            return false;
    }
    self.renderHtml = function (html_asText) {
        var renderedHtml = $sce.trustAsHtml(html_asText);
        return renderedHtml;
    }
    PNotify.prototype.options.styling = "fontawesome";

    var searchObject = $location.search();

    $scope.selectAll = function () {

        angular.forEach($scope.VRContents, function (obj) {
            obj.isKeywordExist = true;
        });
    };

    $scope.clearAll = function () {
        angular.forEach($scope.VRContents, function (obj) {
            obj.isKeywordExist = false;
        });
    };

    $scope.openVariableReplacer = function () {

        var reportGuid = $stateParams.reportGuid
        var promise = VariableReplacerAPI.getVariableReplacerKeywords(reportGuid);

        promise.then(function (resp) {

            //$scope.VRInput = resp;  

            var VRContents = [];

            if (resp !== 'undefined') {

                for (var index = 0; index < resp.length; index++) {
                    var element = {};
                    element.keywordname = resp[index].name;
                    element.keywordvalue = resp[index].value;

                    if (resp[index].sections.length > 0) {
                        element.isKeywordExist = true;
                        element.sectionTitle = resp[index].sections[0].sectionData.contentValues.sectionTitle00;
                        element.sectionData = resp[index].sections[0].sectionData.contentValues.ckEditData.div02;

                    } else {
                        element.isKeywordExist = false;
                    }

                    VRContents.push(element);
                    element = {};
                }

                $scope.VRContents = VRContents;


            }

        }, function (error) {
            console.log("error");


        });

        var modalInstance = $modal.open({
            templateUrl: 'app/modules/ReportAuthoring/views/VariableReplacer.html',
            scope: $scope,
            controller: VariableReplacerCtrl,
            size: 'lg'
        });
    }

    $scope.isEmptyObject = function (obj) {
        return JSON.stringify(obj) === '{}';
    }


    var VariableReplacerCtrl = function ($scope, $modalInstance) {

        $scope.CancelVariableReplacer = function () {
            $modalInstance.close();
        }

        $scope.ReplaceVariables = function () {

            for (var index = 0; index < $scope.VRContents.length; index++) {
                var variableName = $scope.VRContents[index].keywordname;
                var replaceWhich = $scope.VRContents[index].keywordvalue;
                var isKeywordChecked = $scope.VRContents[index].isKeywordExist;
                if (isKeywordChecked) {
                    for (var instance in CKEDITOR.instances) {
                        var currentInstance = instance;
                        var oEditor = CKEDITOR.instances[currentInstance];
                        var edata = oEditor.getData();
                        var Content = edata;
                        oEditor.setData(Content.replaceAllOptions('{' + variableName + '}', replaceWhich, false));
                    }
                }
            }

            //SAVE CONTENT


            //SAVE VARIABLE VALUES

            var variables = [];
            for (var index = 0; index < $scope.VRContents.length; index++) {
                variables.push({
                    'name': $scope.VRContents[index].keywordname,
                    'value': $scope.VRContents[index].keywordvalue
                });
            }

            var reportGuid = $stateParams.reportGuid
            VariableReplacerAPI.updateKeywordsValue(reportGuid, variables);

            $modalInstance.close();
        }

    }

}]);
angular.module("ReportAuthoring").controller("EDRPortfolioOrderController", ["$scope", "$modal", "$state", "$sce", "GeneralInformationAPI", "edrOrderAPI", "BASEURL", "projectDashboardOperations", "portfolioData", "edrPackages", "accountMgmtAPI", function ($scope, $modal, $state, $sce, GeneralInformationAPI, edrOrderAPI, BASEURL, projectDashboardOperations, portfolioData, edrPackages, accountMgmtAPI) {

    var self = this;

    self.userMsgAlertClass = "";
    self.userMsg = "";
    self.isDeliveryTypeXML = false;
    self.projectGUID = $state.params.projectGuid;
    self.portfolioData = angular.copy(portfolioData);
    self.edrPackages = edrPackages;

    $scope.delay = 0;
    $scope.minDuration = 0;
    $scope.message = 'Please Wait...';
    $scope.backdrop = true;

    function getUserDetails() {
        accountMgmtAPI.getUser(BASEURL.accountGUID_GI).then(function (userDetails) {
            var user = userDetails.users[0];
            self.user = {
                name: user.firstName + " " + user.lastName,
                email: user.email,
                phone: user.directPhone
            }
        }, function (error) {
            self.userMsgAlertClass = "alert-danger";
            self.userMsg = "Error: Problem in getting user details. " + error;
        });
    }

    function init() {
        getUserDetails();
    }

    init();

    self.openEdrCredentialsModal = function () {
        $modal.open({
            templateUrl: 'orderDBReport.html',
            scope: $scope,
            controller: 'OrderDatabaseReportsController as OrderDbReportsCtrl',
            backdrop: 'static',
            resolve: {
                siteDetails: function () {
                    return false;
                },
                userDetails: function (accountMgmtAPI, BASEURL) {
                    return accountMgmtAPI.getUser(BASEURL.accountGUID_GI).then(function (resp) {
                        return resp;
                    });
                },
                invokedFrom: function () {
                    return "portfolioOrder";
                }
            }
        });
    }

    self.checkAll = function () {
        angular.forEach(self.portfolioData.reports, function (report) {
            report.selected = true;
        });
    };

    /*self.checkAllExact = function () {
        angular.forEach(self.portfolioData.reports, function (report) {
            report.selected = true;
        });
    };*/

    self.uncheckAll = function () {
        angular.forEach(self.portfolioData.reports, function (report) {
            report.selected = false;
        });
    };

    self.copyToOthers = function (type, value) {
        if (!angular.isArray(self.portfolioData.reports)) return;

        angular.forEach(self.portfolioData.reports, function (item, index) {
            self.portfolioData.reports[index][type] = value;
        });
    };

    self.createPortfolioOrders = function () {
        var orderObj = {};
        var orderArr = [];
        if (self.portfolioData.reports != undefined) {
            for (var i = 0; i < self.portfolioData.reports.length; i++) {
                orderObj = {};
                if ('selected' in self.portfolioData.reports[i]) {
                    if (self.portfolioData.reports[i].portfolioProductCode) {
                        if (self.portfolioData.reports[i].searchDistanceSetID) {
                            orderObj = {
                                "edrAccountNumber": self.edrAccNo,
                                "edrPassword": self.edrPassword,
                                "contactName": self.user.name,
                                "contactEmail": self.user.email,
                                "contactPhone": self.user.phone,
                                "reportGuid": self.portfolioData.reports[i].reportGUID,
                                "poNumber": self.portfolioData.reports[i].propertyNumber,
                                "projectNumber": self.portfolioData.reports[i].projectNumber,
                                "portfolioProductCode": self.portfolioData.reports[i].portfolioProductCode,
                                "optionalHistoricalProduct": "",
                                "includeFieldCheck": parseInt(self.portfolioData.reports[i].fieldChk),
                                "searchDistanceSetID": parseInt(self.portfolioData.reports[i].searchDistanceSetID),
                                "deliveryType": (self.isDeliveryTypeXML) ? "XML" : "EMAIL",
                                "notificationEmails": self.portfolioData.reports[i].emailNotificationsTo ? self.portfolioData.reports[i].emailNotificationsTo.replace(/ /g, '') : "",
                                "comments": self.portfolioData.reports[i].siteComments
                            }
                            orderArr.push(orderObj);
                        } else {
                            self.userMsgAlertClass = "alert-danger";
                            self.userMsg = "At least one site does not have a <strong>Search Distance</strong> selected. You must enter a search distance for every site in the order. You can use the arrow icon to fill and entry into the rest of the sites.";
                            return;
                        }
                    } else {
                        self.userMsgAlertClass = "alert-danger";
                        self.userMsg = "At least one site does not have an <strong>EDR Package</strong> selected. You must enter an EDR Package for every site in the order. You can use the arrow icon to fill an entry into the rest of the sites.";
                        return;
                    }
                }
            }
            var portfolioOrderData = {
                "portfolioOrder": {
                    "orders": orderArr
                }
            }

            if (orderArr.length) {
                edrOrderAPI.createPortfolioOrder(portfolioOrderData).then(function () {
                        self.userMsgAlertClass = "alert-success";
                        self.userMsg = "Order(s) successfully placed to EDR.";
                        //or Redirect to differnt page to track order status
                    }),
                    function (error) {
                        self.userMsgAlertClass = "alert-danger";
                        self.userMsg = "Error: Failed to place your orders. " + error;
                    };
            } else {
                self.userMsgAlertClass = "alert-danger";
                self.userMsg = "Please check the site you want to include in your EDR order."
            }
        }
    }

    self.mapClick = function (report) {
        var modalInstance = $modal.open({
            templateUrl: 'map.html',
            scope: $scope,
            controller: mapController,
            size: 'lg',
            windowClass: 'app-modal-window',
            resolve: {
                parameters: function () {
                    return report;
                }
            }
        });
    }

    var mapController = function ($scope, $modalInstance, parameters) {
        $scope.geocodeObj = {
            reportGUID: parameters.reportGUID,
            address: parameters.address,
            city: parameters.city,
            state: parameters.state,
            zipCode: parameters.zipCode,
            latitude: parameters.latitude,
            longitude: parameters.longitude
        };

        $scope.CancelDelete = function () {
            $modalInstance.close();
        }

        $scope.geocodeClick = function () {
            GeneralInformationAPI.getGeoCode($scope.geocodeObj.address, $scope.geocodeObj.city, $scope.geocodeObj.state, $scope.geocodeObj.zipCode).then(function (resp) {
                $scope.geocodeObj.latitude = resp.addressResults.addresses[0].latitude;
                $scope.geocodeObj.longitude = resp.addressResults.addresses[0].longitude;
            });
        }

        $scope.saveValues = function () {
            for (i = 0; i < self.portfolioData.reports.length; i++) {
                if (self.portfolioData.reports[i].reportGUID == $scope.geocodeObj.reportGUID) {
                    self.portfolioData.reports[i].address = $scope.geocodeObj.address;
                    self.portfolioData.reports[i].city = $scope.geocodeObj.city;
                    self.portfolioData.reports[i].state = $scope.geocodeObj.state;
                    self.portfolioData.reports[i].zipCode = $scope.geocodeObj.zipCode;
                    self.portfolioData.reports[i].latitude = $scope.geocodeObj.latitude;
                    self.portfolioData.reports[i].longitude = $scope.geocodeObj.longitude;
                    $modalInstance.close();
                }
            }
        }
    }

}]);;
angular.module('ReportAuthoring').controller('ReportOutputPDFConvertController', ['AppendixAPI', 'FileUploader', '$modal', '$timeout', '$scope', 'ReportAuthoringAPI', 'AppendixTools', '$state', 'ReportOutputService', '$stateParams', '$window', function (AppendixAPI, FileUploader, $modal, $timeout, $scope, ReportAuthoringAPI, AppendixTools, $state, ReportOutputService, $stateParams, $window) {
    var self = this;

    self.reportGuid = $stateParams.reportGuid;
    self.sectionid = 123;
    self.stack_bottomright = $scope.stack_bottomright;

    self.GeneratePDF = function (type) {
        createReportGenerationRequest(type);
    }

    function createReportGenerationRequest(type) {
        var reqObj = getCreateReportGenerationRequestObj(type);
        ReportOutputService.createReportGenerationRequest(self.reportGuid, reqObj).then(function (result) {
            msg = 'Failed to create request for report generation.';
            if (result.reportGeneration && result.reportGeneration.constructedDocumentGUID) {
                console.log('ReportGenerationRequest created...!');
                getConstructedDocument(result.reportGeneration.constructedDocumentGUID);
            } else {
                var type = 'error';
                var title = 'Error';
                if (result.message)
                    msg = result.message.userMessage;
                showPNotifyMessage(title, msg, type);
            }
        }, function (error) {
            var type = 'error';
            var title = 'Error';
            msg = 'Failed to create request for report generation.';
            showPNotifyMessage(title, msg, type);
        })
    }

    function getCreateReportGenerationRequestObj(type, sectionGuid) {
        //type = "FullPDF",
        //includedSections not yet implemented both server side and UI side(Harcoded but not in use.)
        return obj = {
            "reportGeneration": {
                "generationType": "ExecutiveSummary",
                "includedSections": [
                    {
                        "sectionGUID": "A0F5E294-B497-4C16-8FA4-526C9413530F",
                        "orientation": "portrait"
                    }
                ],
                "reorderLetteringOfAppendices": true
            }
        }
    }

    function getConstructedDocument(docGuid) {

        var promise = ReportOutputService.getConstructedDocument(docGuid);
        promise.then(function (response) {
            if (response.constructedDocument) {
                if (response.constructedDocument.status && response.constructedDocument.status.toLowerCase() == 'processing') {
                    $timeout(function () {
                        getConstructedDocument(docGuid);
                    }, 5000)
                } else {
                    console.log('document constructed...!');
                    if (response.constructedDocument.documentURL)
                    //$window.open(response.constructedDocument.documentURL,'_blank')
                        getGeneratedPDF(response.constructedDocument.constructedDocumentGUID);
                }
            } else {
                msg = 'Request failed to get document.';
                var type = 'error';
                var title = 'Error';
                if (response.message)
                    msg = result.message.userMessage;
                showPNotifyMessage(title, msg, type);
            }
            //handle error here
        }, function (error) {
            msg = 'Request failed to get document.';
            var type = 'error';
            var title = 'Error';
            if (response.message)
                msg = result.message.userMessage;
            showPNotifyMessage(title, msg, type);
        })

    }

    function getGeneratedPDF(coreFileGuid) {
        ReportOutputService.getGeneratedDocument(coreFileGuid);
        /*promise.then(function(resp){
            //$window.open(resp.outputDocument, '_blank');
            console.log('gggjjj');
        },function(error){  
            showPNotifyMessage('Error','Error in getting document.','error');
        })*/
    }

    function showPNotifyMessage(title, text, type) {
        new PNotify({
            title: title,
            text: text,
            type: type,
            addclass: "stack-bottomright",
            stack: self.stack_bottomright
        });
    }

}]);; // appendix tool controller 
angular.module('ReportAuthoring').controller('ManageCoverContactsController', ['$scope', '$modalInstance', '$rootScope', 'GeneralInformationAPI', 'BASEURL', '$location', function ($scope, $modalInstance, $rootScope, GeneralInformationAPI, BASEURL, $location) {
    var self = this;
    self.errorMsg = "";
    self.successMsg = "";
    self.isEditContact = false;
    self.contactsArr = [];
    //var qs = $location.search();
    var reportGuid = $location.search().reportGuid;
    var GIObj = {
        "reportID": 12,
        "coverContacts": []
    };
    var companyGUID = BASEURL.companyGUID;
    GeneralInformationAPI.get(reportGuid).then(function (resp) {
        self.giData = resp.generalInformation;
        self.contactsArr = resp.generalInformation.coverContacts;
    });

    self.CancelDelete = function () {
        $modalInstance.close();
    }

    self.addContact = function (form) {
        var objGI = {
            "reportID": 12,
            "dataFields": [],
            "coverContacts": []
        }
        self.errorMsg = "";
        self.successMsg = "";
        var contactObj = {
            "clientFax": "",
            "clientZip": "",
            "clientCity": "",
            "orderIndex": "",
            "clientEmail": "",
            "clientPhone": "",
            "clientState": "",
            "contactGUID": "",
            "clientAddress": "",
            "clientCompany": "",
            "clientContact": ""
        };
        if (!form || form.$invalid) {
            var formElem = document.getElementsByName(form.$name);
            angular.element(formElem).find(':input').trigger('blur');
            return;
        } else {
            contactObj.clientCompany = self.clientCompany != undefined && self.clientCompany != "" && self.clientCompany != "" ? self.clientCompany : "";
            contactObj.clientContact = self.clientContact != undefined && self.clientContact != "" && self.clientContact != "" ? self.clientContact : "";
            contactObj.clientAddress = self.clientAddress != undefined && self.clientAddress != "" && self.clientAddress != "" ? self.clientAddress : "";
            contactObj.clientCity = self.clientCity != undefined && self.clientCity != "" && self.clientCity != "" ? self.clientCity : "";
            contactObj.clientState = self.clientState != undefined && self.clientState != "" && self.clientState != "" ? self.clientState : "";
            contactObj.clientZip = self.clientZip != undefined && self.clientZip != "" && self.clientZip != "" ? self.clientZip : "";
            contactObj.clientPhone = self.clientPhone != undefined && self.clientPhone != "" && self.clientPhone != "" ? self.clientPhone : "";
            contactObj.clientFax = self.clientFax != undefined && self.clientFax != "" && self.clientFax != "" ? self.clientFax : "";
            contactObj.clientEmail = self.clientEmail != undefined && self.clientEmail != "" && self.clientEmail != "" ? self.clientEmail : "";

            GIObj.coverContacts.push(contactObj);
            GeneralInformationAPI.putGI(GIObj, reportGuid).then(function (resp) {
                console.log("manage cover contact added response:" + JSON.stringify(resp));
                self.contactsArr.push(contactObj);
                self.successMsg = "Contact added successfully";
                clearFields();
            });
        }
    }

    self.deleteCoverContact = function (contactGUID) {
        self.isEditContact = false;
        self.errorMsg = "";
        self.successMsg = "";
        for (var i = 0; i < self.contactsArr.length; i++) {
            if (self.contactsArr[i].contactGUID == contactGUID) {
                self.contactsArr.splice(i, 1);
                GeneralInformationAPI.putGI(GIObj, reportGuid).then(function (resp) {
                    console.log("manage cover contact added response:" + JSON.stringify(resp));
                    //self.contactsArr.push(contactObj);
                    self.successMsg = "Contact added successfully";
                    clearFields();
                });
                self.successMsg = "Contact deleted successfully";
                break;
            }
        }
        clearFields();
    }

    self.updateContact = function (form) {
        self.errorMsg = "";
        self.successMsg = "";
        var contact = JSON.parse(localStorage.getItem('editContactObj'));
        var contactObj = {
            "clientFax": "",
            "clientZip": "",
            "clientCity": "",
            "orderIndex": "",
            "clientEmail": "",
            "clientPhone": "",
            "clientState": "",
            "contactGUID": "",
            "clientAddress": "",
            "clientCompany": "",
            "clientContact": ""
        };
        if (!form || form.$invalid) {
            self.errorMsg = "Invalid Form Submission";
            return;
        } else {
            contactObj.clientCompany = self.clientCompany != undefined && self.clientCompany != "" && self.clientCompany != "" ? self.clientCompany : "";
            contactObj.clientContact = self.clientContact != undefined && self.clientContact != "" && self.clientContact != "" ? self.clientContact : "";
            contactObj.clientAddress = self.clientAddress != undefined && self.clientAddress != "" && self.clientAddress != "" ? self.clientAddress : "";
            contactObj.clientCity = self.clientCity != undefined && self.clientCity != "" && self.clientCity != "" ? self.clientCity : "";
            contactObj.clientState = self.clientState != undefined && self.clientState != "" && self.clientState != "" ? self.clientState : "";
            contactObj.clientZip = self.clientZip != undefined && self.clientZip != "" && self.clientZip != "" ? self.clientZip : "";
            contactObj.clientPhone = self.clientPhone != undefined && self.clientPhone != "" && self.clientPhone != "" ? self.clientPhone : "";
            contactObj.clientFax = self.clientFax != undefined && self.clientFax != "" && self.clientFax != "" ? self.clientFax : "";
            contactObj.clientEmail = self.clientEmail != undefined && self.clientEmail != "" && self.clientEmail != "" ? self.clientEmail : "";
            GIObj.coverContacts.push(contactObj);
            GeneralInformationAPI.putGI(GIObj, reportGuid).then(function (resp) {
                for (var i = 0; i < self.contactsArr.length; i++) {
                    if (self.contactsArr[i].clientGUID == contact.clientGUID) {
                        //  self.contactsArr[i].clientGUID = contact.clientGUID;
                        self.contactsArr[i].clientCompany = self.clientCompany;
                        self.contactsArr[i].clientContact = self.clientContact;
                        self.contactsArr[i].clientAddress = self.clientAddress;
                        self.contactsArr[i].clientCity = self.clientCity;
                        self.contactsArr[i].clientState = self.clientState;
                        self.contactsArr[i].clientZip = self.clientZip;
                        self.contactsArr[i].clientPhone = self.clientPhone;
                        self.contactsArr[i].clientFax = self.clientFax;
                        self.contactsArr[i].clientEmail = self.clientEmail;
                        break;
                    }
                }
                self.isEditContact = false;
                self.successMsg = "Contact updated successfully";
                clearFields();
            });
        }
    }

    self.cancelEdit = function () {
        self.errorMsg = "";
        self.successMsg = "";
        localStorage.removeItem('editContactObj')
        clearFields();
    }

    function clearFields() {
        self.clientGUID = "";
        self.clientCompany = "";
        self.clientContact = "";
        self.clientAddress = "";
        self.clientCity = "";
        self.clientState = "";
        self.clientZip = "";
        self.clientPhone = "";
        self.clientFax = "";
        self.clientEmail = "";
        localStorage.getItem('editContactObj')
    }

    self.editCoverContact = function (contact) {
        self.errorMsg = "";
        self.successMsg = "";
        localStorage.setItem('editContactObj', JSON.stringify(contact));
        self.clientCompany = contact.clientCompany != undefined && contact.clientCompany != "" && contact.clientCompany != "" ? contact.clientCompany : "";
        self.clientContact = contact.clientContact != undefined && contact.clientContact != "" && contact.clientContact != "" ? contact.clientContact : "";
        self.clientAddress = contact.clientAddress != undefined && contact.clientAddress != "" && contact.clientAddress != "" ? contact.clientAddress : "";
        self.clientCity = contact.clientCity != undefined && contact.clientCity != "" && contact.clientCity != "" ? contact.clientCity : "";
        self.clientState = contact.clientState != undefined && contact.clientState != "" && contact.clientState != "" ? contact.clientState : "";
        self.clientZip = contact.clientZip != undefined && contact.clientZip != "" && contact.clientZip != "" ? contact.clientZip : "";
        self.clientPhone = contact.clientPhone != undefined && contact.clientPhone != "" && contact.clientPhone != "" ? contact.clientPhone : "";
        self.clientFax = contact.clientFax != undefined && contact.clientFax != "" && contact.clientFax != "" ? contact.clientFax : "";
        self.clientEmail = contact.clientEmail != undefined && contact.clientEmail != "" && contact.clientEmail != "" ? contact.clientEmail : "";
    }

    var moveRow = function (origin, destination) {
        var temp = self.contactsArr[destination];

        if (temp != undefined && temp != null && temp != "") {
            self.contactsArr[destination] = self.contactsArr[origin];
            self.contactsArr[origin] = temp;
        }
    };

    self.moveUp = function (index) {
        moveRow(index, index - 1);
    }

    self.moveDown = function (index) {
        moveRow(index, index + 1);
    }
}]);;
angular.module("ReportAuthoring").controller("OrderDatabaseReportsController", ["$scope", "GeneralInformationAPI", "$modal", "$modalInstance", "$window", "$location", "$state", "edrOrderAPI", "siteDetails", "invokedFrom", "userDetails", function ($scope, GeneralInformationAPI, $modal, $modalInstance, $window, $location, $state, edrOrderAPI, siteDetails, invokedFrom, userDetails) {
    self = this;
    self.userMsg = false;
    self.userMsgAlertClass = "";
    self.invokedFrom = invokedFrom;
    self.order = {};

    if (siteDetails && siteDetails.location) {
        self.order["address"] = siteDetails.location.address1 + siteDetails.location.address2 ? siteDetails.location.address1 + siteDetails.location.address2 + "," : siteDetails.location.address1 + siteDetails.location.address2;
        self.order["cityStateZip"] = siteDetails.location.city ? siteDetails.location.city + ", " + siteDetails.location.state + " " + siteDetails.location.zip : siteDetails.location.state + " " + siteDetails.location.zip;
        self.order["latitude"] = siteDetails.location.latitude;
        self.order["longitude"] = siteDetails.location.longitude;
    }

    if (userDetails && userDetails.users && userDetails.users.length) {
        var user = userDetails.users[0];
        self.order["emailNotification"] = user.email + ';';
        self.order["accountNo"] = user.office ? user.office.edrAccountNumber : "";
        self.order["password"] = user.office ? user.office.edrAccountPassword : "";
    } else {
        self.userMsgAlertClass = "alert-danger";
        self.userMsg = "<strong>Error:</strong> Problem in getting your profile details.";
    }

    self.closeModal = function () {
        $modalInstance.close();
    }

    self.closeWindow = function () {
        $modalInstance.close();
        //$location.path('/');
        window.close();
    }

    self.singleSiteOrder = function (form) {
        if (form.$valid) {
            var orderDetails = {
                "edrAccountNumber": self.order.accountNo,
                "edrPassword": self.order.password,
                "reportGuid": $state.params.reportGuid,
                "notificationEmails": self.order.emailNotification ? self.order.emailNotification : ""
            }
            var promise = edrOrderAPI.postSingleSiteOrder({
                "order": orderDetails
            });
            promise.then(function (data) {
                    $modalInstance.close();
                    $window.open(data.transferURL, '_blank');
                },
                function (error) {
                    self.userMsgAlertClass = "alert-danger";
                    self.userMsg = "<strong>Error:</strong> Problem in placing your order. " + error;
                });
        } else {
            var formElem = document.getElementsByName(form.$name);
            angular.element(formElem).find(':input').trigger('blur');
        }
    }

    self.portfolioOrder = function (form) {
        if (form.$valid) {
            $scope.$parent.portfolioOrderController.edrAccNo = self.order.accountNo;
            $scope.$parent.portfolioOrderController.edrPassword = self.order.password;
            $scope.$parent.portfolioOrderController.notificationEmails = self.order.emailNotification ? self.order.emailNotification : "";
            var edrCredentialsData = {
                "edrCredentials": {
                    "edrAccountNumber": self.order.accountNo,
                    "edrPassword": self.order.password
                }
            }
            edrOrderAPI.searchDistances(edrCredentialsData).then(function (resp) {
                $scope.$parent.portfolioOrderController.searchDistances = resp.searchDistancesSet;
                $modalInstance.close();
            }, function (error) {
                self.userMsgAlertClass = "alert-danger";
                self.userMsg = "<strong>Error:</strong> Problem in searching distances. " + error;
            });
        } else {
            var formElem = document.getElementsByName(form.$name);
            angular.element(formElem).find(':input').trigger('blur');
        }
    }
}]);;
angular.module('ReportAuthoring').controller('SetupController', ['$modal', '$timeout', '$scope', '$filter', '$modal', 'ReportOutputSetupAPI', 'DefaultLanguageLibraryAPI', 'ReportTemplatesAPI', 'BASEURL', 'ReportAuthoringAPI', '$stateParams', '$location', 'accountMgmtAPI', '$rootScope', '$state', 'GeneralInformationAPI', function ($modal, $timeout, $scope, $filter, $modal, ReportOutputSetupAPI, DefaultLanguageLibraryAPI, ReportTemplatesAPI, BASEURL, ReportAuthoringAPI, $stateParams, $location, accountMgmtAPI, $rootScope, $state, GeneralInformationAPI) {
    var self = this;
    self.reportID = 12;
    $scope.standardItemSuccess = "";
    $scope.standardItemDanger = "";
    $scope.showMessage = false;
    $scope.standardItemName = "";
    $scope.orderStatusUrl = "";
    $scope.projectGuid = "";
    $scope.accountGuid = "";
    $scope.projectName = "";

    $scope.setupItemUpdateClass = "";
    $scope.setupItemUpdateStatus = false;
    $scope.setupItemUpdateText = "";

    $scope.standardItemUpdateClass = "";
    $scope.standardItemUpdateStatus = false;
    $scope.standardItemUpdateText = "";


    //setup items
    $scope.transmittalArr = [];
    $scope.reportCoverArr = [];
    $scope.tocArr = [];
    $scope.reportOutputSetupArr = [];


    //standard items
    $scope.dllArr = [];
    $scope.taskedCompanyArr = [];
    $scope.reportTemplateArr = [];


    $scope.setupBoard = {};
    $scope.standardBoard = {};
    $scope.projectNameLink = $scope.$parent.$parent.projectNameLink;

    $scope.isDbOrder = false;
    $scope.portfolioOrderParamObj = {
        projectGuid: $state.params.projectGuid
    };

    init();

    function init() {
        var paramObj = {
            projectGuid: $state.params.projectGuid,
            reportGuid: $state.params.reportGuid,
            sectionGuid: $rootScope.giSectionGuid
        };
        $scope.GI_href = $state.href('generalInformation', paramObj);

        $scope.projectGuid = $stateParams.projectGuid;
        $scope.accountGuid = BASEURL.accountGUID;
        $scope.projectName = "test proj";

        populateSetupStandardItemLists();
        setDefaults();
        getGeneralInfo();
    }

    function populateSetupStandardItemLists(companyId) {

        //get report transmittal list
        ReportAuthoringAPI.getReportOutputList(BASEURL.companyGUID_ReportOutputSetupList, 'TRANS_SET').then(function (transData) {
            //            var transStructureSelect = {
            //                value: "",
            //                text: "-Select Transmittal Setup-"
            //            }
            //            $scope.transmittalArr.push(transStructureSelect);
            for (var i = 0; i < transData.length; i++) {
                var transStructure = {
                    value: transData[i].reportOutputSetupGUID,
                    text: transData[i].name
                }
                $scope.transmittalArr.push(transStructure);
            }


        }, function (error) {

        });

        //get report cover list
        ReportAuthoringAPI.getCoverPageList(BASEURL.companyGUID_REPORTCOVER).then(function (coverData) {
            //            var coverStructureSelect = {
            //                value: "",
            //                text: "-Select Report Cover-"
            //            }
            //            $scope.reportCoverArr.push(coverStructureSelect);
            for (var i = 0; i < coverData.length; i++) {
                var coverStructure = {
                    value: coverData[i].coverPageGuid,
                    text: coverData[i].name
                }
                $scope.reportCoverArr.push(coverStructure);
            }


        }, function (error) {

        });

        //get report toc list
        ReportAuthoringAPI.getReportOutputList(BASEURL.companyGUID_ReportOutputSetupList, 'TOC_SET').then(function (tocData) {

            //            var tocStructureSelect = {
            //                value: "",
            //                text: "-Select TOC Setup-"
            //            }
            //            $scope.tocArr.push(tocStructureSelect);
            for (var i = 0; i < tocData.length; i++) {
                var tocStructure = {
                    value: tocData[i].reportOutputSetupGUID,
                    text: tocData[i].name
                }
                $scope.tocArr.push(tocStructure);
            }


        }, function (error) {

        });

        //get report output setup list
        ReportAuthoringAPI.getReportOutputList(BASEURL.companyGUID_ReportOutputSetupList, 'ROS_SET').then(function (reportsData) {
            //            var reportOutputSetupStructureSelect = {
            //                value: "",
            //                text: "-Select Report Output Setup-"
            //            }
            //            $scope.reportOutputSetupArr.push(reportOutputSetupStructureSelect);
            for (var i = 0; i < reportsData.length; i++) {
                var reportOutputSetupStructure = {
                    value: reportsData[i].reportOutputSetupGUID,
                    text: reportsData[i].name
                }
                $scope.reportOutputSetupArr.push(reportOutputSetupStructure);
            }


        }, function (error) {

        });


        //get tasked companies

        accountMgmtAPI.getCompany().then(function (taskedCompanies) {
            //            var companyStructureSelect = {
            //                value: "",
            //                text: "-Select Tasked Company-"
            //            }
            //            $scope.taskedCompanyArr.push(companyStructureSelect);
            for (var i = 0; i < taskedCompanies.companies.length; i++) {
                var companyStructure = {
                    value: taskedCompanies.companies[i].companyGUID,
                    text: taskedCompanies.companies[i].name
                }

                $scope.taskedCompanyArr.push(companyStructure);
            }

        }, function (error) {

        });

        //get report templates

        ReportTemplatesAPI.getTemplateList(BASEURL.companyGUID_reportTemplate).then(function (templates) {
            //            var templateStructureSelect = {
            //                value: "",
            //                text: "-Select Report Template-"
            //            }
            //            $scope.reportTemplateArr.push(templateStructureSelect);
            for (var i = 0; i < templates.templates.length; i++) {
                var templateStructure = {
                    value: templates.templates[i].templateGUID,
                    text: templates.templates[i].name
                }

                $scope.reportTemplateArr.push(templateStructure);
            }

        }, function (error) {

        });

        //get report dll list
        DefaultLanguageLibraryAPI.getDLLList(BASEURL.companyGUID_DLL_TEMPLATELIST).then(function (dllData) {
            //            var dllStructureSelect = {
            //                value: "",
            //                text: "-Select Default Language Library-"
            //            }
            //            $scope.dllArr.push(dllStructureSelect);
            for (var i = 0; i < dllData.libraries.length; i++) {
                var dllStructure = {
                    value: dllData.libraries[i].libraryGUID,
                    text: dllData.libraries[i].name
                }
                $scope.dllArr.push(dllStructure);
            }


        }, function (error) {

        });






    }

    function setDefaults() {
        //change report GUID later,there is no data in db for other reports
        ReportAuthoringAPI.getSetupDefaults($stateParams.reportGuid).then(function (defaults) {



            $scope.prePopulatedDataText = defaults.prepopulatedTableData;
            $scope.setupBoard = {
                selTransmittalLetter: defaults.defaults.transmittalSetupGUID ? defaults.defaults.transmittalSetupGUID : "",
                selReportCover: defaults.defaults.coverPageGUID ? defaults.defaults.coverPageGUID : "",
                selTOC: defaults.defaults.tocSetupGUID ? defaults.defaults.tocSetupGUID : "",
                selReportOutputSetup: defaults.defaults.reportOutputSetupGUID ? defaults.defaults.reportOutputSetupGUID : ""
            };
            $scope.standardBoard = {
                selTaskedCompany: defaults.reportDetails.taskedCompanyGUID ? defaults.reportDetails.taskedCompanyGUID : "",
                selReportTemplate: defaults.reportTemplate.templateGUID ? defaults.reportTemplate.templateGUID : "",
                selDLL: defaults.defaults.languageLibraryGUID ? defaults.defaults.languageLibraryGUID : "",
                selPrepopulatedTableData: 1
            };

            setListValToDefault(defaults);



        }, function (error) {

        });
    }

    function setListValToDefault(defaults) {
        // Transmittal Letter
        var selectedTL = $filter('filter')($scope.transmittalArr, {

            value: defaults.defaults.transmittalSetupGUID
        });
        if (selectedTL.length == 0) {
            $scope.setupBoard.selTransmittalLetter = "";
        }
        // Transmittal Letter

        // Report Cover
        var selectedRC = $filter('filter')($scope.reportCoverArr, {

            value: defaults.defaults.coverPageGUID
        });
        if (selectedRC.length == 0) {
            $scope.setupBoard.selReportCover = "";
        }
        // Report Cover

        // TOC
        var selectedTOC = $filter('filter')($scope.tocArr, {

            value: defaults.defaults.tocSetupGUID
        });
        if (selectedTOC.length == 0) {
            $scope.setupBoard.selTOC = "";
        }
        // TOC

        // ROS
        var selectedROS = $filter('filter')($scope.reportOutputSetupArr, {

            value: defaults.defaults.reportOutputSetupGUID
        });
        if (selectedROS.length == 0) {
            $scope.setupBoard.selReportOutputSetup = "";
        }
        // ROS


        // Tasked Company
        var selectedTC = $filter('filter')($scope.taskedCompanyArr, {

            value: defaults.reportDetails.taskedCompanyGUID
        });
        if (selectedTC.length == 0) {
            $scope.standardBoard.selTaskedCompany = "";
        }
        // Tasked Company

        // Report Template
        var selectedReportTemplate = $filter('filter')($scope.reportTemplateArr, {

            value: defaults.reportTemplate.templateGUID
        });
        if (selectedReportTemplate.length == 0) {
            $scope.standardBoard.selReportTemplate = "";
        }
        // Report Template

        // DLL
        var selectedLL = $filter('filter')($scope.dllArr, {

            value: defaults.defaults.languageLibraryGUID
        });
        if (selectedLL.length == 0) {
            $scope.standardBoard.selDLL = "";
        }
        // DLL



    }

    function getGeneralInfo() {
        GeneralInformationAPI.get($state.params.reportGuid, $rootScope.giSectionGuid).then(function (data) {
            $scope.isDbOrder = data.generalInformation.isOrderDatabase;
        });
    }

    $scope.showTransmittalLetter = function () {

        var selected = $filter('filter')($scope.transmittalArr, {

            value: $scope.setupBoard.selTransmittalLetter
        });

        return ($scope.setupBoard.selTransmittalLetter && selected.length) ? selected[0].text : 'Not set';

    };

    $scope.showReportCover = function () {

        var selected = $filter('filter')($scope.reportCoverArr, {

            value: $scope.setupBoard.selReportCover
        });

        return ($scope.setupBoard.selReportCover && selected.length) ? selected[0].text : 'Not set';
    };

    $scope.showTOC = function () {

        var selected = $filter('filter')($scope.tocArr, {

            value: $scope.setupBoard.selTOC
        });

        return ($scope.setupBoard.selTOC && selected.length) ? selected[0].text : 'Not set';
    };

    $scope.showReportStructure = function () {

        var selected = $filter('filter')($scope.reportOutputSetupArr, {

            value: $scope.setupBoard.selReportOutputSetup
        });

        return ($scope.setupBoard.selReportOutputSetup && selected.length) ? selected[0].text : 'Not set';
    };

    $scope.showTaskedCompany = function () {

        var selected = $filter('filter')($scope.taskedCompanyArr, {

            value: $scope.standardBoard.selTaskedCompany
        });

        return ($scope.standardBoard.selTaskedCompany && selected.length) ? selected[0].text : 'Not set';
    };

    $scope.showReportTemplate = function () {

        var selected = $filter('filter')($scope.reportTemplateArr, {

            value: $scope.standardBoard.selReportTemplate
        });

        return ($scope.standardBoard.selReportTemplate && selected.length) ? selected[0].text : 'Not set';
    };

    $scope.showDLL = function () {

        var selected = $filter('filter')($scope.dllArr, {

            value: $scope.standardBoard.selDLL
        });

        return ($scope.standardBoard.selDLL && selected.length) ? selected[0].text : 'Not set';
    };

    $scope.saveEditable = function (form) {
        // console.log("1111: " + $scope.setupBoard.selTransmittalLetter);
        //  console.log("2222: " + $scope.setupBoard.selTransmittalLetter);
        // form.$cancel();
    }

    $scope.cancelEditable = function (form) {
        $scope.standardItemSuccess = "";
        $scope.standardItemDanger = "";
        $scope.showMessage = false;
    }
    $scope.standardItemClick = function (standardItemVal) {
        $scope.showMessage = true;
        displayMessage(standardItemVal);


    }

    function displayMessage(standardItemVal) {

        if (standardItemVal == "taskedCompany") {
            $scope.standardItemSuccess = "The company tasked with this project.";
            $scope.standardItemName = "Tasked Company :";
        } else if (standardItemVal == "reportTemplate") {
            $scope.standardItemSuccess = "The template is the structure of the report. It includes the report sections and tables. If you choose to update, all report sections and tables will be deleted and then replaced with the structure from the selected template.";
            $scope.standardItemName = "Report Template :";
        } else if (standardItemVal == "defaultLanguageLibrary") {
            $scope.standardItemSuccess = "Default Language Library contains text to be inserted into report upon project setup and optional text for report writers. If you choose to update, text already written in sections will be overwritten by any default lang selected to populate upon project setup. (i.e. If the author has entered text in the Scope section and there is an auto-populate entry in the library for Scope, the text the author entered will be replaced if Default Language Library is updated.)";
            //            $scope.standardItemDanger = "You have chosen to update to a new template. The template you chose is associated with the Cardno ATC ASTM-13 Phase I Library Library. Do you want to update the Default Language?";
            $scope.standardItemName = "Default Language Library :";
        } else if (standardItemVal == "prepolulatedTableData") {
            $scope.standardItemSuccess = "Default Table Data is information that gets pre-populated into specific tables in the report upon project setup. Typical examples are the Adjoining Properties and Map Findings tables. If you choose to update, tables in the report that have Default Table Data will have all data overwritten by the template defaults. (i.e. If you have N,S,E,W rows in the Adjoining Properties table and the author has entered comments about the property and you choose to update this, the author's comments will be overwritten by blank N,S,E,W rows)";
            //            $scope.standardItemDanger = "You have chosen to update to a new template. Do you want to update the Default Table Data?";
            $scope.standardItemName = "Prepopulated Table Data :";
            $scope.prepopulatedText = "adad";
        }
    }
    //    $scope.setupItemClicked = function (standardItemVal) {
    //        $scope.showMessage = false;
    //        $scope.standardItemDanger = "";
    //        $scope.standardItemSuccess = "";
    //    }


    //    $('#standardItemsTable tbody tr').on('click', function (event) {
    //     
    //        event.stopPropagation();
    //        $('#data tr').removeClass('highlighted');
    //        $(this).toggleClass('highlighted');
    //        $('#alertMessageDiv').show();
    //
    //    });
    //
    //    $('html').click(function () {
    //     
    //        $('#standardItemsTable tr').removeClass('highlighted');
    //        $('#alertMessageDiv').hide();
    //
    //    })

    $scope.openOrderDBReports = function () {

        var modal = $modal.open({
            templateUrl: 'orderDBReports.html',
            controller: orderDBReportsController,
            scope: $scope,
            size: 0
        });
    }

    var orderDBReportsController = function ($scope, $modalInstance) {

        $scope.Cancel = function () {
            $modalInstance.close();
        }

        $scope.SaveOrderDBReports = function (form) {
            if (!form || form.$invalid) {
                // self.showDisplayMsg('Invalid Form Submission');
                return;
            }

            $modalInstance.close();

        }


    }

    $scope.saveDefaultItem = function (data, item) {
        if (data) {

            if (item.toLowerCase() == "setupBoard.selTransmittalLetter".toLowerCase()) {

                var defaultObj = {
                    "defaults": {
                        "transmittalSetupGUID": data
                    }

                };
                $scope.itemType = "setup";
            } else if (item.toLowerCase() == "setupBoard.selReportCover".toLowerCase()) {
                var defaultObj = {
                    "defaults": {
                        "coverPageGUID": data
                    }

                };
                $scope.itemType = "setup";
            } else if (item.toLowerCase() == "setupBoard.selTOC".toLowerCase()) {
                var defaultObj = {
                    "defaults": {
                        "tocSetupGUID": data
                    }

                };
                $scope.itemType = "setup";
            } else if (item.toLowerCase() == "setupBoard.selReportOutputSetup".toLowerCase()) {
                var defaultObj = {
                    "defaults": {
                        "reportOutputSetupGUID": data
                    }

                };
                $scope.itemType = "setup";
            } else if (item.toLowerCase() == "standardBoard.selTaskedCompany".toLowerCase()) {
                var defaultObj = {
                    "reportDetails": {
                        "taskedCompanyGUID": data
                    }

                };

                $scope.itemType = "standard";
            } else if (item.toLowerCase() == "standardBoard.selReportTemplate".toLowerCase()) {
                var defaultObj = {
                    "reportTemplate": {
                        "templateGUID": data
                    }

                };
                $scope.itemType = "standard";
            } else if (item.toLowerCase() == "standardBoard.selDLL".toLowerCase()) {
                var defaultObj = {
                    "defaults": {
                        "languageLibraryGUID": data
                    }

                };
                $scope.itemType = "standard";
            }


            ReportAuthoringAPI.updateSetupDefaults($state.params.reportGuid, defaultObj).then(function (defaults) {
                if ($scope.itemType == "setup") {
                    $scope.setupItemUpdateStatus = true;
                    $scope.setupItemUpdateClass = "alert-success";
                    $scope.setupItemUpdateText = "Item saved successfully";
                } else if ($scope.itemType == "standard") {
                    $scope.standardItemUpdateStatus = true;
                    $scope.standardItemUpdateClass = "alert-success";
                    $scope.standardItemUpdateText = "Item saved successfully";
                }


            }, function (error) {
                if ($scope.itemType == "setup") {
                    $scope.setupItemUpdateStatus = true;
                    $scope.setupItemUpdateClass = "alert-danger";
                    $scope.setupItemUpdateText = "Could not save the item.Please try again.";
                } else if ($scope.itemType == "standard") {
                    $scope.standardItemUpdateStatus = true;
                    $scope.standardItemUpdateClass = "alert-danger";
                    $scope.standardItemUpdateText = "Could not save the item.Please try again.";
                }


            });
        } else {
            if (item.indexOf("setupBoard") > -1) {
                $scope.setupItemUpdateStatus = true;
                $scope.setupItemUpdateClass = "alert-danger";
                $scope.setupItemUpdateText = "Please select data in order to update the list.";
            } else if (item.indexOf("standardBoard") > -1) {
                $scope.standardItemUpdateStatus = true;
                $scope.standardItemUpdateClass = "alert-danger";
                $scope.standardItemUpdateText = "Please select data in order to update the list.";
            }
        }
    }
    $scope.clearMessages_Setup = function () {
        $scope.setupItemUpdateClass = "";
        $scope.setupItemUpdateStatus = false;
        $scope.setupItemUpdateText = "";
    }
    $scope.clearMessages_Standard = function () {
        $scope.standardItemUpdateClass = "";
        $scope.standardItemUpdateStatus = false;
        $scope.standardItemUpdateText = "";
    }

    $scope.openEdrCredentialsModal = function () {
        var modalInstance = $modal.open({
            templateUrl: 'orderDBReport.html',
            scope: $scope,
            controller: 'OrderDatabaseReportsController as OrderDbReportsCtrl',
            resolve: {
                siteDetails: function (reportGridDataOperations) {
                    return reportGridDataOperations.getSiteInformation($state.params.reportGuid).then(function (response) {
                        return response;
                    });
                },
                userDetails: function (accountMgmtAPI, BASEURL) {
                    return accountMgmtAPI.getUser(BASEURL.accountGUID_GI).then(function (resp) {
                        return resp;
                    });
                },
                invokedFrom: function () {
                    return "SingleSiteOrder";
                }
            }
        });
    }
    $scope.updateVersion = function (data, type) {
        console.log("data: " + data);
        if (type == 0) {
            var defaultObj = {
                "reportTemplate": {
                    "templateGUID": data
                }

            };
            ReportAuthoringAPI.updateSetupDefaults($state.params.reportGuid, defaultObj).then(function (defaults) {

                $scope.standardItemUpdateStatus = true;
                $scope.standardItemUpdateClass = "alert-success";
                $scope.standardItemUpdateText = "Report Template version updated successfully";

            }, function (error) {
                console.log("error");

            });
        } else if (type == 1) {

        } else if (type == 2) {
            ReportAuthoringAPI.updatePrepopulatedData($state.params.reportGuid).then(function (defaults) {
                $scope.standardItemUpdateStatus = true;
                $scope.standardItemUpdateClass = "alert-success";
                $scope.standardItemUpdateText = "Prepopulated data version updated successfully";
            }, function (error) {
                console.log("error");

            });

        }
    }

}]);;
angular.module('ReportAuthoring').controller('SignController', ['$scope', 'ReportAuthoringAPI', '$compile', 'reportGridDataOperations', 'projectDashboardOperations', 'checkStatus', '$stateParams', '$q', 'BASEURL', '$timeout', '$state', 'ParcelUI.Resources', function ($scope, ReportAuthoringAPI, $compile, reportGridDataOperations, projectDashboardOperations, checkStatus, $stateParams, $q, BASEURL, $timeout, $state, ParcelUI_Resources) {

    var self = this;
    //self.currentUserGUID = 'A0F5E294-B497-4C16-8FA4-526C9413530F';
    self.currentUserObject = {
        userGUID: 'a0f5e294-b497-4c16-8fa4-526c9413530f',
        userName: 'Kumar Shantnu',
        title: 'Developer'
    }
    self.expanddivComment = "collapse in";
    self.expanddivAddress = "collapse in";
    self.commentsErrorStatus = false;
    self.commentsErrorText = "";
    $scope.commentsArr = [];
    self.serviceResponseAlert = true;
    self.checkComments = false;
    self.waitingCommentsResources = ParcelUI_Resources.waitingCommentsResources;

    function init() {
        self.signText = {};
        self.signOnBehalfText = {};
        self.signForText = {};
        self.certifiedBy = {};
        self.certifiedForBy = {};
        self.unSign = {};
        self.signOrOverride = {};
        self.signOnBehalfOrOverride = {};
        self.signFor = {};
        self.signatureIndexArray = {};
        self.secUser = {};
        self.signForUser = {};
        self.signOnBehalfUser = {};
        self.signCertfication = {};
        //self.certifications = [];
        self.signatureOperations = {};
        self.showAlert = {};
        self.serviceMessage = {};
        self.certificationForUser = {};
        self.certText = {};
        self.certForText = {};
        self.certificationOperation = {};
        self.reportGuid = $stateParams.reportGuid;
        //BASEURL.reportGUID_Signatures; 
        // 'a560b5d0-8cef-11e5-8226-0e29ed3d2a45', //'a5a73c5f-8cef-11e5-8226-0e29ed3d2a45'; //
        getAddressedComments();
        getReportSignoffs(false);
        getUsers();

    }
    init();

    function getAddressedComments() {

        self.commentsErrorStatus = false;
        self.commentsErrorText = "";
        $scope.commentsArr = [];
        self.commentsErrorStatus = false;
        self.commentsErrorText = "";

        var promise = ReportAuthoringAPI.getComments('ASC', $stateParams.reportGuid);

        self.waitingCommentsResources.promise = promise;
        return promise.then(function (resp) {

            for (var i = 0; i < resp.length; i++) {

                if (resp[i].comments.length > 0) {

                    var sectionObj = {
                        "sectionGUID": "",
                        "sectionNumber": "",
                        "sectionName": "",
                        "isAppendix": "",
                        comments: []

                    }

                    sectionObj.sectionGUID = resp[i].sectionGUID;
                    sectionObj.sectionNumber = resp[i].sectionNumber;
                    sectionObj.sectionName = resp[i].sectionTitle;
                    sectionObj.isAppendix = resp[i].isAppendix;
                    for (var k = 0; k < resp[i].comments.length; k++) {
                        if (!resp[i].comments[k].addressed) {
                            var commObj = {
                                "Id": "",
                                "addressed": false,
                                "commentVal": "",
                                "addressedVal": "",
                                "commentedBy": "",
                                "addressedBy": "",
                                "date": "",
                                "addressedDate": ""
                            }
                            commObj.Id = resp[i].comments[k].commentGUID;
                            commObj.addressed = resp[i].comments[k].addressed;
                            commObj.commentVal = resp[i].comments[k].commentText;
                            commObj.commentedBy = resp[i].comments[k].createdBy.firstName + ' ' + resp[i].comments[k].createdBy.lastName;
                            if (resp[i].comments[k].addressed) {
                                if (resp[i].comments[k].responseComments != null && resp[i].comments[k].responseComments != undefined && resp[i].comments[k].responseComments != "") {
                                    commObj.addressedBy = resp[i].comments[k].responseComments[0].createdBy.firstName + ' ' + resp[i].comments[k].responseComments[0].createdBy.lastName;
                                    commObj.addressedVal = resp[i].comments[k].responseComments[0].commentText;
                                    commObj.addressedDate = resp[i].comments[k].responseComments[0].commentDate;
                                }

                            }
                            // commObj.date = resp[i].comments[k].commentDate;
                            if (resp[i].comments[k].commentUpdated) {
                                commObj.date = resp[i].comments[k].updatedDate;
                            } else {
                                commObj.date = resp[i].comments[k].commentDate;
                            }
                            sectionObj.comments.push(commObj);


                        }
                    }
                    $scope.commentsArr.push(sectionObj);

                }



            }


            if ($scope.commentsArr.length > 0) {
                for (var i = 0; i < $scope.commentsArr.length; i++) {
                    if ($scope.commentsArr[i].comments.length > 0) {
                        self.checkComments = true;

                    }
                }
            } else {
                self.checkComments = false;
            }

            if (!self.checkComments) {
                self.commentsErrorText = "No Comments Found";
                self.commentsErrorStatus = true;

            }

            ReportAuthoringAPI.managePanelHeight();
            $timeout(function () {
                $('[data-toggle="tooltip"]').tooltip();
            });
        }, function (error) {
            console.log("error");
            self.commentsErrorText = error;
            self.commentsErrorStatus = true;
            ReportAuthoringAPI.managePanelHeight();
        });


    }

    self.CloseAll = function () {

        for (var i = 0; i < $scope.commentsArr.length; i++) {
            for (var j = 0; j < $scope.commentsArr[i].comments.length; j++) {

                //comment
                $("#" + $scope.commentsArr[i].comments[j].Id + "-comment").removeClass();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-comment").addClass('collapse');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment").removeClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment-span").removeClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment-span").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-comment").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-comment-span").hide();

                //address
                $("#" + $scope.commentsArr[i].comments[j].Id + "-address").removeClass();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-address").addClass('collapse');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address").removeClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address-span").removeClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address-span").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-address").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-address-span").hide();
            }
        }


    }

    self.OpenAll = function () {

        for (var i = 0; i < $scope.commentsArr.length; i++) {
            for (var j = 0; j < $scope.commentsArr[i].comments.length; j++) {

                //comment
                $("#" + $scope.commentsArr[i].comments[j].Id + "-comment").removeClass();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-comment").addClass('collapse in');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment").addClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment-span").addClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-comment-span").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-comment").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-comment-span").show();

                //address
                $("#" + $scope.commentsArr[i].comments[j].Id + "-address").removeClass();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-address").addClass('collapse in');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address").addClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address-span").addClass('ng-hide');
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-plus-address-span").hide();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-address").show();
                $("#" + $scope.commentsArr[i].comments[j].Id + "-minus-address-span").show();
            }
        }


    }

    self.setIconComment = function (val, commentId) {
        console.log("class: " + val);
        $("#" + commentId + "-comment").removeClass();
        $("#" + commentId + "-comment").addClass(val);
        if (val == 'collapse') {
            $("#" + commentId + "-plus-comment").removeClass('ng-hide');
            $("#" + commentId + "-plus-comment-span").removeClass('ng-hide');
            $("#" + commentId + "-plus-comment").show();
            $("#" + commentId + "-plus-comment-span").show();
            $("#" + commentId + "-minus-comment").hide();
            $("#" + commentId + "-minus-comment-span").hide();

        } else {
            $("#" + commentId + "-plus-comment").hide();
            $("#" + commentId + "-plus-comment-span").hide();
            $("#" + commentId + "-minus-comment").show();
            $("#" + commentId + "-minus-comment-span").show();
        }
        //self.expanddivComment = val;
    }

    self.setIconAddress = function (val, commentId) {
        $("#" + commentId + "-address").removeClass();
        $("#" + commentId + "-address").addClass(val);
        if (val == 'collapse') {
            $("#" + commentId + "-plus-address").removeClass('ng-hide');
            $("#" + commentId + "-plus-address-span").removeClass('ng-hide');
            $("#" + commentId + "-plus-address").show();
            $("#" + commentId + "-plus-address-span").show();
            $("#" + commentId + "-minus-address").hide();
            $("#" + commentId + "-minus-address-span").hide();

        } else {
            $("#" + commentId + "-plus-address").hide();
            $("#" + commentId + "-plus-address-span").hide();
            $("#" + commentId + "-minus-address").show();
            $("#" + commentId + "-minus-address-span").show();
        }
    }

    self.refreshComments = function () {

        $timeout(function () {

            getAddressedComments();

        });

    }

    self.addressComments = function (sectionGUID, commentGUID) {
        localStorage.setItem('sign_sectionGUID', sectionGUID);

        for (var i = 0; i < $scope.commentsArr.length; i++) {
            for (var j = 0; j < $scope.commentsArr[i].comments.length; j++) {
                if ($scope.commentsArr[i].comments[j].Id.toLowerCase() == commentGUID.toLowerCase()) {
                    if ($scope.commentsArr[i].isAppendix) {
                        $state.go('ReportAuthoring.Appendices');
                    } else if (!$scope.commentsArr[i].isAppendix) {
                        $state.go('ReportAuthoring.Write');
                    }
                    break;
                }
            }
        }

    }

    function getUsers() {
        ReportAuthoringAPI.getUsersUnderSignTab().then(function (response) {
            if (angular.isArray(response.users)) {
                self.usersArray = response.users;
            }
        })
    }

    function getReportSignoffs(isAfterCertificationsUpdate) {
        $scope.delay = 0;
        $scope.minDuration = 0;
        $scope.message = 'Please Wait...';
        $scope.backdrop = true;

        $scope.promise = ReportAuthoringAPI.getReportSignOff(self.reportGuid);
        $scope.promise.then(function (resp) {
            if (resp.status != undefined && checkStatus.checkCodeInStatusArray(resp.status, 'GET')) {
                self.signatureServiceMsg = resp.data.message === undefined ? "Unable to fetch records" : response.data.message.userMessage;
                self.showSignaturesAlert = true;
                angular.element('#signaturesMsgDiv').addClass('alert-danger');
            } else if (resp.signatures.length == 0) {
                self.showSignaturesAlert = true;
                self.signatureServiceMsg = "No signature records found";
                angular.element('#signaturesMsgDiv').addClass('alert-danger');
            } else {
                if (!isAfterCertificationsUpdate)
                    createSignoffsArray(resp.signatures);
                if (isAfterCertificationsUpdate)
                    self.certicationEditMode = false;

                createCertficationsArray(resp.signatures);
                // no data
            }
        }, function (error) {
            self.showSignaturesAlert = true;
            self.signatureServiceMsg = "Error in fetching signature records.";
            angular.element('#signaturesMsgDiv').addClass('alert-danger');
        })
    }

    function createCertficationsArray(resp) {
        //self.reportSignoffs = resp;
        var certifications = resp.filter(function (item) {
            return item.signatureType.toLowerCase() == 'certification'
        })
        if (certifications.length) {
            //self.certifications = certifications;
            groupingByCertficationType(certifications);
        }

    }

    function createSignoffsArray(resp) {
        var signatures = resp.filter(function (signItems) {
            return signItems.signatureType.toLowerCase() == 'sign off'
        })
        if (signatures)
            self.signatures = signatures;
    }

    function groupingByCertficationType(certifications) {
        self.certifications = [];
        var count = -1;
        var certficationGroupedBysignOffType = _.groupBy(certifications, 'signOffType');
        for (var key in certficationGroupedBysignOffType) {
            count = count + 1;
            var nameAndTitle = "";
            var nameAndTitleSignedFor = ""
            if (certficationGroupedBysignOffType[key].length > 1) {
                for (var i = 0; i < certficationGroupedBysignOffType[key].length; i++) {
                    var userObj = certficationGroupedBysignOffType[key][i];
                    nameAndTitle = nameAndTitle + ', ' + userObj.signOffUser.userName + '-' + userObj.signOffUser.title;

                    nameAndTitleSignedFor += ',' + userObj.signedForUser.userName + '-' + userObj.signedForUser.title + '(Signed by: ' + userObj.signOffUser.userName + ')';

                    if (certficationGroupedBysignOffType[key][i].signOffUser.userGUID === self.currentUserObject.userGUID || !certficationGroupedBysignOffType[key][i].signOffUser.userGUID) {

                        //set isCertified flag
                        if (certficationGroupedBysignOffType[key][i].signOffUser.userGUID)
                            certficationGroupedBysignOffType[key][i].isCertified = true;
                        else
                            certficationGroupedBysignOffType[key][i].isCertified = false;
                        self.certifications.push(certficationGroupedBysignOffType[key][i]);
                    }
                }
                self.certifiedBy[count] = nameAndTitle.substring(1, nameAndTitle.length);
                self.certifiedForBy[count] = nameAndTitleSignedFor.substring(1, nameAndTitleSignedFor.length)
            } else {
                var userObj = certficationGroupedBysignOffType[key][0];
                self.certifiedBy[count] = userObj.signOffUser.userName + '-' + userObj.signOffUser.title;
                self.certifiedForBy[count] = userObj.signedForUser.userName + '-' + userObj.signedForUser.title + '(Signed by: ' + userObj.signOffUser.userName + ')';

                if (certficationGroupedBysignOffType[key][0].signOffUser.userGUID)
                    certficationGroupedBysignOffType[key][0].isCertified = true;
                else
                    certficationGroupedBysignOffType[key][0].isCertified = false;
                self.certifications.push(certficationGroupedBysignOffType[key][0]);
            }
        }
    }

    // change display text events

    self.changeSignOnBehalfText = function (signOffObject, index) {
        if (signOffObject.signedOnBehalfOfUser.userGUID) {
            self.signOnBehalfText[index] = "Over-Ride Sign On Behalf"
        } else {
            self.signOnBehalfText[index] = "Sign On Behalf"
        }
    }

    self.changeSignText = function (signObj, index) {
        if (signObj.signOffUser.userGUID) {
            self.signText[index] = "Over-Ride";
        } else
            self.signText[index] = "Sign"
    }

    self.changeSignForText = function (signOffObject, index) {
        if (signOffObject.signedForUser.userGUID) {
            self.signForText[index] = "Over-Ride Sign For";
        } else
            self.signForText[index] = "Sign For"
    }

    self.isSignOnBehalfChecked = function (index, signOffObject) {
        var showSignVal = 'signOnBehalf' + index;
        if (signOffObject.showSignVal == showSignVal)
            return true;

        if (!signOffObject.showSignVal) {
            if (signOffObject.signedOnBehalfOfUser.userGUID && signOffObject.signOffType != "SEC Name")
                return true;
            else return false;
        }
    }

    self.isSignForChecked = function (index, signOffObject) {
        var showSignVal = 'signFor' + index;
        if (signOffObject.showSignVal == showSignVal && signOffObject.showSignFor)
            return true;

        if (!signOffObject.showSignVal) {
            if (signOffObject.signedForUser.userGUID && signOffObject.signOffType != "SEC Name" && signOffObject.showSignFor)
                return true;
            else return false;
        }
    }

    self.checkForSecName = function (signOffObject) {
        if (signOffObject.signOffType != "SEC Name") return true;
        else return false;
    }

    //radio buttons events

    self.unSignEvent = function (index, signOffObject) {
        signOffObject.signOffUser.title = "";
        signOffObject.signOffUser.userName = "";
        signOffObject.signOffUser.userGUID = "";
        self.signatureOperations[index] = "unsign";
    }

    self.signOnBehalOrOverRideEvent = function (index, signOffObject) {
        if (signOffObject.signedOnBehalfOfUser.userGUID)
            self.signatureOperations[index] = "overrideOnBehalf";
        else
            self.signatureOperations[index] = "signOnBehalf";
        self.signForUser[index] = null;
        signOffObject.signOffUser.userGUID = self.currentUserObject.userGUID;
        signOffObject.signOffUser.userName = self.currentUserObject.userName;
        signOffObject.signOffUser.title = self.currentUserObject.title;
    }

    self.signForOrOverRideEvent = function (index, signOffObject) {
        if (signOffObject.signedForUser.userGUID)
            self.signatureOperations[index] = "overrideSignFor";
        else
            self.signatureOperations[index] = "signFor";
        self.signForUser[index] = null;
        signOffObject.signOffUser.userGUID = "";
        signOffObject.signOffUser.userName = "";
        signOffObject.signOffUser.title = "";
    }

    self.signOrOverRideEvent = function (index, signOffObject) {
        if (signOffObject.signOffUser.userGUID)
            self.signatureOperations[index] = "overrideSign";
        else
            self.signatureOperations[index] = "sign";
        signOffObject.signOffUser.userGUID = self.currentUserObject.userGUID;
        signOffObject.signOffUser.userName = self.currentUserObject.userName;
        signOffObject.signOffUser.title = self.currentUserObject.title;
    }

    //dropdown change events    

    self.selectSecUser = function (index, selectedUser, signOffObject) {

        if (self.secUser[index]) {
            signOffObject.signOffUser.email = self.secUser[index].email;
            signOffObject.signOffUser.userName = self.secUser[index].userName;
            signOffObject.signOffUser.userGUID = self.secUser[index].userGUID;
            signOffObject.signOffUser.title = self.secUser[index].title;
        } else {
            signOffObject.signOffUser.email = "";
            signOffObject.signOffUser.userName = "";
            signOffObject.signOffUser.userGUID = "";
            signOffObject.signOffUser.title = "";
        }
    }

    self.selectSignOnBehalfUser = function (index, selectedUser, signOffObject) {

        if (signOffObject.signedOnBehalfOfUser.userGUID)
            self.signatureOperations[index] = "overrideOnBehalf";
        else
            self.signatureOperations[index] = "signOnBehalf";

        var showSignVal = 'signOnBehalf' + index;
        signOffObject.showSignVal = showSignVal;
        if (self.signOnBehalfUser[index]) {
            signOffObject.signedOnBehalfOfUser.userName = self.signOnBehalfUser[index].userName;
            signOffObject.signedOnBehalfOfUser.userGUID = self.signOnBehalfUser[index].userGUID;
            signOffObject.signedOnBehalfOfUser.title = self.signOnBehalfUser[index].title;
        } else {
            signOffObject.signedOnBehalfOfUser.userName = "";
            signOffObject.signedOnBehalfOfUser.userGUID = "";
            signOffObject.signedOnBehalfOfUser.title = "";
        }
    }

    self.selectSignForUser = function (index, selectedUser, signOffObject) {
        if (signOffObject.signedForUser.userGUID)
            self.signatureOperations[index] = "overrideSignFor";
        else
            self.signatureOperations[index] = "signFor";

        var showSignVal = 'signFor' + index;
        signOffObject.showSignVal = showSignVal;
        if (self.signForUser[index]) {
            signOffObject.signedForUser.userName = self.signForUser[index].userName;
            signOffObject.signedForUser.userGUID = self.signForUser[index].userGUID;
            signOffObject.signedForUser.title = self.signForUser[index].title;
            signOffObject.signOffUser.userName = self.signForUser[index].userName;
            signOffObject.signOffUser.userGUID = self.signForUser[index].userGUID;
            signOffObject.signOffUser.title = self.signForUser[index].title;
        } else {
            signOffObject.signedForUser.userName = "";
            signOffObject.signedForUser.userGUID = "";
            signOffObject.signedForUser.title = "";
            signOffObject.signOffUser.userName = "";
            signOffObject.signOffUser.userGUID = "";
            signOffObject.signOffUser.title = "";
        }
    }

    //edit submit cancel events

    self.edit = function (signOffObject, index) {
        self.oldsignOffObject = angular.copy(signOffObject);
        self.signatureIndexArray[index] = self.oldsignOffObject;
        if (signOffObject.signedOnBehalfOfUser.userGUID)
            self.signOnBehalfUser[index] = signOffObject.signedOnBehalfOfUser;
        if (signOffObject.signedForUser.userGUID) {
            self.signForUser[index] = signOffObject.signedForUser;
            signOffObject.signOffUser.userName = signOffObject.signedForUser.userName;
            signOffObject.signOffUser.title = signOffObject.signedForUser.title;
            signOffObject.signOffUser.userGUID = signOffObject.signedForUser.userGUID;
        }

        if (signOffObject.signOffUser.userGUID)
            self.secUser[index] = signOffObject.signOffUser;
    }

    self.cancelEdit = function (index, signoff) {

        self.signatureIndexArray[index].editmode = false;
        self.signatures[index] = self.signatureIndexArray[index];
        $timeout(function () {
            $scope.$apply(function () {
                angular.element('#collapse' + index).addClass('in');
            })
        })

        //clear dropdown selection on cancel
        //clear signOnBehalf user
        if (self.signatureIndexArray[index].signedOnBehalfOfUser.userGUID)
            self.signOnBehalfUser[index] = self.signatureIndexArray[index].signedOnBehalfOfUser;
        else
            self.signOnBehalfUser[index] = null;

        //clear signForUser
        if (self.signatureIndexArray[index].signedForUser.userGUID)
            self.signForUser[index] = self.signatureIndexArray[index].signedForUser;
        else
            self.signForUser[index] = null;

        //clear secUser
        if (self.signatureIndexArray[index].signOffUser.userGUID)
            self.secUser[index] = self.signatureIndexArray[index].signOffUser
        else
            self.secUser[index] = null;


        //angular.element('#collapse'+index).addClass('in');
        //angular.element('#collapse'+index).addClass('in');
    }

    self.submitSignaturesSignOff = function (parentIndex, signOffObject) {
        getSignatureOperation(parentIndex, signOffObject);
    }

    var getSignatureOperation = function (parentIndex, signOffObject) {
        var opr = self.signatureOperations[parentIndex];
        switch (opr) {
            case "unsign":
                deleteSignature(parentIndex, signOffObject.signatureGuid, signOffObject);
                break;
            case "sign":
                if (!compareObj(parentIndex, signOffObject))
                    createSignatures(parentIndex, signOffObject);
                break;

            case "signOnBehalf":
                if (!compareObj(parentIndex, signOffObject)) {
                    if (signOffObject.signatureGuid)
                        overrideSignature(parentIndex, signOffObject);
                    else
                        createSignatures(parentIndex, signOffObject);
                }
                break;

            case "signFor":
                if (!compareObj(parentIndex, signOffObject)) {
                    if (signOffObject.signatureGuid) {
                        signOffObject.signOffUser.userName = self.oldsignOffObject.signOffUser.userName;
                        signOffObject.signOffUser.userGUID = self.oldsignOffObject.signOffUser.userGUID;
                        signOffObject.signOffUser.title = self.oldsignOffObject.signOffUser.title;

                        overrideSignature(parentIndex, signOffObject);
                    } else {
                        signOffObject.signOffUser.userName = self.currentUserObject.userName;
                        signOffObject.signOffUser.userGUID = self.currentUserObject.userGUID;
                        signOffObject.signOffUser.title = self.currentUserObject.title;
                        createSignatures(parentIndex, signOffObject);
                    }

                }
                break;
            case "overrideSign":
            case "overrideOnBehalf":
                if (!compareObj(parentIndex, signOffObject))
                    overrideSignature(parentIndex, signOffObject);
                break;
            case "overrideSignFor":
                if (!compareObj(parentIndex, signOffObject)) {
                    if (signOffObject.signatureGuid) {
                        signOffObject.signOffUser.userName = self.oldsignOffObject.signOffUser.userName;
                        signOffObject.signOffUser.userGUID = self.oldsignOffObject.signOffUser.userGUID;
                        signOffObject.signOffUser.title = self.oldsignOffObject.signOffUser.title;
                        overrideSignature(parentIndex, signOffObject);
                    }
                }
                break;
            default:
                if (signOffObject.signatureGuid) {
                    if (!compareObj(parentIndex, signOffObject))
                        overrideSignature(parentIndex, signOffObject);
                }
                break;

        }
    }

    var compareObj = function (index, newSignOffObject) {
        return angular.equals(self.signatureIndexArray[index], newSignOffObject);
    }

    function deleteSignature(index, signatureGuid, signOffObject) {

        reportGridDataOperations.deleteSignature(self.reportGuid, signatureGuid).then(function (result) {
            if (result.status != undefined && checkStatus.checkCodeInStatusArray(result.status, 'DELETE')) {
                alert(index, result.data.message.userMessage, 'error');
            } else {
                ReportAuthoringAPI.getReportSignOff(self.reportGuid).then(function (reportResp) {
                    if (reportResp.signatures) {
                        self.showAlert[index] = false;
                        //insert editMode in both cases
                        var deletedObj = reportResp.signatures.filter(function (item) {
                            return item.signatureType.toLowerCase() == 'sign off' && item.signOffType == signOffObject.signOffType
                        })[0]
                        if (deletedObj)
                            self.signatures[index] = deletedObj;
                    }
                }, function (error) {
                    alert(index, error, 'error');
                })
            }
        }, function (error) {
            alert(index, 'signoff was not deleted', 'error');
        })
    }

    function overrideSignature(index, signOffObject) {
        var obj = {};
        obj.signatures = [];
        var objSignOff = getRequestObj(signOffObject, 'PUT');
        obj.signatures.push(objSignOff);
        reportGridDataOperations.updateSignature(obj).then(function (result) {
            if (result.status != undefined && checkStatus.checkCodeInStatusArray(result.status, 'PUT')) {
                alert(index, result.data.message.userMessage, 'error');
            } else {
                //get single report signOff after update
                if (result.length == 0) {
                    ReportAuthoringAPI.getSingleReportSignOff(self.reportGuid, signOffObject.signatureGuid).then(function (singleResp) {

                        //match and update here
                        if (singleResp.signatures && singleResp.signatures.length) {
                            //success
                            self.showAlert[index] = false;
                            self.signatures[index].editmode = false;
                            self.signatures[index] = singleResp.signatures[0];

                        } else {
                            //error
                            signOffObject.editmode = true;
                            alert(index, 'SignOff was updated but not retrived', 'error');
                            //self.signatures[index].editmode = true;
                        }
                    }, function (error) {
                        alert(index, error, 'error');
                        signOffObject.editmode = true;
                    })
                }
                //

            }
        }, function (error) {
            signOffObject.editmode = true;
            alert(index, 'SignOff was not updated', 'error');

        })
    }

    function createSignatures(index, signOffObject) {
        var obj = {};
        obj.signatures = [];
        var objSignOff = getRequestObj(signOffObject, 'POST');
        obj.signatures.push(objSignOff);

        reportGridDataOperations.createSignature(obj).then(function (result) {
            if (result.status != undefined && checkStatus.checkCodeInStatusArray(result.status, 'POST')) {
                alert(index, result.data.message.userMessage, 'error');
            } else {
                //get single report signOff after create
                if (result.signatures && result.signatures.length && result.signatures[0].signatureGuid) {
                    ReportAuthoringAPI.getSingleReportSignOff(self.reportGuid, result.signatures[0].signatureGuid).then(function (singleResp) {

                        if (singleResp.signatures && singleResp.signatures.length) {
                            //success
                            self.showAlert[index] = false;
                            self.signatures[index].editmode = false;
                            self.signatures[index] = singleResp.signatures[0];

                        } else {
                            //error
                            signOffObject.editmode = true;
                            alert(index, 'SignOff was created but not retrived', 'error');
                            //self.signatures[index].editmode = true;
                        }
                    }, function (error) {
                        alert(index, error, 'error');
                        signOffObject.editmode = true;
                    })
                }
            }


        }, function (error) {
            signOffObject.editmode = true;
            alert(index, error, 'error');

        })
    }

    function alert(index, message, operation) {
        self.showAlert[index] = true;
        self.serviceMessage[index] = message;
        addClassToAlertHtml(index, operation);
    }

    function addClassToAlertHtml(index, status) {
        if (status === "success") {
            angular.element('#signOffMsgDiv' + index).addClass('alert-success');
            angular.element('#signOffMsgDiv' + index).removeClass('alert-danger');
        } else {
            angular.element('#signOffMsgDiv' + index).removeClass('alert-success');
            angular.element('#signOffMsgDiv' + index).addClass('alert-danger');
        }
    }

    //certification section

    self.changeCertText = function (certificationObj, index) {
        if (certificationObj.signOffUser.userGUID) {
            self.certText[index] = "Over-Ride Sign";
        } else
            self.certText[index] = "Sign"
    }

    self.changeCertForText = function (certificationObj, index) {
        if (certificationObj.signedForUser.userGUID) {
            self.certForText[index] = "Over-Ride Sign For";
        } else
            self.certForText[index] = "Sign For"
    }

    self.isCertificationForChecked = function (index, certificationObj) {
        var showCertificationVal = 'signFor' + index;
        if (certificationObj.showCertificationVal == showCertificationVal && certificationObj.showSignFor)
            return true;

        if (!certificationObj.showCertificationVal) {
            if (certificationObj.signedForUser.userGUID && certificationObj.showSignFor)
                return true;
            else return false;
        }
    }

    self.unSignCertificationEvent = function (index, certificationObj) {
        certificationObj.signOffUser.title = "";
        certificationObj.signOffUser.userName = "";
        certificationObj.signOffUser.userGUID = "";
        self.certificationOperation[index] = "unsign";
    }

    self.signOrOverRideCertificationEvent = function (index, certificationObj) {
        if (certificationObj.signOffUser.userGUID)
            self.certificationOperation[index] = "overrideSign";
        else
            self.certificationOperation[index] = "sign";
        certificationObj.signOffUser.userGUID = self.currentUserObject.userGUID;
        certificationObj.signOffUser.userName = self.currentUserObject.userName;
        certificationObj.signOffUser.title = self.currentUserObject.title;
    }

    self.certificationForOrOverRideEvent = function (index, certificationObj) {

        if (certificationObj.signedForUser.userGUID)
            self.certificationOperation[index] = "overrideSignFor";
        else
            self.certificationOperation[index] = "signFor";
        self.certificationForUser[index] = null;
        certificationObj.signOffUser.userGUID = "";
        certificationObj.signOffUser.userName = "";
        certificationObj.signOffUser.title = "";
    }

    self.selectCertificationForUser = function (index, selectedUser, certificationObj) {

        if (certificationObj.signedForUser.userGUID)
            self.certificationOperation[index] = "overrideSignFor";
        else
            self.certificationOperation[index] = "signFor";

        var showCertificationVal = 'signFor' + index;
        certificationObj.showCertificationVal = showCertificationVal;

        if (self.certificationForUser[index]) {
            certificationObj.signedForUser.userName = self.certificationForUser[index].userName;
            certificationObj.signedForUser.userGUID = self.certificationForUser[index].userGUID;
            certificationObj.signedForUser.title = self.certificationForUser[index].title;
            certificationObj.signOffUser.userName = self.certificationForUser[index].userName;
            certificationObj.signOffUser.userGUID = self.certificationForUser[index].userGUID;
            certificationObj.signOffUser.title = self.certificationForUser[index].title;
        } else {
            certificationObj.signedForUser.userName = "";
            certificationObj.signedForUser.userGUID = "";
            certificationObj.signedForUser.title = "";
            certificationObj.signOffUser.userName = "";
            certificationObj.signOffUser.userGUID = "";
            certificationObj.signOffUser.title = "";
        }
    }

    this.dismissAlert = function (parentIndex) {
        if (parentIndex != undefined && parentIndex >= 0) {
            self.showAlert[parentIndex] = false;
            self.serviceMessage[parentIndex] = "";
        } else {
            self.showCertAlert = false;
            self.certificationServiceMsg = "";
        }
    }

    this.dismissSignatureAlert = function () {
        self.showSignaturesAlert = false;
        self.signatureServiceMsg = "";
        angular.element('#signaturesMsgDiv').removeClass('alert-danger');
    }

    function addClassToReportsAlerts(status, message) {
        self.showCertAlert = true;
        self.certificationServiceMsg = message;
        if (status === "success") {
            angular.element('#certificationMsgDiv').addClass('alert-success');
            angular.element('#certificationMsgDiv').removeClass('alert-danger');
        } else {
            self.certicationEditMode = true;
            angular.element('#certificationMsgDiv').removeClass('alert-success');
            angular.element('#certificationMsgDiv').addClass('alert-danger');
        }
    }

    self.editCertification = function () {
        self.oldCertficationObject = angular.copy(self.certifications);
        if (self.certifications) {
            //assign for each selectred certificationForUser
            for (var i = 0; i < self.certifications.length; i++) {
                if (self.certifications[i].signedForUser.userGUID) {
                    self.certificationForUser[i] = self.certifications[i].signedForUser;
                    self.certifications[i].signOffUser.userName = self.certifications[i].signedForUser.userName;
                    self.certifications[i].signOffUser.title = self.certifications[i].signedForUser.title;
                    self.certifications[i].signOffUser.userGUID = self.certifications[i].signedForUser.userGUID;
                }
            }
        }
    }

    self.cancelCertificationEdit = function (panelId) {
        self.certicationEditMode = false;
        self.certifications = self.oldCertficationObject;
        if (self.certifications) {
            for (var i = 0; i < self.certifications.length; i++) {
                if (self.certifications[i].signedForUser.userGUID)
                    self.certificationForUser[i] = self.certifications[i].signedForUser;
                else
                    self.certificationForUser[i] = null;
            }
            angular.element('#collapse' + panelId).addClass('in');
        }

    }

    self.saveCertification = function () {

        var postCertificationArr = [];
        var putCertificationArr = [];
        var deleteCertificationArr = [];

        //for(var i = 0 ; i < self.certifications.length ; i ++){                      

        for (var j = 0; j < self.oldCertficationObject.length; j++) {

            var certOpr = self.certificationOperation[j];
            if (certOpr) {
                switch (certOpr) {
                    case "unsign":
                        var delSignOffObj = {
                            "reportGUID": self.reportGuid,
                            "reportSignoffGUID": self.certifications[j].signatureGuid
                        }
                        deleteCertificationArr.push(delSignOffObj);
                        break;
                    case "sign":
                        if (!angular.equals(self.oldCertficationObject[j], self.certifications[j]))
                            postCertificationArr.push(getRequestObj(self.certifications[j], 'POST'));
                        break;
                    case "signFor":
                        if (!angular.equals(self.oldCertficationObject[j], self.certifications[j])) {
                            if (self.certifications[j].signatureGuid) {
                                self.certifications[j].signOffUser.userName = self.oldCertficationObject[j].signOffUser.userName;
                                self.certifications[j].signOffUser.userGUID = self.oldCertficationObject[j].signOffUser.userGUID;
                                self.certifications[j].signOffUser.title = self.oldCertficationObject[j].signOffUser.title;
                                putCertificationArr.push(getRequestObj(self.certifications[j], 'PUT'));
                            } else {
                                self.certifications[j].signOffUser.userName = self.currentUserObject.userName;
                                self.certifications[j].signOffUser.userGUID = self.currentUserObject.userGUID;
                                self.certifications[j].signOffUser.title = self.currentUserObject.title;
                                postCertificationArr.push(getRequestObj(self.certifications[j], 'POST'));
                            }
                        }
                        break;
                    case "overrideSign":
                        if (!angular.equals(self.oldCertficationObject[j], self.certifications[j]))
                            putCertificationArr.push(getRequestObj(self.certifications[j], 'PUT'));
                        break;
                    case "overrideSignFor":
                        if (!angular.equals(self.oldCertficationObject[j], self.certifications[j])) {
                            if (self.certifications[j].signatureGuid) {
                                self.certifications[j].signOffUser.userName = self.oldCertficationObject[j].signOffUser.userName;
                                self.certifications[j].signOffUser.userGUID = self.oldCertficationObject[j].signOffUser.userGUID;
                                self.certifications[j].signOffUser.title = self.oldCertficationObject[j].signOffUser.title;
                                putCertificationArr.push(getRequestObj(self.certifications[j], 'PUT'));
                            }
                        }
                        break;
                }
            } else {
                if (self.oldCertficationObject[j].isCertified) {
                    //delete or update
                    if (self.certifications[j].signOffUser.userGUID) {
                        //update 
                        if (!angular.equals(self.certifications[j], self.oldCertficationObject[j]))
                            putCertificationArr.push(getRequestObj(self.certifications[j], 'PUT'));
                    } else {
                        //delete
                        var delSignOffObj = {
                            "reportGUID": self.reportGuid,
                            "reportSignoffGUID": self.certifications[j].signatureGuid
                        }
                        deleteCertificationArr.push(delSignOffObj);
                    }
                } else {
                    //post call;
                    if (self.certifications[j].isCertified)
                        postCertificationArr.push(getRequestObj(self.certifications[j], 'POST'));
                }
            } // end of outer else
        } // end of for
        AddEditCertification(postCertificationArr, putCertificationArr, deleteCertificationArr)
            //}

    }

    function AddEditCertification(postCertificationArr, putCertificationArr, deleteCertificationArr) {

        var promises = [];
        if (postCertificationArr.length) {
            var requestPostObj = {
                "signatures": postCertificationArr
            }
            promises.push(reportGridDataOperations.createSignature(requestPostObj));
        }
        if (putCertificationArr.length) {
            var requestPutObj = {
                "signatures": putCertificationArr
            }
            promises.push(reportGridDataOperations.updateSignature(requestPutObj));
        }
        if (deleteCertificationArr.length) {
            var requestDeleteObj = {
                    "reportsignoffs": deleteCertificationArr
                }
                //bulk delele
            promises.push(projectDashboardOperations.deleteProjectSignoffs(requestDeleteObj));
        }

        $q.all(promises).then(function (responses) {
            if (responses.length) {

                //case create certification response
                if (postCertificationArr.length) {

                    var resp = responses[0];
                    if (resp.status != undefined && checkStatus.checkCodeInStatusArray(resp.status, 'POST')) {
                        var erroMsg = resp.data.message ? resp.data.message.userMessage : "Sorry. We encountered a problem while processing your request."
                        addClassToReportsAlerts("error", erroMsg);
                    } else {
                        self.showCertAlert = false;
                        //$state.reload();
                    }
                }

                //case update certification response
                if (putCertificationArr.length) {
                    var resp = responses[1] ? responses[1] : responses[0]
                    if (resp.status != undefined && checkStatus.checkCodeInStatusArray(resp.status, 'PUT')) {
                        var erroMsg = resp.data.message ? resp.data.message.userMessage : "Sorry. We encountered a problem while processing your request."
                        addClassToReportsAlerts("error", erroMsg);
                    } else {
                        self.showCertAlert = false;
                        //$state.reload();
                    }
                }

                //case delete certification response
                if (deleteCertificationArr.length) {
                    var resp = responses[2] ? responses[2] : responses[1] ? responses[1] : responses[0]
                    if (resp.status != undefined && checkStatus.checkCodeInStatusArray(resp.status, 'DELETE')) {
                        var erroMsg = resp.data.message ? resp.data.message.userMessage : "Sorry. We encountered a problem while processing your request."
                        addClassToReportsAlerts("error", erroMsg);
                    } else
                        self.showCertAlert = false;
                }

                if (!self.showCertAlert) {
                    getReportSignoffs(true);
                }
            } else self.certicationEditMode = false;
        })
    }

    function getRequestObj(signOffObject, operation) {

        var signObject = {};
        if (operation == 'POST') {
            signObject.templateSignatureGuid = signOffObject.templateSignatureGuid;
            signObject.reportGuid = self.reportGuid;
        } else if (operation == 'PUT')
            signObject.signatureGuid = signOffObject.signatureGuid;
        signObject.certificationText = signOffObject.certificationText;
        signObject.digitalSignatureInPrintedReport = signOffObject.digitalSignatureInPrintedReport;
        signObject.showInPrintedReport = signOffObject.showInPrintedReport;
        signObject.signOffUser = {};
        signObject.signedOnBehalfOfUser = {};
        signObject.signedForUser = {};
        signObject.signOffUser.userID = "";
        signObject.signOffUser.userGUID = signOffObject.signOffUser.userGUID;
        signObject.signOffUser.userName = signOffObject.signOffUser.userName;
        signObject.signOffUser.title = signOffObject.signOffUser.title;
        signObject.signOffUser.email = signOffObject.signOffUser.email;
        signObject.signOffUser.cellPhone = signOffObject.signOffUser.cellPhone;

        signObject.signedOnBehalfOfUser.userGUID = signOffObject.signedOnBehalfOfUser.userGUID;
        signObject.signedOnBehalfOfUser.userName = signOffObject.signedOnBehalfOfUser.userName;
        signObject.signedOnBehalfOfUser.title = signOffObject.signedOnBehalfOfUser.title;
        signObject.signedOnBehalfOfUser.email = signOffObject.signedOnBehalfOfUser.email;
        signObject.signedOnBehalfOfUser.cellPhone = signOffObject.signedOnBehalfOfUser.cellPhone;

        signObject.signedForUser.userGUID = signOffObject.signedForUser.userGUID;
        signObject.signedForUser.userName = signOffObject.signedForUser.userName;
        signObject.signedForUser.title = signOffObject.signedForUser.title;
        signObject.signedForUser.email = signOffObject.signedForUser.email;
        signObject.signedForUser.cellPhone = signOffObject.signedForUser.cellPhone;

        return signObject;
    }

    self.checkUncheckCertification = function (isCertified, certficationObj) {
        if (!isCertified) {
            certficationObj.signOffUser.title = "";
            certficationObj.signOffUser.userName = "";
            certficationObj.signOffUser.userGUID = "";
        } else {
            certficationObj.signOffUser.userName = self.currentUserObject.userName;
            certficationObj.signOffUser.title = self.currentUserObject.title;
            certficationObj.signOffUser.userGUID = self.currentUserObject.userGUID;
        }
    }


}]);
angular.module("ReportAuthoring").controller("SimplifiedReportController", ['$state', '$scope', '$location', 'BASEURL', '$stateParams', '$window', 'projectDashboardOperations', '$q', function ($state, $scope, $location, BASEURL, $stateParams, $window, projectDashboardOperations, $q) {

    var searchObject = $location.search();


    $scope.addProjectReportRedirect = function () {
        $state.go('addProjectReport', {
            projectGuid: searchObject.projectGuid,
            accountGuid: BASEURL.accountGUID,
            companyGuid: BASEURL.companyGUID,
            prevState: 'ReportWrite'
        });
    }

    $scope.projectDocumentRedirect = function () {
        $window.open($state.href('projectDocs', {
            projectGuid: $stateParams.projectGuid,
            companyGuid: BASEURL.companyGUID
        }, {
            absolute: true
        }), '_blank');

    }

    $scope.reportsProvider = {
        readData: function (term, page, pageSize) {
            if (term != undefined) {

                if (self.readDataCount == 0) {
                    projectDashboardOperations.setTerm(term);
                    self.readDataCount = self.readDataCount + 1;
                    self.readDataPage = page - 1;
                } else {
                    if ($('.select2-input').val() == projectDashboardOperations.getTerm()) {
                        self.readDataPage = self.readDataPage + pageSize;
                    } else {
                        projectDashboardOperations.setTerm(term);
                        self.readDataPage = page - 1;
                    }

                }
            }
            var deferred = $q.defer();
            if (term == "") {
                projectDashboardOperations.getProjectReportsWithPagination({
                        projectGuid: $stateParams.projectGuid,
                        limit: pageSize,
                        offset: (page * pageSize) - pageSize,
                        term: null
                    })
                    .then(function (result) {


                        deferred.resolve(result.reports);
                    }, function (reason) {

                        deferred.reject(reason);
                    });
            } else if (term != "") {

                projectDashboardOperations.getProjectReportsWithPagination({

                        projectGuid: $stateParams.projectGuid,
                        limit: pageSize,
                        offset: (page * pageSize) - pageSize,
                        term: term
                    })
                    .then(function (result) {


                        deferred.resolve(result.reports);
                    }, function (reason) {

                        deferred.reject(reason);
                    });

            }



            return deferred.promise;
        }
    }

    $scope.displayReports = function (result) {
        if (JSON.stringify(result) != "{}") {
            self.selectedProject = result;

            var property = result.property;
            var propNumber = (property.propertyNumber != null && property.propertyNumber != "") ? property.propertyNumber + " : " : property.propertyNumber;
            var filteredResult = propNumber + property.propertyName + " : " + property.address1 + " " + property.address2 + " - " + result.reportType;

            $('.select2-chosen').text(filteredResult);
            $state.go('ReportAuthoring.Write', {
                projectGuid: result.projectGuid,
                reportGuid: result.reportGuid,
                siteID: result.siteID
            }, {
                reload: true,
                inherit: false
            });

        } else {
            $('.goto-project').prop('disabled', true);

            $('.select2-chosen').text("Quick select a project");
            $('.select2-search-choice-close').css("display", "none");
        }
    }

    $scope.reportsSearchGenerateMarkup = function (result, element, search) {
        if (result != undefined && result.property != undefined) {
            var property = result.property;

            var propNumber = (property.propertyNumber != null && property.propertyNumber != "") ? property.propertyNumber + " : " : property.propertyNumber;
            var filteredResult = propNumber + property.propertyName + " : " + property.address1 + " " + property.address2 + " - " + result.reportType;

            var n = filteredResult.toLowerCase().indexOf(search.term.toLowerCase());
            var matchText = filteredResult.substring(n, n + search.term.length)
            var markup = "";
            if (n >= 0) {
                markup += "<div>" + filteredResult.substring(0, n) + "<u>" + matchText + "</u>" + filteredResult.substring(n + search.term.length, filteredResult.length) + "</div>";
                markup += "</div>";
            } else {
                markup += "<div>" + filteredResult + "</div>";
            }
            return markup;
        }
    }

}]);;
angular.module('ReportAuthoring').controller('TINYEditorCtrl', ['$scope', '$http', '$modal', function ($scope, $http, $modal) {
    var self = this;
    $scope.tinyDefText1 = "The purpose of the Phase I Environmental Site Assessment (ESA) was to evaluate the current and historical conditions of the Subject Property in an effort to identify recognized environmental conditions in connection with the Subject Property.";
    $scope.tinyDefText2 = "The purpose of the Phase I Environmental Site Assessment (ESA) was to evaluate the current and historical conditions of the Subject Property in an effort to identify recognized environmental conditions in connection with the Subject Property.";
    $scope.tinyDefText3 = "The purpose of this Phase I Environmental Site Assessment (ESA) was to identify existing or potential Recognized Environmental Conditions (as defined by ASTM Standard E 1527-05) in connection with the Subject Property. {ConsultantName} understands that the findings of this study will be used to evaluate a pending financial transaction in connection with the Subject Property.The Phase I ESA is being conducted as part of environmental due diligence prior to property transfer or refinancing.";
    $scope.tinyDefText4 = "Write your comments here.......";

    this.resp = [{
        "Sections": [{
                "html": "<div><h2><strong><span>{{section1Title}}</span></strong></h2></div><br><tag-with-dashes></tag-with-dashes><br><textarea data-ui-tinymce id='tinymce1' ng-controller='TINYEditorCtrl' ng-model='tinyDefText1'></textarea><hr><div><button  id='createHost' class='btn btn-mini btn-success' data-ng-click='val();createTable()'><b>Create Table</b></button></div><br> <dynamic-table ng-show='show==true'></dynamic-table>",
                "contentValues": {
                    "section1Title": "1.0 EDR Order Status",
                    "choice": {
                        "Y": "Consulting",
                        "N": "Application Development and Support",
                        "NS": "Testing"
                    },
                    "table": {
                        "title": "At A Glance Description:",
                        "r11": "Item",
                        "r12": "Condition",
                        "r21": "General Condition",
                        "r22": "Good"
                    },
                    "tagData": "Please refer to Default Language for EDR Order Status."
                }

        },
            {
                "html": "<div><h2><strong><span>{{section1Title}}</span></strong></h2></div><br><tag-with-dashes></tag-with-dashes><br><ul> <li>{{Y}}</li> <li>{{N}}</li> <li>{{NS}}</li></ul><br><div><button ng-controller='TINYEditorCtrl' id='createHost' class='btn btn-mini btn-success' data-ng-click='uploadSpreadsheet()'><b>Upload Spreadsheet</b></button></div><br> <textarea data-ui-tinymce id='tinymce2' ng-controller='TINYEditorCtrl' ng-model='tinyDefText2'></textarea><br><h3>Attached Files:</h3>     <div><table class='table table-condensed  table-bordered table-hover top-margin'><thead><tr><th>Action</th><th>File Name</th><th>File Size</th></tr></thead><tbody><tr ><td><a style='cursor: pointer;' >Remove</a></td><td>file 1</td><td>10 Bytes</td></tr></tbody></table></div>",
                "contentValues": {
                    "section1Title": "2.0 Environmental Report Summary",
                    "choice": {
                        "Y": "EDR Environmental Consulting",
                        "N": "EDR Environmental Application Development and Support",
                        "NS": "EDR Environmental Testing"
                    },
                    "table": {
                        "title": "At A Glance Description:",
                        "r11": "Item",
                        "r12": "Condition",
                        "r21": "General Condition",
                        "r22": "Good"
                    },
                    "tagData": "Please refer to Default Language for Environmental Report Summary."
                }

     },
            {
                "html": "<div><h2><strong><span>{{section1Title}}</span></strong></h2></div><br><tag-with-dashes></tag-with-dashes><br><textarea data-ui-tinymce id='tinymce3' ng-controller='TINYEditorCtrl' ng-model='tinyDefText3'></textarea><br><p> Please refer to Default Language for narrative options for this section.</p><br><textarea data-ui-tinymce id='tinymce4' ng-controller='TINYEditorCtrl' ng-model='tinyDefText4'></textarea>",
                "contentValues": {
                    "section1Title": "3.0 Reason For Performing Phase I ESA",
                    "choice": {
                        "Y": "EDR Environmental Consulting",
                        "N": "EDR Environmental Application Development and Support",
                        "NS": "EDR Environmental Testing"
                    },
                    "table": {
                        "title": "At A Glance Description:",
                        "r11": "Item",
                        "r12": "Condition",
                        "r21": "General Condition",
                        "r22": "Good"
                    },
                    "tagData": "Please refer to Default Language for Reason For Performing Phase I ESA."
                }

      }
        ]
    }]

    this.obj = {
        selectedSection: ''
    };
    $scope.obj = this.obj;
    this.sectionClicked = function (section) {
        this.obj.selectedSection = section.contentValues.section1Title;

    }

    $scope.uploadSpreadsheet = function () {
        var modalInstance = $modal.open({
            templateUrl: 'UploadSpreadsheet.html',
            scope: $scope,
            controller: UploadSpreadsheetController,
            size: 1

        })
    };

    var UploadSpreadsheetController = function ($scope, $modalInstance) {



        $scope.Cancel = function () {

            $modalInstance.close()
        }

    }

}]); // view map tool controller 
angular.module('ReportAuthoring').controller('ViewMapController', ['$modalInstance', '$scope', 'mapLocation', function ($modalInstance, $scope, mapLocation) {

    var self = this;
    self.searchLocation = {};
    init();

    function init() {
        self.searchLocation.latitude = mapLocation.latitude;
        self.searchLocation.longitude = mapLocation.longitude;
    }

    self.CancelDelete = function () {
        $modalInstance.close();
    }
}]);;
angular.module("ReportAuthoring").controller("addADAChecklistController", ['$state', '$stateParams', function ($state, $stateParams) {

    var self = this;
    // data container for input fields in view
    self.data = {};

    var modalData = $stateParams.modalData;

    self.cancel = function () {
        close();
    };

    /*function close() {
        //$state.go("ReportAuthoring.Appendices");
        //opener.location.href = '/redirect';
        close();
    }*/

    self.save = function () {
        modalData.refreshAfter = true;
        close();
    }
}]);;
angular.module("ReportAuthoring").controller("addCommunicationRecordController", ['$modalInstance', 'modalData', function ($modalInstance, modalData) {

    var self = this;
    // data container for input fields in view
    self.data = {};

    self.cancel = function () {
        close(false);
    };

    function close(refreshAfter) {
        modalData.refreshAfter = refreshAfter;
        $modalInstance.close();
    }


    self.open = {};

    // Disable weekend selection
    self.disabled = function (date, mode) {
        return (mode === 'day' && (new Date().toDateString() == date.toDateString()));
    };

    self.dateOptions = {
        showWeeks: false,
        startingDay: 1
    };

    self.timeOptions = {
        readonlyInput: true,
        showMeridian: false
    };

    self.openCalendar = function (e, date) {
        e.preventDefault();
        e.stopPropagation();

        self.open[date] = true;
    };

}]);; // appendix tool controller 
angular.module('ReportAuthoring').controller('appendixToolController', ['$modalInstance', 'modalData', '$sce', '$rootScope', function ($modalInstance, modalData, $sce, $rootScope) {
    var self = this;

    self.tool = modalData.tool;

    self.close = function () {
        $modalInstance.close();
    };

    self.getTrustedUrl = function (value) {
        return $sce.trustAsResourceUrl(value);
    };

    self.submitedSuccessfully = function () {
        alert('angular callback successfully invoked. Will refresh data now...');
        modalData.refreshAfter = true;
        $modalInstance.close();
    };

    $rootScope.$on('submit-success-callback-invoked', function () {
        self.submitedSuccessfully();
    });

}]);;
angular.module("ReportAuthoring").controller("generalInformationFormController", ["$rootScope", "$scope", "GeneralInformationAPI", "$modal", "$window", "$location", "$state", "edrOrderAPI", "reportGridDataOperations", "BASEURL", function ($rootScope, $scope, GeneralInformationAPI, $modal, $window, $location, $state, edrOrderAPI, reportGridDataOperations, BASEURL) {

    var self = this;
    var offices = [];

    self.data = {};
    var reportGuid = $location.search().reportGuid;
    var sectionGuid = $rootScope.giSectionGuid ? $rootScope.giSectionGuid : $location.search().sectionGuid;
    self.portfolioOrderParamObj = {
        projectGuid: $state.params.projectGuid
    };
    self.userMsg = false;
    self.userMsgAlertClass = false;

    function init() {
        self.offices = [];
        getOffices();
        $scope.delay = 0;
        $scope.minDuration = 0;
        $scope.message = 'Please Wait...';
        $scope.backdrop = true;
        $scope.promise = GeneralInformationAPI.get(reportGuid, sectionGuid).then(function (data) {
            self.data = data;
            self.instruction = data.generalInformation.instructions.html;
            for (i = 0; i < data.generalInformation.dataFields.length; i++) {
                if (data.generalInformation.dataFields[i].name == "Project") {
                    for (j = 0; j < data.generalInformation.dataFields[i].fields.length; j++) {
                        if (data.generalInformation.dataFields[i].fields[j].mappedField == "projectName") {
                            self.projectName = data.generalInformation.dataFields[i].fields[j].fieldValue;
                            break;
                        }
                    }
                    break;
                }
            }
        }, function (error) {
            self.userMsg = "<strong>Error:</strong> Something went wrong while getting General Information details of this project. " + error;
            self.userMsgAlertClass = "alert-danger";
        });
    }
    $('.expandContent').click(function () {
        $('.showMe').slideToggle('slow');
    });

    init();

    function getOffices() {
        var promise = GeneralInformationAPI.getAccountManagement(BASEURL.companyGUID);
        promise.then(function (resp) {
            if (resp && resp.length && resp[0].offices) {
                self.offices = resp[0].offices;
            } else {
                self.userMsg = "<strong>Error:</strong> Something went wrong while getting your company's offices. Please refresh the page.";
                self.userMsgAlertClass = "alert-danger";
            }
        }, function (error) {
            self.userMsg = "<strong>Error:</strong> Something went wrong while getting your company's offices. Please refresh the page.";
            self.userMsgAlertClass = "alert-danger";
        });
    }

    self.openEdrCredentialsModal = function () {
        var modalInstance = $modal.open({
            templateUrl: 'orderDBReport.html',
            scope: $scope,
            controller: 'OrderDatabaseReportsController as OrderDbReportsCtrl',
            resolve: {
                siteDetails: function (reportGridDataOperations) {
                    return reportGridDataOperations.getSiteInformation(reportGuid).then(function (response) {
                        return response;
                    });
                },
                userDetails: function (accountMgmtAPI, BASEURL) {
                    return accountMgmtAPI.getUser(BASEURL.accountGUID_GI).then(function (resp) {
                        return resp;
                    });
                },
                invokedFrom: function () {
                    return "SingleSiteOrder";
                }
            }
        });
    }
}]);;
angular.module("ReportAuthoring").controller('llpQuestionnaireController', ['$state', '$stateParams', function ($state, $stateParams) {
    var self = this;
    var modalData = $stateParams.modalData;

    self.open = {
        date: false
    };

    // Disable weekend selection
    self.disabled = function (date, mode) {
        return (mode === 'day' && (new Date().toDateString() == date.toDateString()));
    };

    self.dateOptions = {
        showWeeks: false,
        startingDay: 1
    };

    self.timeOptions = {
        readonlyInput: true,
        showMeridian: false
    };

    self.openCalendar = function (e, date) {
        e.preventDefault();
        e.stopPropagation();

        self.open[date] = true;
    };

    self.submit = function ($event) {
        // do submit functionality here

        // invoke submit success callback
        modalData.refreshAfter = true;
        // close modal after
        closeModal();
    };

    self.submitPut = function () {

    };

    self.cancel = function () {
        closeModal();
    };

    /*function invokeCallback(event) {
        var target = event.target;
        var element = angular.element(target);
        var callbackExpression = element.attr('submit-success');
        eval(callbackExpression);
    }*/

    function closeModal() {
        $state.go("ReportAuthoring.Appendices");
    }

}]);;
angular.module('ReportAuthoring').controller('tinyMCECtrl', ['$scope', '$http', '$modal', function ($scope, $http, $modal) {
    console.log("yoooooooooooooooooooooooooo");
    var self = this;

    this.tinyDefText = "hi tiny";


}]);
var reportOutputModule = angular.module('ReportOutput', []);

reportOutputModule.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/');

    var baseViewFolder = 'app/modules/ReportOutput/views/';
    var baseControllerFolder = 'app/modules/ReportOutput/controllers/';
    $stateProvider.state('reportOutput', {
            url: '/ReportOutput',
            templateUrl: baseViewFolder + 'reportOutput.html',
            controller: 'ReportOutputController as reportOutput'
        })
        .state('reportOutputSetupT', {
            url: '/ReportOutputSetup',
            templateUrl: baseViewFolder + 'reportOutputSetup.html',
            controller: 'ReportOutputSetupController as reportOutputSetup'
        });
}]);;
var reportOutputModule = angular.module('ReportOutput');
reportOutputModule.controller('ReportOutputController', ['ReportOutputAPI', function (ReportOutputAPI) {

    var self = this;
    //self.sections = [];

    function init() {
        var promise = getData();
        promise.then(function (data) {

            var setupPromise = ReportOutputAPI.getReportSetup();
            setupPromise.then(function (html) {
                console.log("setup promise");
                console.log(html);
                console.log(JSON.stringify(html));
                data.html = html;

                self.sections = [];
                self.sections.push(data);

                getReportData(12);
            });
        });
    }

    function getData() {
        return ReportOutputAPI.get().then(function (data) {
            return data;
        });
    }

    init();

}]);

reportOutputModule.directive('replaceData', ['$parse', '$compile', function ($parse, $compile) {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            var sectionJson = $parse(attrs.replaceData)(scope);
            angular.forEach(sectionJson.contentValues.reportData.data, function (sectionData) {
                var key = sectionData.key;
                var val = sectionData.html;
                var compile = sectionData.compile;

                var result = element[0].querySelector("#" + key);
                if (!result) return;

                var lastNestedChild = getLastNestedChild(result);
                var el = lastNestedChild.parentElement;

                var angularEl = angular.element(el);
                angularEl.html(val);

                if (!!compile) {
                    $compile(angularEl)(scope);
                }
                //angular.element(result.lastChild)[0].html("<a>asd</a>")
                //$compile(angularEl.contents())(scope);
            });

            function getLastNestedChild(element) {
                if (!element.lastChild) return element;
                return getLastNestedChild(element.lastChild);
            }
        }
    }
}]);;
var setupModule = angular.module('ReportOutput');
setupModule.controller('ReportOutputSetupController', ['$scope', 'ReportOutputAPI', '$state', 'ReportAuthoringAPI', '$parse', '$timeout', '$document', 'ReportOutputAPI', function ($scope, ReportOutputAPI, $state, ReportAuthoringAPI, $parse, $timeout, $document, ReportOutputAPI) {

    var self = this;

    self.saveSetup = function () {
        var ckInstance = $scope.ckInstance;
        var data = ckInstance.getData();
        /*var promise = ReportOutputAPI.saveReportSetup(data);
        promise.then(function(result){
            $state.go("reportOutput");
        });*/



        //var tableHeader = ckInstance.document.$.querySelector("#section-table table th");
        var result = ckInstance.document.$.querySelector("#section-table table th").firstChild;
        var cloned = result.cloneNode(true);
        var lastChild = getLastNestedChild(cloned);
        var angularEl = angular.element(lastChild);
        angularEl.html("");
        var tableHeaderElements = cloned;

        var allReportTh = document.querySelectorAll("#reportSectionData table th");
        angular.forEach(allReportTh, function (thElement) {
            var clonedHeaderElems = tableHeaderElements.cloneNode(true);
            var appended = clonedHeaderElems;
            if (thElement.firstChild) {
                var first = thElement.firstChild;
                var clonedChild = first.cloneNode(true);
                appended = clonedHeaderElems.appendChild(clonedChild);
            }
            var angularTh = angular.element(thElement);
            angularTh.html(appended.html);
        });
    };

    function getLastNestedChild(element) {
        if (!element.lastChild) return element;
        return getLastNestedChild(element.lastChild);
    }

    function init(reportId) {
        getReportData(reportId);
    }
    self.reportId = 12;
    self.obj = {
        selectedSection: {}
    };
    self.sectionIdList = [];
    init(self.reportId);

    function getReportData(reportId) {
        self.resp = {
            sections: []
        }

        var promise = getReportToc(reportId);
        promise.then(function () {
            createSectionIdListFromToC();

            if (!self.sectionIdList || !self.sectionIdList.length) return;

            startRetrievingSectionData();
        });
    }

    function getReportToc(reportId) {
        var promise = ReportAuthoringAPI.getToC(reportId);
        return promise.then(function (tocSections) {
            self.toc = {
                sections: tocSections
            }

            //var first = tocSections[0];
            //self.obj.selectedSection = first.sectionID;
            //self.selectedSection = first;
        });
    }

    function createSectionIdListFromToC() {
        var tocSections = self.toc.sections;
        if (!tocSections || !tocSections.length) return;

        for (var i = 0; i < tocSections.length; i++) {
            var local = tocSections[i];
            extractSectionIdAndPushToArr(local);
        }
    }

    function extractSectionIdAndPushToArr(section) {
        var sectionId = section.sectionID;
        self.sectionIdList.push(sectionId);

        var nestedSectionArr = section.sections;
        if (!nestedSectionArr) return;
        for (var i = 0; i < nestedSectionArr.length; i++) {
            var nested = nestedSectionArr[i];
            extractSectionIdAndPushToArr(nested);
        }
    }

    function startRetrievingSectionData() {
        var firstSectionId = self.sectionIdList[0];
        getSectionData(firstSectionId);
    }

    function getSectionData(sectionId) {
        if (!sectionId) return;

        var retrieved = checkIfSectionRetrieved(sectionId);
        if (retrieved) return;

        var promise = ReportOutputAPI.getSection(null, sectionId);
        promise.then(function (section) {

            self.resp.sections.push(section);

            var nextSectionId = getNextSectionId(sectionId);
            if (!nextSectionId) return;
            $timeout(function () {
                getSectionData(nextSectionId);
            }, 2000);
        });
    }

    function checkIfSectionRetrieved(sectionId) {
        var existingCount = $parse('self.resp.sections.length')(self);
        if (existingCount <= 0) return false;

        var arr = self.resp.sections;
        for (var i = 0; i < arr.length; i++) {
            var local = arr[i];
            if (local && local.sectionID == sectionId && local.contentValues) {
                return true;
            }
        }
        return false;
    }

    function getNextSectionId(currentSectionId) {
        if (!self.sectionIdList || !self.sectionIdList.length) return 0;
        var index = (self.sectionIdList.indexOf(currentSectionId) + 1);
        if (index < 0 || index >= self.sectionIdList.length) return 0;
        return self.sectionIdList[index];
    }


    self.sectionVisible = function (section) {
        return self.selectedSection && self.selectedSection.sectionID == section.sectionID; //self.obj.selectedSection == section.SectionID;
    }
    self.sectionClicked = function (section, avoidScroll) {
        var sectionId = section.sectionID;
        if (self.showAllSections && !avoidScroll) {
            scrollToSection(sectionId);
        }

        self.obj.selectedSection = sectionId;
        self.selectedSection = section;
        self.selectedLayout = null;
    }

    self.layoutClicked = function (label) {
        self.selectedSection = null;
        self.selectedLayout = label;
    }


}]);;
var reportOutputModule = angular.module('ReportOutput');
reportOutputModule.service('ReportOutputAPI', ['APIFactory', '$q', 'ReportOutputUrl', function (APIFactory, $q, ReportOutputUrl) {
    this.get = function () {
        var url = "app/modules/ReportOutput/sampleJson/sample.json";
        return APIFactory.get(url).then(function (result) {
            return result.data;
        }, function (error) {

        });
    }

    this.html = "";
    this.saveReportSetup = function (html) {
        this.html = html;
        var defer = $q.defer();
        defer.resolve(true);
        return defer.promise;
    }

    this.getReportSetup = function () {
        var defer = $q.defer();
        defer.resolve(this.html);
        return defer.promise;
    }

    this.getSection = function (reportId, sectionId) {
        var url = ReportOutputUrl.GETAPI_SECTION;
        var params = {
            reportID: reportId,
            sectionID: sectionId
        };
        return APIFactory.get(url, params).then(function (response) {
            return response.Section;
        });
    }
}]);;
angular.module("ReportOutput").constant('ReportOutputUrl', {
    GETAPI_SECTION: 'app/modules/ReportOutput/sampleJson/sampleSection_{sectionID}.json'
});; // define module
angular.module('ReportSetup', ['ui.router.state', 'ui.bootstrap', 'colorpicker.module']);

// routers
angular.module('ReportSetup').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');

        var baseViewsFolder = 'app/modules/ReportSetup/views/';
        $stateProvider.state('reportSetup', {
            url: '/ReportSetup',
            templateUrl: baseViewsFolder + 'ReportSetup.html'
        });
    }
]);;
angular.module('ReportSetup').controller('ParcelUI.ReportOutputSetup.ReportSetupCtrl', ['$scope', '$modal', '$compile', 'ReportOutputSetupAPI', 'ReportOutputSetupAPIConstants', '$window', function ($scope, $modal, $compile, ReportOutputSetupAPI, ReportOutputSetupAPIConstants, $window) {

    // global controller var 
    var self = this;
    // parent object
    var setUpParent = self.setupProperties = {};

    self.ouputSetupType = ReportOutputSetupAPIConstants.OUTPUTSETUP_TYPE.Report;

    setUpParent.reportSection = {
        coll: [],
        selected: null
    };

    self.showDisplayMsg = function (msg, type) {
        self.serviceResponseAlert = true;
        self.serviceResponseText = msg;
        self.msgType = 'alert-' + (type || 'danger');
    }

    var repSetupToolsController = function ($scope, $modalInstance, selectedReportOutputSetupId, selectedReportOutputSetup, companyId, reportColl) {
        $scope.cloned = angular.copy(selectedReportOutputSetup);
        $scope.reportColl = reportColl;

        $scope.deleteReport = function () {
            var data = {
                "reportOutputSetup": $scope.cloned
            }
            var deleteReportPromise = ReportOutputSetupAPI.delete(selectedReportOutputSetupId, data);
            deleteReportPromise.then(function (resp) {
                // console.log("11111111111: "+JSON.stringify(setUpParent.reportSection.coll));
                for (var i = 0; i < setUpParent.reportSection.coll.length; i++) {

                    if (selectedReportOutputSetupId == setUpParent.reportSection.coll[i].reportOutputSetupID) {

                        setUpParent.reportSection.coll.splice(i, 1);


                        setUpParent.reportSection.setupReady = false;
                    }
                }
                if (setUpParent.reportSection.coll.length < 1) {
                    self.showDisplayMsg('There are no report setup for this company', 'danger');

                } else {
                    self.showDisplayMsg('Report output deleted successfully', 'success');
                }
                $modalInstance.close();
            }, function (error) {
                self.showDisplayMsg(error);
            });
        }

        $scope.renameReport = function (form) {
            if (!form || form.$invalid) {
                // self.showDisplayMsg('Invalid Form Submission');
                return;
            }
            var updateReportPromise = ReportOutputSetupAPI.put(selectedReportOutputSetupId, $scope.cloned);
            updateReportPromise.then(function (resp) {
                self.showDisplayMsg('Report output renamed successfully', 'success');
                $modalInstance.close();
            }, function (error) {
                self.showDisplayMsg(error);
            });
        }

        $scope.duplicate = function (form) {
            if (!form || form.$invalid) {
                // self.showDisplayMsg('Invalid Form Submission');
                return;
            }

            switch (this.copyToAction) {
                case "Existing":

                    $scope.cloneReport.apply(this);
                    //$scope.cloneReport();
                    break;
                case "New":
                    $scope.createReport.apply(this);
                    break;
            }
        }

        $scope.createReport = function () {
            var post = {
                "reportOutputSetupID": selectedReportOutputSetupId,
                "companyID": companyId,
                "name": this.toCreateReport
            }
            var updateReportPromise = ReportOutputSetupAPI.post(post)
            updateReportPromise.then(function (resp) {
                self.showDisplayMsg('Report output duplicated successfully', 'success');
                $modalInstance.close();
            }, function (error) {
                self.showDisplayMsg(error);
            });
        }

        $scope.cloneReport = function () {
            var copyToReport = this.copyToReport;
            var copyFrom = this.report;
            if (copyToReport.reportOutputSetupID == copyFrom.reportOutputSetupID) {
                this.duplicateError = "Copy from and copy to reports can't be same. Please select two different reports.";

                return;
            }
            var putData = {
                "fromReportOutputSetupID": copyFrom.reportOutputSetupID,
                "name": copyToReport.name,
                "cssData": copyToReport.cssData,
                "cssJson": copyToReport.cssJson,
                "jsonData": copyToReport.jsonData
            };
            var updateReportPromise = ReportOutputSetupAPI.put(copyToReport.reportOutputSetupID, putData);
            updateReportPromise.then(function (resp) {
                self.showDisplayMsg('Report output duplicated successfully', 'success');
                $modalInstance.close();
            }, function (error) {
                self.showDisplayMsg(error);
            });
        }


        $scope.CancelDelete = function () {

            $modalInstance.close()
        }

    }

    // general action
    var Action = function (name) {
        this.name = name;
        this.selected = false;
    };
    Action.prototype.cancel = function () {
        this.selected = false;
    }
    Action.prototype.controller = repSetupToolsController;

    /*var deleteReportController = function($scope, $modalInstance, selectedReportOutputSetupId, selectedReportOutputSetup) {
        $scope.deleteReport = function() {
            var deleteReportPromise = ReportOutputSetupAPI.delete(selectedReportOutputSetupId);
            deleteReportPromise.then(function(resp){
                $modalInstance.close();
            }, function(error){
                alert(error);
            })
        }
        $scope.CancelDelete = function() {
            $modalInstance.close()
        }
    }
    var renameReportController = function($scope, $modalInstance, selectedReportOutputSetupId, selectedReportOutputSetup) {
        $scope.renameReport = function() {
            var deleteReportPromise = ReportOutputSetupAPI.delete(selectedReportOutputSetupId);
            deleteReportPromise.then(function(resp){
                $modalInstance.close();
            }, function(error){
                alert(error);
            })
        }
        $scope.CancelDelete = function() {
            $modalInstance.close()
        }
    }
    var duplicateReportController = function($scope, $modalInstance, selectedReportOutputSetupId, selectedReportOutputSetup) {
        $scope.deleteReport = function() {
            var deleteReportPromise = ReportOutputSetupAPI.delete(selectedReportOutputSetupId);
            deleteReportPromise.then(function(resp){
                $modalInstance.close();
            }, function(error){
                alert(error);
            })
        }
        $scope.CancelDelete = function() {
            $modalInstance.close()
        }
    }*/




    var deleteAction = new Action('Delete');

    deleteAction.url = 'repSetupDelete.html';
    //deleteAction.controller = deleteReportController;

    var renameAction = new Action('Rename');
    renameAction.url = 'repSetupRename.html';
    //renameAction.controller = renameReportController;

    var duplicateAction = new Action('Duplicate');
    duplicateAction.url = 'repSetupDuplicate.html';
    //duplicateAction.controller = duplicateReportController;

    var copyToAction = new Action('Copy TO');


    // specific actions if any operation overridden
    var CopyFromAction = function () {
        Action.call(this, 'Copy FROM');
        this.report = null;
    };
    CopyFromAction.prototype = Object.create(Action.prototype)
    CopyFromAction.prototype.constructor = copyFromAction;
    CopyFromAction.prototype.cancel = function () {
        // overridden functionality
        if (this.report) {
            this.report = null;
        }
        // base operation
        Action.prototype.cancel.apply(this);
    }
    var copyFromAction = new CopyFromAction();


    setUpParent.toolOptions = {
        actions: {
            delete: deleteAction,
            rename: renameAction,
            copyFrom: copyFromAction,
            copyTo: copyToAction,
            duplicate: duplicateAction
                /*delete: {
                    name: 'Delete',
                    selected: false
                },
                rename: {
                    name: 'Rename',
                    selected: false
                },
                copyFrom: {
                    name: 'Copy FROM',
                    selected: false,
                    report: null,
                    cancel: function() {
                        setUpParent.toolOptions.actions.copyFrom.report = null;
                        setUpParent.toolOptions.actions.copyFrom.selected = false;
                    }
                },
                copyTo: {
                    name: 'Copy TO',
                    selected: false
                }*/
        },
        currentSelected: null,
        selectAction: function (action) {

            var popupAction = setUpParent.toolOptions.actions[action];
            OpenPopup(popupAction);
            var actionColl = setUpParent.toolOptions.actions;
            //if (action && actionColl.hasOwnProperty(action)) {
            //    var actionProp = actionColl[action];
            //    var current = setUpParent.toolOptions.currentSelected;

            //    if (current) {
            //        current.selected = false;
            //    }

            //    actionProp.selected = true;
            //    setUpParent.toolOptions.currentSelected = actionProp;
            //}
        }
    };

    // tool options dependent on report selection
    setUpParent.reportSectionChanged = function () {
        /*console.log("selectionChanged" + setUpParent.toolOptions.currentSelected);
        if (setUpParent.toolOptions.currentSelected) {
            setUpParent.toolOptions.currentSelected.selected = false;
        }*/

        //setUpParent.reportSection.selected

        var selectedReport = setUpParent.reportSection.selected;
        /*var selectedReportId = selectedReport.reportOutputSetupID;
        clearReportData();
        getReportOutputSetup(selectedReportId);*/
        setReportData(selectedReport);
        $scope.ReportSetupName = selectedReport.name;
    };

    var getReportOutputSetup = function (reportOutputSetupID) {
        var getReportOutputSetupPromise = ReportOutputSetupAPI.get(reportOutputSetupID);
        getReportOutputSetupPromise.then(function (report) {
            setReportData(report);
            setUpParent.reportSection.setupReady = true;
        });
    }
    var setReportData = function (data) {
        if (data) {
            var cssVal = data.cssJson;
            var jsonVal = data.jsonData;
            self.cssData = JSON.parse(cssVal);
            self.jsonData = JSON.parse(jsonVal);
        } else {
            self.cssData = null;
            self.jsonData = null;
        }
        setUpParent.reportSection.setupReady = true;
    }
    var clearReportData = function () {
        setUpParent.reportSection.setupReady = false;
    }
    var clearReport = function () {
        self.serviceResponseAlert = false;
        setUpParent.reportSection.selected = null;
        setUpParent.reportSection.setupReady = false;
        setUpParent.reportSection.coll = null;
    }
    self.selectedCompanyChanged = function () {
        clearReport();
        var getListPromise = ReportOutputSetupAPI.getList(self.selectedCompanyId, self.ouputSetupType);


        getListPromise.then(function (reportOutputSetupList) {
            if (reportOutputSetupList.length < 1) {
                self.showDisplayMsg('There are no report setup for this company', 'danger');

            }
            setUpParent.reportSection.coll = reportOutputSetupList;
        }, function (error) {

        });
    }

    function OpenPopup(popupAction) {
        /*if (action == 'delete') {
            var url = 'repSetupDelete.html';
        } else if (action == 'rename') {
            var url = 'repSetupRename.html';
        } else if (action == 'copyFrom') {
            var url = 'repSetupCopyFrom.html';
        } else if (action == 'copyTo') {
            var url = 'repSetupCopyTo.html';
        } else if (action == 'duplicate') {
            var url = 'repSetupDuplicate.html';
        }*/
        var url = popupAction.url;
        var controller = popupAction.controller;

        var modalInstance = $modal.open({
            templateUrl: url,
            scope: $scope,
            controller: controller,
            size: 0,
            resolve: {
                selectedReportOutputSetupId: function () {
                    var selectedReport = setUpParent.reportSection.selected;
                    return selectedReport.reportOutputSetupID;
                },
                selectedReportOutputSetup: function () {
                    return setUpParent.reportSection.selected;
                },
                companyId: function () {
                    return self.selectedCompanyId
                },
                reportColl: function () {
                    return setUpParent.reportSection.coll;
                }
            }
        });

        modalInstance.result.then(function () {

        });
    }


    // data-model to bind
    self.cssData = {
        'global': {},
        'global-img-caption': {},

        'pca-cost-table-header': {},
        'pca-cost-table-header-text': {},

        'page-header-settings-left': {},
        'page-header-settings-center': {},
        'page-header-settings-right': {},

        'report-section-settings-section-header': {},
        'report-section-settings-section-header-below': {},
        'report-section-settings-sub-section-header': {},
        'report-section-settings-sub-section-header-below': {},
        'report-section-settings-sub-sub-section-header': {},
        'report-section-settings-sub-sub-section-header-below': {},
        'report-section-settings-narrative-section': {},

        'report-table-settings': {},
        'report-table-settings-table-header': {},
        'report-table-settings-table-col-header': {},
        'report-table-settings-table-data': {},

        'page-footer-settings-left': {},
        'page-footer-settings-center': {},
        'page-footer-settings-right': {}
    };
    self.jsonData = {
        'global': {},
        'pca': {},
        'pageHeaderSettings': {
            'left': {},
            'center': {},
            'right': {}
        },
        'reportSectionSettings': {
            'sectionHeader': {},
            'subSectionHeader': {},
            'subSubSectionHeader': {},
            'narrativeSection': {}
        },
        'reportTableSettings': {
            'tableHeader': {},
            'tableColHeader': {},
            'tableData': {}
        },
        'pageFooterSettings': {
            'left': {},
            'center': {},
            'right': {}
        }
    };

    self.submitData = {};
    self.save = function () {
        /*var global = self.global;
        var globalStrVal = '.global ' + JSON.stringify(global);
        var globalClass = globalStrVal.replace(/[\"\\]/g, "");
        var styleFormatted = "<style>" + globalClass + "</style>";*/

        var clStr = "";
        var allCls = "";
        for (var propCl in self.cssData) {
            // css class in json format
            var val = angular.copy(self.cssData[propCl]);

            /*if (propCl == 'page-header-settings-left' || propCl == 'page-header-settings-right' || propCl == 'page-header-settings-center') */
            if (val.style && val.style.length) {
                for (var props in val.style) {
                    var selected = val.style[props];
                    if (selected == 'B') {
                        val['font-weight'] = 'bold';
                    } else if (selected == 'I') {
                        val['font-style'] = 'italic';
                    } else if (selected == 'U') {
                        val['text-decoration'] = 'underline';
                    }
                }
                delete val.style;
            }

            // all css classes to be applied
            allCls = allCls + " " + propCl;

            // css class name
            var clName = "." + propCl;

            var formattedToCss = formatJsonToCss(val);
            var cssCl = clName + formattedToCss;
            var cssClassesSeparator = " ";
            clStr = clStr + cssCl + cssClassesSeparator;

        }

        self.submitData.jsonData = JSON.stringify(self.jsonData);
        self.submitData.cssJson = JSON.stringify(self.cssData);
        self.submitData.cssData = clStr;
        self.submitData.name = setUpParent.reportSection.selected.name;

        console.log(self.submitData);

        var reportOutputSetupID = setUpParent.reportSection.selected.reportOutputSetupID;
        ReportOutputSetupAPI.put(reportOutputSetupID, self.submitData).then(function (result) {
            $window.scrollTo(0, 0);
            self.showDisplayMsg('Report output updated successfully', 'success');
        }, function (error) {
            self.showDisplayMsg(error);
        });

        var styleFormatted = "<style>" + clStr + "</style>";
        var compiled = $compile(styleFormatted)($scope);
        var element = angular.element('#applied');
        element.append(compiled);
        element.addClass(allCls);
    }

    function formatJsonToCss(jsonData) {
        // stringify json object
        var stringified = JSON.stringify(jsonData);
        // escape characters
        var escaped = stringified.replace(/[\"\\]/g, "");
        // replace comma (default json stringify property separator) with semicolon
        // NOTE: this is assuming that no property value will have comma
        var formatted = escaped.replace(/,/g, ';');

        return formatted;
    }

}]);
angular.module('ReportSetup').service('ReportOutputSetupAPI', ['APIFactory', 'ReportOutputSetupAPIUrlCollection', 'BASEURL', function (APIFactory, UrlColl, BASEURL) {

    var self = this;



    this.get = function (reportOutputSetupID) {
        var url = UrlColl.GETAPI_MOCK;
        var queryParams = {
            reportOutputSetupID: reportOutputSetupID
        }
        return APIFactory.get(url, queryParams).then(function (response) {
            return response.reportOutputSetup;
        })
    };

    this.post = function (reportOutputSetupData) {
        var url = BASEURL.REPORTOUTPUT + UrlColl.POSTAPI_MOCK;

        /*var postData = {
            reportOutputSetup: reportOutputSetupData
        };*/
        var postData = reportOutputSetupData;

        return APIFactory.post(url, postData).then(function (result) {
            return result.data;
        });
    }

    this.put = function (reportOutputSetupID, reportOutputSetup) {
        var url = BASEURL.REPORTOUTPUT + UrlColl.PUTAPI_MOCK;
        var queryParams = {
            reportOutputSetupID: reportOutputSetupID
        }

        var putData = {
            reportOutputSetup: reportOutputSetup
        };

        return APIFactory.put(url, putData, queryParams).then(function (result) {
            return result.data;
        });
    }

    this.delete = function (reportOutputSetupID, data) {
        var url = BASEURL.REPORTOUTPUT + UrlColl.DELETEAPI_MOCK;
        var queryParams = {
            reportOutputSetupID: reportOutputSetupID
        }

        var putData = {
            reportOutputSetup: data
        };

        return APIFactory.delete(url, putData, queryParams).then(function (result) {
            return result.data;
        });
    }

    this.getList = function (companyId, type) {
        var url = UrlColl.GETLISTAPI_MOCK;
        var queryParams = {
            companyID: companyId,
            type: type
        }
        return APIFactory.get(url, queryParams).then(function (results) {
            return results.reportOutputSetups;
        });
    };

}]);;
angular.module('ReportSetup').constant('ReportOutputSetupAPIConstants', {
    OUTPUTSETUP_TYPE: {
        Report: 'reportSetup',
        TransmittalLetter: 'transmittalSetup',
        TableOfContents: 'tocSetup'
    }
});;
angular.module('ReportSetup').constant('ReportOutputSetupAPIUrlCollection', {

    GETAPI: '',
    //GETAPI_MOCK: 'http://private-8af9d-parcelreportoutputsetupservice.apiary-mock.com/reportoutputsetup/{reportOutputSetupID}',
    GETAPI_MOCK: 'app/modules/ReportSetup/services/sampleJson/sampleSetup_{reportOutputSetupID}.json',

    POSTAPI: '',
    POSTAPI_MOCK: '',

    PUTAPI: '',
    PUTAPI_MOCK: '{reportOutputSetupID}',

    DELETEAPI: '',
    DELETEAPI_MOCK: '{reportOutputSetupID}',


    GETLISTAPI: '',
    GETLISTAPI_MOCK: 'app/modules/ReportSetup/services/sampleJson/sampleSetupList_{type}.json'

});;
// define module
var reportTemplatesModule = angular.module('ReportTemplates', ['ui.router.state', 'ui.bootstrap', 'xeditable']);

// routers
reportTemplatesModule.config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');
        $stateProvider.state('templates', {
            'url': '/Templates',
            'templateUrl': 'app/modules/ReportTemplates/views/defaultTemplateSettings.html'

        }).state('editTemplate', {
            'url': '/Templates/Edit/:SelectedTemplateID/:companyID',
            'templateUrl': 'app/modules/ReportTemplates/views/editTemplate.html'

        })
    }
]);

reportTemplatesModule.run(function (editableOptions) {
    editableOptions.theme = 'bs3';
});;
/*!
angular-xeditable - 0.1.8
Edit-in-place for angular.js
Build date: 2014-01-10 
*/
/**
 * Angular-xeditable module 
 *
 */
angular.module('xeditable', [])


/**
 * Default options. 
 *
 * @namespace editable-options
 */
//todo: maybe better have editableDefaults, not options...
.value('editableOptions', {
    /**
     * Theme. Possible values `bs3`, `bs2`, `default`.
     * 
     * @var {string} theme
     * @memberOf editable-options
     */
    theme: 'default',
    /**
     * Whether to show buttons for single editalbe element.  
     * Possible values `right` (default), `no`.
     * 
     * @var {string} buttons
     * @memberOf editable-options
     */
    buttons: 'right',
    /**
     * Default value for `blur` attribute of single editable element.  
     * Can be `cancel|submit|ignore`.
     * 
     * @var {string} blurElem
     * @memberOf editable-options
     */
    blurElem: 'cancel',
    /**
     * Default value for `blur` attribute of editable form.  
     * Can be `cancel|submit|ignore`.
     * 
     * @var {string} blurForm
     * @memberOf editable-options
     */
    blurForm: 'ignore',
    /**
     * How input elements get activated. Possible values: `focus|select|none`.
     *
     * @var {string} activate
     * @memberOf editable-options
     */
    activate: 'focus'

});
/*
Angular-ui bootstrap datepicker
http://angular-ui.github.io/bootstrap/#/datepicker
*/
angular.module('xeditable').directive('editableBsdate', ['editableDirectiveFactory',
  function (editableDirectiveFactory) {
        return editableDirectiveFactory({
            directiveName: 'editableBsdate',
            inputTpl: '<input type="text">'
        });
  }]);
/*
Angular-ui bootstrap editable timepicker
http://angular-ui.github.io/bootstrap/#/timepicker
*/
angular.module('xeditable').directive('editableBstime', ['editableDirectiveFactory',
  function (editableDirectiveFactory) {
        return editableDirectiveFactory({
            directiveName: 'editableBstime',
            inputTpl: '<timepicker></timepicker>',
            render: function () {
                this.parent.render.call(this);

                // timepicker can't update model when ng-model set directly to it
                // see: https://github.com/angular-ui/bootstrap/issues/1141
                // so we wrap it into DIV
                var div = angular.element('<div class="well well-small" style="display:inline-block;"></div>');

                // move ng-model to wrapping div
                div.attr('ng-model', this.inputEl.attr('ng-model'));
                this.inputEl.removeAttr('ng-model');

                // move ng-change to wrapping div
                if (this.attrs.eNgChange) {
                    div.attr('ng-change', this.inputEl.attr('ng-change'));
                    this.inputEl.removeAttr('ng-change');
                }

                // wrap
                this.inputEl.wrap(div);
            }
        });
  }]);
//checkbox
angular.module('xeditable').directive('editableCheckbox', ['editableDirectiveFactory',
  function (editableDirectiveFactory) {
        return editableDirectiveFactory({
            directiveName: 'editableCheckbox',
            inputTpl: '<input type="checkbox">',
            render: function () {
                this.parent.render.call(this);
                if (this.attrs.eTitle) {
                    this.inputEl.wrap('<label></label>');
                    this.inputEl.after(angular.element('<span></span>').text(this.attrs.eTitle));
                }
            },
            autosubmit: function () {
                var self = this;
                self.inputEl.bind('change', function () {
                    setTimeout(function () {
                        self.scope.$apply(function () {
                            self.scope.$form.$submit();
                        });
                    }, 500);
                });
            }
        });
  }]);
// checklist
angular.module('xeditable').directive('editableChecklist', [
  'editableDirectiveFactory',
  'editableNgOptionsParser',
  function (editableDirectiveFactory, editableNgOptionsParser) {
        return editableDirectiveFactory({
            directiveName: 'editableChecklist',
            inputTpl: '<span></span>',
            useCopy: true,
            render: function () {
                this.parent.render.call(this);
                var parsed = editableNgOptionsParser(this.attrs.eNgOptions);
                var html = '<label ng-repeat="' + parsed.ngRepeat + '">' +
                    '<input type="checkbox" checklist-model="$parent.$data" checklist-value="' + parsed.locals.valueFn + '">' +
                    '<span ng-bind="' + parsed.locals.displayFn + '"></span></label>';

                this.inputEl.removeAttr('ng-model');
                this.inputEl.removeAttr('ng-options');
                this.inputEl.html(html);
            }
        });
  }]);
/*
Input types: text|email|tel|number|url|search|color|date|datetime|time|month|week
*/

(function () {

    var types = 'text|email|tel|number|url|search|color|date|datetime|time|month|week'.split('|');

    //todo: datalist

    // generate directives
    angular.forEach(types, function (type) {
        var directiveName = 'editable' + type.charAt(0).toUpperCase() + type.slice(1);
        angular.module('xeditable').directive(directiveName, ['editableDirectiveFactory',
          function (editableDirectiveFactory) {
                return editableDirectiveFactory({
                    directiveName: directiveName,
                    inputTpl: '<input type="' + type + '">'
                });
          }]);
    });

    //`range` is bit specific
    angular.module('xeditable').directive('editableRange', ['editableDirectiveFactory',
      function (editableDirectiveFactory) {
            return editableDirectiveFactory({
                directiveName: 'editableRange',
                inputTpl: '<input type="range" id="range" name="range">',
                render: function () {
                    this.parent.render.call(this);
                    this.inputEl.after('<output>{{$data}}</output>');
                }
            });
      }]);

}());


// radiolist
angular.module('xeditable').directive('editableRadiolist', [
  'editableDirectiveFactory',
  'editableNgOptionsParser',
  function (editableDirectiveFactory, editableNgOptionsParser) {
        return editableDirectiveFactory({
            directiveName: 'editableRadiolist',
            inputTpl: '<span></span>',
            render: function () {
                this.parent.render.call(this);
                var parsed = editableNgOptionsParser(this.attrs.eNgOptions);
                var html = '<label ng-repeat="' + parsed.ngRepeat + '">' +
                    '<input type="radio" ng-model="$parent.$data" value="{{' + parsed.locals.valueFn + '}}">' +
                    '<span ng-bind="' + parsed.locals.displayFn + '"></span></label>';

                this.inputEl.removeAttr('ng-model');
                this.inputEl.removeAttr('ng-options');
                this.inputEl.html(html);
            },
            autosubmit: function () {
                var self = this;
                self.inputEl.bind('change', function () {
                    setTimeout(function () {
                        self.scope.$apply(function () {
                            self.scope.$form.$submit();
                        });
                    }, 500);
                });
            }
        });
  }]);
//select
angular.module('xeditable').directive('editableSelect', ['editableDirectiveFactory',
  function (editableDirectiveFactory) {
        return editableDirectiveFactory({
            directiveName: 'editableSelect',
            inputTpl: '<select></select>',
            autosubmit: function () {
                var self = this;
                self.inputEl.bind('change', function () {
                    self.scope.$apply(function () {
                        self.scope.$form.$submit();
                    });
                });
            }
        });
  }]);
//textarea
angular.module('xeditable').directive('editableTextarea', ['editableDirectiveFactory',
  function (editableDirectiveFactory) {
        return editableDirectiveFactory({
            directiveName: 'editableTextarea',
            inputTpl: '<textarea></textarea>',
            addListeners: function () {
                var self = this;
                self.parent.addListeners.call(self);
                // submit textarea by ctrl+enter even with buttons
                if (self.single && self.buttons !== 'no') {
                    self.autosubmit();
                }
            },
            autosubmit: function () {
                var self = this;
                self.inputEl.bind('keydown', function (e) {
                    if ((e.ctrlKey || e.metaKey) && (e.keyCode === 13)) {
                        self.scope.$apply(function () {
                            self.scope.$form.$submit();
                        });
                    }
                });
            }
        });
  }]);

/**
 * EditableController class. 
 * Attached to element with `editable-xxx` directive.
 *
 * @namespace editable-element
 */
/*
TODO: this file should be refactored to work more clear without closures!
*/
angular.module('xeditable').factory('editableController', ['$q', 'editableUtils',
  function ($q, editableUtils) {

        //EditableController function
        EditableController.$inject = ['$scope', '$attrs', '$element', '$parse', 'editableThemes', 'editableOptions', '$rootScope', '$compile', '$q'];

        function EditableController($scope, $attrs, $element, $parse, editableThemes, editableOptions, $rootScope, $compile, $q) {
            var valueGetter;

            //if control is disabled - it does not participate in waiting process
            var inWaiting;

            var self = this;

            self.scope = $scope;
            self.elem = $element;
            self.attrs = $attrs;
            self.inputEl = null;
            self.editorEl = null;
            self.single = true;
            self.error = '';
            self.theme = editableThemes[editableOptions.theme] || editableThemes['default'];
            self.parent = {};

            //to be overwritten by directive
            self.inputTpl = '';
            self.directiveName = '';

            // with majority of controls copy is not needed, but..
            // copy MUST NOT be used for `select-multiple` with objects as items
            // copy MUST be used for `checklist`
            self.useCopy = false;

            //runtime (defaults)
            self.single = null;

            /**
             * Attributes defined with `e-*` prefix automatically transfered from original element to
             * control.  
             * For example, if you set `<span editable-text="user.name" e-style="width: 100px"`>
             * then input will appear as `<input style="width: 100px">`.  
             * See [demo](#text-customize).
             * 
             * @var {any|attribute} e-*
             * @memberOf editable-element
             */

            /**
             * Whether to show ok/cancel buttons. Values: `right|no`.
             * If set to `no` control automatically submitted when value changed.  
             * If control is part of form buttons will never be shown. 
             * 
             * @var {string|attribute} buttons
             * @memberOf editable-element
             */
            self.buttons = 'right';
            /**
             * Action when control losses focus. Values: `cancel|submit|ignore`.
             * Has sense only for single editable element.
             * Otherwise, if control is part of form - you should set `blur` of form, not of individual element.
             * 
             * @var {string|attribute} blur
             * @memberOf editable-element
             */
            // no real `blur` property as it is transfered to editable form

            //init
            self.init = function (single) {
                self.single = single;

                self.name = $attrs.eName || $attrs[self.directiveName];
                /*
                if(!$attrs[directiveName] && !$attrs.eNgModel && ($attrs.eValue === undefined)) {
                  throw 'You should provide value for `'+directiveName+'` or `e-value` in editable element!';
                }
                */
                if ($attrs[self.directiveName]) {
                    valueGetter = $parse($attrs[self.directiveName]);
                } else {
                    throw 'You should provide value for `' + self.directiveName + '` in editable element!';
                }

                // settings for single and non-single
                if (!self.single) {
                    // hide buttons for non-single
                    self.buttons = 'no';
                } else {
                    self.buttons = self.attrs.buttons || editableOptions.buttons;
                }

                //if name defined --> watch changes and update $data in form
                if ($attrs.eName) {
                    self.scope.$watch('$data', function (newVal) {
                        self.scope.$form.$data[$attrs.eName] = newVal;
                    });
                }

                /**
                 * Called when control is shown.  
                 * See [demo](#select-remote).
                 * 
                 * @var {method|attribute} onshow
                 * @memberOf editable-element
                 */
                if ($attrs.onshow) {
                    self.onshow = function () {
                        return self.catchError($parse($attrs.onshow)($scope));
                    };
                }

                /**
                 * Called when control is hidden after both save or cancel.  
                 * 
                 * @var {method|attribute} onhide
                 * @memberOf editable-element
                 */
                if ($attrs.onhide) {
                    self.onhide = function () {
                        return $parse($attrs.onhide)($scope);
                    };
                }

                /**
                 * Called when control is cancelled.  
                 * 
                 * @var {method|attribute} oncancel
                 * @memberOf editable-element
                 */
                if ($attrs.oncancel) {
                    self.oncancel = function () {
                        return $parse($attrs.oncancel)($scope);
                    };
                }

                /**
                 * Called during submit before value is saved to model.  
                 * See [demo](#onbeforesave).
                 * 
                 * @var {method|attribute} onbeforesave
                 * @memberOf editable-element
                 */
                if ($attrs.onbeforesave) {
                    self.onbeforesave = function () {
                        return self.catchError($parse($attrs.onbeforesave)($scope));
                    };
                }

                /**
                 * Called during submit after value is saved to model.  
                 * See [demo](#onaftersave).
                 * 
                 * @var {method|attribute} onaftersave
                 * @memberOf editable-element
                 */
                if ($attrs.onaftersave) {
                    self.onaftersave = function () {
                        return self.catchError($parse($attrs.onaftersave)($scope));
                    };
                }

                // watch change of model to update editable element
                // now only add/remove `editable-empty` class.
                // Initially this method called with newVal = undefined, oldVal = undefined
                // so no need initially call handleEmpty() explicitly
                $scope.$parent.$watch($attrs[self.directiveName], function (newVal, oldVal) {
                    self.handleEmpty();
                });
            };

            self.render = function () {
                var theme = self.theme;

                //build input
                self.inputEl = angular.element(self.inputTpl);

                //build controls
                self.controlsEl = angular.element(theme.controlsTpl);
                self.controlsEl.append(self.inputEl);

                //build buttons
                if (self.buttons !== 'no') {
                    self.buttonsEl = angular.element(theme.buttonsTpl);
                    self.submitEl = angular.element(theme.submitTpl);
                    self.cancelEl = angular.element(theme.cancelTpl);
                    self.buttonsEl.append(self.submitEl).append(self.cancelEl);
                    self.controlsEl.append(self.buttonsEl);

                    self.inputEl.addClass('editable-has-buttons');
                }

                //build error
                self.errorEl = angular.element(theme.errorTpl);
                self.controlsEl.append(self.errorEl);

                //build editor
                self.editorEl = angular.element(self.single ? theme.formTpl : theme.noformTpl);
                self.editorEl.append(self.controlsEl);

                // transfer `e-*|data-e-*|x-e-*` attributes
                for (var k in $attrs.$attr) {
                    if (k.length <= 1) {
                        continue;
                    }
                    var transferAttr = false;
                    var nextLetter = k.substring(1, 2);

                    // if starts with `e` + uppercase letter
                    if (k.substring(0, 1) === 'e' && nextLetter === nextLetter.toUpperCase()) {
                        transferAttr = k.substring(1); // cut `e`
                    } else {
                        continue;
                    }

                    // exclude `form` and `ng-submit`, 
                    if (transferAttr === 'Form' || transferAttr === 'NgSubmit') {
                        continue;
                    }

                    // convert back to lowercase style
                    transferAttr = transferAttr.substring(0, 1).toLowerCase() + editableUtils.camelToDash(transferAttr.substring(1));

                    // workaround for attributes without value (e.g. `multiple = "multiple"`)
                    var attrValue = ($attrs[k] === '') ? transferAttr : $attrs[k];

                    // set attributes to input
                    self.inputEl.attr(transferAttr, attrValue);
                }

                self.inputEl.addClass('editable-input');
                self.inputEl.attr('ng-model', '$data');

                // add directiveName class to editor, e.g. `editable-text`
                self.editorEl.addClass(editableUtils.camelToDash(self.directiveName));

                if (self.single) {
                    self.editorEl.attr('editable-form', '$form');
                    // transfer `blur` to form
                    self.editorEl.attr('blur', self.attrs.blur || (self.buttons === 'no' ? 'cancel' : editableOptions.blurElem));
                }

                //apply `postrender` method of theme
                if (angular.isFunction(theme.postrender)) {
                    theme.postrender.call(self);
                }

            };

            // with majority of controls copy is not needed, but..
            // copy MUST NOT be used for `select-multiple` with objects as items
            // copy MUST be used for `checklist`
            self.setLocalValue = function () {
                self.scope.$data = self.useCopy ?
                    angular.copy(valueGetter($scope.$parent)) :
                    valueGetter($scope.$parent);
            };

            //show
            self.show = function () {
                // set value of scope.$data
                self.setLocalValue();

                /*
                Originally render() was inside init() method, but some directives polluting editorEl,
                so it is broken on second openning.
                Cloning is not a solution as jqLite can not clone with event handler's.
                */
                self.render();

                // insert into DOM
                $element.after(self.editorEl);

                // compile (needed to attach ng-* events from markup)
                $compile(self.editorEl)($scope);

                // attach listeners (`escape`, autosubmit, etc)
                self.addListeners();

                // hide element
                $element.addClass('editable-hide');

                // onshow
                return self.onshow();
            };

            //hide
            self.hide = function () {
                self.editorEl.remove();
                $element.removeClass('editable-hide');

                // onhide
                return self.onhide();
            };

            // cancel
            self.cancel = function () {
                // oncancel
                self.oncancel();
                // don't call hide() here as it called in form's code
            };

            /*
            Called after show to attach listeners
            */
            self.addListeners = function () {
                // bind keyup for `escape`
                self.inputEl.bind('keyup', function (e) {
                    if (!self.single) {
                        return;
                    }

                    // todo: move this to editable-form!
                    switch (e.keyCode) {
                        // hide on `escape` press
                        case 27:
                            self.scope.$apply(function () {
                                self.scope.$form.$cancel();
                            });
                            break;
                    }
                });

                // autosubmit when `no buttons`
                if (self.single && self.buttons === 'no') {
                    self.autosubmit();
                }

                // click - mark element as clicked to exclude in document click handler
                self.editorEl.bind('click', function (e) {
                    // ignore right/middle button click
                    if (e.which !== 1) {
                        return;
                    }

                    if (self.scope.$form.$visible) {
                        self.scope.$form._clicked = true;
                    }
                });
            };

            // setWaiting
            self.setWaiting = function (value) {
                if (value) {
                    // participate in waiting only if not disabled
                    inWaiting = !self.inputEl.attr('disabled') &&
                        !self.inputEl.attr('ng-disabled') &&
                        !self.inputEl.attr('ng-enabled');
                    if (inWaiting) {
                        self.inputEl.attr('disabled', 'disabled');
                        if (self.buttonsEl) {
                            self.buttonsEl.find('button').attr('disabled', 'disabled');
                        }
                    }
                } else {
                    if (inWaiting) {
                        self.inputEl.removeAttr('disabled');
                        if (self.buttonsEl) {
                            self.buttonsEl.find('button').removeAttr('disabled');
                        }
                    }
                }
            };

            self.activate = function () {
                setTimeout(function () {
                    var el = self.inputEl[0];
                    if (editableOptions.activate === 'focus' && el.focus) {
                        el.focus();
                    }
                    if (editableOptions.activate === 'select' && el.select) {
                        el.select();
                    }
                }, 0);
            };

            self.setError = function (msg) {
                if (!angular.isObject(msg)) {
                    $scope.$error = msg;
                    self.error = msg;
                }
            };

            /*
            Checks that result is string or promise returned string and shows it as error message
            Applied to onshow, onbeforesave, onaftersave
            */
            self.catchError = function (result, noPromise) {
                if (angular.isObject(result) && noPromise !== true) {
                    $q.when(result).then(
                        //success and fail handlers are equal
                        angular.bind(this, function (r) {
                            this.catchError(r, true);
                        }),
                        angular.bind(this, function (r) {
                            this.catchError(r, true);
                        })
                    );
                    //check $http error
                } else if (noPromise && angular.isObject(result) && result.status &&
                    (result.status !== 200) && result.data && angular.isString(result.data)) {
                    this.setError(result.data);
                    //set result to string: to let form know that there was error
                    result = result.data;
                } else if (angular.isString(result)) {
                    this.setError(result);
                }
                return result;
            };

            self.save = function () {
                valueGetter.assign($scope.$parent, angular.copy(self.scope.$data));

                // no need to call handleEmpty here as we are watching change of model value
                // self.handleEmpty();
            };

            /*
            attach/detach `editable-empty` class to element
            */
            self.handleEmpty = function () {
                var val = valueGetter($scope.$parent);
                var isEmpty = val === null || val === undefined || val === "" || (angular.isArray(val) && val.length === 0);
                $element.toggleClass('editable-empty', isEmpty);
            };

            /*
            Called when `buttons = "no"` to submit automatically
            */
            self.autosubmit = angular.noop;

            self.onshow = angular.noop;
            self.onhide = angular.noop;
            self.oncancel = angular.noop;
            self.onbeforesave = angular.noop;
            self.onaftersave = angular.noop;
        }

        return EditableController;
  }]);

/*
editableFactory is used to generate editable directives (see `/directives` folder)
Inside it does several things:
- detect form for editable element. Form may be one of three types:
  1. autogenerated form (for single editable elements)
  2. wrapper form (element wrapped by <form> tag)
  3. linked form (element has `e-form` attribute pointing to existing form)

- attach editableController to element

Depends on: editableController, editableFormFactory
*/
angular.module('xeditable').factory('editableDirectiveFactory', ['$parse', '$compile', 'editableThemes', '$rootScope', '$document', 'editableController', 'editableFormController',
function ($parse, $compile, editableThemes, $rootScope, $document, editableController, editableFormController) {

        //directive object
        return function (overwrites) {
            return {
                restrict: 'A',
                scope: true,
                require: [overwrites.directiveName, '?^form'],
                controller: editableController,
                link: function (scope, elem, attrs, ctrl) {
                    // editable controller
                    var eCtrl = ctrl[0];

                    // form controller
                    var eFormCtrl;

                    // this variable indicates is element is bound to some existing form, 
                    // or it's single element who's form will be generated automatically
                    // By default consider single element without any linked form.ß
                    var hasForm = false;

                    // element wrapped by form
                    if (ctrl[1]) {
                        eFormCtrl = ctrl[1];
                        hasForm = true;
                    } else if (attrs.eForm) { // element not wrapped by <form>, but we hane `e-form` attr
                        var getter = $parse(attrs.eForm)(scope);
                        if (getter) { // form exists in scope (above), e.g. editable column
                            eFormCtrl = getter;
                            hasForm = true;
                        } else { // form exists below or not exist at all: check document.forms
                            for (var i = 0; i < $document[0].forms.length; i++) {
                                if ($document[0].forms[i].name === attrs.eForm) {
                                    // form is below and not processed yet
                                    eFormCtrl = null;
                                    hasForm = true;
                                    break;
                                }
                            }
                        }
                    }

                    /*
                    if(hasForm && !attrs.eName) {
                      throw 'You should provide `e-name` for editable element inside form!';
                    }
                    */

                    //check for `editable-form` attr in form
                    /*
                    if(eFormCtrl && ) {
                      throw 'You should provide `e-name` for editable element inside form!';
                    }
                    */

                    // store original props to `parent` before merge
                    angular.forEach(overwrites, function (v, k) {
                        if (eCtrl[k] !== undefined) {
                            eCtrl.parent[k] = eCtrl[k];
                        }
                    });

                    // merge overwrites to base editable controller
                    angular.extend(eCtrl, overwrites);

                    // init editable ctrl
                    eCtrl.init(!hasForm);

                    // publich editable controller as `$editable` to be referenced in html
                    scope.$editable = eCtrl;

                    // add `editable` class to element
                    elem.addClass('editable');

                    // hasForm
                    if (hasForm) {
                        if (eFormCtrl) {
                            scope.$form = eFormCtrl;
                            if (!scope.$form.$addEditable) {
                                throw 'Form with editable elements should have `editable-form` attribute.';
                            }
                            scope.$form.$addEditable(eCtrl);
                        } else {
                            // future form (below): add editable controller to buffer and add to form later
                            $rootScope.$$editableBuffer = $rootScope.$$editableBuffer || {};
                            $rootScope.$$editableBuffer[attrs.eForm] = $rootScope.$$editableBuffer[attrs.eForm] || [];
                            $rootScope.$$editableBuffer[attrs.eForm].push(eCtrl);
                            scope.$form = null; //will be re-assigned later
                        }
                        // !hasForm
                    } else {
                        // create editableform controller
                        scope.$form = editableFormController();
                        // add self to editable controller
                        scope.$form.$addEditable(eCtrl);

                        // if `e-form` provided, publish local $form in scope
                        if (attrs.eForm) {
                            scope.$parent[attrs.eForm] = scope.$form;
                        }

                        // bind click - if no external form defined
                        if (!attrs.eForm) {
                            elem.addClass('editable-click');
                            elem.bind('click', function (e) {
                                e.preventDefault();
                                e.editable = eCtrl;
                                scope.$apply(function () {
                                    scope.$form.$show();
                                });
                            });
                        }
                    }

                }
            };
        };
}]);

/*
Returns editableForm controller
*/
angular.module('xeditable').factory('editableFormController', ['$parse', '$document', '$rootScope', 'editablePromiseCollection', 'editableUtils',
  function ($parse, $document, $rootScope, editablePromiseCollection, editableUtils) {

        // array of opened editable forms
        var shown = [];

        // bind click to body: cancel|submit|ignore forms
        $document.bind('click', function (e) {
            // ignore right/middle button click
            if (e.which !== 1) {
                return;
            }

            var toCancel = [];
            var toSubmit = [];
            for (var i = 0; i < shown.length; i++) {

                // exclude clicked
                if (shown[i]._clicked) {
                    shown[i]._clicked = false;
                    continue;
                }

                // exclude waiting
                if (shown[i].$waiting) {
                    continue;
                }

                if (shown[i]._blur === 'cancel') {
                    toCancel.push(shown[i]);
                }

                if (shown[i]._blur === 'submit') {
                    toSubmit.push(shown[i]);
                }
            }

            if (toCancel.length || toSubmit.length) {
                $rootScope.$apply(function () {
                    angular.forEach(toCancel, function (v) {
                        v.$cancel();
                    });
                    angular.forEach(toSubmit, function (v) {
                        v.$submit();
                    });
                });
            }
        });


        var base = {
            $addEditable: function (editable) {
                //console.log('add editable', editable.elem, editable.elem.bind);
                this.$editables.push(editable);

                //'on' is not supported in angular 1.0.8
                editable.elem.bind('$destroy', angular.bind(this, this.$removeEditable, editable));

                //bind editable's local $form to self (if not bound yet, below form) 
                if (!editable.scope.$form) {
                    editable.scope.$form = this;
                }

                //if form already shown - call show() of new editable
                if (this.$visible) {
                    editable.catchError(editable.show());
                }
            },

            $removeEditable: function (editable) {
                //arrayRemove
                for (var i = 0; i < this.$editables.length; i++) {
                    if (this.$editables[i] === editable) {
                        this.$editables.splice(i, 1);
                        return;
                    }
                }
            },

            /**
             * Shows form with editable controls.
             * 
             * @method $show()
             * @memberOf editable-form
             */
            $show: function () {
                if (this.$visible) {
                    return;
                }

                this.$visible = true;

                var pc = editablePromiseCollection();

                //own show
                pc.when(this.$onshow());

                //clear errors
                this.$setError(null, '');

                //children show
                angular.forEach(this.$editables, function (editable) {
                    pc.when(editable.show());
                });

                //wait promises and activate
                pc.then({
                    onWait: angular.bind(this, this.$setWaiting),
                    onTrue: angular.bind(this, this.$activate),
                    onFalse: angular.bind(this, this.$activate),
                    onString: angular.bind(this, this.$activate)
                });

                // add to internal list of shown forms
                // setTimeout needed to prevent closing right after opening (e.g. when trigger by button)
                setTimeout(angular.bind(this, function () {
                    // clear `clicked` to get ready for clicks on visible form
                    this._clicked = false;
                    if (editableUtils.indexOf(shown, this) === -1) {
                        shown.push(this);
                    }
                }), 0);
            },

            /**
             * Sets focus on form field specified by `name`.
             * 
             * @method $activate(name)
             * @param {string} name name of field
             * @memberOf editable-form
             */
            $activate: function (name) {
                var i;
                if (this.$editables.length) {
                    //activate by name
                    if (angular.isString(name)) {
                        for (i = 0; i < this.$editables.length; i++) {
                            if (this.$editables[i].name === name) {
                                this.$editables[i].activate();
                                return;
                            }
                        }
                    }

                    //try activate error field
                    for (i = 0; i < this.$editables.length; i++) {
                        if (this.$editables[i].error) {
                            this.$editables[i].activate();
                            return;
                        }
                    }

                    //by default activate first field
                    this.$editables[0].activate();
                }
            },

            /**
             * Hides form with editable controls without saving.
             * 
             * @method $hide()
             * @memberOf editable-form
             */
            $hide: function () {
                if (!this.$visible) {
                    return;
                }
                this.$visible = false;
                // self hide
                this.$onhide();
                // children's hide
                angular.forEach(this.$editables, function (editable) {
                    editable.hide();
                });

                // remove from internal list of shown forms
                editableUtils.arrayRemove(shown, this);
            },

            /**
             * Triggers `oncancel` event and calls `$hide()`.
             * 
             * @method $cancel()
             * @memberOf editable-form
             */
            $cancel: function () {
                if (!this.$visible) {
                    return;
                }
                // self cancel
                this.$oncancel();
                // children's cancel      
                angular.forEach(this.$editables, function (editable) {
                    editable.cancel();
                });
                // self hide
                this.$hide();
            },

            $setWaiting: function (value) {
                this.$waiting = !!value;
                // we can't just set $waiting variable and use it via ng-disabled in children
                // because in editable-row form is not accessible
                angular.forEach(this.$editables, function (editable) {
                    editable.setWaiting(!!value);
                });
            },

            /**
             * Shows error message for particular field.
             * 
             * @method $setError(name, msg)
             * @param {string} name name of field
             * @param {string} msg error message
             * @memberOf editable-form
             */
            $setError: function (name, msg) {
                angular.forEach(this.$editables, function (editable) {
                    if (!name || editable.name === name) {
                        editable.setError(msg);
                    }
                });
            },

            $submit: function () {
                if (this.$waiting) {
                    return;
                }

                //clear errors
                this.$setError(null, '');

                //children onbeforesave
                var pc = editablePromiseCollection();
                angular.forEach(this.$editables, function (editable) {
                    pc.when(editable.onbeforesave());
                });

                /*
                onbeforesave result:
                - true/undefined: save data and close form
                - false: close form without saving
                - string: keep form open and show error
                */
                pc.then({
                    onWait: angular.bind(this, this.$setWaiting),
                    onTrue: angular.bind(this, checkSelf, true),
                    onFalse: angular.bind(this, checkSelf, false),
                    onString: angular.bind(this, this.$activate)
                });

                //save
                function checkSelf(childrenTrue) {
                    var pc = editablePromiseCollection();
                    pc.when(this.$onbeforesave());
                    pc.then({
                        onWait: angular.bind(this, this.$setWaiting),
                        onTrue: childrenTrue ? angular.bind(this, this.$save) : angular.bind(this, this.$hide),
                        onFalse: angular.bind(this, this.$hide),
                        onString: angular.bind(this, this.$activate)
                    });
                }
            },

            $save: function () {
                // write model for each editable
                angular.forEach(this.$editables, function (editable) {
                    editable.save();
                });

                //call onaftersave of self and children
                var pc = editablePromiseCollection();
                pc.when(this.$onaftersave());
                angular.forEach(this.$editables, function (editable) {
                    pc.when(editable.onaftersave());
                });

                /*
                onaftersave result:
                - true/undefined/false: just close form
                - string: keep form open and show error
                */
                pc.then({
                    onWait: angular.bind(this, this.$setWaiting),
                    onTrue: angular.bind(this, this.$hide),
                    onFalse: angular.bind(this, this.$hide),
                    onString: angular.bind(this, this.$activate)
                });
            },

            $onshow: angular.noop,
            $oncancel: angular.noop,
            $onhide: angular.noop,
            $onbeforesave: angular.noop,
            $onaftersave: angular.noop
        };

        return function () {
            return angular.extend({
                $editables: [],
                /**
                 * Form visibility flag.
                 * 
                 * @var {bool} $visible
                 * @memberOf editable-form
                 */
                $visible: false,
                /**
                 * Form waiting flag. It becomes `true` when form is loading or saving data.
                 * 
                 * @var {bool} $waiting
                 * @memberOf editable-form
                 */
                $waiting: false,
                $data: {},
                _clicked: false,
                _blur: null
            }, base);
        };
  }]);

/**
 * EditableForm directive. Should be defined in <form> containing editable controls.  
 * It add some usefull methods to form variable exposed to scope by `name="myform"` attribute.
 *
 * @namespace editable-form
 */
angular.module('xeditable').directive('editableForm', ['$rootScope', '$parse', 'editableFormController', 'editableOptions',
  function ($rootScope, $parse, editableFormController, editableOptions) {
        return {
            restrict: 'A',
            require: ['form'],
            //require: ['form', 'editableForm'],
            //controller: EditableFormController,
            compile: function () {
                return {
                    pre: function (scope, elem, attrs, ctrl) {
                        var form = ctrl[0];
                        var eForm;

                        //if `editableForm` has value - publish smartly under this value
                        //this is required only for single editor form that is created and removed
                        if (attrs.editableForm) {
                            if (scope[attrs.editableForm] && scope[attrs.editableForm].$show) {
                                eForm = scope[attrs.editableForm];
                                angular.extend(form, eForm);
                            } else {
                                eForm = editableFormController();
                                scope[attrs.editableForm] = eForm;
                                angular.extend(eForm, form);
                            }
                        } else { //just merge to form and publish if form has name
                            eForm = editableFormController();
                            angular.extend(form, eForm);
                        }

                        //read editables from buffer (that appeared before FORM tag)
                        var buf = $rootScope.$$editableBuffer;
                        var name = form.$name;
                        if (name && buf && buf[name]) {
                            angular.forEach(buf[name], function (editable) {
                                eForm.$addEditable(editable);
                            });
                            delete buf[name];
                        }
                    },
                    post: function (scope, elem, attrs, ctrl) {
                        var eForm;

                        if (attrs.editableForm && scope[attrs.editableForm] && scope[attrs.editableForm].$show) {
                            eForm = scope[attrs.editableForm];
                        } else {
                            eForm = ctrl[0];
                        }

                        /**
                         * Called when form is shown.
                         * 
                         * @var {method|attribute} onshow 
                         * @memberOf editable-form
                         */
                        if (attrs.onshow) {
                            eForm.$onshow = angular.bind(eForm, $parse(attrs.onshow), scope);
                        }

                        /**
                         * Called when form hides after both save or cancel.
                         * 
                         * @var {method|attribute} onhide 
                         * @memberOf editable-form
                         */
                        if (attrs.onhide) {
                            eForm.$onhide = angular.bind(eForm, $parse(attrs.onhide), scope);
                        }

                        /**
                         * Called when form is cancelled.
                         * 
                         * @var {method|attribute} oncancel
                         * @memberOf editable-form
                         */
                        if (attrs.oncancel) {
                            eForm.$oncancel = angular.bind(eForm, $parse(attrs.oncancel), scope);
                        }

                        /**
                         * Whether form initially rendered in shown state.
                         *
                         * @var {bool|attribute} shown
                         * @memberOf editable-form
                         */
                        if (attrs.shown && $parse(attrs.shown)(scope)) {
                            eForm.$show();
                        }

                        /**
                         * Action when form losses focus. Values: `cancel|submit|ignore`.
                         * Default is `ignore`.
                         * 
                         * @var {string|attribute} blur
                         * @memberOf editable-form
                         */
                        eForm._blur = attrs.blur || editableOptions.blurForm;

                        // onbeforesave, onaftersave
                        if (!attrs.ngSubmit && !attrs.submit) {
                            /**
                             * Called after all children `onbeforesave` callbacks but before saving form values
                             * to model.  
                             * If at least one children callback returns `non-string` - it will not not be called.  
                             * See [editable-form demo](#editable-form) for details.
                             * 
                             * @var {method|attribute} onbeforesave
                             * @memberOf editable-form
                             * 
                             */
                            if (attrs.onbeforesave) {
                                eForm.$onbeforesave = function () {
                                    return $parse(attrs.onbeforesave)(scope, {
                                        $data: eForm.$data
                                    });
                                };
                            }

                            /**
                             * Called when form values are saved to model.  
                             * See [editable-form demo](#editable-form) for details.
                             * 
                             * @var {method|attribute} onaftersave 
                             * @memberOf editable-form
                             * 
                             */
                            if (attrs.onaftersave) {
                                eForm.$onaftersave = function () {
                                    return $parse(attrs.onaftersave)(scope, {
                                        $data: eForm.$data
                                    });
                                };
                            }

                            elem.bind('submit', function (event) {
                                event.preventDefault();
                                scope.$apply(function () {
                                    eForm.$submit();
                                });
                            });
                        }


                        // click - mark form as clicked to exclude in document click handler
                        elem.bind('click', function (e) {
                            // ignore right/middle button click
                            if (e.which !== 1) {
                                return;
                            }

                            if (eForm.$visible) {
                                eForm._clicked = true;
                            }
                        });

                    }
                };
            }
        };
  }]);
/**
 * editablePromiseCollection
 *  
 * Collect results of function calls. Shows waiting if there are promises. 
 * Finally, applies callbacks if:
 * - onTrue(): all results are true and all promises resolved to true
 * - onFalse(): at least one result is false or promise resolved to false
 * - onString(): at least one result is string or promise rejected or promise resolved to string
 */
angular.module('xeditable').factory('editablePromiseCollection', ['$q', function ($q) {

    function promiseCollection() {
        return {
            promises: [],
            hasFalse: false,
            hasString: false,
            when: function (result, noPromise) {
                if (result === false) {
                    this.hasFalse = true;
                } else if (!noPromise && angular.isObject(result)) {
                    this.promises.push($q.when(result));
                } else if (angular.isString(result)) {
                    this.hasString = true;
                } else { //result === true || result === undefined || result === null
                    return;
                }
            },
            //callbacks: onTrue, onFalse, onString
            then: function (callbacks) {
                callbacks = callbacks || {};
                var onTrue = callbacks.onTrue || angular.noop;
                var onFalse = callbacks.onFalse || angular.noop;
                var onString = callbacks.onString || angular.noop;
                var onWait = callbacks.onWait || angular.noop;

                var self = this;

                if (this.promises.length) {
                    onWait(true);
                    $q.all(this.promises).then(
                        //all resolved       
                        function (results) {
                            onWait(false);
                            //check all results via same `when` method (without checking promises)
                            angular.forEach(results, function (result) {
                                self.when(result, true);
                            });
                            applyCallback();
                        },
                        //some rejected
                        function (error) {
                            onWait(false);
                            onString();
                        }
                    );
                } else {
                    applyCallback();
                }

                function applyCallback() {
                    if (!self.hasString && !self.hasFalse) {
                        onTrue();
                    } else if (!self.hasString && self.hasFalse) {
                        onFalse();
                    } else {
                        onString();
                    }
                }

            }
        };
    }

    return promiseCollection;

}]);

/**
 * editableUtils
 */
angular.module('xeditable').factory('editableUtils', [function () {
    return {
        indexOf: function (array, obj) {
            if (array.indexOf) return array.indexOf(obj);

            for (var i = 0; i < array.length; i++) {
                if (obj === array[i]) return i;
            }
            return -1;
        },

        arrayRemove: function (array, value) {
            var index = this.indexOf(array, value);
            if (index >= 0) {
                array.splice(index, 1);
            }
            return value;
        },

        // copy from https://github.com/angular/angular.js/blob/master/src/Angular.js
        camelToDash: function (str) {
            var SNAKE_CASE_REGEXP = /[A-Z]/g;
            return str.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
                return (pos ? '-' : '') + letter.toLowerCase();
            });
        },

        dashToCamel: function (str) {
            var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
            var MOZ_HACK_REGEXP = /^moz([A-Z])/;
            return str.
            replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
                return offset ? letter.toUpperCase() : letter;
            }).
            replace(MOZ_HACK_REGEXP, 'Moz$1');
        }
    };
}]);

/**
 * editableNgOptionsParser
 *
 * see: https://github.com/angular/angular.js/blob/master/src/ng/directive/select.js#L131
 */
angular.module('xeditable').factory('editableNgOptionsParser', [
  function () {
        //0000111110000000000022220000000000000000000000333300000000000000444444444444444000000000555555555555555000000066666666666666600000000000000007777000000000000000000088888
        var NG_OPTIONS_REGEXP = /^\s*(.*?)(?:\s+as\s+(.*?))?(?:\s+group\s+by\s+(.*))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(.*?)(?:\s+track\s+by\s+(.*?))?$/;

        function parser(optionsExp) {
            var match;

            if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {
                throw 'ng-options parse error';
            }

            var
                displayFn = match[2] || match[1],
                valueName = match[4] || match[6],
                keyName = match[5],
                groupByFn = match[3] || '',
                valueFn = match[2] ? match[1] : valueName,
                valuesFn = match[7],
                track = match[8],
                trackFn = track ? match[8] : null;

            var ngRepeat;
            if (keyName === undefined) { // array
                ngRepeat = valueName + ' in ' + valuesFn;
                if (track !== undefined) {
                    ngRepeat += ' track by ' + trackFn;
                }
            } else { // object
                ngRepeat = '(' + keyName + ', ' + valueName + ') in ' + valuesFn;
            }

            // group not supported yet
            return {
                ngRepeat: ngRepeat,
                locals: {
                    valueName: valueName,
                    keyName: keyName,
                    valueFn: valueFn,
                    displayFn: displayFn
                }
            };
        }

        return parser;
  }]);

/*
Editable themes:
- default
- bootstrap 2
- bootstrap 3

Note: in postrender() `this` is instance of editableController
*/
angular.module('xeditable').factory('editableThemes', function () {
    var themes = {
        //default
        'default': {
            formTpl: '<form class="editable-wrap"></form>',
            noformTpl: '<span class="editable-wrap"></span>',
            controlsTpl: '<span class="editable-controls"></span>',
            inputTpl: '',
            errorTpl: '<div class="editable-error" ng-show="$error" ng-bind="$error"></div>',
            buttonsTpl: '<span class="editable-buttons"></span>',
            submitTpl: '<button type="submit" user-action="xeditable save">save</button>',
            cancelTpl: '<button type="button" ng-click="$form.$cancel()">cancel</button>'
        },

        //bs2
        'bs2': {
            formTpl: '<form class="form-inline editable-wrap" role="form"></form>',
            noformTpl: '<span class="editable-wrap"></span>',
            controlsTpl: '<div class="editable-controls controls control-group" ng-class="{\'error\': $error}"></div>',
            inputTpl: '',
            errorTpl: '<div class="editable-error help-block" ng-show="$error" ng-bind="$error"></div>',
            buttonsTpl: '<span class="editable-buttons"></span>',
            submitTpl: '<button type="submit" class="btn btn-primary" user-action="xeditable save" ><span class="icon-ok icon-white"></span></button>',
            cancelTpl: '<button type="button" class="btn" ng-click="$form.$cancel()">' +
                '<span class="icon-remove"></span>' +
                '</button>'

        },

        //bs3
        'bs3': {
            formTpl: '<form class="form-inline editable-wrap" role="form"></form>',
            noformTpl: '<span class="editable-wrap"></span>',
            controlsTpl: '<div class="editable-controls form-group" ng-class="{\'has-error\': $error}"></div>',
            inputTpl: '',
            errorTpl: '<div class="editable-error help-block" ng-show="$error" ng-bind="$error"></div>',
            buttonsTpl: '<span class="editable-buttons"></span>',
            submitTpl: '<button type="submit" class="btn btn-primary" ng-click="saveEditable($form)" user-action="xeditable save"><span class="glyphicon glyphicon-ok"></span></button>',
            cancelTpl: '<button type="button" class="btn btn-default" ng-click="cancelEditable($form);$form.$cancel()">' +
                '<span class="glyphicon glyphicon-remove"></span>' +
                '</button>',

            //bs3 specific prop to change buttons class: btn-sm, btn-lg
            buttonsClass: '',
            //bs3 specific prop to change standard inputs class: input-sm, input-lg
            inputClass: '',
            postrender: function () {
                //apply `form-control` class to std inputs
                switch (this.directiveName) {
                    case 'editableText':
                    case 'editableSelect':
                    case 'editableTextarea':
                    case 'editableEmail':
                    case 'editableTel':
                    case 'editableNumber':
                    case 'editableUrl':
                    case 'editableSearch':
                    case 'editableDate':
                    case 'editableDatetime':
                    case 'editableTime':
                    case 'editableMonth':
                    case 'editableWeek':
                        this.inputEl.addClass('form-control');
                        if (this.theme.inputClass) {
                            // don`t apply `input-sm` and `input-lg` to select multiple
                            // should be fixed in bs itself!
                            if (this.inputEl.attr('multiple') &&
                                (this.theme.inputClass === 'input-sm' || this.theme.inputClass === 'input-lg')) {
                                break;
                            }
                            this.inputEl.addClass(this.theme.inputClass);
                        }
                        break;
                }

                //apply buttonsClass (bs3 specific!)
                if (this.buttonsEl && this.theme.buttonsClass) {
                    this.buttonsEl.find('button').addClass(this.theme.buttonsClass);
                }
            }
        }
    };

    return themes;
});;
angular.module('ReportTemplates').controller('DefaultTemplateSettingsController', ['$scope', '$timeout', '$filter', '$q', '$http', 'ReportTemplatesAPI', 'ReportOutputSetupAPI', 'DefaultLanguageLibraryAPI', '$modal', 'BASEURL', function ($scope, $timeout, $filter, $q, $http, ReportTemplatesAPI, ReportOutputSetupAPI, DefaultLanguageLibraryAPI, $modal, BASEURL) {


        $scope.templateArr = [];
        $scope.defLangLibArr = [];
        $scope.tocArr = [];
        $scope.repSetupArr = [];
        $scope.transLetterArr = [];
        //var companyId = 12;


        $scope.companyList = BASEURL.companies;

        /*var init = function () {
            getTemplateLists();
        }

        init();*/

        $scope.companySelectionChanged = function () {
            $scope.defaultTemplates = [];
            $scope.templateArr = [];
            getTemplateLists($scope.companyID);
        };

        //value of default templates with their respective report/dll/toc etc values.
        /*$scope.defaultTemplates = [{
            "templateID": 2638,
            "languageLibraryID": 1,
            "reportOutputSetupID": 22,
            "tocSetupID": 33,
            "transmittalSetupID": 44,
            "coverPageID": 1
        }, {
            "templateID": 2641,
            "languageLibraryID": 2,
            "reportOutputSetupID": 22,
            "tocSetupID": 33,
            "transmittalSetupID": 44,
            "coverPageID": 1
        }]*/
        $scope.defaultTemplates = [];


        $scope.showDisplayMsg = function (msg, type) {
            $scope.serviceResponseAlert = true;
            $scope.serviceResponseText = msg;
            $scope.msgType = 'alert-' + (type || 'danger');
        }

        function mergeDefaultValuesWithTemplate(templates) {


            for (var j = 0; j < templates.length; j++) {
                var templateStructure = {
                    templateID: templates[j].templateID,
                    templateGUID: templates[j].templateGUID,
                    name: templates[j].name
                };
                $scope.templateArr.push(templateStructure);

                if ($scope.defaultTemplates) {
                    for (var i = 0; i < $scope.defaultTemplates.length; i++) {
                        if ($scope.defaultTemplates[i].templateID == templates[j].templateID) {
                            templateStructure.languageLibraryID = $scope.defaultTemplates[i].languageLibraryID;
                            templateStructure.reportOutputSetupID = $scope.defaultTemplates[i].reportOutputSetupID;
                            templateStructure.tocSetupID = $scope.defaultTemplates[i].tocSetupID;
                            templateStructure.transmittalSetupID = $scope.defaultTemplates[i].transmittalSetupID;
                            templateStructure.coverPageID = $scope.defaultTemplates[i].coverPageID;
                        }

                    }
                }
            }
        }

        function getTemplateList_withPromise(companyId) {
            //get templates lists
            return ReportTemplatesAPI.getTemplateList(companyId).then(function (templates) {
                return templates.templates;
            }, function (error) {

            });
        }

        function getTemplateDefaults_withPromise(companyID, templateID, templates) {
            return ReportTemplatesAPI.getTemplateDefaults(companyID, templateID);
        }

        function getTemplateLists(companyId) {
            getTemplateList_withPromise(companyId)
                .then(function (templates) {
                    var promiseArr = [];
                    angular.forEach(templates, function (templateItem) {
                        promiseArr.push(getTemplateDefaults_withPromise(companyId, templateItem.templateGUID)
                            .then(function (defaults) {
                                if (defaults) {
                                    if (!defaults.templateID) {
                                        defaults.templateID = templateItem.templateID;
                                    }
                                    if (!defaults.templateGUID) {
                                        defaults.templateGUID = templateItem.templateGUID;
                                    }
                                    $scope.defaultTemplates.push(defaults);
                                }
                            }, function (error) {
                                // suppress exception for single GET template default call
                            }));
                    });
                    return $q.all(promiseArr).then(function (resultSet) {
                        return templates;
                    });
                })
                .then(function (templates) {
                    mergeDefaultValuesWithTemplate(templates);
                });


            //get report setup list
            ReportOutputSetupAPI.getList(companyId, 'reportSetup').then(function (reportsData) {
                for (var i = 0; i < reportsData.length; i++) {
                    var reportStructure = {
                        value: reportsData[i].reportOutputSetupID,
                        text: reportsData[i].name
                    }
                    $scope.repSetupArr.push(reportStructure);
                }


            }, function (error) {

            });

            //get report toc list
            ReportOutputSetupAPI.getList(companyId, 'tocSetup').then(function (tocData) {


                for (var i = 0; i < tocData.length; i++) {
                    var tocStructure = {
                        value: tocData[i].tocSetupID,
                        text: tocData[i].name
                    }
                    $scope.tocArr.push(tocStructure);
                }


            }, function (error) {

            });

            //get report tl list
            ReportOutputSetupAPI.getList(companyId, 'transmittalSetup').then(function (transData) {



                for (var i = 0; i < transData.length; i++) {
                    var transStructure = {
                        value: transData[i].transmittalSetupID,
                        text: transData[i].name
                    }
                    $scope.transLetterArr.push(transStructure);
                }


            }, function (error) {

            });

            //get report dll list
            DefaultLanguageLibraryAPI.getDLLList(companyId).then(function (dllData) {

                for (var i = 0; i < dllData.libraries.length; i++) {
                    var dllStructure = {
                        value: dllData.libraries[i].libraryID,
                        text: dllData.libraries[i].name
                    }
                    $scope.defLangLibArr.push(dllStructure);
                }


            }, function (error) {

            });



        }


        //Default Language Library starts
        //        $scope.defLangLibArr = [
        //            {
        //                value: 1,
        //                text: '2015 RM Project Simplified PCA'
        //            },
        //            {
        //                value: 2,
        //                text: 'ASTM PCA - PARCEL Default'
        //            },
        //            {
        //                value: 3,
        //                text: 'EDR Mobile - PCA Site Reconnaissance'
        //            }
        //    ];

        $scope.showdefLangLib = function (template) {
            var selected = [];
            if (template.languageLibraryID) {
                selected = $filter('filter')($scope.defLangLibArr, {
                    value: template.languageLibraryID
                });
            }
            return selected.length ? selected[0].text : 'Not set';
        };

        $scope.showtoc = function (template) {
            var selected = [];
            //            if (template.tocVal) {
            //                selected = $filter('filter')($scope.tocArr, {
            //                    value: template.tocVal
            //                });
            //            }
            //            return selected.length ? selected[0].text : 'Not set';

            if (template.tocSetupID) {
                selected = $filter('filter')($scope.tocArr, {
                    value: template.tocSetupID
                });
            }

            return selected.length ? selected[0].text : 'Not set';
        };

        //table of contents ends


        //report setup starts

        //        $scope.repSetupArr = [
        //            {
        //                value: 1,
        //                text: 'First Parcel Report'
        //            },
        //            {
        //                value: 2,
        //                text: '2013 RM PARCEL Simplified'
        //            },
        //            {
        //                value: 3,
        //                text: 'EDR Default Phase I'
        //            },
        //            {
        //                value: 4,
        //                text: 'Parcel Default DB Review'
        //            }
        //
        //    ];

        $scope.showrepSetup = function (template) {

            var selected = [];
            if (template.reportOutputSetupID) {
                selected = $filter('filter')($scope.repSetupArr, {
                    value: template.reportOutputSetupID
                });
            }

            return selected.length ? selected[0].text : 'Not set';
        };


        //report setup ends


        //transmittal letter starts

        //        $scope.transLetterArr = [
        //            {
        //                value: 1,
        //                text: 'Parcel Default'
        //            },
        //            {
        //                value: 2,
        //                text: 'Parcel Default Phase I'
        //            }
        //
        //    ];

        $scope.showtranLetter = function (template) {
            var selected = [];
            if (template.transmittalSetupID) {
                selected = $filter('filter')($scope.transLetterArr, {
                    value: template.transmittalSetupID
                });
            }
            return selected.length ? selected[0].text : 'Not set';
        };


        //transmittal letter ends

        //cover page starts


        $scope.coverPageArr = [{
                value: 1,
                text: 'Parcel Default'
            }, {
                value: 2,
                text: 'Parcel Cover Page w Photo'
            }

        ];

        $scope.showcoverPage = function (template) {
            var selected = [];
            if (template.coverPageVal) {
                selected = $filter('filter')($scope.coverPageArr, {
                    value: template.coverPageVal
                });
            }
            return selected.length ? selected[0].text : 'Not set';
        };

        //cover page ends



        $scope.checkName = function (data, id) {
            if (id === 2 && data !== 'awesome') {
                return "Username 2 should be `awesome`";
            }
        };

        $scope.saveUser = function (data, id) {
            //$scope.user not updated yet
            angular.extend(data, {
                id: id
            });
            //return $http.post('/saveUser', data);
        };

        // remove user
        $scope.removeUser = function (index) {
            $scope.templateArr.splice(index, 1);
        };
        $scope.saveDefaultTemplate = function (template) {


            var companyId = $scope.companyID;
            ReportTemplatesAPI.putDefaultTemplates(template.templateID, template, companyId).then(function (response) {
                $scope.showDisplayMsg('Template updated successfully', 'success');


            }, function (error) {
                $scope.showDisplayMsg(error);

            });

        }

        $scope.openDelete = function (template) {

            var val = {
                template: template
            }

            var modalInstance = $modal.open({
                templateUrl: "dllDeleteTemplate.html",
                scope: $scope,
                controller: deleteDefaultLanguageController,
                size: 0,
                resolve: {
                    parameters: function () {
                        return val;
                    }
                }
            })

        }

        var deleteDefaultLanguageController = function ($scope, $modalInstance, parameters) {
            $scope.deleteDefaultTemplate = function () {

                ReportTemplatesAPI.deleteDefaultTemplates(parameters.template.templateID, parameters.template).then(function (response) {

                    $scope.showDisplayMsg('Template deleted successfully', 'success');
                    for (var i = 0; i < $scope.templateArr.length; i++) {

                        if (parameters.template.templateID == $scope.templateArr[i].templateID) {

                            $scope.templateArr.splice(i, 1);
                            $modalInstance.close();
                        }
                    }


                }, function (error) {
                    $scope.showDisplayMsg(error);
                });
            }

            $scope.CancelDelete = function () {

                $modalInstance.close();
            }
        }

    }

]);;
angular.module('ReportTemplates').controller('EditTemplatesController', ['$scope', '$timeout', '$filter', '$q', '$http', 'ReportTemplatesAPI', 'ReportOutputSetupAPI', 'DefaultLanguageLibraryAPI', '$modal', '$stateParams', 'BASEURL', function ($scope, $timeout, $filter, $q, $http, ReportTemplatesAPI, ReportOutputSetupAPI, DefaultLanguageLibraryAPI, $modal, $stateParams, BASEURL) {

        $scope.companyList = BASEURL.companies;


        $scope.sections = [];

        $scope.templates = [];
        $scope.Dashboards = [];

        $scope.EditTemplateCompanyID = $stateParams.companyID;
        $scope.template = parseInt($stateParams.SelectedTemplateID);

        function getObjectFromArray(list, field, value) {
            if (!list || !list.length) return null;

            for (var i = 0; i < list.length; i++) {
                var local = list[i];
                if (local[field] == value) {
                    return local;
                }
            }
        }
        var init = function (selectedCompanyID) {
            $scope.selectedCompany = getObjectFromArray($scope.companyList, "companyGUID", selectedCompanyID);
            var promise = getTemplateLists(selectedCompanyID);
            promise.then(function (result) {
                setDefaultTemplateSelected();
            });
            getDashboard();


        }

        function setDefaultTemplateSelected() {
            if ($scope.template && $scope.templates && $scope.templates.length) {
                var selected = getTemplateObjByID($scope.template);
                if (selected) {
                    $scope.selectedTemplate = selected;
                }
            }
        }

        function getTemplateObjByID(id) {
            if (!id || !$scope.templates) return;

            for (var i = 0; i < $scope.templates.length; i++) {
                var local = $scope.templates[i];
                if (local.templateID == id) {
                    return local;
                }
            }
        }

        init($scope.EditTemplateCompanyID);

        $scope.companySelectionChanged = function () {
            clearErrorMsg();
            $scope.Cancel();
            $scope.selectedTemplate = null;
            $scope.template = 0;

            $scope.EditTemplateCompanyID = $scope.selectedCompany.companyGUID;
            getTemplateLists($scope.EditTemplateCompanyID);
            setValueForSetAction();
        };

        function getTemplateName(templateId) {
            for (var i = 0; i < $scope.templates.length; i++) {

                if ($scope.templates[i].templateID == templateId) {

                    return $scope.templates[i].name;
                }
            }
        }

        function getTemplateObj(templateId) {

            for (var i = 0; i < $scope.templates.length; i++) {

                if ($scope.templates[i].templateID == templateId) {
                    /*var templateObj = {
                        "templateID": $scope.templates[i].templateID,
                        "reportType": $scope.templates[i].reportType,
                        "name": $scope.templates[i].name,
                        "ownerCompanyID": $scope.templates[i].ownerCompanyID,
                        "shortName": $scope.templates[i].shortName,
                        "description": $scope.templates[i].description,
                        "dashboard": $scope.templates[i].dashboard,
                        "isMobile": $scope.templates[i].isMobile,
                        "templateVersion": $scope.templates[i].templateVersion

                    }*/
                    var templateObj = angular.copy($scope.templates[i]);
                    return templateObj;
                }
            }
        }

        function getTemplateLists(companyId) {

            //get templates lists
            return ReportTemplatesAPI.getTemplateList(companyId).then(function (result) {

                $scope.templates = result.templates;

            }, function (error) {

            });


        }



        function getTemplateSections() {

            ReportTemplatesAPI.getTemplateSections($scope.selectedTemplate.templateGUID).then(function (sections) {
                $scope.sections = sections;
                // console.log(JSON.stringify($scope.sections));
            }, function (error) {
                $scope.sections = null;
            });


        }

        function getDashboard() {

            ReportTemplatesAPI.getDashboard().then(function (result) {
                $scope.Dashboards = result.dashboardOptions;
            });

        }

        function setValueForSetAction() {
            var action = $scope.action;
            if (action) {
                setDefaultForAction(action);
            }
        }

        function setDefaultForAction(action) {
            switch (action) {
                case 'showRename':
                    if ($scope.template) {
                        var tempName = getTemplateName($scope.template);
                        $scope.renameVal = tempName;
                    }
                    break;
                case 'showCopy':
                    if ($scope.template) {
                        var tempName = getTemplateName($scope.template);
                        $scope.copyVal = tempName;
                    }
                    break;
                case 'showStructure':
                    if ($scope.selectedTemplate) {
                        getTemplateSections();
                    }
                    break;
                case "showShortName":
                    $scope.shortNameVal = $scope.selectedTemplate.shortName;
                    break;
                case "showDefault":
                    templateDefault();
                    break;

                case 'showRules':

                    break;
                case 'showMove':

                    break;
            }
        }

        $scope.actionSelected = function () {
            clearErrorMsg();

            var action = $scope.action;
            setDefaultForAction(action);
        }
        $scope.showDisplayMsg = function (msg, type) {
            $scope.serviceResponseAlert = true;
            $scope.serviceResponseText = msg;
            $scope.msgType = 'alert-' + (type || 'danger');
        }
        $scope.templateChange = function () {
            clearErrorMsg();
            $scope.Cancel();

            var action = $scope.action;
            $scope.template = $scope.selectedTemplate.templateID;
            setDefaultForAction(action);
        }
        $scope.Save = function (form) {
            if (!form || form.$invalid) {
                $scope.showDisplayMsg('Invalid Form Submission');
                return;
            }
            var action = $scope.action;
            switch (action) {
                case 'showRename':
                    templateRename();
                    break;
                case 'showCopy':
                    templateCopy();
                    break;
                case 'showStructure':
                    templateStructure();
                    break;
                case 'showRules':
                    templateRules();
                    break;
                case 'showMove':
                    templateMove();
                    break;

                case 'showShortName':
                    templateShortName();
                    break;
                case 'showDashboard':
                    templateDashboard();
                    break;
                    /*case 'showDefault':
                        templateDefault();
                        break;*/

            }

        }
        $scope.Cancel = function () {
            $scope.serviceResponseAlert = false;
            $scope.action = "";
        }

        function templateRename() {


            if ($scope.template) {
                //$scope.template.name = $scope.renameVal;
                var templateObj = getTemplateObj($scope.template);
                templateObj.name = $scope.renameVal;
                ReportTemplatesAPI.putTemplates(templateObj.templateGUID, templateObj).then(function (updatedTemplate) {
                    $scope.showDisplayMsg('Template renamed successfully', 'success');

                    for (var i = 0; i < $scope.templates.length; i++) {

                        if ($scope.templates[i].templateID == $scope.template) {
                            $scope.templates[i] = updatedTemplate;
                            $scope.template = updatedTemplate.templateID;
                            $scope.selectedTemplate = updatedTemplate;
                            return;
                        }
                    }


                }, function (error) {
                    $scope.showDisplayMsg(error);
                });
            } else {
                $scope.showDisplayMsg('Please select template', 'danger');
            }



        }

        function templateCopy() {
            if ($scope.selectedTemplate) {
                var data = {
                    templateID: $scope.selectedTemplate.templateID,
                    templateGUID: $scope.selectedTemplate.templateGUID,
                    ownerCompanyID: $scope.selectedTemplate.ownerCompanyID,
                    ownerCompanyGUID: $scope.selectedTemplate.ownerCompanyGUID,
                    name: $scope.copyVal
                };
                var promise = ReportTemplatesAPI.copyTemplate(data);
                promise.then(function (newTemplate) {
                    $scope.templates.push(newTemplate);
                    $scope.Cancel();
                }, function (error) {

                });
            } else {
                $scope.showDisplayMsg('Please select template', 'danger');
            }
        }

        function templateStructure() {
            if ($scope.template != undefined && $scope.template != "" && $scope.template != null) {

            } else {
                $scope.showDisplayMsg('Please select template', 'danger');
            }
        }

        function templateRules() {
            if ($scope.template != undefined && $scope.template != "" && $scope.template != null) {} else {
                $scope.showDisplayMsg('Please select template', 'danger');
            }
        }

        function templateMove() {
            if ($scope.selectedTemplate) {

                var templateObj = $scope.selectedTemplate; //getTemplateObj($scope.template);
                var otherCompany = $scope.company_move;
                templateObj.ownerCompanyGUID = otherCompany.companyGUID;
                templateObj.ownerCompanyID = otherCompany.companyID;
                ReportTemplatesAPI.putTemplates($scope.selectedTemplate.templateGUID, templateObj).then(function (response) {

                    $scope.showDisplayMsg('Template moved successfully', 'success');

                }, function (error) {
                    $scope.showDisplayMsg(error);
                });
            } else {
                $scope.showDisplayMsg('Please select template', 'danger');
            }
        }
        $scope.openDelete = function () {
            if ($scope.template != undefined && $scope.template != "" && $scope.template != null) {
                var modalInstance = $modal.open({
                    templateUrl: "DeleteTemplate.html",
                    scope: $scope,
                    controller: deleteTemplateController,
                    size: 0
                })

            } else {
                $scope.showDisplayMsg('Please select template', 'danger');
            }


        }

        var deleteTemplateController = function ($scope, $modalInstance) {
            $scope.deleteTemplate = function () {

                var templateObj = {
                    "templateID": $scope.template,
                    "reportType": $scope.template.reportType,
                    "name": $scope.template.name,
                    "ownerCompanyID": $scope.template.ownerCompanyID,
                    "shortName": $scope.template.shortName,
                    "description": $scope.template.description,
                    "dashboard": $scope.template.dashboard,
                    "isMobile": $scope.template.isMobile,
                    "templateVersion": $scope.template.templateVersion,
                    "isDeleted": 1
                }

                ReportTemplatesAPI.deleteTemplates($scope.selectedTemplate.templateGUID, templateObj).then(function (response) {


                    for (var i = 0; i < $scope.templates.length; i++) {

                        if ($scope.template == $scope.templates[i].templateID) {

                            $scope.templates.splice(i, 1);
                        }
                    }
                    $modalInstance.close();
                    $scope.action = "";
                    $scope.showDisplayMsg('Template deleted successfully', 'success');

                }, function (error) {
                    $scope.showDisplayMsg(error);
                });
            }

            $scope.CancelDelete = function () {

                $modalInstance.close();
            }
        }


        function templateShortName() {
            //  console.log("short name");
            if ($scope.template != undefined && $scope.template != "" && $scope.template != null) {
                var templateObj = angular.copy($scope.selectedTemplate); //getTemplateObj($scope.template);
                templateObj.shortName = $scope.shortNameVal;

                ReportTemplatesAPI.putTemplates($scope.selectedTemplate.templateGUID, templateObj).then(function (updatedTemplate) {
                    $scope.selectedTemplate.shortName = $scope.shortNameVal;
                    $scope.showDisplayMsg('Template(s) short name saved successfully', 'success');

                }, function (error) {
                    $scope.showDisplayMsg(error);
                });
            } else {
                $scope.showDisplayMsg('Please select template', 'danger');
            }
        }

        function templateDashboard() {
            // console.log("dashboard");
            if ($scope.selectedTemplate) {

                var templateObj = $scope.selectedTemplate; //getTemplateObj($scope.template);
                templateObj.dashboard = $scope.dashboardVal;
                ReportTemplatesAPI.putTemplates($scope.selectedTemplate.templateGUID, templateObj).then(function (response) {

                    $scope.showDisplayMsg('Dashboard defined successfully', 'success');

                }, function (error) {
                    $scope.showDisplayMsg(error);
                });
            } else {
                $scope.showDisplayMsg('Please select template', 'danger');
            }
        }

        function templateDefault() {
            if ($scope.template != undefined && $scope.template != "" && $scope.template != null) {
                var templateObj = {
                    templateGUID: $scope.selectedTemplate.templateGUID,
                    templateID: $scope.selectedTemplate.templateID
                };
                // If I have templateGUID, I don't need to pass 'companyID', 'reportType', 'clientCompanyID'
                ReportTemplatesAPI.setDefaultReportTemplate(templateObj, $scope.selectedTemplate.ownerCompanyGUID, $scope.selectedTemplate.reportTypeValue, '').then(function (response) {
                    $scope.showDisplayMsg('The default template has been updated.', 'success');
                }, function (error) {
                    $scope.showDisplayMsg(error);
                });
            } else {
                $scope.showDisplayMsg('Please select template', 'danger');
            }
        }


        function clearErrorMsg() {
            $scope.serviceResponseAlert = false;
            $scope.serviceResponseText = "";
        }

    }

]);;
angular.module('ReportTemplates').service('ReportTemplatesAPI', ['APIFactory', 'ReportTemplatesAPIUrlCollection', 'BASEURL', function (APIFactory, UrlColl, BASEURL) {

    var self = this;



    this.getTemplateList = function (companyId) {
        var url = BASEURL.REPORTTEMPLATES_COMPTEMPLATES + UrlColl.GETAPI_TEMPLATESLIST;
        var queryParams = {
            companyID: companyId
        }
        return APIFactory.get(url, queryParams);
    };

    this.getTemplateDefaults = function (companyID, templateID) {
        var url = BASEURL.REPORTTEMPLATES_TEMPLATES + UrlColl.GETAPI_TEMPLATEDEFAULTS;
        var params = {
            companyID: companyID,
            templateID: templateID
        };
        return APIFactory.get(url, params).then(function (data) {
            return data.defaults;
        });
    };

    this.putDefaultTemplates = function (templateID, defaultTemplatesData, companyID) {
        var url = BASEURL.REPORTTEMPLATES_TEMPLATES + UrlColl.PUTAPI_TEMPLATEDEFAULTS;
        var queryParams = {
            templateID: templateID,
            companyID: companyID
        }

        var putData = {
            defaults: defaultTemplatesData
        };

        return APIFactory.put(url, putData, queryParams).then(function (result) {
            return result.data;
        });
    };

    this.deleteDefaultTemplates = function (templateID, data) {
        var url = UrlColl.DELETEAPI_TEMPLATEDEFAULTS;
        var queryParams = {
            templateID: templateID
        }

        var putData = {
            template: data
        };

        return APIFactory.delete(url, putData, queryParams).then(function (result) {
            return result.data;
        });
    };

    this.getDashboard = function () {
        var url = BASEURL.REPORTTEMPLATES_PARCELSERVICE + UrlColl.GETAPI_DASHBOARDLIST;

        return APIFactory.get(url, "");
    };

    this.getTemplateSections = function (templateId) {
        var url = BASEURL.REPORTTEMPLATES_TEMPLATES + UrlColl.GETAPI_TEMPLATESECTIONS;
        var queryParams = {
            templateID: templateId
        }
        return APIFactory.get(url, queryParams).then(function (data) {
            return data.template.tableOfContent.sections;
        });
    };

    this.putTemplates = function (templateID, templatesData) {
        var url = BASEURL.REPORTTEMPLATES_TEMPLATES + UrlColl.PUTAPI_TEMPLATES;
        var queryParams = {
            templateID: templateID
        }

        var templateObj = angular.copy(templatesData);
        if (templateObj) {
            delete templateObj.companyDefaultTemplate;
            var name = templateObj.reportType;
            templateObj.reportType = templateObj.reportTypeValue;
        }
        var putData = {
            template: templateObj
        };

        return APIFactory.put(url, putData, queryParams).then(function (result) {

            return result.template;
        });
    };

    this.deleteTemplates = function (templateID, data) {
        var url = BASEURL.REPORTTEMPLATES_TEMPLATES + UrlColl.DELETEAPI_TEMPLATES;
        var queryParams = {
            templateID: templateID
        }

        var putData = {
            template: data
        };

        return APIFactory.delete(url, putData, queryParams).then(function (result) {
            return result.data;
        });
    };

    this.copyTemplate = function (data) {
        var url = BASEURL.REPORTTEMPLATES_PARCELSERVICE + UrlColl.POSTAPI_TEMPLATES;
        return APIFactory.post(url, data).then(function (data) {
            return data.template;
        });
    };

    this.setDefaultReportTemplate = function (template, companyGuid, reportType, clientCompanyGuid) {
        var url = BASEURL.REPORTTEMPLATES_PARCELSERVICE + UrlColl.PUTAPI_DEFAULTREPORTTEMPLATE;

        // this is fix for API
        // url: /defaulttemplate/companyID/reportType/clientCompanyID
        // 'clientCompanyID' becomes mandatory in this case
        // if not provided, response is 404 error
        if (!clientCompanyGuid) {
            clientCompanyGuid = "null";
        }
        var queryParams = {
            companyID: companyGuid,
            reportType: reportType,
            clientCompanyID: clientCompanyGuid
        }

        var putData = {
            "template": template
        };
        return APIFactory.put(url, putData, queryParams).then(function (result) {
            return result;
        });
    };

}]);;
angular.module('ReportTemplates').constant('ReportTemplatesAPIUrlCollection', {

    GETAPI_TEMPLATESLIST: '{companyID}',


    GETAPI_TEMPLATEDEFAULTS: '{templateID}/defaults/{companyID}',

    PUTAPI_TEMPLATEDEFAULTS: '{templateID}/defaults/{companyID}',




    DELETEAPI_TEMPLATEDEFAULTS: '',

    GETAPI_DASHBOARDLIST: 'templatedashboards',

    GETAPI_TEMPLATESECTIONS: '{templateID}/sections',

    PUTAPI_TEMPLATES: '{templateID}',

    DELETEAPI_TEMPLATES: '{templateID}',

    POSTAPI_TEMPLATES: 'templates',

    PUTAPI_DEFAULTREPORTTEMPLATE: 'defaulttemplate/{companyID}/{reportType}/{clientCompanyID}',



});; // define module
angular.module('Support', ['ui.router.state', 'ui.bootstrap', 'colorpicker.module']);

// routers
angular.module('Support').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');

        var baseViewsFolder = 'app/modules/Support/views/';
        $stateProvider.state('Support', {
            url: '/Support',
            templateUrl: baseViewsFolder + 'Support.html'
        });
    }
]);; // define module
angular.module('TOCSetup', ['ui.router.state', 'ui.bootstrap', 'colorpicker.module']);

// routers
angular.module('TOCSetup').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');

        var baseViewsFolder = 'app/modules/TableOfContentsSetup/views/';
        $stateProvider.state('tocSetup', {
            url: '/TOCSetup',
            templateUrl: baseViewsFolder + 'TOCSetupForm.html'
        });
    }
]);;
angular.module('TOCSetup').controller('TOCSetupCtrl', ['$scope', '$modal', '$compile', 'ReportOutputSetupAPI', 'ReportOutputSetupAPIConstants', '$window', function ($scope, $modal, $compile, ReportOutputSetupAPI, ReportOutputSetupAPIConstants, $window) {

    // global controller var 
    var self = this;
    // parent object
    var setUpParent = self.setupProperties = {};

    self.ouputSetupType = ReportOutputSetupAPIConstants.OUTPUTSETUP_TYPE.TableOfContents;

    setUpParent.reportSection = {
        coll: [],
        selected: null
    };

    self.showDisplayMsg = function (msg, type) {
        self.serviceResponseAlert = true;
        self.serviceResponseText = msg;
        self.msgType = 'alert-' + (type || 'danger');
    }

    var repSetupToolsController = function ($scope, $modalInstance, selectedReportOutputSetupId, selectedReportOutputSetup, companyId, reportColl) {
        $scope.cloned = angular.copy(selectedReportOutputSetup);
        $scope.reportColl = reportColl;

        $scope.deleteReport = function () {
            var data = {
                "reportOutputSetup": $scope.cloned
            }
            var deleteReportPromise = ReportOutputSetupAPI.delete(selectedReportOutputSetupId, data);
            deleteReportPromise.then(function (resp) {
                // console.log("11111111111: "+JSON.stringify(setUpParent.reportSection.coll));
                for (var i = 0; i < setUpParent.reportSection.coll.length; i++) {

                    if (selectedReportOutputSetupId == setUpParent.reportSection.coll[i].tocSetupID) {

                        setUpParent.reportSection.coll.splice(i, 1);


                        setUpParent.reportSection.setupReady = false;
                    }
                }
                if (setUpParent.reportSection.coll.length < 1) {
                    self.showDisplayMsg('There are no Table of Contents for this company', 'danger');

                } else {
                    self.showDisplayMsg('Table of Contents deleted successfully', 'success');
                }
                $modalInstance.close();
            }, function (error) {
                self.showDisplayMsg(error);
            });
        }

        $scope.renameReport = function (form) {
            if (!form || form.$invalid) {
                // self.showDisplayMsg('Invalid Form Submission');
                return;
            }
            var updateReportPromise = ReportOutputSetupAPI.put(selectedReportOutputSetupId, $scope.cloned);
            updateReportPromise.then(function (resp) {
                self.showDisplayMsg('Table of Contents renamed successfully', 'success');
                $modalInstance.close();
            }, function (error) {
                self.showDisplayMsg(error);
            });
        }

        $scope.duplicate = function (form) {
            if (!form || form.$invalid) {
                // self.showDisplayMsg('Invalid Form Submission');
                return;
            }

            switch (this.copyToAction) {
                case "Existing":

                    $scope.cloneReport.apply(this);
                    //$scope.cloneReport();
                    break;
                case "New":
                    $scope.createReport.apply(this);
                    break;
            }
        }

        $scope.createReport = function () {
            var post = {
                "tocSetupID": selectedReportOutputSetupId,
                "companyID": companyId,
                "name": this.toCreateReport
            }
            var updateReportPromise = ReportOutputSetupAPI.post(post)
            updateReportPromise.then(function (resp) {
                self.showDisplayMsg('Report output duplicated successfully', 'success');
                $modalInstance.close();
            }, function (error) {
                self.showDisplayMsg(error);
            });
        }

        $scope.cloneReport = function () {
            var copyToReport = this.copyToReport;
            var copyFrom = this.report;
            if (copyToReport.tocSetupID == copyFrom.tocSetupID) {
                this.duplicateError = "Copy from and copy to reports can't be same. Please select two different reports.";

                return;
            }
            var putData = {
                "fromTOCSetupID": copyFrom.tocSetupID,
                "name": copyToReport.name,
                "cssData": copyToReport.cssData,
                "cssJson": copyToReport.cssJson,
                "jsonData": copyToReport.jsonData
            };
            var updateReportPromise = ReportOutputSetupAPI.put(copyToReport.tocSetupID, putData);
            updateReportPromise.then(function (resp) {
                self.showDisplayMsg('Table of Contents duplicated successfully', 'success');
                $modalInstance.close();
            }, function (error) {
                self.showDisplayMsg(error);
            });
        }


        $scope.CancelDelete = function () {

            $modalInstance.close()
        }

    }

    // general action
    var Action = function (name) {
        this.name = name;
        this.selected = false;
    };
    Action.prototype.cancel = function () {
        this.selected = false;
    }
    Action.prototype.controller = repSetupToolsController;

    /*var deleteReportController = function($scope, $modalInstance, selectedReportOutputSetupId, selectedReportOutputSetup) {
        $scope.deleteReport = function() {
            var deleteReportPromise = ReportOutputSetupAPI.delete(selectedReportOutputSetupId);
            deleteReportPromise.then(function(resp){
                $modalInstance.close();
            }, function(error){
                alert(error);
            })
        }
        $scope.CancelDelete = function() {
            $modalInstance.close()
        }
    }
    var renameReportController = function($scope, $modalInstance, selectedReportOutputSetupId, selectedReportOutputSetup) {
        $scope.renameReport = function() {
            var deleteReportPromise = ReportOutputSetupAPI.delete(selectedReportOutputSetupId);
            deleteReportPromise.then(function(resp){
                $modalInstance.close();
            }, function(error){
                alert(error);
            })
        }
        $scope.CancelDelete = function() {
            $modalInstance.close()
        }
    }
    var duplicateReportController = function($scope, $modalInstance, selectedReportOutputSetupId, selectedReportOutputSetup) {
        $scope.deleteReport = function() {
            var deleteReportPromise = ReportOutputSetupAPI.delete(selectedReportOutputSetupId);
            deleteReportPromise.then(function(resp){
                $modalInstance.close();
            }, function(error){
                alert(error);
            })
        }
        $scope.CancelDelete = function() {
            $modalInstance.close()
        }
    }*/




    var deleteAction = new Action('Delete');

    deleteAction.url = 'tocDelete.html';
    //deleteAction.controller = deleteReportController;

    var renameAction = new Action('Rename');
    renameAction.url = 'tocRename.html';
    //renameAction.controller = renameReportController;

    var duplicateAction = new Action('Duplicate');
    duplicateAction.url = 'tocDuplicate.html';
    //duplicateAction.controller = duplicateReportController;

    var copyToAction = new Action('Copy TO');


    // specific actions if any operation overridden
    var CopyFromAction = function () {
        Action.call(this, 'Copy FROM');
        this.report = null;
    };
    CopyFromAction.prototype = Object.create(Action.prototype)
    CopyFromAction.prototype.constructor = copyFromAction;
    CopyFromAction.prototype.cancel = function () {
        // overridden functionality
        if (this.report) {
            this.report = null;
        }
        // base operation
        Action.prototype.cancel.apply(this);
    }
    var copyFromAction = new CopyFromAction();


    setUpParent.toolOptions = {
        actions: {
            delete: deleteAction,
            rename: renameAction,
            copyFrom: copyFromAction,
            copyTo: copyToAction,
            duplicate: duplicateAction
                /*delete: {
                    name: 'Delete',
                    selected: false
                },
                rename: {
                    name: 'Rename',
                    selected: false
                },
                copyFrom: {
                    name: 'Copy FROM',
                    selected: false,
                    report: null,
                    cancel: function() {
                        setUpParent.toolOptions.actions.copyFrom.report = null;
                        setUpParent.toolOptions.actions.copyFrom.selected = false;
                    }
                },
                copyTo: {
                    name: 'Copy TO',
                    selected: false
                }*/
        },
        currentSelected: null,
        selectAction: function (action) {

            var popupAction = setUpParent.toolOptions.actions[action];
            OpenPopup(popupAction);
            var actionColl = setUpParent.toolOptions.actions;
            //if (action && actionColl.hasOwnProperty(action)) {
            //    var actionProp = actionColl[action];
            //    var current = setUpParent.toolOptions.currentSelected;

            //    if (current) {
            //        current.selected = false;
            //    }

            //    actionProp.selected = true;
            //    setUpParent.toolOptions.currentSelected = actionProp;
            //}
        }
    };

    // tool options dependent on report selection
    setUpParent.reportSectionChanged = function () {
        /*console.log("selectionChanged" + setUpParent.toolOptions.currentSelected);
        if (setUpParent.toolOptions.currentSelected) {
            setUpParent.toolOptions.currentSelected.selected = false;
        }*/

        //setUpParent.reportSection.selected

        var selectedReport = setUpParent.reportSection.selected;
        /*var selectedReportId = selectedReport.tocSetupID;
        clearReportData();
        getReportOutputSetup(selectedReportId);*/
        setReportData(selectedReport);
        $scope.tocSetupName = selectedReport.name;
    };

    var getReportOutputSetup = function (tocSetupID) {
        var getReportOutputSetupPromise = ReportOutputSetupAPI.get(tocSetupID);
        getReportOutputSetupPromise.then(function (report) {
            setReportData(report);
            setUpParent.reportSection.setupReady = true;
        });
    }
    var setReportData = function (data) {
        if (data) {
            var cssVal = data.cssJson;
            var jsonVal = data.jsonData;
            self.cssData = JSON.parse(cssVal);
            self.jsonData = JSON.parse(jsonVal);
        } else {
            self.cssData = null;
            self.jsonData = null;
        }
        setUpParent.reportSection.setupReady = true;
    }
    var clearReportData = function () {
        setUpParent.reportSection.setupReady = false;
    }
    var clearReport = function () {
        self.serviceResponseAlert = false;
        setUpParent.reportSection.selected = null;
        setUpParent.reportSection.setupReady = false;
        setUpParent.reportSection.coll = null;
    }
    self.selectedCompanyChanged = function () {
        clearReport();
        var getListPromise = ReportOutputSetupAPI.getList(self.selectedCompanyId, self.ouputSetupType);


        getListPromise.then(function (reportOutputSetupList) {
            if (reportOutputSetupList.length < 1) {
                self.showDisplayMsg('There are no Table of Contents for this company', 'danger');

            }
            setUpParent.reportSection.coll = reportOutputSetupList;
        }, function (error) {

        });
    }

    function OpenPopup(popupAction) {
        /*if (action == 'delete') {
            var url = 'repSetupDelete.html';
        } else if (action == 'rename') {
            var url = 'repSetupRename.html';
        } else if (action == 'copyFrom') {
            var url = 'repSetupCopyFrom.html';
        } else if (action == 'copyTo') {
            var url = 'repSetupCopyTo.html';
        } else if (action == 'duplicate') {
            var url = 'repSetupDuplicate.html';
        }*/
        var url = popupAction.url;
        var controller = popupAction.controller;

        var modalInstance = $modal.open({
            templateUrl: url,
            scope: $scope,
            controller: controller,
            size: 0,
            resolve: {
                selectedReportOutputSetupId: function () {
                    var selectedReport = setUpParent.reportSection.selected;
                    return selectedReport.tocSetupID;
                },
                selectedReportOutputSetup: function () {
                    return setUpParent.reportSection.selected;
                },
                companyId: function () {
                    return self.selectedCompanyId
                },
                reportColl: function () {
                    return setUpParent.reportSection.coll;
                }
            }
        });

        modalInstance.result.then(function () {

        });
    }


    // data-model to bind
    self.cssData = {
        'global': {},
        'global-img-caption': {},

        'pca-cost-table-header': {},
        'pca-cost-table-header-text': {},

        'page-header-settings-left': {},
        'page-header-settings-center': {},
        'page-header-settings-right': {},

        'report-section-settings-section-header': {},
        'report-section-settings-section-header-below': {},
        'report-section-settings-sub-section-header': {},
        'report-section-settings-sub-section-header-below': {},
        'report-section-settings-sub-sub-section-header': {},
        'report-section-settings-sub-sub-section-header-below': {},
        'report-section-settings-narrative-section': {},

        'report-table-settings': {},
        'report-table-settings-table-header': {},
        'report-table-settings-table-col-header': {},
        'report-table-settings-table-data': {},

        'page-footer-settings-left': {},
        'page-footer-settings-center': {},
        'page-footer-settings-right': {}
    };
    self.jsonData = {
        'global': {},
        'pca': {},
        'pageHeaderSettings': {
            'left': {},
            'center': {},
            'right': {}
        },
        'reportSectionSettings': {
            'sectionHeader': {},
            'subSectionHeader': {},
            'subSubSectionHeader': {},
            'narrativeSection': {}
        },
        'reportTableSettings': {
            'tableHeader': {},
            'tableColHeader': {},
            'tableData': {}
        },
        'pageFooterSettings': {
            'left': {},
            'center': {},
            'right': {}
        }
    };

    self.submitData = {};
    self.save = function () {
        /*var global = self.global;
        var globalStrVal = '.global ' + JSON.stringify(global);
        var globalClass = globalStrVal.replace(/[\"\\]/g, "");
        var styleFormatted = "<style>" + globalClass + "</style>";*/

        var clStr = "";
        var allCls = "";
        for (var propCl in self.cssData) {
            // css class in json format
            var val = angular.copy(self.cssData[propCl]);

            /*if (propCl == 'page-header-settings-left' || propCl == 'page-header-settings-right' || propCl == 'page-header-settings-center') */
            if (val.style && val.style.length) {
                for (var props in val.style) {
                    var selected = val.style[props];
                    if (selected == 'B') {
                        val['font-weight'] = 'bold';
                    } else if (selected == 'I') {
                        val['font-style'] = 'italic';
                    } else if (selected == 'U') {
                        val['text-decoration'] = 'underline';
                    }
                }
                delete val.style;
            }

            // all css classes to be applied
            allCls = allCls + " " + propCl;

            // css class name
            var clName = "." + propCl;

            var formattedToCss = formatJsonToCss(val);
            var cssCl = clName + formattedToCss;
            var cssClassesSeparator = " ";
            clStr = clStr + cssCl + cssClassesSeparator;

        }

        self.submitData.jsonData = JSON.stringify(self.jsonData);
        self.submitData.cssJson = JSON.stringify(self.cssData);
        self.submitData.cssData = clStr;
        self.submitData.name = setUpParent.reportSection.selected.name;

        console.log(self.submitData);

        var tocSetupID = setUpParent.reportSection.selected.tocSetupID;
        ReportOutputSetupAPI.put(tocSetupID, self.submitData).then(function (result) {
            $window.scrollTo(0, 0);
            self.showDisplayMsg('Table of Contents updated successfully', 'success');
        }, function (error) {
            self.showDisplayMsg(error);
        });

        var styleFormatted = "<style>" + clStr + "</style>";
        var compiled = $compile(styleFormatted)($scope);
        var element = angular.element('#applied');
        element.append(compiled);
        element.addClass(allCls);
    }

    function formatJsonToCss(jsonData) {
        // stringify json object
        var stringified = JSON.stringify(jsonData);
        // escape characters
        var escaped = stringified.replace(/[\"\\]/g, "");
        // replace comma (default json stringify property separator) with semicolon
        // NOTE: this is assuming that no property value will have comma
        var formatted = escaped.replace(/,/g, ';');

        return formatted;
    }

}]); // define module
angular.module('TransmittalLetterSetup', ['ui.router.state', 'ui.bootstrap', 'colorpicker.module']);

// routers
angular.module('TransmittalLetterSetup').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');

        var baseViewsFolder = 'app/modules/TransmittalLetterSetup/views/';
        $stateProvider.state('transmittalLetterSetup', {
            url: '/TransmittalLetterSetup',
            templateUrl: baseViewsFolder + 'TransmittalLetterSetup.html'
        });
    }
]);;
angular.module('TransmittalLetterSetup').controller('TransmittalLetterSetupCtrl', ['$scope', '$modal', '$compile', 'ReportOutputSetupAPI', 'ReportOutputSetupAPIConstants', '$window', function ($scope, $modal, $compile, ReportOutputSetupAPI, ReportOutputSetupAPIConstants, $window) {

    // global controller var 
    var self = this;
    // parent object
    var setUpParent = self.setupProperties = {};


    self.ouputSetupType = ReportOutputSetupAPIConstants.OUTPUTSETUP_TYPE.TransmittalLetter;

    setUpParent.reportSection = {
        coll: [],
        selected: null
    };

    self.showDisplayMsg = function (msg, type) {
        self.serviceResponseAlert = true;
        self.serviceResponseText = msg;
        self.msgType = 'alert-' + (type || 'danger');
    }

    var repSetupToolsController = function ($scope, $modalInstance, selectedReportOutputSetupId, selectedReportOutputSetup, companyId, reportColl) {
        $scope.cloned = angular.copy(selectedReportOutputSetup);
        $scope.reportColl = reportColl;

        $scope.deleteReport = function () {
            var data = {
                "reportOutputSetup": $scope.cloned
            }
            var deleteReportPromise = ReportOutputSetupAPI.delete(selectedReportOutputSetupId, data);
            deleteReportPromise.then(function (resp) {
                // console.log("11111111111: "+JSON.stringify(setUpParent.reportSection.coll));
                for (var i = 0; i < setUpParent.reportSection.coll.length; i++) {

                    if (selectedReportOutputSetupId == setUpParent.reportSection.coll[i].transmittalSetupID) {

                        setUpParent.reportSection.coll.splice(i, 1);


                        setUpParent.reportSection.setupReady = false;
                    }
                }
                if (setUpParent.reportSection.coll.length < 1) {
                    self.showDisplayMsg('There are no transmittal letter for this company', 'danger');

                } else {
                    self.showDisplayMsg('Transmittal letter deleted successfully', 'success');
                }
                $modalInstance.close();
            }, function (error) {
                self.showDisplayMsg(error);
            });
        }

        $scope.renameReport = function (form) {
            if (!form || form.$invalid) {
                // self.showDisplayMsg('Invalid Form Submission');
                return;
            }
            var updateReportPromise = ReportOutputSetupAPI.put(selectedReportOutputSetupId, $scope.cloned);
            updateReportPromise.then(function (resp) {
                self.showDisplayMsg('Transmittal letter renamed successfully', 'success');
                $modalInstance.close();
            }, function (error) {
                self.showDisplayMsg(error);
            });
        }

        $scope.duplicate = function (form) {
            if (!form || form.$invalid) {
                // self.showDisplayMsg('Invalid Form Submission');
                return;
            }

            switch (this.copyToAction) {
                case "Existing":

                    $scope.cloneReport.apply(this);
                    //$scope.cloneReport();
                    break;
                case "New":
                    $scope.createReport.apply(this);
                    break;
            }
        }

        $scope.createReport = function () {
            var post = {
                "transmittalSetupID": selectedReportOutputSetupId,
                "companyID": companyId,
                "name": this.toCreateReport
            }
            var updateReportPromise = ReportOutputSetupAPI.post(post)
            updateReportPromise.then(function (resp) {
                self.showDisplayMsg('Transmittal letter duplicated successfully', 'success');
                $modalInstance.close();
            }, function (error) {
                self.showDisplayMsg(error);
            });
        }

        $scope.cloneReport = function () {
            var copyToReport = this.copyToReport;
            var copyFrom = this.report;
            if (copyToReport.transmittalSetupID == copyFrom.transmittalSetupID) {
                this.duplicateError = "Copy from and copy to reports can't be same. Please select two different reports.";

                return;
            }
            var putData = {
                "fromTransmittalSetupID": copyFrom.transmittalSetupID,
                "name": copyToReport.name,
                "cssData": copyToReport.cssData,
                "cssJson": copyToReport.cssJson,
                "jsonData": copyToReport.jsonData
            };
            var updateReportPromise = ReportOutputSetupAPI.put(copyToReport.transmittalSetupID, putData);
            updateReportPromise.then(function (resp) {
                self.showDisplayMsg('Report output duplicated successfully', 'success');
                $modalInstance.close();
            }, function (error) {
                self.showDisplayMsg(error);
            });
        }


        $scope.CancelDelete = function () {

            $modalInstance.close()
        }

    }

    // general action
    var Action = function (name) {
        this.name = name;
        this.selected = false;
    };
    Action.prototype.cancel = function () {
        this.selected = false;
    }
    Action.prototype.controller = repSetupToolsController;

    /*var deleteReportController = function($scope, $modalInstance, selectedReportOutputSetupId, selectedReportOutputSetup) {
        $scope.deleteReport = function() {
            var deleteReportPromise = ReportOutputSetupAPI.delete(selectedReportOutputSetupId);
            deleteReportPromise.then(function(resp){
                $modalInstance.close();
            }, function(error){
                alert(error);
            })
        }
        $scope.CancelDelete = function() {
            $modalInstance.close()
        }
    }
    var renameReportController = function($scope, $modalInstance, selectedReportOutputSetupId, selectedReportOutputSetup) {
        $scope.renameReport = function() {
            var deleteReportPromise = ReportOutputSetupAPI.delete(selectedReportOutputSetupId);
            deleteReportPromise.then(function(resp){
                $modalInstance.close();
            }, function(error){
                alert(error);
            })
        }
        $scope.CancelDelete = function() {
            $modalInstance.close()
        }
    }
    var duplicateReportController = function($scope, $modalInstance, selectedReportOutputSetupId, selectedReportOutputSetup) {
        $scope.deleteReport = function() {
            var deleteReportPromise = ReportOutputSetupAPI.delete(selectedReportOutputSetupId);
            deleteReportPromise.then(function(resp){
                $modalInstance.close();
            }, function(error){
                alert(error);
            })
        }
        $scope.CancelDelete = function() {
            $modalInstance.close()
        }
    }*/




    var deleteAction = new Action('Delete');

    deleteAction.url = 'transDelete.html';
    //deleteAction.controller = deleteReportController;

    var renameAction = new Action('Rename');
    renameAction.url = 'transRename.html';
    //renameAction.controller = renameReportController;

    var duplicateAction = new Action('Duplicate');
    duplicateAction.url = 'transDuplicate.html';
    //duplicateAction.controller = duplicateReportController;

    var copyToAction = new Action('Copy TO');


    // specific actions if any operation overridden
    var CopyFromAction = function () {
        Action.call(this, 'Copy FROM');
        this.report = null;
    };
    CopyFromAction.prototype = Object.create(Action.prototype)
    CopyFromAction.prototype.constructor = copyFromAction;
    CopyFromAction.prototype.cancel = function () {
        // overridden functionality
        if (this.report) {
            this.report = null;
        }
        // base operation
        Action.prototype.cancel.apply(this);
    }
    var copyFromAction = new CopyFromAction();


    setUpParent.toolOptions = {
        actions: {
            delete: deleteAction,
            rename: renameAction,
            copyFrom: copyFromAction,
            copyTo: copyToAction,
            duplicate: duplicateAction
                /*delete: {
                    name: 'Delete',
                    selected: false
                },
                rename: {
                    name: 'Rename',
                    selected: false
                },
                copyFrom: {
                    name: 'Copy FROM',
                    selected: false,
                    report: null,
                    cancel: function() {
                        setUpParent.toolOptions.actions.copyFrom.report = null;
                        setUpParent.toolOptions.actions.copyFrom.selected = false;
                    }
                },
                copyTo: {
                    name: 'Copy TO',
                    selected: false
                }*/
        },
        currentSelected: null,
        selectAction: function (action) {

            var popupAction = setUpParent.toolOptions.actions[action];
            OpenPopup(popupAction);
            var actionColl = setUpParent.toolOptions.actions;
            //if (action && actionColl.hasOwnProperty(action)) {
            //    var actionProp = actionColl[action];
            //    var current = setUpParent.toolOptions.currentSelected;

            //    if (current) {
            //        current.selected = false;
            //    }

            //    actionProp.selected = true;
            //    setUpParent.toolOptions.currentSelected = actionProp;
            //}
        }
    };

    // tool options dependent on report selection
    setUpParent.reportSectionChanged = function () {

        console.log("selectionChanged");
        /*console.log("selectionChanged" + setUpParent.toolOptions.currentSelected);
        if (setUpParent.toolOptions.currentSelected) {
            setUpParent.toolOptions.currentSelected.selected = false;
        }*/

        //setUpParent.reportSection.selected

        var selectedReport = setUpParent.reportSection.selected;
        /*var selectedReportId = selectedReport.reportOutputSetupID;
        clearReportData();
        getReportOutputSetup(selectedReportId);*/
        setReportData(selectedReport);
        $scope.transmittalLetterSetupName = selectedReport.name;
    };

    var getReportOutputSetup = function (transmittalSetupID) {
        var getReportOutputSetupPromise = ReportOutputSetupAPI.get(transmittalSetupID);
        getReportOutputSetupPromise.then(function (report) {
            console.log("11111: " + report);
            setReportData(report);
            setUpParent.reportSection.setupReady = true;
        });
    }
    var setReportData = function (data) {
        if (data) {
            var cssVal = data.cssJson;
            var jsonVal = data.jsonData;
            self.cssData = JSON.parse(cssVal);
            self.jsonData = JSON.parse(jsonVal);
        } else {
            self.cssData = null;
            self.jsonData = null;
        }
        setUpParent.reportSection.setupReady = true;
    }
    var clearReportData = function () {
        setUpParent.reportSection.setupReady = false;
    }
    var clearReport = function () {
        self.serviceResponseAlert = false;
        setUpParent.reportSection.selected = null;
        setUpParent.reportSection.setupReady = false;
        setUpParent.reportSection.coll = null;
    }
    self.selectedCompanyChanged = function () {
        clearReport();

        var getListPromise = ReportOutputSetupAPI.getList(self.selectedCompanyId, self.ouputSetupType);


        getListPromise.then(function (reportOutputSetupList) {

            if (reportOutputSetupList.length < 1) {
                self.showDisplayMsg('There are no report setup for this company', 'danger');

            }
            console.log("111111: " + JSON.stringify(reportOutputSetupList));
            setUpParent.reportSection.coll = reportOutputSetupList;
        }, function (error) {

        });
    }

    function OpenPopup(popupAction) {
        /*if (action == 'delete') {
            var url = 'repSetupDelete.html';
        } else if (action == 'rename') {
            var url = 'repSetupRename.html';
        } else if (action == 'copyFrom') {
            var url = 'repSetupCopyFrom.html';
        } else if (action == 'copyTo') {
            var url = 'repSetupCopyTo.html';
        } else if (action == 'duplicate') {
            var url = 'repSetupDuplicate.html';
        }*/
        var url = popupAction.url;
        var controller = popupAction.controller;

        var modalInstance = $modal.open({
            templateUrl: url,
            scope: $scope,
            controller: controller,
            size: 0,
            resolve: {
                selectedReportOutputSetupId: function () {
                    var selectedReport = setUpParent.reportSection.selected;
                    return selectedReport.transmittalSetupID;
                },
                selectedReportOutputSetup: function () {
                    return setUpParent.reportSection.selected;
                },
                companyId: function () {
                    return self.selectedCompanyId
                },
                reportColl: function () {
                    return setUpParent.reportSection.coll;
                }
            }
        });

        modalInstance.result.then(function () {

        });
    }


    // data-model to bind
    self.cssData = {
        'global': {},
        'global-img-caption': {},

        'pca-cost-table-header': {},
        'pca-cost-table-header-text': {},

        'page-header-settings-left': {},
        'page-header-settings-center': {},
        'page-header-settings-right': {},

        'report-section-settings-section-header': {},
        'report-section-settings-section-header-below': {},
        'report-section-settings-sub-section-header': {},
        'report-section-settings-sub-section-header-below': {},
        'report-section-settings-sub-sub-section-header': {},
        'report-section-settings-sub-sub-section-header-below': {},
        'report-section-settings-narrative-section': {},

        'report-table-settings': {},
        'report-table-settings-table-header': {},
        'report-table-settings-table-col-header': {},
        'report-table-settings-table-data': {},

        'page-footer-settings-left': {},
        'page-footer-settings-center': {},
        'page-footer-settings-right': {}
    };
    self.jsonData = {
        'global': {},
        'pca': {},
        'pageHeaderSettings': {
            'left': {},
            'center': {},
            'right': {}
        },
        'reportSectionSettings': {
            'sectionHeader': {},
            'subSectionHeader': {},
            'subSubSectionHeader': {},
            'narrativeSection': {}
        },
        'reportTableSettings': {
            'tableHeader': {},
            'tableColHeader': {},
            'tableData': {}
        },
        'pageFooterSettings': {
            'left': {},
            'center': {},
            'right': {}
        }
    };

    self.submitData = {};
    self.save = function () {
        /*var global = self.global;
        var globalStrVal = '.global ' + JSON.stringify(global);
        var globalClass = globalStrVal.replace(/[\"\\]/g, "");
        var styleFormatted = "<style>" + globalClass + "</style>";*/

        var clStr = "";
        var allCls = "";
        for (var propCl in self.cssData) {
            // css class in json format
            var val = angular.copy(self.cssData[propCl]);

            /*if (propCl == 'page-header-settings-left' || propCl == 'page-header-settings-right' || propCl == 'page-header-settings-center') */
            if (val.style && val.style.length) {
                for (var props in val.style) {
                    var selected = val.style[props];
                    if (selected == 'B') {
                        val['font-weight'] = 'bold';
                    } else if (selected == 'I') {
                        val['font-style'] = 'italic';
                    } else if (selected == 'U') {
                        val['text-decoration'] = 'underline';
                    }
                }
                delete val.style;
            }

            // all css classes to be applied
            allCls = allCls + " " + propCl;

            // css class name
            var clName = "." + propCl;

            var formattedToCss = formatJsonToCss(val);
            var cssCl = clName + formattedToCss;
            var cssClassesSeparator = " ";
            clStr = clStr + cssCl + cssClassesSeparator;

        }

        self.submitData.jsonData = JSON.stringify(self.jsonData);
        self.submitData.cssJson = JSON.stringify(self.cssData);
        self.submitData.cssData = clStr;
        self.submitData.name = setUpParent.reportSection.selected.name;

        console.log(self.submitData);

        var transmittalSetupID = setUpParent.reportSection.selected.transmittalSetupID;
        ReportOutputSetupAPI.put(transmittalSetupID, self.submitData).then(function (result) {
            $window.scrollTo(0, 0);
            self.showDisplayMsg('Transmittal letter updated successfully', 'success');
        }, function (error) {
            self.showDisplayMsg(error);
        });

        var styleFormatted = "<style>" + clStr + "</style>";
        var compiled = $compile(styleFormatted)($scope);
        var element = angular.element('#applied');
        element.append(compiled);
        element.addClass(allCls);
    }

    function formatJsonToCss(jsonData) {
        // stringify json object
        var stringified = JSON.stringify(jsonData);
        // escape characters
        var escaped = stringified.replace(/[\"\\]/g, "");
        // replace comma (default json stringify property separator) with semicolon
        // NOTE: this is assuming that no property value will have comma
        var formatted = escaped.replace(/,/g, ';');

        return formatted;
    }

}]); // define module
angular.module('FilingCabinet', ['ui.router.state', 'ui.bootstrap', 'colorpicker.module']);

// routers
angular.module('FilingCabinet').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');

        var baseViewsFolder = 'app/modules/FilingCabinet/views/';
        $stateProvider.state('filingCabinet', {
                url: '/filingCabinet',
                templateUrl: baseViewsFolder + 'FilingCabinet.html'
            }),
            $stateProvider.state('relatedLinks', {
                url: '/companyProfile/links',
                templateUrl: baseViewsFolder + 'RelatedLinks.html'
            });
    }

]);;
angular.module('FilingCabinet').controller('FilingCabinetCtrl', ['$scope', 'FileServiceAPI', '$filter', '$modal', function ($scope, FileServiceAPI, $filter, $modal) {

    var self = this;

    self.SelectedFolderName = "Select One";
    var FileDetails = [];

    self.editLinkSelected = {};


    self.Alllinks = {
        links: [{
            id: 1,
            title: "Ben",
            linkurl: 28,
            by: "abcd"
        }, {
            id: 2,
            title: "Sally",
            linkurl: 24,
            by: "abcdee"
        }, {
            id: 3,
            title: "John",
            linkurl: 32,
            by: "abcaasasas"
        }, {
            id: 4,
            title: "Jane",
            linkurl: 40,
            by: "abaasasasacd"
        }]
    };

    self.GetLinks = function () {

        self.Alllinks = [];

        var promise = FileServiceAPI.getLinks();
        promise.then(function (FileResponse) {
            for (var index = 0; index < FileResponse.files.length; index++) {
                self.Alllinks = index < FileResponse.files[index];
            }
        })
    }

    self.UpdateLink = function () {

        var LinkId = FilingCabinetCtrl.editLinkSelected.id;

        var data = {
            "Title": FilingCabinetCtrl.editLinkSelected.title,
            "Link": FilingCabinetCtrl.editLinkSelected.linkurl
        };

        var promise = FileServiceAPI.UpdateLink(LinkId, data);
        promise.then(function (UpdateResponse) {

        })
    }

    self.CreateLink = function () {
        var Data = {
            "Title": FilingCabinetCtrl.editLinkSelected.title,
            "Link": FilingCabinetCtrl.editLinkSelected.linkurl
        };

        var promise = FileServiceAPI.CreateLink(data);
        promise.then(function (CreateResponse) {

        })
    }

    self.openLinkDelete = function () {
        var modalInstance = $modal.open({
            templateUrl: "DeleteLink.html",
            scope: $scope,
            controller: deleteLinkController,
            size: 0
        })
    }

    var deleteLinkController = function ($scope, $modalInstance) {
        var Id = "124";
        self.deleteLink = function () {
            var promise = FileServiceAPI.DeleteLink(Id);
            promise.then(function (DeleteResponse) {

            })
        }
        self.CancelDeleteLink = function () {

            $modalInstance.close();
        }
    }

    self.getLinksTemplate = function (links) {
        if (links.id === self.editLinkSelected.id) {
            return 'editrelatedlinks';
        } else {
            return 'displayrelatedlinks';
        }
    }

    self.editRelatedLink = function (LinkObj) {
        self.editLinkSelected = angular.copy(LinkObj);
    }



    self.uploadFile = function () {

        var file = self.fileForAllFolders;

        var FolderName = self.SelectedFolderName;

        if (FolderName == "Select One") {
            self.showMessage("First select a folder. Then select file by clicking on the Attach button and click Upload", "danger");
            return;
        }
        if (!file || file == null) {
            self.showMessage("Please attach files before trying to upload", "danger");
            return;

        } else {
            var UploadFolderName = FolderName.replace(/[^A-Z0-9]+/ig, "_");
            var promise = FileServiceAPI.uploadFile(file, UploadFolderName);
            promise.then(function (UploadResponse) {
                self.showMessage("The file was successfully uploaded.", "success");
                GetFolders();
                /*var FileGUID = UploadResponse.data.file.fileGUID;                    
            if (FileGUID != "" && FileGUID != undefined && FileGUID != null) {
                        var promise = FileServiceAPI.getfiledetails(FileGUID);
                        promise.then(function (DownloadResponse) {
                            var element = {};
                            element.currentVersionURL = DownloadResponse.files[0].currentVersionURL;
                            element.fileName = DownloadResponse.files[0].fileName;
                            FileDetails.push(element);
                            element = {};
                        })
                        self.FileDetails = FileDetails;
                    }*/

            });

        }
    }

    self.showMessage = function (MessageText, MessageType) {

        self.UploadStatusClass = "alert alert-" + MessageType;
        self.UploadStatusText = MessageText;

    }

    GetFolders();

    function GetFolders() {

        var folderList = [];

        //Call SharedAPI to get All and get Root Folder GUI and pass that guid to get all subfolders

        var folderGUIDS = ['5365360E-1AAD-42F6-926C-768431FFBC67', 'D85ADCEE-77CB-4A5C-B555-82C4DCC6A0D3', '3AF93081-BB9D-4A93-83DC-863B5F04BD78'];

        var promise = FileServiceAPI.getfolderdetails(folderGUIDS);
        promise.then(function (FolderResponse) {
            for (var index = 0; index < FolderResponse.folders.length; index++) {
                var element = {};
                element.folderGUID = $filter('lowercase')(FolderResponse.folders[index].folderGUID);
                console.log(element.folderGUID);
                element.folderName = FolderResponse.folders[index].folderName;
                folderList.push(element);
                element = {};
            }
            if (folderList.length >= 1) {
                self.folderList = folderList;

                var FileList = [];
                for (var index = 0; index < folderList.length; index++) {
                    FileList.push(getFiles(folderList[index].folderGUID));
                    console.log(FileList);
                    self.FileList = FileList;
                }

            }
        })


    }

    function getFiles(folderGUID) {

        var FileListTemp = [];

        var promise = FileServiceAPI.getfilesByFolder(folderGUID);
        promise.then(function (FileResponse) {
            for (var index = 0; index < FileResponse.files.length; index++) {
                var element = {};
                element.fileName = FileResponse.files[index].fileName;
                element.currentVersionURL = FileResponse.files[index].currentVersionURL;
                element.fileGUID = FileResponse.files[index].fileGUID;
                element.folderGUID = $filter('lowercase')(FileResponse.files[index].folders.folderGUID);
                console.log(element.folderGUID);
                FileListTemp.push(element);
                element = {};
            }
        })
        return FileListTemp;


    }


}]);;
angular.module('FilingCabinet').service('FileServiceAPI', ['APIFactory', 'FilingCabinetAPIUrlCollection', 'Upload', 'BASEURL', function (APIFactory, UrlColl, Upload, BASEURL) {


    var self = this;



    this.uploadFile = function (fileObject, FolderName) {
        var urlUpload = BASEURL.FILLINGCABINET_POC + UrlColl.UPLOADAPIPOC_FILE;

        /* var urlUpload = "http://PARReDataPOC2:8080/corefile/files/{fileguid}?fileRequestJson={fileRequestJson}";   "EDR_UPLOAD_DIR" */

        var method = 'POST';
        var fileguid = '';

        var file = {

            "file": {
                "fileName": fileObject.name,
                "fileDescription": fileObject.name + ' size:' + fileObject.size,
                "clientFileID": "123ABC",
                "retentionInDays": 365,
                "deletionType": "DISABLE",
                "currentVersionURL": "",
                "currentVersionUNC": "EDR_UPLOAD_DIR",
                "displayIndex": 1,
                "folderID": 1,
                "folderGUID": "",
                "organizationalBasePath": "EDR_UPLOAD_DIR//Filing_Cabinet",
                "organizationalParentFolderName": FolderName,
                "organizationalDatePath": true,
                "serverType": "AmazonWebServer",
                "metadata": {
                    "category": "AppendixFile"
                }
            }

        }
        var request = {
            "fileRequestJson": file
        }
        var queryParams = {
            fileguid: fileguid,
            fileRequestJson: JSON.stringify(file)
        }

        var url = self.formatUrl(urlUpload, queryParams);
        return Upload.upload({
            url: url,
            file: fileObject,
            method: method,
            data: request,
            header: {
                'Content-Type': 'multipart/formdata',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': 0
            }
        }).progress(function (evt) {
            var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
            console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);
        }).success(function (data, status, headers, config) {

        }).error(function (data, status, headers, config) {

        })
    }

    this.getfiledetails = function (fileGUID) {

        var url = BASEURL.FILLINGCABINET_POC + UrlColl.GETAPIPOC_FILE;
        var params = {
            fileguid: fileGUID
        };

        return APIFactory.get(url, params).then(function (response) {

            return response;
        });

    }

    this.getfilesByFolder = function (folderGUID) {

        var url = BASEURL.FILLINGCABINET_POC + UrlColl.GETAPIPOC_FILESBYFOLDER;
        var params = {
            folderGUID: folderGUID
        };

        return APIFactory.get(url, params).then(function (response) {

            return response;
        });

    }

    this.getfolderdetails = function (folderGUID) {

        var url = UrlColl.GETAPIJSON_FOLDER;
        var params = {
            folderguidsorids: folderGUID
        };

        return APIFactory.get(url, params).then(function (response) {

            return response;
        });
    }

    this.deleteFile = function (fileGUID) {

        var url = BASEURL.FILLINGCABINET_POC + UrlColl.UPLOADAPIPOC_FILE;

        var params = {
            fileguid: fileGUID
        };
        return APIFactory.delete(url, null, params);
    }

    this.formatUrl = function (url, queryParams) {
        if (!queryParams) return url;

        for (var param in queryParams) {
            url = url.replace("{" + param + "}", queryParams[param]);
        }
        return url;
    }

    this.getLinks = function () {

        var url = BASEURL.FILLINGCABINET_POC + UrlColl.GETAPIPOC_FILE;

        return APIFactory.get(url, null).then(function (response) {

            return response;
        });
    }

    this.UpdateLink = function (id, data) {
        var url = BASEURL.FILLINGCABINET_POC + UrlColl.GETAPIPOC_FILE;
        var queryParams = {
            linkID: id
        }
        var putData = {
            data: data
        }
        return APIFactory.put(url, putData, queryParams).then(function (response) {
            return response;
        });
    }

    this.CreateLink = function (data) {
        var url = BASEURL.FILLINGCABINET_POC + UrlColl.GETAPIPOC_FILE;
        var putData = {
            data: data
        }
        return APIFactory.post(url, putData).then(function (response) {
            return response;
        });
    }
}]);
angular.module('FilingCabinet').constant('FilingCabinetAPIUrlCollection', {

    //GETAPIMOCK_FOLDER : 'http://private-569d7-edrcorefilemanagementapi.apiary-mock.com/folders/folderguidorid?folders={folderguidsorids}',
    GETAPIJSON_FOLDER: 'app/modules/FilingCabinet/sampleJSON/Folders.js',

    GETAPIPOC_FILE: '{fileguid}?limit=10&offset=0',

    //GETAPIJSON_FILESBYFOLDER : 'app/modules/FilingCabinet/sampleJSON/Files.js',
    GETAPIPOC_FILESBYFOLDER: '?folder={folderGUID}',

    UPLOADAPIPOC_FILE: '{fileguid}?fileRequestJson={fileRequestJson}',

    DELETEAPI_FILE: ''

});;
angular.module('ParcelUI').constant('errorCodes', {

    GET: [404, 405, 406, 408, 410, 412, 416, 500, 502, 505, 400],
    POST: [404, 405, 408, 409, 411, 413, 414, 415, 500, 501, 502, 400],
    PUT: [404, 405, 409, 410, 411, 413, 414, 415, 500, 501, 502, 400],
    DELETE: [404, 405, 409, 501],
    ACCESS: [401, 403, 419, 440]
});

;
angular.module('ProjectDashboard').factory('ajaxRequestInterceptor', ['$q', 'BASEURL', function ($q, BASEURL) {
    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1);
            if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
        }
        return "";
    }
    return {
        // On request success
        request: function (config) {
            //console.log("first " + config.status); // Contains the data about the request before it is sent.

            var noHeadersUrlArray = [BASEURL.POSTAPI_GETAUTHTOKEN, BASEURL.ACCOUNT_MGMT_API, BASEURL.GET_SESSIONTOKEN]
            var isAddHeader = true

            if (noHeadersUrlArray.indexOf(config.url) > -1) {
                isAddHeader = false;
            }
            var fileExtension = config.url.replace(/^.*\./, '');

            if (fileExtension == 'html' || fileExtension == 'htm') {
                isAddHeader = false;
            }

            if (isAddHeader) {
                config.headers['AccessToken'] = getCookie('oAuthToken');
                config.headers['SessionTokenGuid'] = getCookie('sessionToken');
                config.headers['UserGuid'] = getCookie('userGuid');
            }
            // Return the config or wrap it in a promise if blank.
            return config || $q.when(config);
        },

        // On request failure
        requestError: function (rejection) {
            // console.log("second " + rejection.status); // Contains the data about the error on the request.

            // Return the promise rejection.
            return $q.reject(rejection);
        },

        // On response success
        response: function (response) {
            // console.log("third " + response.status); // Contains the data from the response.

            // Return the response or promise.
            return response || $q.when(response);
        },

        // On response failture
        responseError: function (rejection) {
            //  console.log("fourth " + rejection.status); // Contains the data about the error.
            //console.log("fourth " + JSON.stringify(rejection));



            // Return the promise rejection.
            return $q.reject(rejection);
        }
    };
            }]);;
angular.module('ParcelUI').factory('checkStatus', ['errorCodes', function (errorCodes) {
    var factory = {};
    factory.checkCodeInStatusArray = function (statusCode, operation) {
        var statusArray = errorCodes[operation];
        var isInStatusArray = false;
        var isInStatusArray = include(statusArray, statusCode);
        return isInStatusArray;

    }

    function include(arr, code) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] == code) return true;
        }
    }
    return factory;
}]);;
angular.module('ProjectDashboard').factory('timestampMarker', [function () {
    var timestampMarker = {
        request: function (config) {
            config.requestTimestamp = new Date().getTime();
            return config;
        },
        response: function (response) {
            response.config.responseTimestamp = new Date().getTime();
            return response;
        }
    };
    return timestampMarker;
}]);;
angular.module('ParcelUI').filter('nfcurrency', ['$filter', '$locale', function ($filter, $locale) {
    var currency = $filter('currency'),
        formats = $locale.NUMBER_FORMATS;
    return function (amount, symbol) {
        var value = currency(amount, symbol);
        return value.replace(new RegExp('\\' + formats.DECIMAL_SEP + '\\d{2}'), '')
    }
 }]);;
angular.module('ProjectDashboard').directive('rtSelect2', ['$resource', '$compile', '$state', function ($resource, $compile, $state) {
    return {
        template: "<div ui-select2='select2Options' ng-model='selected'></div>",
        scope: {
            provider: '=',
            template: '&',
            afterevent: '&',
            setvalue: '&',
            minimuminput: "@",
            data: '='


        },
        compile: function compile(tElement, tAttrs, transclude) {
            return {

                pre: function preLink(scope, iElement, iAttrs) {



                    var PAGE_SIZE = 10;



                    var queryHandler = function (query) {

                        scope.provider.readData(query.term, query.page, PAGE_SIZE)
                            .then(function (results) {



                                    if (results != undefined) {



                                        var more = false;

                                        if (results.length > 0 && results.length == PAGE_SIZE) {
                                            more = true;
                                        } else {
                                            more = false;
                                        }

                                        query.callback({
                                            results: results,
                                            more: more
                                        });

                                    }


                                },

                                function () {
                                    query.callback({
                                        results: [],
                                        more: false
                                    });
                                });
                    };

                    var formatResult = function (result, element, search) {
                        var markup = scope.template()(result, element, search);
                        return markup;
                    }

                    var formatSelection = function (result) {
                        scope.afterevent()(result);
                    }

                    var initialValue = function () {
                        if (typeof scope.setvalue() == "function")
                            scope.setvalue()();
                    }

                    scope.selected = {};



                    scope.select2Options = {
                        data: [],
                        placeholder: 'Quick select a project',
                        allowClear: true,
                        formatResult: formatResult,
                        formatSelection: formatSelection,
                        multiple: false,
                        query: queryHandler,
                        selectable: true,
                        allowClear: true,
                        initSelection: initialValue,
                        minimumInputLength: scope.minimuminput,



                        //minimumResultsForSearch: scope.enablesearch,
                        formatNoMatches: function (term) {
                            console.log("state " + $state.current.name);
                            if ($state.current.name === 'ReportAuthoring.Write')
                                return "No Results Found ... Note: This search only finds reports found in the same project as the report you are currently viewing.";
                            return "No results for : " + term;
                        }
                    };
                }
            }
        }
    }
}]);





angular.module('ProjectDashboard').directive('countryState', ['$compile', '$http', 'projectDashboardOperations', function ($compile, $http, projectDashboardOperations) {


    var getTemplateUrl = function () {
        var templateUrl = '';
        templateUrl = 'app/modules/SharedModules/countriesState.html';
        return templateUrl;
    }
    return {
        restrict: 'E',
        require: ['^form', 'ngModel'],


        replace: true,
        scope: {
            countrylabelcss: '@',
            countrydivcss: '@',
            statelabelcss: '@',
            statedivcss: '@',
            ngModel: '=',
            controllerobject: '='

        },

        link: function (scope, elem, attr, controllersArray) {
            var templateUrl = getTemplateUrl();
            if (templateUrl != undefined) {
                $http.get(templateUrl).success(function (data) {
                    elem.html(data);
                    $compile(elem.contents())(scope);
                });
            }

            scope.addCountryLabelClass = function () {

                return scope.countrylabelcss;
            }
            scope.addCountryDivClass = function () {
                return scope.countrydivcss;
            }

            scope.addStateLabelClass = function () {

                return scope.statelabelcss;
            }
            scope.addStateDivClass = function () {
                return scope.statedivcss;
            }
            scope.setDisabled = function () {
                if (scope.country == undefined) {
                    return true;
                } else {
                    return false;
                }
            }

            scope.getCountryStates = function () {
                scope.countryHasState = false;
                scope.stateInput = "";
                scope.controllerobject.selectedCountry = scope.country;
                scope.states = [];
                if (scope.country === undefined) {
                    elem.find('#stateDropDown').parent().addClass('has-error');
                    scope.controllerobject.selectedState = undefined;
                    scope.states = undefined;
                } else {
                    var countryObject = scope.country;
                    projectDashboardOperations.getStatesData(countryObject).
                    then(function (response) {
                        scope.states = response;
                    })
                }


            }

            scope.getStateCities = function () {
                scope.controllerobject.selectedState = scope.state;
            }



        },




        controller: function ($scope, $element) {

            $scope.$on('clear-country-state', function (event, args) {
                $scope.country = undefined;
                $scope.state = undefined;

            })

        }




    }

}]);


/*angular.module('ProjectDashboard').directive('stateTextChange', ['$timeout', function ($timeout) {
    return {
        restrict: 'A',
        require: 'ngModel',
        priority: 1000,
        link: function (scope, elem, attr, ngModelController) {
            if (ngModelController.$modelValue == "" ||
                ngModelController.$modelValue == undefined || isNaN(ngModelController.$modelValue)) {
                $timeout(function () {
                    elem.parents('.form-group').addClass('has-error');
                }, 1000);

            }
            elem.on('input', function () {
                var obj = {};
                obj.code = "";
                obj.name = ngModelController.$modelValue;
                scope.$emit('Update-State-Model', {
                    stateObject: obj
                });
                if (ngModelController.$modelValue == "" ||
                    ngModelController.$modelValue == undefined) {
                    elem.parents('.form-group').addClass('has-error');
                } else {
                    elem.parents('.form-group').removeClass('has-error');
                }
            })
        },
        controller: function ($scope, $element) {
            $scope.$on('Add-Error-Class', function (event, args) {

                $element.parents('.form-group').addClass('has-error');

            })

        }
    }
}])*/
;
angular.module('ProjectDashboard').factory('getLatitudeLongitude', function () {
    var factory = {};
    factory.getLatitudeLongitude = function (address, callback) {

        geocoder = new google.maps.Geocoder();

        var coordinates;


        geocoder.geocode({
            address: address
        }, function (results, status) {


            console.log("API stats " + status)

            if (status == "OK") {
                coords_obj = results[0].geometry.location;

                coordinates = [coords_obj.k, coords_obj.B]
            }

            callback(coordinates, status);



        })
    }

    return factory;
})






;
var countrySelectModule = angular.module('countrySelect', []);

countrySelectModule.constant("CountryStateUrlColl", {
    GETAPI_COUNTRIES: "countries",
    GETAPI_STATES: "countries/{countryCode}/states"
});

countrySelectModule.factory('getCountriesAPI', ["APIFactory", "CountryStateUrlColl", "$q", "BASEURL", function (APIFactory, CountryStateUrlColl, $q, BASEURL) {

    var replacePropertyFn = function (arrayObj, propertyKeyValPair) {
        for (var i = 0; i < arrayObj.length; i++) {
            var item = arrayObj[i];

            for (var property in propertyKeyValPair) {
                var renamed = propertyKeyValPair[property];

                if (!item.hasOwnProperty(property)) return;

                item[renamed] = item[property];
                delete item[property];
            }
        }
    };

    // private member to retain value to duplicate calls
    // e.g. case where there are multiple controls in same page/form
    var localCountryArr = null;
    var promise = null;

    return {
        get: function () {
            if (localCountryArr && localCountryArr.length) {
                var deferred = $q.defer();
                deferred.resolve(localCountryArr);
                return deferred.promise;
            }
            // corner case where call to get countries is made before first response is returned
            if (promise) {
                return promise;
            }

            var url = BASEURL.SHARED_GEOCODE + CountryStateUrlColl.GETAPI_COUNTRIES;
            promise = APIFactory.get(url).then(function (data) {

                if (data && data.countries) {


                    var USCountryObject = _.find(data.countries, function (item, index) {
                        if (item.countryCode === 'US') {
                            data.countries.splice(index, 1);
                            return item;
                        }

                    })
                    var mexicoCountryObject = _.find(data.countries, function (item, index) {
                        if (item.countryCode === 'MX') {
                            data.countries.splice(index, 1);
                            return item;
                        }

                    })

                    var canadaCountryObject = _.find(data.countries, function (item, index) {
                        if (item.countryCode === 'CA') {
                            data.countries.splice(index, 1);
                            return item;
                        }

                    })

                    var unitedKingdomCountryObject = _.find(data.countries, function (item, index) {
                        if (item.countryCode === 'GB') {
                            data.countries.splice(index, 1);
                            return item;
                        }

                    })

                    var countryArr = _.sortBy(data.countries, function (o) {
                        return o.countryName;
                    });



                    countryArr.unshift(unitedKingdomCountryObject);
                    countryArr.unshift(mexicoCountryObject);
                    countryArr.unshift(canadaCountryObject);
                    countryArr.unshift(USCountryObject);

                    var propertyKeyValPair = {
                        countryName: "name",
                        countryCode: "code"
                    };
                    replacePropertyFn(countryArr, propertyKeyValPair);
                    localCountryArr = countryArr;
                    return countryArr;
                }
            });
            return promise;
        }
    }
}]);

countrySelectModule.factory('getStatesAPI', ["APIFactory", "CountryStateUrlColl", "BASEURL", function (APIFactory, CountryStateUrlColl, BASEURL) {

    var replacePropertyFn = function (arrayObj, propertyKeyValPair) {
        for (var i = 0; i < arrayObj.length; i++) {
            var item = arrayObj[i];

            for (var property in propertyKeyValPair) {
                var renamed = propertyKeyValPair[property];

                if (!item.hasOwnProperty(property)) return;

                item[renamed] = item[property];
                delete item[property];
            }
        }
    };

    return {
        get: function (countryCode) {
            var url = BASEURL.SHARED_GEOCODE + CountryStateUrlColl.GETAPI_STATES;
            var params = {
                countryCode: countryCode
            };
            return APIFactory.get(url, params).then(function (data) {
                if (data && data.states) {
                    var stateArr = _.sortBy(data.states, function (o) {
                        return o.stateName
                    });

                    var propertyKeyValPair = {
                        stateName: "name",
                        stateCode: "code"
                    };
                    replacePropertyFn(stateArr, propertyKeyValPair);
                    return stateArr;
                }
            });
        }
    }
}]);


countrySelectModule.directive('countrySelect', ['$parse', '$compile', 'getCountriesAPI', '$filter', '$timeout', function ($parse, $compile, getCountriesAPI, $filter, $timeout) {
    return {
        restrict: 'A',
        priority: 1000,
        require: "^form",
        scope: {},
        terminal: true,
        compile: function (tElem, tAttrs) {
            tElem.removeAttr('country-select');
            return {
                pre: function (scope, iElem, iAttrs, formCtrl) {
                    // to break recursive compile loop
                    // need to compile element for below model binding to work
                    if (scope.countrySelectCompiled) return;

                    scope.countryNgModel = "";
                    iElem.attr('ng-model', 'countryNgModel');

                    // default model usage provided with directive usage
                    if (!iAttrs.overrideModelUse) {
                        //scope.countryOptions = [];
                        iElem.attr('data-ng-options', 'country.name for country in countryOptions');
                    }

                    scope.countrySelectCompiled = true;

                    var servicePromise = getCountriesAPI.get();
                    servicePromise.then(function (countries) {
                        scope.countryOptions = countries;

                        $timeout(function () {
                            var countryModel = iAttrs.countryModel;
                            var modeltemplatefn = $parse(countryModel);
                            var assignCountry = modeltemplatefn.assign;
                            var filtered = $filter("filter")(scope.countryOptions, {
                                name: "United States"
                            });
                            if (filtered && filtered.length) {
                                var defaultSelectedCountry = filtered[0];
                                var index = scope.countryOptions.indexOf(defaultSelectedCountry);
                                if (index >= 0) {
                                    assignCountry(scope.$parent, defaultSelectedCountry);
                                    formCtrl[iAttrs.name].$setViewValue(defaultSelectedCountry);
                                }
                            }
                        });
                    });

                },
                post: function (scope, iElem, iAttrs) {
                    var countryModel = iAttrs.countryModel;
                    //var ngmodel = iAttrs.ngModel;

                    if (!!countryModel) {
                        var modeltemplatefn = $parse(countryModel);
                        var assignCountry = modeltemplatefn.assign;

                        iElem.bind('change', function (e) {
                            var val = iElem.val();
                            if (!val) return;

                            var countryVal = val;
                            if (isNumber(val)) {
                                countryVal = scope.countryOptions[val];
                            }
                            assignCountry(scope.$parent, countryVal);
                        });
                        scope.$parent.$watch(countryModel, function (country) {
                            if (!country) return;

                            if (isNumber(country)) {
                                iElem.val(country);
                            } else if (country instanceof Object) {
                                var index = scope.countryOptions.indexOf(country);
                                if (index >= 0) {
                                    iElem.val(index);
                                }
                            }
                        });

                        function isNumber(n) {
                            return !isNaN(parseFloat(n)) && isFinite(n);
                        }
                    }

                    $compile(iElem)(scope);
                }
            }
        }
    }
}]);

function StateSharedService(name) {
    var self = this;
    self.name = name;
    self.statesAvailableForCountry = false;
}
countrySelectModule.service('stateSharedService', ['$rootScope', function ($rootScope) {
    // multiple controls differentiated by state model
    // state-model for stateSelect, and ng-model for stateInput
    // StateSharedService for every state-model
    // and added as property of shareObj
    this.shareObj = {};
    this.getNewInstance = function (name) {
        return new StateSharedService(name);
    }
}]);


countrySelectModule.directive('stateSelect', ['$parse', '$compile', 'getStatesAPI', 'stateSharedService', function ($parse, $compile, getStatesAPI, stateSharedService) {
    return {
        restrict: 'A',
        priority: 1000,
        scope: {},
        terminal: true,
        compile: function (tElem, tAttrs) {
            tElem.removeAttr('state-select');
            return {
                pre: function (scope, iElem, iAttrs) {
                    // to break recursive compile loop
                    // need to compile element for below model binding to work
                    if (scope.stateSelectDirectiveCompiled) return;

                    scope.selectedStateNgModel = "";
                    iElem.attr('ng-model', 'selectedStateNgModel');

                    // default model usage provided with directive usage
                    if (!iAttrs.overrideModelUse) {
                        scope.stateOptions = [];

                        iElem.attr('data-ng-options', 'state.name for state in stateOptions track by state.code');
                        // iElem.attr('data-ng-options', 'state.name for state in stateOptions');
                    }

                    //stateSharedService.createInstance();
                    //scope.sharedService = stateSharedService.instance;
                    var model_state = iAttrs.stateModel
                    scope.sharedService = stateSharedService.shareObj[model_state] || (stateSharedService.shareObj[model_state] = stateSharedService.getNewInstance(model_state));
                    iElem.attr('ng-show', ' sharedService.statesAvailableForCountry');
                    if (iAttrs.hasOwnProperty('required')) {
                        iElem.removeAttr('required');
                        iElem.attr('ng-required', 'sharedService.statesAvailableForCountry');
                    }

                    scope.stateSelectDirectiveCompiled = true;
                },
                post: function (scope, iElem, iAttrs) {


                    //var ngmodel_state = iAttrs.ngModel;
                    var model_state = iAttrs.stateModel;
                    var model_country = iAttrs.countryModel;

                    if (!!model_state && !!model_country) {

                        var templatefn_state = $parse(model_state);
                        var assignStateValue = templatefn_state.assign;

                        /*var templatefn_state_ngmodel = $parse(ngmodelstate);
                        var assignModel_state_ng = templatefn_state_ngmodel.assign;*/

                        iElem.bind('change', function (e) {
                            var val = iElem.val();
                            if (!val) return;

                            var stateVal = val;
                            if (isNumber(val)) {
                                scope.selectedStateNgModel = val;
                                stateVal = scope.stateOptions[val];
                            }
                            assignStateValue(scope.$parent, stateVal);
                        });
                        scope.$parent.$watch(model_state, function (state) {
                            if (state instanceof Object) {
                                var index = scope.stateOptions.indexOf(state);
                                if (index >= 0) {
                                    iElem.val(index);
                                }
                            } else {
                                iElem.val(state);
                            }
                            /*if (!state) return;

                            if (isNumber(state)) {
                                iElem.val(state);
                            } else if (state instanceof Object) {
                                var index = scope.stateOptions.indexOf(state);
                                if (index >= 0) {
                                    iElem.val(index);
                                }
                            }*/
                        });


                        scope.$parent.$watch(model_country, function (country) {
                            getstatesforcountry(country);
                        });

                        function getstatesforcountry(country) {
                            if (!country) return;
                            if (country && country.hasOwnProperty("isStateProvDataAvailable") && country["isStateProvDataAvailable"] === false) {
                                scope.sharedService.statesAvailableForCountry = false;
                                assignStateValue(scope.$parent, "");
                                iElem.val("");
                                return;
                            }

                            // clear values
                            scope.stateOptions = [];

                            var countryObj = isNumber(country) ? scope.countryOptions[country] : country;
                            var code = countryObj.code;
                            var servicePromise = getStatesAPI.get(code);
                            servicePromise.then(function (states) {
                                scope.stateOptions = states;
                                //scope.selectedCountryHasStates = true;
                                scope.sharedService.statesAvailableForCountry = true;
                            }, function (error) {
                                console.log("error in getting states");
                                console.log(error);
                                scope.sharedService.statesAvailableForCountry = false;
                            }).finally(function () {
                                // clear both ng-model and state-model values
                                assignStateValue(scope.$parent, "");
                                iElem.val("");
                            });
                        }

                        function isNumber(n) {
                            return !isNaN(parseFloat(n)) && isFinite(n);
                        }

                        $compile(iElem)(scope);
                    }
                }
            }
        }
    }
}]);





countrySelectModule.directive('stateInput', ['$parse', '$compile', 'stateSharedService', function ($parse, $compile, stateSharedService) {
    return {
        restrict: 'A',
        /*terminal: true,
        priority: 1000,*/
        scope: {},
        compile: function (tElem, tAttrs) {
            tElem.removeAttr('state-input');
            return {
                pre: function (scope, iElem, iAttrs) {
                    iElem.removeAttr('state-input');
                    //scope.sharedService = stateSharedService.instance;
                    var stateNgModel = iAttrs.ngModel;
                    scope.sharedService = stateSharedService.shareObj[stateNgModel] || (stateSharedService.shareObj[stateNgModel] = stateSharedService.getNewInstance(stateNgModel));
                    iElem.attr('ng-show', '!sharedService.statesAvailableForCountry');
                    if (iAttrs.hasOwnProperty('required')) {
                        iElem.removeAttr('required');
                        iElem.attr('ng-required', '!sharedService.statesAvailableForCountry');
                    }
                },
                post: function (scope, iElem, iAttrs, controller) {
                    $compile(iElem)(scope);
                }
            }
        }
    }
}]);;
angular.module('ui.multiselect', [])

//from bootstrap-ui typeahead parser
.factory('optionParser', ['$parse', function ($parse) {

    //                      00000111000000000000022200000000000000003333333333333330000000000044000
    var TYPEAHEAD_REGEXP = /^\s*(.*?)(?:\s+as\s+(.*?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+(.*)$/;

    return {
        parse: function (input) {

            var match = input.match(TYPEAHEAD_REGEXP),
                modelMapper, viewMapper, source;
            if (!match) {
                throw new Error(
                    "Expected typeahead specification in form of '_modelValue_ (as _label_)? for _item_ in _collection_'" +
                    " but got '" + input + "'.");
            }

            return {
                itemName: match[3],
                source: $parse(match[4]),
                viewMapper: $parse(match[2] || match[1]),
                modelMapper: $parse(match[1])
            };
        }
    };
  }])

.directive('multiselect', ['$parse', '$document', '$compile', 'optionParser', '$state',

    function ($parse, $document, $compile, optionParser, $state) {
        return {
            restrict: 'E',
            require: 'ngModel',
            link: function (originalScope, element, attrs, modelCtrl) {

                var exp = attrs.options,
                    parsedResult = optionParser.parse(exp),
                    isMultiple = attrs.multiple ? true : false,
                    required = false,
                    scope = originalScope.$new(),
                    changeHandler = attrs.change || angular.noop;

                scope.items = [];

                var header = attrs.header;


                scope.header = 'Select one or more';
                if (attrs.header) {
                    scope.header = attrs.header;
                }
                scope.placeHolder = 'Search';
                if (attrs.placeholder) {
                    scope.placeHolder = attrs.placeholder;
                }

                scope.multiple = isMultiple;
                scope.disabled = false;

                originalScope.$on('$destroy', function () {
                    scope.$destroy();
                });

                var popUpEl = angular.element('<multiselect-popup></multiselect-popup>');

                //required validator
                if (attrs.required || attrs.ngRequired) {
                    required = true;
                }
                attrs.$observe('required', function (newVal) {
                    required = newVal;
                });

                //watch disabled state
                scope.$watch(function () {
                    return $parse(attrs.disabled)(originalScope);
                }, function (newVal) {
                    scope.disabled = newVal;
                });

                //watch single/multiple state for dynamically change single to multiple
                scope.$watch(function () {
                    return $parse(attrs.multiple)(originalScope);
                }, function (newVal) {
                    isMultiple = newVal || false;
                });

                //watch option changes for options that are populated dynamically
                scope.$watch(function () {
                    return parsedResult.source(originalScope);
                }, function (newVal) {
                    if (angular.isDefined(newVal))
                        parseModel();
                }, true);

                //watch model change
                scope.$watch(function () {
                    return modelCtrl.$modelValue;
                }, function (newVal, oldVal) {

                    if (!modelCtrl.$modelValue) {
                        scope.uncheckAll();
                    }
                    //when directive initialize, newVal usually undefined. Also, if model value already set in the controller
                    //for preselected list then we need to mark checked in our scope item. But we don't want to do this every time
                    //model changes. We need to do this only if it is done outside directive scope, from controller, for example.
                    if (angular.isDefined(newVal)) {
                        markChecked(newVal);
                        scope.$eval(changeHandler);
                    }
                    getHeaderText();
                    modelCtrl.$setValidity('required', scope.valid());
                }, true);

                function parseModel() {
                    scope.items.length = 0;
                    var model = parsedResult.source(originalScope);
                    if (!angular.isDefined(model)) return;
                    for (var i = 0; i < model.length; i++) {
                        var local = {};
                        local[parsedResult.itemName] = model[i];
                        scope.items.push({
                            label: parsedResult.viewMapper(local),
                            model: model[i],
                            checked: false
                        });
                    }
                }

                parseModel();




                element.append($compile(popUpEl)(scope));





                function getHeaderText() {
                    if (is_empty(modelCtrl.$modelValue)) {
                        if (attrs.header != undefined) return scope.header = attrs.header;
                        return scope.header = 'Select Report Requested';
                    }
                    if (isMultiple) {

                        scope.header = modelCtrl.$modelValue.length + ' ' + 'selected';
                        if (modelCtrl.$modelValue.length > 0) {
                            if ($(attrs.$$element).parent().find('#fieldValidationMsg')) {
                                $(attrs.$$element).parent().find('#fieldValidationMsg').hide();
                                $(attrs.$$element).find('button').first().css('border-color', '');
                            }
                        }
                        if (modelCtrl.$modelValue) {
                            angular.forEach(scope.items, function (item) {
                                angular.forEach(modelCtrl.$modelValue, function (modelItem) {

                                    if (item.model.templateGUID == modelItem.templateGUID) {
                                        item.checked = true
                                    }
                                });
                            })
                        }
                    } else {
                        var local = {};
                        local[parsedResult.itemName] = modelCtrl.$modelValue;

                        scope.header = parsedResult.viewMapper(local);
                    }
                }

                function is_empty(obj) {
                    if (!obj) return true;
                    if (obj.length && obj.length > 0) return false;
                    for (var prop in obj)
                        if (obj[prop]) return false;
                    return true;
                };

                scope.valid = function validModel() {
                    if (!required) return true;
                    var value = modelCtrl.$modelValue;
                    return (angular.isArray(value) && value.length > 0) || (!angular.isArray(value) && value != null);
                };




                function selectSingle(item) {
                    if (item.checked) {
                        scope.uncheckAll();
                    } else {
                        scope.uncheckAll();
                        item.checked = !item.checked;
                    }
                    setModelValue(false);
                }

                function selectMultiple(item) {
                    item.checked = !item.checked;
                    setModelValue(true);
                }

                function setModelValue(isMultiple) {
                    var value;

                    if (isMultiple) {
                        value = [];
                        angular.forEach(scope.items, function (item) {
                            if (item.checked) value.push(item.model);
                        })
                    } else {
                        angular.forEach(scope.items, function (item) {
                            if (item.checked) {
                                value = item.model;
                                return false;
                            }
                        })
                    }
                    modelCtrl.$setViewValue(value);
                }

                function markChecked(newVal) {
                    var EditVal = localStorage.getItem("Edit");
                    console.log();
                    if (!angular.isArray(newVal)) {
                        angular.forEach(scope.items, function (item) {
                            if (angular.equals(item.model, newVal)) {
                                item.checked = true;
                                return false;
                            }
                        });
                    } else {
                        angular.forEach(newVal, function (i) {
                            angular.forEach(scope.items, function (item) {
                                if (EditVal == "true") {
                                    if (angular.equals(item.model.formID, i.form_id)) {
                                        item.checked = true;
                                    }
                                } else {
                                    if (angular.equals(item.model, i)) {
                                        item.checked = true;
                                    }
                                }


                            });
                        });
                    }

                }

                scope.checkAll = function () {
                    if (!isMultiple) return;
                    angular.forEach(scope.items, function (item) {
                        item.checked = true;
                    });
                    setModelValue(true);
                };

                scope.uncheckAll = function () {
                    angular.forEach(scope.items, function (item) {
                        item.checked = false;
                    });
                    setModelValue(true);
                };

                scope.select = function (item) {
                    if (isMultiple === false) {
                        selectSingle(item);
                        scope.toggleSelect();
                    } else {
                        selectMultiple(item);
                    }
                }
            }
        };
    }])

.directive('multiselectPopup', ['$document', function ($document) {
    return {
        restrict: 'E',
        scope: false,
        replace: true,
        templateUrl: 'app/modules/SharedModules/multiselect/multiselect.html',
        link: function (scope, element, attrs) {

            scope.isVisible = false;

            scope.toggleSelect = function () {
                if (element.hasClass('open')) {
                    element.removeClass('open');
                    $document.unbind('click', clickHandler);
                } else {
                    element.addClass('open');
                    $document.bind('click', clickHandler);
                    $("html, body").animate({
                        scrollTop: $(document).height()
                    }, "slow");
                    scope.focus();
                }
            };

            function clickHandler(event) {
                if (elementMatchesAnyInArray(event.target, element.find(event.target.tagName)))
                    return;
                element.removeClass('open');
                $document.unbind('click', clickHandler);
                scope.$apply();
            }

            scope.focus = function focus() {
                var searchBox = element.find('input')[0];
                searchBox.focus();
            }

            var elementMatchesAnyInArray = function (element, elementArray) {
                for (var i = 0; i < elementArray.length; i++)
                    if (element == elementArray[i])
                        return true;
                return false;
            }
        }
    }

  }]);;
angular.module('PortfolioCreation').factory('APIFactory', ['$http', 'Upload', function ($http, Upload) {

    function formatUrl(url, queryParams) {
        if (!queryParams) return url;

        for (var param in queryParams) {
            url = url.replace("{" + param + "}", queryParams[param]);
        }
        return url;
    };

    function parseUserErrorMessage(error) {
        return error.data.message ? error.data.message.userMessage : error.data;
    }




    function getAPICall(url, queryParams) {



        var uri = formatUrl(url, queryParams);
        return $http({
            method: 'GET',
            url: uri,
            header: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': 0
            }
        }).then(function (results) {

            return results.data;

        }, function (error) {
         
            //return error;
            throw parseUserErrorMessage(error);
        });
    };

    function postAPICall(url, data, queryParams, headers) {
        var uri = formatUrl(url, queryParams);
        if (headers) {
            for (var headerKey in headers) {
                var headerVal = headers[headerKey];
                if (!$http.defaults.headers.common[headerKey]) {
                    $http.defaults.headers.common[headerKey] = headerVal;
                }
            }
            //$http.defaults.headers.common['LoggingSessionGUID'] = 'A0F5E294-B497-4C16-8FA4-526C9413530F';
        }

        return $http({
            method: 'POST',
            url: uri,
            data: data,
            header: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': 0
            }
        }).then(function (results) {
            return results.data;
        }, function (error) {
            console.log('Error in POST (' + url + '): ' + JSON.stringify(error));
            throw parseUserErrorMessage(error);
        });

    };

    function putAPICall(url, data, queryParams) {
        var uri = formatUrl(url, queryParams);
        return $http({
            method: 'PUT',
            url: uri,
            data: data,
            header: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': 0
            }
        }).then(function (results) {
            return results.data;
        }, function (error) {
            console.log('Error in PUT (' + url + '): ' + JSON.stringify(error));
            throw parseUserErrorMessage(error);
        });
    };

    function deteleAPICall(url, data, queryParams) {
        var uri = formatUrl(url, queryParams);
        return $http({
            method: 'DELETE',
            url: uri,
            data: data,
            header: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': 0
            }
        }).then(function (results) {
            return results.data;
        }, function (error) {
            console.log('Error in DELETE (' + url + '): ' + JSON.stringify(error));
            throw parseUserErrorMessage(error);
        });
    }

    function uploadFilesCall(url, request, queryParams, file) {

        var url = formatUrl(url, queryParams);

        return Upload.upload({
            url: url,
            file: file,
            method: 'POST',
            data: request,
            header: {
                'Content-Type': 'multipart/formdata',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': 0
            }
        })

    }

    return {
        get: getAPICall,
        post: postAPICall,
        put: putAPICall,
        delete: deteleAPICall,
        uploadFile: uploadFilesCall
    };
}]);;
angular.module("ParcelUI").factory("accessMgmtAPI", ["APIFactory", "$http", "BASEURL", "accessMgmtUrlCollection", function (APIFactory, $http, BASEURL, accessMgmtUrlCollection) {
    var factory = {};

    factory.getRoles = function (userGuid, entity) {
        var url = BASEURL.ACCESS_MGMT + accessMgmtUrlCollection.GET_ROLES;
        var params = {

            userGuid: userGuid,
            entity: entity

        };
        return APIFactory.get(url, params).then(function (data) {
            return data;
        }, function (error) {
            throw error;
        });


    }

    return factory;
}]);
angular.module("ParcelUI").service("accountMgmtAPI", ['accountMgmtUrlCollection', 'APIFactory', 'BASEURL', function (accountMgmtUrlCollection, APIFactory, BASEURL) {

    this.getCompany = function (companyGUID, parentCompanyGUID, detail, name, hasParent) {
        var url = BASEURL.ACCOUNT_MGMT_API + accountMgmtUrlCollection.GETAPI_COMPANY_REAL;
        var params = {

            companyguid: companyGUID ? companyGUID : '',
            detail: detail ? detail : 'none',
            name: name ? name : '',
            parentcompanyguid: parentCompanyGUID ? parentCompanyGUID : '',
            hasparent: hasParent ? hasParent : ''

        };
        return APIFactory.get(url, params).then(function (response) {
            return response;
        }, function (error) {
            throw error;
        });
    }

    this.getOffice = function (companyGUID, officeGUID, detail, name) {
        var url = BASEURL.ACCOUNT_MGMT_API + accountMgmtUrlCollection.GETAPI_OFFICE_REAL;
        var queryParams = {};
        queryParams.companyguid = companyGUID ? companyGUID : "";
        queryParams.officeguid = officeGUID ? officeGUID : "";
        queryParams.detail = detail ? detail : "";
        queryParams.name = name ? name : "none";

        return APIFactory.get(url, queryParams).then(function (response) {
            return response;
        }, function (error) {
            throw error;
        });
    };

    this.getUser = function (userGUID, companyGUID, officeGUID, firstName, lastName, email, search, detail) {
        var url = BASEURL.ACCOUNT_MGMT_API + accountMgmtUrlCollection.GETAPI_GETUSER_REAL;
        var queryParams = {};
        queryParams.userguid = userGUID ? userGUID : "";
        queryParams.companyguid = companyGUID ? companyGUID : "";
        queryParams.officeguid = officeGUID ? officeGUID : "";
        queryParams.firstname = firstName ? firstName : "";
        queryParams.lastname = lastName ? lastName : "";
        queryParams.email = email ? email : "";
        queryParams.search = search ? search : "";
        queryParams.detail = detail ? detail : "";

        return APIFactory.get(url, queryParams).then(function (response) {
            return response;
        }, function (error) {
            throw error;
        });
    }
}]);;
angular.module("ParcelUI").service("LoggingAPI", ['APIFactory', 'LoggingUrlCollection', 'BASEURL', function (APIFactory, LoggingUrlCollection, BASEURL) {
    this.postLogs = function (logs) {
        var url = BASEURL.SHARED_LOGGING + LoggingUrlCollection.POSTAPI_LOGGING;
        var header = {
            LoggingSessionGUID: 'A0F5E294-B497-4C16-8FA4-526C9413530F'
        };
        var data = {
            logItem: logs
        };
        return APIFactory.post(url, data, null, header).then(function (result) {
            return result;
        });
    };

}]);;
angular.module("ParcelUI").service("ReportOutputService", ['APIFactory', 'LoggingUrlCollection', 'ReportOutputUrlCollection', 'BASEURL', '$http', '$window', function (APIFactory, LoggingUrlCollection, ReportOutputUrlCollection, BASEURL, $http, $window) {

    var self = this;

    self.apiType = {
        type: 'real', //'real',

        createReportGenerationReq: {
            mock: ReportOutputUrlCollection.POSTAPI_REPORT_GENERATION_REQUEST_MOCK,
            real: ReportOutputUrlCollection.POSTAPI_REPORT_GENERATION_REQUEST_REAL
        }
    };

    function formatUrl(url, queryParams) {
        if (!queryParams) return url;

        for (var param in queryParams) {
            url = url.replace("{" + param + "}", queryParams[param]);
        }
        return url;
    };

    self.createReportGenerationRequest = function (reportguid, data) {
        var url = BASEURL.REPORTS + self.apiType.createReportGenerationReq[self.apiType.type];
        //var url = 'http://wwwdev.parcelplatform.com/parcelservice/reports/{reportguid}/generations';
        var params = {
            reportguid: reportguid
        };
        return APIFactory.post(url, data, params).then(function (response) {
            return response;
        })
    }

    self.getConstructedDocument = function (constructeddocumentguid) {
        var url = BASEURL.PARCEL_API + ReportOutputUrlCollection.GET_CONSTRUCTED_DOC_REAL;
        var params = {
            constructeddocumentguid: constructeddocumentguid
        };
        var uri = formatUrl(url, params);
        return $http.get(uri, {
            'data': null,
            headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': 0,
            }
        }).then(function (response) {
            return response.data;
        }, function (error) {

            return error;
        });
        /*        
                return APIFactory.get(url, params).then(function(response) {
                    return response;
                    })*/
    }

    self.getGeneratedDocument = function (fileGuid) {
        //var url = 'http://wwwdev.parcelplatform.com/corefilemanagementservice/files/{fileGuid}/stream';
        var url = BASEURL.GET_COREFILE + ReportOutputUrlCollection.GET_DOCUMENT_REAL;
        var params = {
            fileGuid: fileGuid
        };
        var uri = formatUrl(url, params);
        //window.location =  uri; //
        //$window.open(uri, '_blank');            

        return $http.get(uri, {
            'data': null,
            headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': 0,
            }
        }).then(function (response) {
            var file = new Blob([response], {
                type: 'application/pdf'
            });
            var fileURL = URL.createObjectURL(file);
            //System.Convert.ToBase64String(response);
            //$window.open("data:application/pdf;base64, " + base64EncodedPDF);
            $window.open(fileURL, '_blank');
        }, function (error) {

            return error;
        });


        /*return APIFactory.get(url, params).then(function(response) {
            return response;
            })*/
    }

    self.downloadGeneratedDocument = function (fileGuid) {
        var url = BASEURL.GET_COREFILE + ReportOutputUrlCollection.GET_DOCUMENT_REAL;
        var params = {
            fileGuid: fileGuid
        };
        var uri = formatUrl(url, params);
        window.location = uri;
    }

}]);
angular.module("ParcelUI").service("AuthFactory", ["APIFactory",
    "BASEURL", "$http", "globalValues", "$rootScope", "ReportDashboardUrlCollection", "$cookieStore",
    function (APIFactory,
        BASEURL, $http,
        globalValues, $rootScope, ReportDashboardUrlCollection, $cookieStore) {

        var self = this;
        self.userDetailsArray = [];

        function formatUrl(url, queryParams) {
            if (!queryParams) return url;

            for (var param in queryParams) {
                url = url.replace("{" + param + "}", queryParams[param]);
            }
            return url;
        };

        self.authorizeFormFieldsObject = {
            "save_content": "1",
            "decision": "Allow",
            "client_id": "parcelclient",
            "client_secret": "parcelclient",
            "scope": "cn",
            "redirect_uri": window.location.protocol + BASEURL.REDIRECT_OAUTHPAGE,
            "response_type": "token",
            "realm": "/"
        };


        self.getAuthCode = function (data) {
            var url = ReportDashboardUrlCollection.POSTAPI_GETCODEFORAUTH;
            return APIFactory.post(url, data).then(function (data) {
                return data;
            });
        };

        self.getAuthToken = function () {
            var url = BASEURL.POSTAPI_GETAUTHTOKEN;

            /*
             var header = {
             "X-OpenAM-Username": "user.8",
             "X-OpenAM-Password": "edruser1"
             }
             */

            return APIFactory.post(url, null, null).then(function (data) {
                return data;
            });

        };


        self.authorize = function () {
            $http.defaults.withCredentials = true;

            // define html form to post to OPENAM authorize
            var authForm = $('<form enctype="application/x-www-form-urlencoded" action="' + BASEURL.POSTAPI_GETAUTHCODE + '" method="POST">' +
                '<input type="hidden" name="save_content" value="' + self.authorizeFormFieldsObject.save_content + '">' +
                '<input type="hidden" name="decision" value="' + self.authorizeFormFieldsObject.decision + '">' +
                '<input type="hidden" name="client_id" value="' + self.authorizeFormFieldsObject.client_id + '">' +
                '<input type="hidden" name="client_secret" value="' + self.authorizeFormFieldsObject.client_secret + '">' +
                '<input type="hidden" name="scope" value="' + self.authorizeFormFieldsObject.scope + '">' +
                '<input type="hidden" name="redirect_uri" value="' + self.authorizeFormFieldsObject.redirect_uri + '">' +
                '<input type="hidden" name="response_type" value="' + self.authorizeFormFieldsObject.response_type + '">' +
                '<input type="hidden" name="realm" value="' + self.authorizeFormFieldsObject.realm + '">' +
                '</form>');

            // put into the body before submitting
            $('body').append(authForm);
            authForm.submit();
        };

        self.isAuthorized = function () {
            return globalValues.isAuthorized;
        };

        self.isAuthenticated = function () {
            return globalValues.isAuthenticated;
        };

        self.createSession = function () {
            var sessionExpiryTime = self.retrieveCookie('expiry');
            var userName = "";
            var url = BASEURL.GET_SESSIONTOKEN;
            //var userDetailsArray = JSON.parse(localStorage.getItem("userdetails"));
            var obj = {};
            obj.sessionToken = {};
            var sessionExpiryTimeinNum = parseInt(sessionExpiryTime) + 1;
            obj.sessionToken.expirationTimeFrameMinutes = sessionExpiryTimeinNum.toString();
            obj.sessionToken.sessionData = [];
            angular.forEach(self.userDetailsArray, function (detail) {
                obj.sessionToken.sessionData.push(detail);
            })
            return $http.post(url, obj).then(function (response) {
                if (response) {
                    document.cookie = "sessionToken=" + response.data.sessionToken.sessionTokenGUID;
                    localStorage.setItem("userdetails", JSON.stringify(self.userDetailsArray));
                    var userName = self.getUserDetailsFromStorage('USERNAME');
                    $rootScope.$broadcast("User", userName);
                    return response.data.sessionToken.sessionTokenGUID;
                }

            }, function (error) {
                //redirect to error page
            })
        };

        self.getUserDetails = function () {
            var accountManagementUrl = BASEURL.ACCOUNT_MGMT_API + ReportDashboardUrlCollection.GETUSERDETAILS_ACCOUNMGMT;
            //var userGuid =  $cookieStore.get('userGuid');
            var userGuid = self.retrieveCookie('userGuid');
            //if user is not authorized but authenticated , call account management to get user details
            var params = {
                userGuid: userGuid
            }
            var uri = formatUrl(accountManagementUrl, params);
            return $http.get(uri, {
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': 0
                }
            }).then(function (response) {

                if (response) {

                    var userGuidObject = {
                        "key": "USERGUID",
                        "value": userGuid
                    };
                    var userAccountGuidObject = {
                        "key": "OFFICEGUID",
                        "value": response.data.users[0].office === null ? "" : response.data.users[0].office.companyOfficeGUID
                    };
                    var userCompanyGuid = {
                        "key": "COMPANYGUID",
                        "value": response.data.users[0].company === null ? "" : response.data.users[0].company.companyGUID

                    };
                    var userName = {
                        "key": "USERNAME",
                        "value": response.data.users[0].firstName + " " + response.data.users[0].lastName
                    };
                    var email = {
                        "key": "EMAIL",
                        "value": response.data.users[0].email
                    };
                    var cellPhone = {
                        "key": "PHONE",
                        "value": response.data.users[0].cellphone
                    };

                    var companyName = {
                        "key": "COMPANYNAME",
                        "value": response.data.users[0].company === null ? "" : response.data.users[0].company.name
                    };

                    var officeName = {
                        "key": "OFFICENAME",
                        "value": response.data.users[0].office === null ? "" : response.data.users[0].office.officeName
                    };


                    self.userDetailsArray.push(userGuidObject);
                    self.userDetailsArray.push(userAccountGuidObject);
                    self.userDetailsArray.push(userCompanyGuid);
                    self.userDetailsArray.push(userName);
                    self.userDetailsArray.push(email);
                    self.userDetailsArray.push(cellPhone);
                    self.userDetailsArray.push(companyName);
                    self.userDetailsArray.push(officeName);

                    return response.data;
                } else {
                    return {};
                }

            }, function (error) {
                return error;
            });

        };

        self.retrieveCookie = function (cookieName) {
            var name = cookieName + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') c = c.substring(1);
                if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
            }
            return "";
        };

        /*self.getAllTheCookiesKey = function (){
         var ca = document.cookie.split(';');
         for(var i = 0 ; i < ca.length ; i++){

         }
         }*/

        self.logout = function () {
            var logoutUrl = BASEURL.REDIRECT_LOGOUT;
            return $http.post(logoutUrl).then(function (result) {
                return result;
            }, function (error) {
                return error;
            });
        }

        self.deleteCookie = function (name) {

            // This function will attempt to remove a cookie from all paths.
            var pathBits = location.pathname.split('/');
            var pathCurrent = ' path=';

            // do a simple pathless delete first.
            document.cookie = name + '=; expires=Thu, 01-Jan-1970 00:00:01 GMT;';

            for (var i = 0; i < pathBits.length; i++) {
                pathCurrent += ((pathCurrent.substr(-1) != '/') ? '/' : '') + pathBits[i];
                document.cookie = name + '=; expires=Thu, 01-Jan-1970 00:00:01 GMT;' + pathCurrent + ';';
            }

        }

        self.deleteLocalStorage = function (name) {
            localStorage.removeItem(name);
        }

        self.getUserDetailsFromStorage = function (key) {
            var userDetails = JSON.parse(localStorage.getItem('userdetails'));
            if (userDetails) {
                for (var i = 0; i < userDetails.length; i++) {
                    if (userDetails[i].key === key) {
                        return userDetails[i].value;
                    }
                }
            }
        }

    }]);;
angular.module("ParcelUI").service("edrOrderAPI", ['edrOrderUrlCollection', 'APIFactory', 'BASEURL', function (edrOrderUrlCollection, APIFactory, BASEURL) {

    this.apiType = {
        type: 'real',
        //type: 'mock',

        postSingleSiteOrder: {
            real: BASEURL.EDR_ORDER + edrOrderUrlCollection.POSTAPI_SINGLESITEORDER_CREATEORDER_REAL,
            mock: edrOrderUrlCollection.POSTAPI_SINGLESITEORDER_CREATEORDER_MOCK
        },

        searchDistances: {
            real: BASEURL.EDR_ORDER + edrOrderUrlCollection.POSTAPI_PORTFOLIOORDERING_GETSEARCHDISTANCES_REAL,
            mock: edrOrderUrlCollection.POSTAPI_PORTFOLIOORDERING_GETSEARCHDISTANCES_MOCK
        },

        getPortfolioProducts: {
            real: BASEURL.EDR_ORDER + edrOrderUrlCollection.GETAPI_PORTFOLIOORDERING_GETPORTFOLIOPRODUCTS_REAL,
            mock: edrOrderUrlCollection.GETAPI_PORTFOLIOORDERING_GETPORTFOLIOPRODUCTS_MOCK
        },

        createPortfolioOrder: {
            real: BASEURL.EDR_ORDER + edrOrderUrlCollection.POSTAPI_PORTFOLIOORDERING_CREATEPORTFOLIOORDER_REAL,
            mock: edrOrderUrlCollection.POSTAPI_PORTFOLIOORDERING_CREATEPORTFOLIOORDER_MOCK
        }
    }

    this.postSingleSiteOrder = function (data) {
        var url = this.apiType.postSingleSiteOrder[this.apiType.type];
        return APIFactory.post(url, data).then(function (response) {
            return response;
        });
    };

    this.searchDistances = function (data) {
        var url = this.apiType.searchDistances[this.apiType.type];
        return APIFactory.post(url, data).then(function (response) {
            return response;
        });
    };

    this.getPortfolioProducts = function (companyGuid) {
        var url = this.apiType.getPortfolioProducts[this.apiType.type];
        var queryParams = {};
        queryParams.companyGuid = companyGuid ? companyGuid : "";
        return APIFactory.get(url, queryParams).then(function (response) {
            return response;
        });
    };

    this.createPortfolioOrder = function (data) {
        var url = this.apiType.createPortfolioOrder[this.apiType.type];
        return APIFactory.post(url, data).then(function (response) {
            return response;
        });
    };
}]);;
angular.module('ProjectDashboard').factory('PhoneNumberValidator', [function () {
    var factory = {};
    factory.format = function (number) {
        console.log("number" + number);
        if (number != null && number != undefined && number != "") {
            number = number.replace(/[^0-9]/g, '');
            if (number.length > 3) {
                if (number.length > 6) {
                    number = number.replace(/(\d{3})(\d{3})(\d)/, "($1) $2-$3");
                } else {
                    number = number.replace(/(\d{3})(\d)/, "($1) $2");
                }
            }


            if (number.length > 14) {
                number = number.substring(0, 14);
            }

            return number;
        }
    }
    return factory;
}]);
angular.module('ParcelUI').constant('LoggingUrlCollection', {

    POSTAPI_LOGGING: 'logging/logitems'


});;
angular.module('ParcelUI').constant('ReportOutputUrlCollection', {

    POSTAPI_LOGGING: 'logging/logitems',
    POSTAPI_REPORT_GENERATION_REQUEST_MOCK: '{reportguid}/generations',
    POSTAPI_REPORT_GENERATION_REQUEST_REAL: '{reportguid}/generations',
    GETAPI_CONSTRUCTED_DOCUMENT_MOCK: '',
    GETAPI_CONSTRUCTED_DOCUMENT_REAL: '',
    GET_CONSTRUCTED_DOC_REAL: 'documentgenerationservice/docgen/constructeddocuments/{constructeddocumentguid}',
    GET_DOCUMENT_REAL: 'files/{fileGuid}/stream'


});;
angular.module('ParcelUI').constant('accountMgmtUrlCollection', {
    //Company URLs
    GETAPI_COMPANY_MOCK: 'http://private-87940-edrsharedaccountmanagementapi.apiary-mock.com/companies/{companyguid}?name={name}&search={search}&parent={parentcompanyguid}&hasparent={hasparent}&detail={detail}',
    GETAPI_COMPANY_REAL: 'companies/{companyguid}?name={name}&detail={detail}&parentcompanyguid={parentcompanyguid}&hasparent={hasparent}',

    //Office URLs
    GETAPI_OFFICELIST_MOCK: 'http://private-87940-edrsharedaccountmanagementapi.apiary-mock.com/companies/{companyguid}/offices/{officeguid}?name={name}&search={search}&detail={detail}',
    GETAPI_OFFICE_REAL: 'companies/{companyguid}/offices/{officeguid}?detail={detail}&name={name}',


    //General User URLs
    GETAPI_GETUSER_MOCK: 'http://private-87940-edrsharedaccountmanagementapi.apiary-mock.com/users/{userguid}?company={companyguid}&office={officeguid}&firstname={firstname}&lastname={lastname}&email={email}&detail={detail}',
    GETAPI_GETUSER_REAL: 'users/{userguid}?company={companyguid}&office={officeguid}&firstname={firstname}&lastname={lastname}&email={email}&search={search}&detail={detail}'
});

angular.module('ParcelUI').constant('accessMgmtUrlCollection', {
    GET_ROLES: 'roles?accessentityguid={userGuid}&accessentitytype={entity}'
});;
angular.module('ParcelUI').constant('edrOrderUrlCollection', {
    //Order Status URLs
    GETAPI_ORDERSTATUS_GETORDER_MOCK: 'http://private-79eea-sharededrorderapi.apiary-mock.com/edrorders/project/{projectGuid}?detail={detail}',
    GETAPI_ORDERSTATUS_GETORDER_REAL: '',

    GETAPI_ORDERSTATUS_GETTRANSFERURL_MOCK: 'http://private-79eea-sharededrorderapi.apiary-mock.com/edrorders/order/{orderGuid}?detail={detail}',
    GETAPI_ORDERSTATUS_GETTRANSFERURL_REAL: '',

    GETAPI_ORDERSTATUS_GETREPORTORDERS_MOCK: 'http://private-79eea-sharededrorderapi.apiary-mock.com/edrorders/report/{reportGuid}?detail={detail}',
    GETAPI_ORDERSTATUS_GETREPORTORDERS_REAL: '',

    PUTAPI_ORDERSTATUS_ADDEDRPROPTOREPORT_MOCK: 'http://private-79eea-sharededrorderapi.apiary-mock.com/edrorders/report/{reportGuid}?detail={detail}',
    PUTAPI_ORDERSTATUS_ADDEDRPROPTOREPORT_REAL: '',

    DELETEAPI_ORDERSTATUS_DELETEEDRORDERFROMREPORT_MOCK: 'http://private-79eea-sharededrorderapi.apiary-mock.com/edrorders/report/{reportGuid}/{edrPropertyGuid}',
    DELETEAPI_ORDERSTATUS_DELETEEDRORDERFROMREPORT_REAL: '',

    GETAPI_ORDERSTATUS_GETPROJECTORDERS_MOCK: 'http://private-79eea-sharededrorderapi.apiary-mock.com/edrorders/project/{projectGuid}?detail={detail}',
    GETAPI_ORDERSTATUS_GETPROJECTORDERS_REAL: '',

    //Portfolio Ordering urls
    POSTAPI_PORTFOLIOORDERING_GETSEARCHDISTANCES_MOCK: 'http://private-79eea-sharededrorderapi.apiary-mock.com/edrorders/searchDistances',
    POSTAPI_PORTFOLIOORDERING_GETSEARCHDISTANCES_REAL: 'searchDistances',

    GETAPI_PORTFOLIOORDERING_GETPORTFOLIOPRODUCTS_MOCK: 'http://private-79eea-sharededrorderapi.apiary-mock.com/edrorders/products/{companyGuid}',
    GETAPI_PORTFOLIOORDERING_GETPORTFOLIOPRODUCTS_REAL: 'products/{companyGuid}',

    POSTAPI_PORTFOLIOORDERING_CREATEPORTFOLIOORDER_MOCK: 'http://private-79eea-sharededrorderapi.apiary-mock.com/edrorders/portfolioorder',
    POSTAPI_PORTFOLIOORDERING_CREATEPORTFOLIOORDER_REAL: 'portfolioorder',

    GETAPI_PORTFOLIOORDERING_CREATEPORTFOLIOORDER_MOCK: 'http://private-79eea-sharededrorderapi.apiary-mock.com/edrorders/portfolioorder/{portfolioOrderGuid}',
    GETAPI_PORTFOLIOORDERING_CREATEPORTFOLIOORDER_REAL: 'portfolioorder/{portfolioOrderGuid}',

    POSTAPI_SINGLESITEORDER_CREATEORDER_MOCK: 'http://private-79eea-sharededrorderapi.apiary-mock.com/edrorders/order',
    POSTAPI_SINGLESITEORDER_CREATEORDER_REAL: 'order',

    //Notification Service Urls
    POSTAPI_NOTIFICATION_SENDSTATUS_MOCK: 'http://private-79eea-sharededrorderapi.apiary-mock.com/edrorders/notification',
    POSTAPI_NOTIFICATION_SENDSTATUS_REAL: 'notification',

    POSTAPI_NOTIFICATION_REQUERY_MOCK: 'http://private-79eea-sharededrorderapi.apiary-mock.com/edrorders/requery',
    POSTAPI_NOTIFICATION_REQUERY_REAL: 'requery',
});;
angular.module('ParcelUI').directive('formInputValidation', ['$parse', '$compile', function ($parse, $compile) {
    return {
        restrict: 'A',
        require: '^form',
        terminal: true,
        priority: 1000,
        compile: function (tElem, tAttrs) {
            return {
                pre: function (scope, iElem, iAttrs, formCtrl) {
                    // validation expression to assigned to ng-class directive
                    var validationExpStr = "";

                    // case where expression is provided
                    if (!!iAttrs.formInputValidation) {

                        validationExpStr = iAttrs.formInputValidation;
                    } else {
                        // default case
                        // expression comprised of all required fields
                        var requiredFields = iElem[0].querySelectorAll('[required]');
                        if (requiredFields && requiredFields.length) {
                            var formname = formCtrl.$name;
                            var first = angular.element(requiredFields[0]);
                            var firstname = first.attr('name');
                            validationExpStr = (formname + "." + firstname + ".$invalid");

                            for (var i = 1; i < requiredFields.length; i++) {
                                var mandatory = angular.element(requiredFields[i]);
                                var elname = mandatory.attr('name');
                                validationExpStr = validationExpStr + " || " + (formname + "." + elname + ".$invalid");
                            }
                        }
                    }

                    if (!validationExpStr) return;

                    iElem.removeAttr('form-input-validation');
                    iElem.attr("ng-class", "{'has-error': " + validationExpStr + "}");
                    $compile(iElem)(scope);
                },
                post: function (scope, iElem, iAttrs, formCtrl) {}
            }
        }
    }
}]);


angular.module('ParcelUI').directive('emailValidator', ['ParcelUI.Resources', '$compile', function (resources, $compile) {
    return {
        restrict: 'A',
        replace: false,
        priority: 1000,
        terminal: true,
        compile: function (tElem, tAttrs) {

            tElem.removeAttr('email-validator');
            tElem.attr("ng-pattern", resources.validationExpression.email);
            return {
                pre: function (scope, iElem, iAttrs, controller) {},
                post: function (scope, iElem, iAttrs, controller) {

                    $compile(iElem)(scope);
                }
            }
        }
    }

}]);



angular.module('ParcelUI').directive("emailPattern", ['ParcelUI.Resources', '$compile', function (resources, $compile) {
    return {
        restrict: "A",
        require: "ngModel",
        link: function (scope, el, attrs, ngModel) {
            var validator, patternValidator,
                pattern = resources.validationExpression.email,
                required = false;



            ngModel.$formatters.push(patternValidator);
            ngModel.$parsers.push(patternValidator);

            attrs.$observe("emailPattern", function (newval) {
                required = newval;
                patternValidator(ngModel.$viewValue);
            });

            function validate(regexp, value) {

                if (value == null || value === "" || !required || regexp.test(value)) {
                    ngModel.$setValidity('pattern', true);
                    return value;
                } else {
                    ngModel.$setValidity('pattern', false);
                    return;
                }
            }
        }
    };
}]);


angular.module('ParcelUI').directive('userAction', ['$location', 'LoggingAPI', function ($location, LoggingAPI) {


    return {
        restrict: "A",
        link: function (scope, el, attrs) {
            el.bind('click', function (event) {
                var actionMessage = "";
                // var controlId = "";
                var module = $location.path().split('/')[1];
                var pageName = $location.path().split('/')[2];
                if (attrs.userAction == 'xeditable save') {

                    // controlId = pageName;
                    actionMessage = (pageName != "" || pageName != undefined || pageName != null) ? pageName : "" + " saved";
                } else {

                    //  controlId = attrs.id;
                    actionMessage = attrs.userAction;
                }


                var moduleVal = "module: - " + module;
                var pageVal = (pageName != "" && pageName != undefined && pageName != null) ? "/ " + pageName : "";
                var actionVal = "action performed: - " + actionMessage;

                var logMsg = moduleVal + " " + pageVal + " , " + actionVal;

                //  console.log("11111:- " + logMsg);
                var loggedDate = new Date();
                var postData = {
                    "logModuleUsed": "EDR.Logging.LogHelper.vb",
                    "authenticatedEntity": "2013213",
                    "authenticatedType": "Account",
                    "applicationInfo": {
                        "applicationType": "WebApp",
                        "name": "Parcel",
                        "version": "1.5.1.17",
                        "language": "Angular JS",
                        "languageVersion": "4.5"
                    },
                    "events": [

                        {
                            "eventType": "Log",
                            "startTS": loggedDate,
                            "elapsedInMS": 1250,
                            "eventDetail": {
                                "eventGUID": "A0F5E294-B497-4C16-8FA4-526C9413530F",
                                "severityLevel": "OK",
                                "logSource": "IIS",
                                "logSourceType": "Log File",
                                "sourcePath": "",
                                "logData": logMsg,
                                "additionalInfo": [{
                                    "key": "IIS Version",
                                    "value": "7.5"
                                }]
                            }
                        }
                    ]
                };
                LoggingAPI.postLogs(postData).then(function (result) {
                    //  console.log("success: " + JSON.stringify(result));
                }, function (error) {
                    // console.log("error");
                });

            })
        }
    };


}]);


angular.module('ParcelUI').directive('siteSearch', ['$state', '$window', '$timeout', function ($state, $window, $timeout) {
    return function (scope, element, attrs) {
        element.bind("keydown keypress", function (event) {
            if (event.which === 13) {
                $state.go('ReportAuthoring.Write', {
                    SiteId: element.val()
                });
            }
        });
    };
}]);


angular.module('ParcelUI').directive('fieldValidation', function () {
    return {
        restrict: 'A',
        require: '^form',
        link: function (scope, el, attrs, formCtrl) {
            var html = '<span id="fieldValidationMsg" class="help-block error-text"></span>';
            var elInput = el.find('input').first();
            var elSelectOptions = el.find('select').first();
            var elMultiSelect = el.find('multiselect').first();
            var eltextArea = el.find('textarea').first();
            var invalidPasswordMsg = "The new password does not meet the minimum password requirements. Passwords must be at least 8 characters long, with at least one letter, one Upper case letter, one numeric character, one non-alphanumeric character and cannot contain your username.";



            elInput.bind('blur', function (event) {

                if (formCtrl[elInput.attr('name')].$valid) {
                    el.removeClass('has-error');
                    removeSpan(el);
                } else {
                    if (formCtrl[elInput.attr('name')].$viewValue == "" || formCtrl[elInput.attr('name')].$viewValue == undefined) {
                        el.append(html);

                        el.find('span#fieldValidationMsg').first().html(el.attr('field-validation') + ' can not be blank.');
                        el.find('span#fieldValidationMsg').show();

                    } else if (elInput.attr('type') == 'email' && !formCtrl[elInput.attr('name')].$valid) {
                        el.append(html);
                        el.find('span').first().html('Invalid email address.');
                    } else if (elInput.attr('type') == 'password' && !formCtrl[elInput.attr('name')].$valid) {
                        el.append(html);
                        el.find('span').first().html(invalidPasswordMsg);
                    } else if (elInput.attr('custom') == 'alphaOnly' && !formCtrl[elInput.attr('name')].$valid) {
                        el.append(html);
                        el.find('span').first().html(el.attr('field-validation') + ' can only contains alphabets.');
                    } else if (elInput.attr('custom') == 'numbersOnly' && !formCtrl[elInput.attr('name')].$valid) {
                        el.append(html);
                        el.find('span').first().html(el.attr('field-validation') + ' can only contains Numbers.');
                    } else if (elInput.attr('custom') == 'numbersAndDot' && !formCtrl[elInput.attr('name')].$valid) {
                        el.append(html);
                        el.find('span').first().html(el.attr('field-validation') + ' is not a valid Cost.');

                    } else if (elInput.attr('custom') == 'phoneNumber' && !formCtrl[elInput.attr('name')].$valid && formCtrl[elInput.attr('name')].$viewValue.length != 14) {
                        el.append(html);
                        el.find('span').first().html(el.attr('field-validation') + ' is not a valid number.');

                    } else if (elInput.attr('custom') == 'multipleEmails' && !formCtrl[elInput.attr('name')].$valid) {

                        el.append(html);
                        el.find('span').first().html(el.attr('field-validation') + 'one or more email is not valid');
                    } else {}
                    el.addClass('has-error');
                }
            });

            eltextArea.bind('blur', function (event) {
                if (formCtrl[eltextArea.attr('name')].$valid) {
                    el.removeClass('has-error');
                    removeSpan(el);
                } else {
                    if (formCtrl[eltextArea.attr('name')].$viewValue == "" || formCtrl[eltextArea.attr('name')].$viewValue == undefined) {
                        el.append(html);
                        el.find('span#fieldValidationMsg').first().html(el.attr('field-validation') + ' can not be blank.');
                    } else {

                    }
                    el.addClass('has-error');
                }
            });

            elInput.bind('keypress change', function (event) {
                if (formCtrl[elInput.attr('name')].$valid)
                    el.removeClass('has-error');
                else
                if ((elInput.attr('type') == 'email' || elInput.attr('type') == 'password') && !formCtrl[elInput.attr('name')].$valid)
                    el.removeClass('has-error');
                removeSpan(el);
            });

            elSelectOptions.bind('blur', function (event) {
                if (formCtrl[elSelectOptions.attr('name')].$valid)
                    el.removeClass('has-error');
                else {
                    if (formCtrl[elSelectOptions.attr('name')].$viewValue == "" || formCtrl[elSelectOptions.attr('name')].$viewValue == undefined) {
                        el.append(html);
                        el.find('span').first().html(el.attr('field-validation') + ' must be selected.');
                    }
                    el.addClass('has-error');
                }
            });

            elSelectOptions.bind('focus change', function (event) {
                if (formCtrl[elSelectOptions.attr('name')].$valid)
                    el.removeClass('has-error');
                else
                if (!formCtrl[elSelectOptions.attr('name')].$valid)
                    el.removeClass('has-error');
                removeSpan(el);
            });

            elMultiSelect.bind('blur', function (event) {
                if (formCtrl[elMultiSelect.attr('name')].$valid) {
                    el.removeClass('has-error');
                    el.find('button').first().css('border-color', '');
                } else {
                    if (formCtrl[elMultiSelect.attr('name')].$viewValue == "" || formCtrl[elMultiSelect.attr('name')].$viewValue == undefined) {
                        el.append(html);
                        el.find('span[id=fieldValidationMsg]').first().html(el.attr('field-validation') + ' must be selected.');
                        //el.find('button').first().attr('ng-class',"{'error': !valid()}");
                        el.find('button').first().css('border-color', '#8e1d14');
                    }
                    el.addClass('has-error');
                }
            });

            /*elMultiSelect.bind('focus change', function (event) {
             if (formCtrl[elMultiSelect.attr('name')].$valid)
             el.removeClass('has-error');
             else
             if (!formCtrl[elMultiSelect.attr('name')].$valid)
             el.removeClass('has-error');
             removeSpan(el);
             });*/
            scope.$watchCollection(elMultiSelect.attr('ng-model'), function (val) {
                if (val && val.length) {
                    el.removeClass('has-error');
                    removeSpan(el);
                }
                /*else {
                 el.addClass('has-error');
                 el.append(html);
                 el.find('span[id=fieldValidationMsg]').first().html(el.attr('field-validation') + ' must be selected.');
                 }*/

            });

            function removeSpan(el) {
                if (el.find('span#fieldValidationMsg').length > 0)
                    el.find('span#fieldValidationMsg').remove();
            }
        }
    }
});

angular.module('ParcelUI').directive('formatZip', [
    function () {
        return {
            require: 'ngModel',
            restrict: 'A',
            link: function (scope, elem, attrs, ctrl, ngModel) {
                var elInput = elem.find('input');
                elem.add(elInput).on('keyup', function () {
                    var origVal = elem.val().replace(/[^\w\s]/gi, '');
                    var CountryCode = elem.attr('data-CountryCode');
                    switch (CountryCode) {
                        case 'US':
                            if (origVal.length >= 10) {
                                formatedZip = origVal.substring(0, 5) + "-" + origVal.substring(5);
                                $('#' + elInput.context.id).val(formatedZip);
                            }
                            break;
                        default:
                            break;
                    }
                });
            }
        };
    }
]);

angular.module("ParcelUI").directive('confirmOnExit', ['$modal', function ($modal) {

    return {
        require: '^form',
        link: function ($scope, elem, attrs, formCtrl) {
                var formObj = formCtrl;
                window.onbeforeunload = PageRefresh;

                function PageRefresh() {
                    angular.forEach(formObj, function (value, key) {
                        if (typeof value === 'object' && value.hasOwnProperty('$modelValue') && (value.$dirty && value.$viewValue != "" && value.$viewValue != null)) {
                            var message = 'If you reload this page you are going to lose all unsaved changes, are you sure you want to reload?';
                            if (typeof event == 'undefined') {
                                event = window.event;
                            }
                            if (event) {
                                event.returnValue = message;
                            }
                            return message;

                        }
                    });
                }

                $scope.$on('$locationChangeStart', function (event, next, current) {
                    var breakLoop = false;
                    var myForm = formCtrl;

                    angular.forEach(myForm, function (value, key) {
                        if (typeof value === 'object' && value.hasOwnProperty('$modelValue') && (value.$dirty && value.$viewValue != "" && value.$viewValue != null)) {
                            window.onbeforeunload = null;
                            if (!breakLoop) {
                                if (!confirm("You have made changes that will be lost if you leave this page. Do you want to discard the changes?")) {
                                    event.preventDefault();
                                    breakLoop = true;
                                } else {
                                    window.location.reload();
                                    breakLoop = true;
                                }
                            }
                        }
                    });
                });

            } //end link
    };
}]);

angular.module('ParcelUI').directive('fileInput', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function (scope, elm, attrs) {

            elm.bind('change', function () {
                $('#filetag').hide();
                $('#successdiv').hide();
                $('#errordiv').hide();
                $('#incorrectformatdiv').hide();
                $parse(attrs.fileInput).assign(scope, elm[0].files);
                scope.$apply();
            })
        }
    };
}]);


angular.module('ParcelUI').directive('fileSelect', function () {
    //  var template = '<input type="file" name="files" multiple/>';
    var template = '<input type="file" name="files"/>';
    return function (scope, elem, attrs) {
        var selector = $(template);
        elem.append(selector);
        selector.bind('change', function (event) {
            scope.$apply(function () {
                scope[attrs.fileSelect] = event.originalEvent.target.files;
            });
        });
        scope.$watch(attrs.fileSelect, function (file) {
            selector.val(file);
        });
    };
});

angular.module('ParcelUI').directive('showErrors', ['$timeout', function ($timeout) {
    return {
        restrict: 'A',
        require: '^form',
        link: function (scope, el, attrs, formCtrl) {
            el.addClass("has-error");
            var inputEl = el[0].querySelector("[name]");
            var inputNgEl = angular.element(inputEl);

            var inputName = inputNgEl.attr('name');
            var blurred = false;

            inputNgEl.bind('blur', function (elem) {
                console.log("blur event");
                blurred = true;

                if (inputName == "dateDraftDue") {
                    $timeout(function () {
                        console.log("model value " + scope.main.parentProjectInfo.dateDraftDue);
                        if (scope.main.parentProjectInfo.dateDraftDue != undefined || scope.main.parentProjectInfo.dateDraftDue != null) {
                            el.removeClass('has-error');
                        } else {
                            el.addClass('has-error');
                        }
                    }, 200);


                }
                if (inputName == "dateFinalDue") {
                    $timeout(function () {
                        console.log("model value " + scope.main.parentProjectInfo.dateFinalDue);
                        if (scope.main.parentProjectInfo.dateFinalDue != undefined || scope.main.parentProjectInfo.dateFinalDue != null) {
                            el.removeClass('has-error');
                        } else {
                            el.addClass('has-error');
                        }
                    }, 200);


                }
                el.toggleClass('has-error', formCtrl[inputName].$invalid);
            });

            scope.$watch(function () {
                return formCtrl[inputName].$invalid
            }, function (invalid) {
                // we only want to toggle the has-error class after the blur
                // event or if the control becomes valid
                if (!blurred && invalid) {
                    return
                }
                el.toggleClass('has-error', invalid);
            });

            scope.$on('show-errors-check-validity', function () {
                el.toggleClass('has-error', formCtrl[inputName].$invalid);
            });


            scope.$on('show-errors-reset', function () {
                $timeout(function () {
                    el.removeClass('has-error');
                }, 0, false);
            });
        }
    }



}]);



angular.module('ParcelUI').directive('multiselectfieldValidation', function () {
    return {
        restrict: 'A',
        require: '^form',
        link: function (scope, el, attrs, formCtrl) {
            var html = '<span id="fieldValidationMsg" class="help-block error-text"></span>';
            var elInput = el.find('input').first();
            var elSelectOptions = el.find('select').first();
            var elMultiSelect = el.find('multiselect').first();
            var eltextArea = el.find('textarea').first();
            var invalidPasswordMsg = "The new password does not meet the minimum password requirements. Passwords must be at least 8 characters long, with at least one letter, one Upper case letter, one numeric character, one non-alphanumeric character and cannot contain your username.";


            elMultiSelect.bind('blur', function (event) {

                if (event.target.textContent.indexOf('Select Report Requested') > -1) {
                    el.append(html);
                    el.find('span[id=fieldValidationMsg]').first().html(el.attr('multiselectfield-validation') + ' must be selected.');
                    //el.find('button').first().attr('ng-class',"{'error': !valid()}");              
                    el.find('button').first().css('border-color', '#8e1d14');

                } else {
                    el.removeClass('has-error');
                    el.find('button').first().css('border-color', '');
                    removeSpan(el);
                }


            });

            function removeSpan(el) {
                if (el.find('span#fieldValidationMsg').length > 0)
                    el.find('span#fieldValidationMsg').remove();
            }
        }
    }
});

angular.module('ParcelUI').directive('emailfieldValidation', function () {
    return {
        restrict: 'A',
        require: '^form',
        link: function (scope, el, attrs, formCtrl) {
            var html = '<span id="fieldValidationMsg" class="help-block error-text"></span>';
            var elInput = el.find('input').first();

            var invalidPasswordMsg = "The new password does not meet the minimum password requirements. Passwords must be at least 8 characters long, with at least one letter, one Upper case letter, one numeric character, one non-alphanumeric character and cannot contain your username.";



            elInput.bind('blur', function (event) {

                if (formCtrl[elInput.attr('name')].$viewValue && formCtrl[elInput.attr('name')].$viewValue != "") {

                    var regex = /^[\W]*([\w+\-.%]+@[\w\-.]+\.[A-Za-z]{2,4}[\W]*,{1}[\W]*)*([\w+\-.%]+@[\w\-.]+\.[A-Za-z]{2,4})[\W]*$/;
                    if (!regex.test(formCtrl[elInput.attr('name')].$viewValue)) {
                        el.append(html);
                        el.find('span').first().html(el.attr('emailfield-validation') + ' one or more email is not valid');
                        el.addClass('has-error');
                    } else {
                        el.removeClass('has-error');
                        removeSpan(el);
                    }
                } else {
                    if (!el.attr('field-validation')) {
                        el.removeClass('has-error');
                        removeSpan(el);
                    }
                }
            });


            function removeSpan(el) {
                if (el.find('span#fieldValidationMsg').length > 0)
                    el.find('span#fieldValidationMsg').remove();
            }
        }
    }
});
